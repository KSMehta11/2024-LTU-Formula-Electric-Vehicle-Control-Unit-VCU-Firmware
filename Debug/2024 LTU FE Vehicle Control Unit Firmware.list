
2024 LTU FE Vehicle Control Unit Firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009688  08000200  08000200  00001200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b0  08009888  08009888  0000a888  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009938  08009938  0000b030  2**0
                  CONTENTS
  4 .ARM          00000008  08009938  08009938  0000a938  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009940  08009940  0000b030  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009940  08009940  0000a940  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009944  08009944  0000a944  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000030  20000000  08009948  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004080  20000030  08009978  0000b030  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200040b0  08009978  0000b0b0  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0000b030  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001845d  00000000  00000000  0000b05e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000034c8  00000000  00000000  000234bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001588  00000000  00000000  00026988  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000010ba  00000000  00000000  00027f10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a936  00000000  00000000  00028fca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001983d  00000000  00000000  00053900  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001106b5  00000000  00000000  0006d13d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0017d7f2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005af8  00000000  00000000  0017d838  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000093  00000000  00000000  00183330  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	@ (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	@ (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	@ (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000030 	.word	0x20000030
 800021c:	00000000 	.word	0x00000000
 8000220:	08009870 	.word	0x08009870

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	@ (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	@ (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	@ (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000034 	.word	0x20000034
 800023c:	08009870 	.word	0x08009870

08000240 <__aeabi_uldivmod>:
 8000240:	b953      	cbnz	r3, 8000258 <__aeabi_uldivmod+0x18>
 8000242:	b94a      	cbnz	r2, 8000258 <__aeabi_uldivmod+0x18>
 8000244:	2900      	cmp	r1, #0
 8000246:	bf08      	it	eq
 8000248:	2800      	cmpeq	r0, #0
 800024a:	bf1c      	itt	ne
 800024c:	f04f 31ff 	movne.w	r1, #4294967295
 8000250:	f04f 30ff 	movne.w	r0, #4294967295
 8000254:	f000 b96a 	b.w	800052c <__aeabi_idiv0>
 8000258:	f1ad 0c08 	sub.w	ip, sp, #8
 800025c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000260:	f000 f806 	bl	8000270 <__udivmoddi4>
 8000264:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000268:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800026c:	b004      	add	sp, #16
 800026e:	4770      	bx	lr

08000270 <__udivmoddi4>:
 8000270:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000274:	9d08      	ldr	r5, [sp, #32]
 8000276:	460c      	mov	r4, r1
 8000278:	2b00      	cmp	r3, #0
 800027a:	d14e      	bne.n	800031a <__udivmoddi4+0xaa>
 800027c:	4694      	mov	ip, r2
 800027e:	458c      	cmp	ip, r1
 8000280:	4686      	mov	lr, r0
 8000282:	fab2 f282 	clz	r2, r2
 8000286:	d962      	bls.n	800034e <__udivmoddi4+0xde>
 8000288:	b14a      	cbz	r2, 800029e <__udivmoddi4+0x2e>
 800028a:	f1c2 0320 	rsb	r3, r2, #32
 800028e:	4091      	lsls	r1, r2
 8000290:	fa20 f303 	lsr.w	r3, r0, r3
 8000294:	fa0c fc02 	lsl.w	ip, ip, r2
 8000298:	4319      	orrs	r1, r3
 800029a:	fa00 fe02 	lsl.w	lr, r0, r2
 800029e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002a2:	fa1f f68c 	uxth.w	r6, ip
 80002a6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002aa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ae:	fb07 1114 	mls	r1, r7, r4, r1
 80002b2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002b6:	fb04 f106 	mul.w	r1, r4, r6
 80002ba:	4299      	cmp	r1, r3
 80002bc:	d90a      	bls.n	80002d4 <__udivmoddi4+0x64>
 80002be:	eb1c 0303 	adds.w	r3, ip, r3
 80002c2:	f104 30ff 	add.w	r0, r4, #4294967295
 80002c6:	f080 8112 	bcs.w	80004ee <__udivmoddi4+0x27e>
 80002ca:	4299      	cmp	r1, r3
 80002cc:	f240 810f 	bls.w	80004ee <__udivmoddi4+0x27e>
 80002d0:	3c02      	subs	r4, #2
 80002d2:	4463      	add	r3, ip
 80002d4:	1a59      	subs	r1, r3, r1
 80002d6:	fa1f f38e 	uxth.w	r3, lr
 80002da:	fbb1 f0f7 	udiv	r0, r1, r7
 80002de:	fb07 1110 	mls	r1, r7, r0, r1
 80002e2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e6:	fb00 f606 	mul.w	r6, r0, r6
 80002ea:	429e      	cmp	r6, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x94>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f100 31ff 	add.w	r1, r0, #4294967295
 80002f6:	f080 80fc 	bcs.w	80004f2 <__udivmoddi4+0x282>
 80002fa:	429e      	cmp	r6, r3
 80002fc:	f240 80f9 	bls.w	80004f2 <__udivmoddi4+0x282>
 8000300:	4463      	add	r3, ip
 8000302:	3802      	subs	r0, #2
 8000304:	1b9b      	subs	r3, r3, r6
 8000306:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800030a:	2100      	movs	r1, #0
 800030c:	b11d      	cbz	r5, 8000316 <__udivmoddi4+0xa6>
 800030e:	40d3      	lsrs	r3, r2
 8000310:	2200      	movs	r2, #0
 8000312:	e9c5 3200 	strd	r3, r2, [r5]
 8000316:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800031a:	428b      	cmp	r3, r1
 800031c:	d905      	bls.n	800032a <__udivmoddi4+0xba>
 800031e:	b10d      	cbz	r5, 8000324 <__udivmoddi4+0xb4>
 8000320:	e9c5 0100 	strd	r0, r1, [r5]
 8000324:	2100      	movs	r1, #0
 8000326:	4608      	mov	r0, r1
 8000328:	e7f5      	b.n	8000316 <__udivmoddi4+0xa6>
 800032a:	fab3 f183 	clz	r1, r3
 800032e:	2900      	cmp	r1, #0
 8000330:	d146      	bne.n	80003c0 <__udivmoddi4+0x150>
 8000332:	42a3      	cmp	r3, r4
 8000334:	d302      	bcc.n	800033c <__udivmoddi4+0xcc>
 8000336:	4290      	cmp	r0, r2
 8000338:	f0c0 80f0 	bcc.w	800051c <__udivmoddi4+0x2ac>
 800033c:	1a86      	subs	r6, r0, r2
 800033e:	eb64 0303 	sbc.w	r3, r4, r3
 8000342:	2001      	movs	r0, #1
 8000344:	2d00      	cmp	r5, #0
 8000346:	d0e6      	beq.n	8000316 <__udivmoddi4+0xa6>
 8000348:	e9c5 6300 	strd	r6, r3, [r5]
 800034c:	e7e3      	b.n	8000316 <__udivmoddi4+0xa6>
 800034e:	2a00      	cmp	r2, #0
 8000350:	f040 8090 	bne.w	8000474 <__udivmoddi4+0x204>
 8000354:	eba1 040c 	sub.w	r4, r1, ip
 8000358:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800035c:	fa1f f78c 	uxth.w	r7, ip
 8000360:	2101      	movs	r1, #1
 8000362:	fbb4 f6f8 	udiv	r6, r4, r8
 8000366:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800036a:	fb08 4416 	mls	r4, r8, r6, r4
 800036e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000372:	fb07 f006 	mul.w	r0, r7, r6
 8000376:	4298      	cmp	r0, r3
 8000378:	d908      	bls.n	800038c <__udivmoddi4+0x11c>
 800037a:	eb1c 0303 	adds.w	r3, ip, r3
 800037e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000382:	d202      	bcs.n	800038a <__udivmoddi4+0x11a>
 8000384:	4298      	cmp	r0, r3
 8000386:	f200 80cd 	bhi.w	8000524 <__udivmoddi4+0x2b4>
 800038a:	4626      	mov	r6, r4
 800038c:	1a1c      	subs	r4, r3, r0
 800038e:	fa1f f38e 	uxth.w	r3, lr
 8000392:	fbb4 f0f8 	udiv	r0, r4, r8
 8000396:	fb08 4410 	mls	r4, r8, r0, r4
 800039a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800039e:	fb00 f707 	mul.w	r7, r0, r7
 80003a2:	429f      	cmp	r7, r3
 80003a4:	d908      	bls.n	80003b8 <__udivmoddi4+0x148>
 80003a6:	eb1c 0303 	adds.w	r3, ip, r3
 80003aa:	f100 34ff 	add.w	r4, r0, #4294967295
 80003ae:	d202      	bcs.n	80003b6 <__udivmoddi4+0x146>
 80003b0:	429f      	cmp	r7, r3
 80003b2:	f200 80b0 	bhi.w	8000516 <__udivmoddi4+0x2a6>
 80003b6:	4620      	mov	r0, r4
 80003b8:	1bdb      	subs	r3, r3, r7
 80003ba:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003be:	e7a5      	b.n	800030c <__udivmoddi4+0x9c>
 80003c0:	f1c1 0620 	rsb	r6, r1, #32
 80003c4:	408b      	lsls	r3, r1
 80003c6:	fa22 f706 	lsr.w	r7, r2, r6
 80003ca:	431f      	orrs	r7, r3
 80003cc:	fa20 fc06 	lsr.w	ip, r0, r6
 80003d0:	fa04 f301 	lsl.w	r3, r4, r1
 80003d4:	ea43 030c 	orr.w	r3, r3, ip
 80003d8:	40f4      	lsrs	r4, r6
 80003da:	fa00 f801 	lsl.w	r8, r0, r1
 80003de:	0c38      	lsrs	r0, r7, #16
 80003e0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003e4:	fbb4 fef0 	udiv	lr, r4, r0
 80003e8:	fa1f fc87 	uxth.w	ip, r7
 80003ec:	fb00 441e 	mls	r4, r0, lr, r4
 80003f0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003f4:	fb0e f90c 	mul.w	r9, lr, ip
 80003f8:	45a1      	cmp	r9, r4
 80003fa:	fa02 f201 	lsl.w	r2, r2, r1
 80003fe:	d90a      	bls.n	8000416 <__udivmoddi4+0x1a6>
 8000400:	193c      	adds	r4, r7, r4
 8000402:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000406:	f080 8084 	bcs.w	8000512 <__udivmoddi4+0x2a2>
 800040a:	45a1      	cmp	r9, r4
 800040c:	f240 8081 	bls.w	8000512 <__udivmoddi4+0x2a2>
 8000410:	f1ae 0e02 	sub.w	lr, lr, #2
 8000414:	443c      	add	r4, r7
 8000416:	eba4 0409 	sub.w	r4, r4, r9
 800041a:	fa1f f983 	uxth.w	r9, r3
 800041e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000422:	fb00 4413 	mls	r4, r0, r3, r4
 8000426:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800042a:	fb03 fc0c 	mul.w	ip, r3, ip
 800042e:	45a4      	cmp	ip, r4
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x1d2>
 8000432:	193c      	adds	r4, r7, r4
 8000434:	f103 30ff 	add.w	r0, r3, #4294967295
 8000438:	d267      	bcs.n	800050a <__udivmoddi4+0x29a>
 800043a:	45a4      	cmp	ip, r4
 800043c:	d965      	bls.n	800050a <__udivmoddi4+0x29a>
 800043e:	3b02      	subs	r3, #2
 8000440:	443c      	add	r4, r7
 8000442:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000446:	fba0 9302 	umull	r9, r3, r0, r2
 800044a:	eba4 040c 	sub.w	r4, r4, ip
 800044e:	429c      	cmp	r4, r3
 8000450:	46ce      	mov	lr, r9
 8000452:	469c      	mov	ip, r3
 8000454:	d351      	bcc.n	80004fa <__udivmoddi4+0x28a>
 8000456:	d04e      	beq.n	80004f6 <__udivmoddi4+0x286>
 8000458:	b155      	cbz	r5, 8000470 <__udivmoddi4+0x200>
 800045a:	ebb8 030e 	subs.w	r3, r8, lr
 800045e:	eb64 040c 	sbc.w	r4, r4, ip
 8000462:	fa04 f606 	lsl.w	r6, r4, r6
 8000466:	40cb      	lsrs	r3, r1
 8000468:	431e      	orrs	r6, r3
 800046a:	40cc      	lsrs	r4, r1
 800046c:	e9c5 6400 	strd	r6, r4, [r5]
 8000470:	2100      	movs	r1, #0
 8000472:	e750      	b.n	8000316 <__udivmoddi4+0xa6>
 8000474:	f1c2 0320 	rsb	r3, r2, #32
 8000478:	fa20 f103 	lsr.w	r1, r0, r3
 800047c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000480:	fa24 f303 	lsr.w	r3, r4, r3
 8000484:	4094      	lsls	r4, r2
 8000486:	430c      	orrs	r4, r1
 8000488:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800048c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000490:	fa1f f78c 	uxth.w	r7, ip
 8000494:	fbb3 f0f8 	udiv	r0, r3, r8
 8000498:	fb08 3110 	mls	r1, r8, r0, r3
 800049c:	0c23      	lsrs	r3, r4, #16
 800049e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004a2:	fb00 f107 	mul.w	r1, r0, r7
 80004a6:	4299      	cmp	r1, r3
 80004a8:	d908      	bls.n	80004bc <__udivmoddi4+0x24c>
 80004aa:	eb1c 0303 	adds.w	r3, ip, r3
 80004ae:	f100 36ff 	add.w	r6, r0, #4294967295
 80004b2:	d22c      	bcs.n	800050e <__udivmoddi4+0x29e>
 80004b4:	4299      	cmp	r1, r3
 80004b6:	d92a      	bls.n	800050e <__udivmoddi4+0x29e>
 80004b8:	3802      	subs	r0, #2
 80004ba:	4463      	add	r3, ip
 80004bc:	1a5b      	subs	r3, r3, r1
 80004be:	b2a4      	uxth	r4, r4
 80004c0:	fbb3 f1f8 	udiv	r1, r3, r8
 80004c4:	fb08 3311 	mls	r3, r8, r1, r3
 80004c8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004cc:	fb01 f307 	mul.w	r3, r1, r7
 80004d0:	42a3      	cmp	r3, r4
 80004d2:	d908      	bls.n	80004e6 <__udivmoddi4+0x276>
 80004d4:	eb1c 0404 	adds.w	r4, ip, r4
 80004d8:	f101 36ff 	add.w	r6, r1, #4294967295
 80004dc:	d213      	bcs.n	8000506 <__udivmoddi4+0x296>
 80004de:	42a3      	cmp	r3, r4
 80004e0:	d911      	bls.n	8000506 <__udivmoddi4+0x296>
 80004e2:	3902      	subs	r1, #2
 80004e4:	4464      	add	r4, ip
 80004e6:	1ae4      	subs	r4, r4, r3
 80004e8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004ec:	e739      	b.n	8000362 <__udivmoddi4+0xf2>
 80004ee:	4604      	mov	r4, r0
 80004f0:	e6f0      	b.n	80002d4 <__udivmoddi4+0x64>
 80004f2:	4608      	mov	r0, r1
 80004f4:	e706      	b.n	8000304 <__udivmoddi4+0x94>
 80004f6:	45c8      	cmp	r8, r9
 80004f8:	d2ae      	bcs.n	8000458 <__udivmoddi4+0x1e8>
 80004fa:	ebb9 0e02 	subs.w	lr, r9, r2
 80004fe:	eb63 0c07 	sbc.w	ip, r3, r7
 8000502:	3801      	subs	r0, #1
 8000504:	e7a8      	b.n	8000458 <__udivmoddi4+0x1e8>
 8000506:	4631      	mov	r1, r6
 8000508:	e7ed      	b.n	80004e6 <__udivmoddi4+0x276>
 800050a:	4603      	mov	r3, r0
 800050c:	e799      	b.n	8000442 <__udivmoddi4+0x1d2>
 800050e:	4630      	mov	r0, r6
 8000510:	e7d4      	b.n	80004bc <__udivmoddi4+0x24c>
 8000512:	46d6      	mov	lr, sl
 8000514:	e77f      	b.n	8000416 <__udivmoddi4+0x1a6>
 8000516:	4463      	add	r3, ip
 8000518:	3802      	subs	r0, #2
 800051a:	e74d      	b.n	80003b8 <__udivmoddi4+0x148>
 800051c:	4606      	mov	r6, r0
 800051e:	4623      	mov	r3, r4
 8000520:	4608      	mov	r0, r1
 8000522:	e70f      	b.n	8000344 <__udivmoddi4+0xd4>
 8000524:	3e02      	subs	r6, #2
 8000526:	4463      	add	r3, ip
 8000528:	e730      	b.n	800038c <__udivmoddi4+0x11c>
 800052a:	bf00      	nop

0800052c <__aeabi_idiv0>:
 800052c:	4770      	bx	lr
 800052e:	bf00      	nop

08000530 <initializeCAN>:
 */

#include "CAN.h"

void initializeCAN(CAN_HandleTypeDef* hcan)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	b082      	sub	sp, #8
 8000534:	af00      	add	r7, sp, #0
 8000536:	6078      	str	r0, [r7, #4]
	if (HAL_CAN_Start(hcan) != HAL_OK)
 8000538:	6878      	ldr	r0, [r7, #4]
 800053a:	f003 fa45 	bl	80039c8 <HAL_CAN_Start>
 800053e:	4603      	mov	r3, r0
 8000540:	2b00      	cmp	r3, #0
 8000542:	d001      	beq.n	8000548 <initializeCAN+0x18>
	{
		Error_Handler();
 8000544:	f001 fe98 	bl	8002278 <Error_Handler>
	}

	configAMSCANFilter(hcan);
 8000548:	6878      	ldr	r0, [r7, #4]
 800054a:	f000 f991 	bl	8000870 <configAMSCANFilter>

	configIMDCANFilter(hcan);
 800054e:	6878      	ldr	r0, [r7, #4]
 8000550:	f000 f9b7 	bl	80008c2 <configIMDCANFilter>

	configInverterRPMCANFilter(hcan);
 8000554:	6878      	ldr	r0, [r7, #4]
 8000556:	f000 f9db 	bl	8000910 <configInverterRPMCANFilter>

	configInverterTempCANFilter(hcan);
 800055a:	6878      	ldr	r0, [r7, #4]
 800055c:	f000 fa01 	bl	8000962 <configInverterTempCANFilter>

	configBMSDataFilter(hcan);
 8000560:	6878      	ldr	r0, [r7, #4]
 8000562:	f000 fa27 	bl	80009b4 <configBMSDataFilter>

	if (HAL_CAN_ActivateNotification(hcan, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK)
 8000566:	2102      	movs	r1, #2
 8000568:	6878      	ldr	r0, [r7, #4]
 800056a:	f003 fc77 	bl	8003e5c <HAL_CAN_ActivateNotification>
 800056e:	4603      	mov	r3, r0
 8000570:	2b00      	cmp	r3, #0
 8000572:	d001      	beq.n	8000578 <initializeCAN+0x48>
	{
		Error_Handler();
 8000574:	f001 fe80 	bl	8002278 <Error_Handler>
	}

	if (HAL_CAN_ActivateNotification(hcan, CAN_IT_RX_FIFO1_MSG_PENDING) != HAL_OK)
 8000578:	2110      	movs	r1, #16
 800057a:	6878      	ldr	r0, [r7, #4]
 800057c:	f003 fc6e 	bl	8003e5c <HAL_CAN_ActivateNotification>
 8000580:	4603      	mov	r3, r0
 8000582:	2b00      	cmp	r3, #0
 8000584:	d001      	beq.n	800058a <initializeCAN+0x5a>
	{
		Error_Handler();
 8000586:	f001 fe77 	bl	8002278 <Error_Handler>
	}
}
 800058a:	bf00      	nop
 800058c:	3708      	adds	r7, #8
 800058e:	46bd      	mov	sp, r7
 8000590:	bd80      	pop	{r7, pc}

08000592 <sendSync>:

void sendSync(CAN_HandleTypeDef* hcan)
{
 8000592:	b580      	push	{r7, lr}
 8000594:	b08c      	sub	sp, #48	@ 0x30
 8000596:	af00      	add	r7, sp, #0
 8000598:	6078      	str	r0, [r7, #4]
	CAN_TxHeaderTypeDef txHeader;
	uint8_t data[1] = { (0x00U) };
 800059a:	2300      	movs	r3, #0
 800059c:	753b      	strb	r3, [r7, #20]
	uint32_t mailbox;
	ECU_SYNC_t sync;
	uint8_t len, ide;


	txHeader.DLC = ECU_SYNC_DLC;
 800059e:	2301      	movs	r3, #1
 80005a0:	62bb      	str	r3, [r7, #40]	@ 0x28
	txHeader.ExtId = DISABLE;
 80005a2:	2300      	movs	r3, #0
 80005a4:	61fb      	str	r3, [r7, #28]
	txHeader.IDE = ECU_SYNC_IDE;
 80005a6:	2300      	movs	r3, #0
 80005a8:	623b      	str	r3, [r7, #32]
	txHeader.RTR = CAN_RTR_DATA;
 80005aa:	2300      	movs	r3, #0
 80005ac:	627b      	str	r3, [r7, #36]	@ 0x24
	txHeader.StdId = ECU_SYNC_CANID;
 80005ae:	2380      	movs	r3, #128	@ 0x80
 80005b0:	61bb      	str	r3, [r7, #24]
	txHeader.TransmitGlobalTime = DISABLE;
 80005b2:	2300      	movs	r3, #0
 80005b4:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c

	sync.ECU_SYNCH_Counter = (0x00U);
 80005b8:	2300      	movs	r3, #0
 80005ba:	733b      	strb	r3, [r7, #12]

	Pack_ECU_SYNC__DO_QUASAR_CANopen(&sync, data, &len, &ide);
 80005bc:	f107 030a 	add.w	r3, r7, #10
 80005c0:	f107 020b 	add.w	r2, r7, #11
 80005c4:	f107 0114 	add.w	r1, r7, #20
 80005c8:	f107 000c 	add.w	r0, r7, #12
 80005cc:	f000 fac9 	bl	8000b62 <Pack_ECU_SYNC__DO_QUASAR_CANopen>

	if (HAL_CAN_AddTxMessage(hcan, &txHeader, data, &mailbox) != HAL_OK)
 80005d0:	f107 0310 	add.w	r3, r7, #16
 80005d4:	f107 0214 	add.w	r2, r7, #20
 80005d8:	f107 0118 	add.w	r1, r7, #24
 80005dc:	6878      	ldr	r0, [r7, #4]
 80005de:	f003 fa37 	bl	8003a50 <HAL_CAN_AddTxMessage>
 80005e2:	4603      	mov	r3, r0
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d001      	beq.n	80005ec <sendSync+0x5a>
	{
		Error_Handler();
 80005e8:	f001 fe46 	bl	8002278 <Error_Handler>
	}

	while (HAL_CAN_IsTxMessagePending(hcan, mailbox));
 80005ec:	bf00      	nop
 80005ee:	693b      	ldr	r3, [r7, #16]
 80005f0:	4619      	mov	r1, r3
 80005f2:	6878      	ldr	r0, [r7, #4]
 80005f4:	f003 fafc 	bl	8003bf0 <HAL_CAN_IsTxMessagePending>
 80005f8:	4603      	mov	r3, r0
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d1f7      	bne.n	80005ee <sendSync+0x5c>
}
 80005fe:	bf00      	nop
 8000600:	bf00      	nop
 8000602:	3730      	adds	r7, #48	@ 0x30
 8000604:	46bd      	mov	sp, r7
 8000606:	bd80      	pop	{r7, pc}

08000608 <nodeGuarding>:

void nodeGuarding(CAN_HandleTypeDef* hcan)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b08a      	sub	sp, #40	@ 0x28
 800060c:	af00      	add	r7, sp, #0
 800060e:	6078      	str	r0, [r7, #4]
	CAN_TxHeaderTypeDef txHeader;
	uint8_t data[1] = { (0x00U) };
 8000610:	2300      	movs	r3, #0
 8000612:	733b      	strb	r3, [r7, #12]
	uint32_t mailbox;

	txHeader.DLC = ECU_EMD_NMT_node_guarding_DLC;
 8000614:	2301      	movs	r3, #1
 8000616:	623b      	str	r3, [r7, #32]
	txHeader.ExtId = DISABLE;
 8000618:	2300      	movs	r3, #0
 800061a:	617b      	str	r3, [r7, #20]
	txHeader.IDE = CAN_ID_STD;
 800061c:	2300      	movs	r3, #0
 800061e:	61bb      	str	r3, [r7, #24]
	txHeader.RTR = CAN_RTR_REMOTE;
 8000620:	2302      	movs	r3, #2
 8000622:	61fb      	str	r3, [r7, #28]
	txHeader.StdId = ECU_EMD_NMT_node_guarding_CANID;
 8000624:	f240 737a 	movw	r3, #1914	@ 0x77a
 8000628:	613b      	str	r3, [r7, #16]
	txHeader.TransmitGlobalTime = DISABLE;
 800062a:	2300      	movs	r3, #0
 800062c:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24

	if (HAL_CAN_AddTxMessage(hcan, &txHeader, data, &mailbox) != HAL_OK)
 8000630:	f107 0308 	add.w	r3, r7, #8
 8000634:	f107 020c 	add.w	r2, r7, #12
 8000638:	f107 0110 	add.w	r1, r7, #16
 800063c:	6878      	ldr	r0, [r7, #4]
 800063e:	f003 fa07 	bl	8003a50 <HAL_CAN_AddTxMessage>
 8000642:	4603      	mov	r3, r0
 8000644:	2b00      	cmp	r3, #0
 8000646:	d001      	beq.n	800064c <nodeGuarding+0x44>
	{
		Error_Handler();
 8000648:	f001 fe16 	bl	8002278 <Error_Handler>
	}

	while (HAL_CAN_IsTxMessagePending(hcan, mailbox));
 800064c:	bf00      	nop
 800064e:	68bb      	ldr	r3, [r7, #8]
 8000650:	4619      	mov	r1, r3
 8000652:	6878      	ldr	r0, [r7, #4]
 8000654:	f003 facc 	bl	8003bf0 <HAL_CAN_IsTxMessagePending>
 8000658:	4603      	mov	r3, r0
 800065a:	2b00      	cmp	r3, #0
 800065c:	d1f7      	bne.n	800064e <nodeGuarding+0x46>

	return;
 800065e:	bf00      	nop
}
 8000660:	3728      	adds	r7, #40	@ 0x28
 8000662:	46bd      	mov	sp, r7
 8000664:	bd80      	pop	{r7, pc}
	...

08000668 <startNode>:

void startNode(CAN_HandleTypeDef* hcan)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b08e      	sub	sp, #56	@ 0x38
 800066c:	af00      	add	r7, sp, #0
 800066e:	6078      	str	r0, [r7, #4]
	CAN_TxHeaderTypeDef txHeader;
	uint8_t data[8] = { (0x00U), (0x00U), (0x00U), (0x00U), (0x00U), (0x00U), (0x00U), (0x00U) };
 8000670:	4a1e      	ldr	r2, [pc, #120]	@ (80006ec <startNode+0x84>)
 8000672:	f107 0318 	add.w	r3, r7, #24
 8000676:	e892 0003 	ldmia.w	r2, {r0, r1}
 800067a:	e883 0003 	stmia.w	r3, {r0, r1}
	uint32_t mailbox;
	ECU_NMT_command_t nmt_t;
	uint8_t len, ide;

	nmt_t.ECU_NMT_CommandSpecifier = (0x01U);
 800067e:	2301      	movs	r3, #1
 8000680:	743b      	strb	r3, [r7, #16]
	nmt_t.ECU_NMT_NodeId = (0x7AU);
 8000682:	237a      	movs	r3, #122	@ 0x7a
 8000684:	747b      	strb	r3, [r7, #17]

	Pack_ECU_NMT_command__DO_QUASAR_CANopen(&nmt_t, data, &len, &ide);
 8000686:	f107 030e 	add.w	r3, r7, #14
 800068a:	f107 020f 	add.w	r2, r7, #15
 800068e:	f107 0118 	add.w	r1, r7, #24
 8000692:	f107 0010 	add.w	r0, r7, #16
 8000696:	f000 fa30 	bl	8000afa <Pack_ECU_NMT_command__DO_QUASAR_CANopen>

	txHeader.DLC = ECU_NMT_command_DLC;
 800069a:	2302      	movs	r3, #2
 800069c:	633b      	str	r3, [r7, #48]	@ 0x30
	txHeader.ExtId = DISABLE;
 800069e:	2300      	movs	r3, #0
 80006a0:	627b      	str	r3, [r7, #36]	@ 0x24
	txHeader.IDE = ide;
 80006a2:	7bbb      	ldrb	r3, [r7, #14]
 80006a4:	62bb      	str	r3, [r7, #40]	@ 0x28
	txHeader.RTR = CAN_RTR_DATA;
 80006a6:	2300      	movs	r3, #0
 80006a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
	txHeader.StdId = ECU_NMT_command_CANID;
 80006aa:	2300      	movs	r3, #0
 80006ac:	623b      	str	r3, [r7, #32]
	txHeader.TransmitGlobalTime = DISABLE;
 80006ae:	2300      	movs	r3, #0
 80006b0:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34

	if (HAL_CAN_AddTxMessage(hcan, &txHeader, data, &mailbox) != HAL_OK)
 80006b4:	f107 0314 	add.w	r3, r7, #20
 80006b8:	f107 0218 	add.w	r2, r7, #24
 80006bc:	f107 0120 	add.w	r1, r7, #32
 80006c0:	6878      	ldr	r0, [r7, #4]
 80006c2:	f003 f9c5 	bl	8003a50 <HAL_CAN_AddTxMessage>
 80006c6:	4603      	mov	r3, r0
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d001      	beq.n	80006d0 <startNode+0x68>
	{
		Error_Handler();
 80006cc:	f001 fdd4 	bl	8002278 <Error_Handler>
	}

	while (HAL_CAN_IsTxMessagePending(hcan, mailbox));
 80006d0:	bf00      	nop
 80006d2:	697b      	ldr	r3, [r7, #20]
 80006d4:	4619      	mov	r1, r3
 80006d6:	6878      	ldr	r0, [r7, #4]
 80006d8:	f003 fa8a 	bl	8003bf0 <HAL_CAN_IsTxMessagePending>
 80006dc:	4603      	mov	r3, r0
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d1f7      	bne.n	80006d2 <startNode+0x6a>

	return;
 80006e2:	bf00      	nop
}
 80006e4:	3738      	adds	r7, #56	@ 0x38
 80006e6:	46bd      	mov	sp, r7
 80006e8:	bd80      	pop	{r7, pc}
 80006ea:	bf00      	nop
 80006ec:	08009888 	.word	0x08009888

080006f0 <clearErrors>:

void clearErrors(CAN_HandleTypeDef* hcan)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b092      	sub	sp, #72	@ 0x48
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	6078      	str	r0, [r7, #4]
	CAN_TxHeaderTypeDef txHeader;
	uint8_t data[8] = { (0x00U), (0x00U), (0x00U), (0x00U), (0x00U), (0x04U), (0x00U), (0x00U) };
 80006f8:	4a29      	ldr	r2, [pc, #164]	@ (80007a0 <clearErrors+0xb0>)
 80006fa:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80006fe:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000702:	e883 0003 	stmia.w	r3, {r0, r1}
	uint32_t mailbox;
	EMD_RxPDO_3_t rxPDO3;
	uint8_t len, ide;

	rxPDO3.EMD_CMD_ActiveDischarge = 0;
 8000706:	2300      	movs	r3, #0
 8000708:	777b      	strb	r3, [r7, #29]
	rxPDO3.EMD_CMD_ClearErrors = (0x01U);
 800070a:	2301      	movs	r3, #1
 800070c:	76fb      	strb	r3, [r7, #27]
	rxPDO3.EMD_CMD_ControlMode = 0;
 800070e:	2300      	movs	r3, #0
 8000710:	763b      	strb	r3, [r7, #24]
	rxPDO3.EMD_CMD_DigitalOutput1 = 0;
 8000712:	2300      	movs	r3, #0
 8000714:	f887 3020 	strb.w	r3, [r7, #32]
	rxPDO3.EMD_CMD_DigitalOutput2 = 0;
 8000718:	2300      	movs	r3, #0
 800071a:	77fb      	strb	r3, [r7, #31]
	rxPDO3.EMD_CMD_LimitationMode = 0;
 800071c:	2300      	movs	r3, #0
 800071e:	77bb      	strb	r3, [r7, #30]
	rxPDO3.EMD_CMD_RestartRequest = 0;
 8000720:	2300      	movs	r3, #0
 8000722:	773b      	strb	r3, [r7, #28]
	rxPDO3.EMD_CMD_SpeedRefLim = 0;
 8000724:	2300      	movs	r3, #0
 8000726:	617b      	str	r3, [r7, #20]
	rxPDO3.EMD_CMD_SpeedRefLim_VAL = 0;
 8000728:	2300      	movs	r3, #0
 800072a:	76bb      	strb	r3, [r7, #26]
	rxPDO3.EMD_CMD_TorqueRefLim = 0;
 800072c:	2300      	movs	r3, #0
 800072e:	823b      	strh	r3, [r7, #16]
	rxPDO3.EMD_CMD_TorqueRefLim_VAL = 0;
 8000730:	2300      	movs	r3, #0
 8000732:	74bb      	strb	r3, [r7, #18]
	rxPDO3.EMD_MSGCNT_RxPDO3 = 0;
 8000734:	2300      	movs	r3, #0
 8000736:	767b      	strb	r3, [r7, #25]

	Pack_EMD_RxPDO_3__DO_QUASAR_CANopen(&rxPDO3, data, &len, &ide);
 8000738:	f107 030e 	add.w	r3, r7, #14
 800073c:	f107 020f 	add.w	r2, r7, #15
 8000740:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 8000744:	f107 0010 	add.w	r0, r7, #16
 8000748:	f000 facd 	bl	8000ce6 <Pack_EMD_RxPDO_3__DO_QUASAR_CANopen>

	txHeader.DLC = len;
 800074c:	7bfb      	ldrb	r3, [r7, #15]
 800074e:	643b      	str	r3, [r7, #64]	@ 0x40
	txHeader.ExtId = DISABLE;
 8000750:	2300      	movs	r3, #0
 8000752:	637b      	str	r3, [r7, #52]	@ 0x34
	txHeader.IDE = ide;
 8000754:	7bbb      	ldrb	r3, [r7, #14]
 8000756:	63bb      	str	r3, [r7, #56]	@ 0x38
	txHeader.RTR = CAN_RTR_DATA;
 8000758:	2300      	movs	r3, #0
 800075a:	63fb      	str	r3, [r7, #60]	@ 0x3c
	txHeader.StdId = EMD_RxPDO_3_CANID;
 800075c:	f240 437a 	movw	r3, #1146	@ 0x47a
 8000760:	633b      	str	r3, [r7, #48]	@ 0x30
	txHeader.TransmitGlobalTime = DISABLE;
 8000762:	2300      	movs	r3, #0
 8000764:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44

	if (HAL_CAN_AddTxMessage(hcan, &txHeader, data, &mailbox) != HAL_OK)
 8000768:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800076c:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8000770:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 8000774:	6878      	ldr	r0, [r7, #4]
 8000776:	f003 f96b 	bl	8003a50 <HAL_CAN_AddTxMessage>
 800077a:	4603      	mov	r3, r0
 800077c:	2b00      	cmp	r3, #0
 800077e:	d001      	beq.n	8000784 <clearErrors+0x94>
	{
		Error_Handler();
 8000780:	f001 fd7a 	bl	8002278 <Error_Handler>
	}

	while (HAL_CAN_IsTxMessagePending(hcan, mailbox));
 8000784:	bf00      	nop
 8000786:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000788:	4619      	mov	r1, r3
 800078a:	6878      	ldr	r0, [r7, #4]
 800078c:	f003 fa30 	bl	8003bf0 <HAL_CAN_IsTxMessagePending>
 8000790:	4603      	mov	r3, r0
 8000792:	2b00      	cmp	r3, #0
 8000794:	d1f7      	bne.n	8000786 <clearErrors+0x96>

	return;
 8000796:	bf00      	nop
}
 8000798:	3748      	adds	r7, #72	@ 0x48
 800079a:	46bd      	mov	sp, r7
 800079c:	bd80      	pop	{r7, pc}
 800079e:	bf00      	nop
 80007a0:	08009890 	.word	0x08009890

080007a4 <torqueControlMessage>:

void torqueControlMessage(CAN_HandleTypeDef* hcan, int _speedRefLimit, int* _torqueRefLimit)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b094      	sub	sp, #80	@ 0x50
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	60f8      	str	r0, [r7, #12]
 80007ac:	60b9      	str	r1, [r7, #8]
 80007ae:	607a      	str	r2, [r7, #4]
	CAN_TxHeaderTypeDef txHeader;
	uint8_t data[8] = { (0x00U), (0x00U), (0x00U), (0x00U), (0x00U), (0x00U), (0x00U), (0x00U) };
 80007b0:	4a2e      	ldr	r2, [pc, #184]	@ (800086c <torqueControlMessage+0xc8>)
 80007b2:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80007b6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80007ba:	e883 0003 	stmia.w	r3, {r0, r1}
	uint32_t mailbox;
	EMD_RxPDO_3_t rxPDO3;
	uint8_t len, ide;

	rxPDO3.EMD_CMD_ActiveDischarge = 0;
 80007be:	2300      	movs	r3, #0
 80007c0:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
	rxPDO3.EMD_CMD_ClearErrors = 0;
 80007c4:	2300      	movs	r3, #0
 80007c6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
	rxPDO3.EMD_CMD_ControlMode = (0x01U);
 80007ca:	2301      	movs	r3, #1
 80007cc:	f887 3020 	strb.w	r3, [r7, #32]
	rxPDO3.EMD_CMD_DigitalOutput1 = 0;
 80007d0:	2300      	movs	r3, #0
 80007d2:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
	rxPDO3.EMD_CMD_DigitalOutput2 = 0;
 80007d6:	2300      	movs	r3, #0
 80007d8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	rxPDO3.EMD_CMD_LimitationMode = 0;
 80007dc:	2300      	movs	r3, #0
 80007de:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	rxPDO3.EMD_CMD_RestartRequest = 0;
 80007e2:	2300      	movs	r3, #0
 80007e4:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
	rxPDO3.EMD_CMD_SpeedRefLim = _speedRefLimit;
 80007e8:	68bb      	ldr	r3, [r7, #8]
 80007ea:	61fb      	str	r3, [r7, #28]
	rxPDO3.EMD_CMD_SpeedRefLim_VAL = 0;
 80007ec:	2300      	movs	r3, #0
 80007ee:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
	rxPDO3.EMD_CMD_TorqueRefLim = *_torqueRefLimit;
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	681b      	ldr	r3, [r3, #0]
 80007f6:	b21b      	sxth	r3, r3
 80007f8:	833b      	strh	r3, [r7, #24]
	rxPDO3.EMD_CMD_TorqueRefLim_VAL = 0;
 80007fa:	2300      	movs	r3, #0
 80007fc:	76bb      	strb	r3, [r7, #26]
	rxPDO3.EMD_MSGCNT_RxPDO3 = 0;
 80007fe:	2300      	movs	r3, #0
 8000800:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21

	Pack_EMD_RxPDO_3__DO_QUASAR_CANopen(&rxPDO3, data, &len, &ide);
 8000804:	f107 0316 	add.w	r3, r7, #22
 8000808:	f107 0217 	add.w	r2, r7, #23
 800080c:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 8000810:	f107 0018 	add.w	r0, r7, #24
 8000814:	f000 fa67 	bl	8000ce6 <Pack_EMD_RxPDO_3__DO_QUASAR_CANopen>

	txHeader.DLC = EMD_RxPDO_3_DLC;
 8000818:	2306      	movs	r3, #6
 800081a:	64bb      	str	r3, [r7, #72]	@ 0x48
	txHeader.ExtId = DISABLE;
 800081c:	2300      	movs	r3, #0
 800081e:	63fb      	str	r3, [r7, #60]	@ 0x3c
	txHeader.IDE = ide;
 8000820:	7dbb      	ldrb	r3, [r7, #22]
 8000822:	643b      	str	r3, [r7, #64]	@ 0x40
	txHeader.RTR = CAN_RTR_DATA;
 8000824:	2300      	movs	r3, #0
 8000826:	647b      	str	r3, [r7, #68]	@ 0x44
	txHeader.StdId = EMD_RxPDO_3_CANID;
 8000828:	f240 437a 	movw	r3, #1146	@ 0x47a
 800082c:	63bb      	str	r3, [r7, #56]	@ 0x38
	txHeader.TransmitGlobalTime = DISABLE;
 800082e:	2300      	movs	r3, #0
 8000830:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c

	if (HAL_CAN_AddTxMessage(hcan, &txHeader, data, &mailbox) != HAL_OK)
 8000834:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000838:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 800083c:	f107 0138 	add.w	r1, r7, #56	@ 0x38
 8000840:	68f8      	ldr	r0, [r7, #12]
 8000842:	f003 f905 	bl	8003a50 <HAL_CAN_AddTxMessage>
 8000846:	4603      	mov	r3, r0
 8000848:	2b00      	cmp	r3, #0
 800084a:	d001      	beq.n	8000850 <torqueControlMessage+0xac>
	{
		Error_Handler();
 800084c:	f001 fd14 	bl	8002278 <Error_Handler>
	}

	while (HAL_CAN_IsTxMessagePending(hcan, mailbox));
 8000850:	bf00      	nop
 8000852:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000854:	4619      	mov	r1, r3
 8000856:	68f8      	ldr	r0, [r7, #12]
 8000858:	f003 f9ca 	bl	8003bf0 <HAL_CAN_IsTxMessagePending>
 800085c:	4603      	mov	r3, r0
 800085e:	2b00      	cmp	r3, #0
 8000860:	d1f7      	bne.n	8000852 <torqueControlMessage+0xae>

	return;
 8000862:	bf00      	nop
}
 8000864:	3750      	adds	r7, #80	@ 0x50
 8000866:	46bd      	mov	sp, r7
 8000868:	bd80      	pop	{r7, pc}
 800086a:	bf00      	nop
 800086c:	08009888 	.word	0x08009888

08000870 <configAMSCANFilter>:

void configAMSCANFilter(CAN_HandleTypeDef* hcan)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b08c      	sub	sp, #48	@ 0x30
 8000874:	af00      	add	r7, sp, #0
 8000876:	6078      	str	r0, [r7, #4]
	CAN_FilterTypeDef filter;

	filter.FilterActivation = CAN_FILTER_ENABLE;
 8000878:	2301      	movs	r3, #1
 800087a:	62bb      	str	r3, [r7, #40]	@ 0x28
	filter.FilterBank = 0;
 800087c:	2300      	movs	r3, #0
 800087e:	61fb      	str	r3, [r7, #28]
	filter.FilterFIFOAssignment = CAN_LOW_PRIORITY_FIFO;
 8000880:	2300      	movs	r3, #0
 8000882:	61bb      	str	r3, [r7, #24]
	filter.FilterIdHigh = ((0x301U)<<5);
 8000884:	f246 0320 	movw	r3, #24608	@ 0x6020
 8000888:	60bb      	str	r3, [r7, #8]
	filter.FilterIdLow = (0x000U);
 800088a:	2300      	movs	r3, #0
 800088c:	60fb      	str	r3, [r7, #12]
	filter.FilterMaskIdHigh = ((0x301U)<<5);
 800088e:	f246 0320 	movw	r3, #24608	@ 0x6020
 8000892:	613b      	str	r3, [r7, #16]
	filter.FilterMaskIdLow = (0x000U);
 8000894:	2300      	movs	r3, #0
 8000896:	617b      	str	r3, [r7, #20]
	filter.FilterMode = CAN_FILTERMODE_IDMASK;
 8000898:	2300      	movs	r3, #0
 800089a:	623b      	str	r3, [r7, #32]
	filter.FilterScale = CAN_FILTERSCALE_32BIT;
 800089c:	2301      	movs	r3, #1
 800089e:	627b      	str	r3, [r7, #36]	@ 0x24
	filter.SlaveStartFilterBank = 14;
 80008a0:	230e      	movs	r3, #14
 80008a2:	62fb      	str	r3, [r7, #44]	@ 0x2c

	if (HAL_CAN_ConfigFilter(hcan, &filter) != HAL_OK)
 80008a4:	f107 0308 	add.w	r3, r7, #8
 80008a8:	4619      	mov	r1, r3
 80008aa:	6878      	ldr	r0, [r7, #4]
 80008ac:	f002 ffa0 	bl	80037f0 <HAL_CAN_ConfigFilter>
 80008b0:	4603      	mov	r3, r0
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d001      	beq.n	80008ba <configAMSCANFilter+0x4a>
	{
		Error_Handler();
 80008b6:	f001 fcdf 	bl	8002278 <Error_Handler>
	}
}
 80008ba:	bf00      	nop
 80008bc:	3730      	adds	r7, #48	@ 0x30
 80008be:	46bd      	mov	sp, r7
 80008c0:	bd80      	pop	{r7, pc}

080008c2 <configIMDCANFilter>:

void configIMDCANFilter(CAN_HandleTypeDef* hcan)
{
 80008c2:	b580      	push	{r7, lr}
 80008c4:	b08c      	sub	sp, #48	@ 0x30
 80008c6:	af00      	add	r7, sp, #0
 80008c8:	6078      	str	r0, [r7, #4]
	CAN_FilterTypeDef filter;

	filter.FilterActivation = CAN_FILTER_ENABLE;
 80008ca:	2301      	movs	r3, #1
 80008cc:	62bb      	str	r3, [r7, #40]	@ 0x28
	filter.FilterBank = 1;
 80008ce:	2301      	movs	r3, #1
 80008d0:	61fb      	str	r3, [r7, #28]
	filter.FilterFIFOAssignment = CAN_LOW_PRIORITY_FIFO;
 80008d2:	2300      	movs	r3, #0
 80008d4:	61bb      	str	r3, [r7, #24]
	filter.FilterIdHigh = ((0x007U)<<5);
 80008d6:	23e0      	movs	r3, #224	@ 0xe0
 80008d8:	60bb      	str	r3, [r7, #8]
	filter.FilterIdLow = (0x000U);
 80008da:	2300      	movs	r3, #0
 80008dc:	60fb      	str	r3, [r7, #12]
	filter.FilterMaskIdHigh = ((0x007U)<<5);
 80008de:	23e0      	movs	r3, #224	@ 0xe0
 80008e0:	613b      	str	r3, [r7, #16]
	filter.FilterMaskIdLow = (0x000U);
 80008e2:	2300      	movs	r3, #0
 80008e4:	617b      	str	r3, [r7, #20]
	filter.FilterMode = CAN_FILTERMODE_IDMASK;
 80008e6:	2300      	movs	r3, #0
 80008e8:	623b      	str	r3, [r7, #32]
	filter.FilterScale = CAN_FILTERSCALE_32BIT;
 80008ea:	2301      	movs	r3, #1
 80008ec:	627b      	str	r3, [r7, #36]	@ 0x24
	filter.SlaveStartFilterBank = 14;
 80008ee:	230e      	movs	r3, #14
 80008f0:	62fb      	str	r3, [r7, #44]	@ 0x2c

	if (HAL_CAN_ConfigFilter(hcan, &filter) != HAL_OK)
 80008f2:	f107 0308 	add.w	r3, r7, #8
 80008f6:	4619      	mov	r1, r3
 80008f8:	6878      	ldr	r0, [r7, #4]
 80008fa:	f002 ff79 	bl	80037f0 <HAL_CAN_ConfigFilter>
 80008fe:	4603      	mov	r3, r0
 8000900:	2b00      	cmp	r3, #0
 8000902:	d001      	beq.n	8000908 <configIMDCANFilter+0x46>
	{
		Error_Handler();
 8000904:	f001 fcb8 	bl	8002278 <Error_Handler>
	}
}
 8000908:	bf00      	nop
 800090a:	3730      	adds	r7, #48	@ 0x30
 800090c:	46bd      	mov	sp, r7
 800090e:	bd80      	pop	{r7, pc}

08000910 <configInverterRPMCANFilter>:

void configInverterRPMCANFilter(CAN_HandleTypeDef* hcan)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b08c      	sub	sp, #48	@ 0x30
 8000914:	af00      	add	r7, sp, #0
 8000916:	6078      	str	r0, [r7, #4]
	CAN_FilterTypeDef filter;

	filter.FilterActivation = CAN_FILTER_ENABLE;
 8000918:	2301      	movs	r3, #1
 800091a:	62bb      	str	r3, [r7, #40]	@ 0x28
	filter.FilterBank = 2;
 800091c:	2302      	movs	r3, #2
 800091e:	61fb      	str	r3, [r7, #28]
	filter.FilterFIFOAssignment = CAN_HIGH_PRIORITY_FIFO;
 8000920:	2301      	movs	r3, #1
 8000922:	61bb      	str	r3, [r7, #24]
	filter.FilterIdHigh = ((0x3FAU)<<5);
 8000924:	f647 7340 	movw	r3, #32576	@ 0x7f40
 8000928:	60bb      	str	r3, [r7, #8]
	filter.FilterIdLow = (0x000U);
 800092a:	2300      	movs	r3, #0
 800092c:	60fb      	str	r3, [r7, #12]
	filter.FilterMaskIdHigh = ((0x3FAU)<<5);
 800092e:	f647 7340 	movw	r3, #32576	@ 0x7f40
 8000932:	613b      	str	r3, [r7, #16]
	filter.FilterMaskIdLow = (0x000U);
 8000934:	2300      	movs	r3, #0
 8000936:	617b      	str	r3, [r7, #20]
	filter.FilterMode = CAN_FILTERMODE_IDLIST;
 8000938:	2301      	movs	r3, #1
 800093a:	623b      	str	r3, [r7, #32]
	filter.FilterScale = CAN_FILTERSCALE_32BIT;
 800093c:	2301      	movs	r3, #1
 800093e:	627b      	str	r3, [r7, #36]	@ 0x24
	filter.SlaveStartFilterBank = 14;
 8000940:	230e      	movs	r3, #14
 8000942:	62fb      	str	r3, [r7, #44]	@ 0x2c

	if (HAL_CAN_ConfigFilter(hcan, &filter) != HAL_OK)
 8000944:	f107 0308 	add.w	r3, r7, #8
 8000948:	4619      	mov	r1, r3
 800094a:	6878      	ldr	r0, [r7, #4]
 800094c:	f002 ff50 	bl	80037f0 <HAL_CAN_ConfigFilter>
 8000950:	4603      	mov	r3, r0
 8000952:	2b00      	cmp	r3, #0
 8000954:	d001      	beq.n	800095a <configInverterRPMCANFilter+0x4a>
	{
		Error_Handler();
 8000956:	f001 fc8f 	bl	8002278 <Error_Handler>
	}
}
 800095a:	bf00      	nop
 800095c:	3730      	adds	r7, #48	@ 0x30
 800095e:	46bd      	mov	sp, r7
 8000960:	bd80      	pop	{r7, pc}

08000962 <configInverterTempCANFilter>:

void configInverterTempCANFilter(CAN_HandleTypeDef* hcan)
{
 8000962:	b580      	push	{r7, lr}
 8000964:	b08c      	sub	sp, #48	@ 0x30
 8000966:	af00      	add	r7, sp, #0
 8000968:	6078      	str	r0, [r7, #4]
	CAN_FilterTypeDef filter;

	filter.FilterActivation = CAN_FILTER_ENABLE;
 800096a:	2301      	movs	r3, #1
 800096c:	62bb      	str	r3, [r7, #40]	@ 0x28
	filter.FilterBank = 3;
 800096e:	2303      	movs	r3, #3
 8000970:	61fb      	str	r3, [r7, #28]
	filter.FilterFIFOAssignment = CAN_LOW_PRIORITY_FIFO;
 8000972:	2300      	movs	r3, #0
 8000974:	61bb      	str	r3, [r7, #24]
	filter.FilterIdHigh = ((0xBAU)<<5);
 8000976:	f44f 53ba 	mov.w	r3, #5952	@ 0x1740
 800097a:	60bb      	str	r3, [r7, #8]
	filter.FilterIdLow = (0x000U);
 800097c:	2300      	movs	r3, #0
 800097e:	60fb      	str	r3, [r7, #12]
	filter.FilterMaskIdHigh = ((0x0BAU)<<5);
 8000980:	f44f 53ba 	mov.w	r3, #5952	@ 0x1740
 8000984:	613b      	str	r3, [r7, #16]
	filter.FilterMaskIdLow = (0x000U);
 8000986:	2300      	movs	r3, #0
 8000988:	617b      	str	r3, [r7, #20]
	filter.FilterMode = CAN_FILTERMODE_IDMASK;
 800098a:	2300      	movs	r3, #0
 800098c:	623b      	str	r3, [r7, #32]
	filter.FilterScale = CAN_FILTERSCALE_32BIT;
 800098e:	2301      	movs	r3, #1
 8000990:	627b      	str	r3, [r7, #36]	@ 0x24
	filter.SlaveStartFilterBank = 14;
 8000992:	230e      	movs	r3, #14
 8000994:	62fb      	str	r3, [r7, #44]	@ 0x2c

	if (HAL_CAN_ConfigFilter(hcan, &filter) != HAL_OK)
 8000996:	f107 0308 	add.w	r3, r7, #8
 800099a:	4619      	mov	r1, r3
 800099c:	6878      	ldr	r0, [r7, #4]
 800099e:	f002 ff27 	bl	80037f0 <HAL_CAN_ConfigFilter>
 80009a2:	4603      	mov	r3, r0
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d001      	beq.n	80009ac <configInverterTempCANFilter+0x4a>
	{
		Error_Handler();
 80009a8:	f001 fc66 	bl	8002278 <Error_Handler>
	}
}
 80009ac:	bf00      	nop
 80009ae:	3730      	adds	r7, #48	@ 0x30
 80009b0:	46bd      	mov	sp, r7
 80009b2:	bd80      	pop	{r7, pc}

080009b4 <configBMSDataFilter>:

void configBMSDataFilter(CAN_HandleTypeDef* hcan)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b08c      	sub	sp, #48	@ 0x30
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	6078      	str	r0, [r7, #4]
	CAN_FilterTypeDef filter;

	filter.FilterActivation = CAN_FILTER_ENABLE;
 80009bc:	2301      	movs	r3, #1
 80009be:	62bb      	str	r3, [r7, #40]	@ 0x28
	filter.FilterBank = 4;
 80009c0:	2304      	movs	r3, #4
 80009c2:	61fb      	str	r3, [r7, #28]
	filter.FilterFIFOAssignment = CAN_HIGH_PRIORITY_FIFO;
 80009c4:	2301      	movs	r3, #1
 80009c6:	61bb      	str	r3, [r7, #24]
	filter.FilterIdHigh = ((0x6B0U)<<5);
 80009c8:	f44f 4356 	mov.w	r3, #54784	@ 0xd600
 80009cc:	60bb      	str	r3, [r7, #8]
	filter.FilterIdLow = (0x000U);
 80009ce:	2300      	movs	r3, #0
 80009d0:	60fb      	str	r3, [r7, #12]
	filter.FilterMaskIdHigh = ((0x6B0U)<<5);
 80009d2:	f44f 4356 	mov.w	r3, #54784	@ 0xd600
 80009d6:	613b      	str	r3, [r7, #16]
	filter.FilterMaskIdLow = (0x000U);
 80009d8:	2300      	movs	r3, #0
 80009da:	617b      	str	r3, [r7, #20]
	filter.FilterMode = CAN_FILTERMODE_IDLIST;
 80009dc:	2301      	movs	r3, #1
 80009de:	623b      	str	r3, [r7, #32]
	filter.FilterScale = CAN_FILTERSCALE_32BIT;
 80009e0:	2301      	movs	r3, #1
 80009e2:	627b      	str	r3, [r7, #36]	@ 0x24
	filter.SlaveStartFilterBank = 14;
 80009e4:	230e      	movs	r3, #14
 80009e6:	62fb      	str	r3, [r7, #44]	@ 0x2c

	if (HAL_CAN_ConfigFilter(hcan, &filter) != HAL_OK)
 80009e8:	f107 0308 	add.w	r3, r7, #8
 80009ec:	4619      	mov	r1, r3
 80009ee:	6878      	ldr	r0, [r7, #4]
 80009f0:	f002 fefe 	bl	80037f0 <HAL_CAN_ConfigFilter>
 80009f4:	4603      	mov	r3, r0
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d001      	beq.n	80009fe <configBMSDataFilter+0x4a>
	{
		Error_Handler();
 80009fa:	f001 fc3d 	bl	8002278 <Error_Handler>
	}
}
 80009fe:	bf00      	nop
 8000a00:	3730      	adds	r7, #48	@ 0x30
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bd80      	pop	{r7, pc}
	...

08000a08 <sendTPSLimits>:

void sendTPSLimits(CAN_HandleTypeDef* hcan, VCU_TPS_Limits_t* _tpsLimits)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b08c      	sub	sp, #48	@ 0x30
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	6078      	str	r0, [r7, #4]
 8000a10:	6039      	str	r1, [r7, #0]
	CAN_TxHeaderTypeDef txHeader;
	uint8_t data[8] = { (0x00U), (0x00U), (0x00U), (0x00U), (0x00U), (0x00U), (0x00U), (0x00U) };
 8000a12:	4a1c      	ldr	r2, [pc, #112]	@ (8000a84 <sendTPSLimits+0x7c>)
 8000a14:	f107 0310 	add.w	r3, r7, #16
 8000a18:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000a1c:	e883 0003 	stmia.w	r3, {r0, r1}
	uint32_t mailbox;
	uint8_t len, ide;

	Pack_VCU_TPS_Limits_TPS(_tpsLimits, data, &len, &ide);
 8000a20:	f107 030a 	add.w	r3, r7, #10
 8000a24:	f107 020b 	add.w	r2, r7, #11
 8000a28:	f107 0110 	add.w	r1, r7, #16
 8000a2c:	6838      	ldr	r0, [r7, #0]
 8000a2e:	f002 f88d 	bl	8002b4c <Pack_VCU_TPS_Limits_TPS>

	txHeader.DLC = VCU_TPS_Limits_DLC;
 8000a32:	2308      	movs	r3, #8
 8000a34:	62bb      	str	r3, [r7, #40]	@ 0x28
	txHeader.ExtId = DISABLE;
 8000a36:	2300      	movs	r3, #0
 8000a38:	61fb      	str	r3, [r7, #28]
	txHeader.IDE = ide;
 8000a3a:	7abb      	ldrb	r3, [r7, #10]
 8000a3c:	623b      	str	r3, [r7, #32]
	txHeader.RTR = CAN_RTR_DATA;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	627b      	str	r3, [r7, #36]	@ 0x24
	txHeader.StdId = VCU_TPS_Limits_CANID;
 8000a42:	f44f 7341 	mov.w	r3, #772	@ 0x304
 8000a46:	61bb      	str	r3, [r7, #24]
	txHeader.TransmitGlobalTime = DISABLE;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c

	if (HAL_CAN_AddTxMessage(hcan, &txHeader, data, &mailbox) != HAL_OK)
 8000a4e:	f107 030c 	add.w	r3, r7, #12
 8000a52:	f107 0210 	add.w	r2, r7, #16
 8000a56:	f107 0118 	add.w	r1, r7, #24
 8000a5a:	6878      	ldr	r0, [r7, #4]
 8000a5c:	f002 fff8 	bl	8003a50 <HAL_CAN_AddTxMessage>
 8000a60:	4603      	mov	r3, r0
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d001      	beq.n	8000a6a <sendTPSLimits+0x62>
	{
		Error_Handler();
 8000a66:	f001 fc07 	bl	8002278 <Error_Handler>
	}

	while (HAL_CAN_IsTxMessagePending(hcan, mailbox));
 8000a6a:	bf00      	nop
 8000a6c:	68fb      	ldr	r3, [r7, #12]
 8000a6e:	4619      	mov	r1, r3
 8000a70:	6878      	ldr	r0, [r7, #4]
 8000a72:	f003 f8bd 	bl	8003bf0 <HAL_CAN_IsTxMessagePending>
 8000a76:	4603      	mov	r3, r0
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d1f7      	bne.n	8000a6c <sendTPSLimits+0x64>

	return;
 8000a7c:	bf00      	nop
}
 8000a7e:	3730      	adds	r7, #48	@ 0x30
 8000a80:	46bd      	mov	sp, r7
 8000a82:	bd80      	pop	{r7, pc}
 8000a84:	08009888 	.word	0x08009888

08000a88 <sendTPSCurrentValue>:

void sendTPSCurrentValue(CAN_HandleTypeDef* hcan, VCU_TPS_CurrentValue_t* _tpsCurrentVal)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b08c      	sub	sp, #48	@ 0x30
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
 8000a90:	6039      	str	r1, [r7, #0]
	CAN_TxHeaderTypeDef txHeader;
	uint8_t data[4] = { (0x00U), (0x00U), (0x00U), (0x00U) };
 8000a92:	2300      	movs	r3, #0
 8000a94:	617b      	str	r3, [r7, #20]
	uint32_t mailbox;
	uint8_t len, ide;

	Pack_VCU_TPS_CurrentValue_TPS(_tpsCurrentVal, data, &len, &ide);
 8000a96:	f107 030e 	add.w	r3, r7, #14
 8000a9a:	f107 020f 	add.w	r2, r7, #15
 8000a9e:	f107 0114 	add.w	r1, r7, #20
 8000aa2:	6838      	ldr	r0, [r7, #0]
 8000aa4:	f002 f8d3 	bl	8002c4e <Pack_VCU_TPS_CurrentValue_TPS>

	txHeader.DLC = VCU_TPS_CurrentValue_DLC;
 8000aa8:	2304      	movs	r3, #4
 8000aaa:	62bb      	str	r3, [r7, #40]	@ 0x28
	txHeader.ExtId = DISABLE;
 8000aac:	2300      	movs	r3, #0
 8000aae:	61fb      	str	r3, [r7, #28]
	txHeader.IDE = ide;
 8000ab0:	7bbb      	ldrb	r3, [r7, #14]
 8000ab2:	623b      	str	r3, [r7, #32]
	txHeader.RTR = CAN_RTR_DATA;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	627b      	str	r3, [r7, #36]	@ 0x24
	txHeader.StdId = VCU_TPS_CurrentValue_CANID;
 8000ab8:	f240 3305 	movw	r3, #773	@ 0x305
 8000abc:	61bb      	str	r3, [r7, #24]
	txHeader.TransmitGlobalTime = DISABLE;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c

	if (HAL_CAN_AddTxMessage(hcan, &txHeader, data, &mailbox) != HAL_OK)
 8000ac4:	f107 0310 	add.w	r3, r7, #16
 8000ac8:	f107 0214 	add.w	r2, r7, #20
 8000acc:	f107 0118 	add.w	r1, r7, #24
 8000ad0:	6878      	ldr	r0, [r7, #4]
 8000ad2:	f002 ffbd 	bl	8003a50 <HAL_CAN_AddTxMessage>
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d001      	beq.n	8000ae0 <sendTPSCurrentValue+0x58>
	{
		Error_Handler();
 8000adc:	f001 fbcc 	bl	8002278 <Error_Handler>
	}

	while (HAL_CAN_IsTxMessagePending(hcan, mailbox));
 8000ae0:	bf00      	nop
 8000ae2:	693b      	ldr	r3, [r7, #16]
 8000ae4:	4619      	mov	r1, r3
 8000ae6:	6878      	ldr	r0, [r7, #4]
 8000ae8:	f003 f882 	bl	8003bf0 <HAL_CAN_IsTxMessagePending>
 8000aec:	4603      	mov	r3, r0
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d1f7      	bne.n	8000ae2 <sendTPSCurrentValue+0x5a>

	return;
 8000af2:	bf00      	nop
}
 8000af4:	3730      	adds	r7, #48	@ 0x30
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bd80      	pop	{r7, pc}

08000afa <Pack_ECU_NMT_command__DO_QUASAR_CANopen>:
  _m->ECU_NMT_NodeId = (_d[1] & (0xFFU));
  return ECU_NMT_command_CANID;
}

uint32_t Pack_ECU_NMT_command__DO_QUASAR_CANopen(const ECU_NMT_command_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide)
{
 8000afa:	b480      	push	{r7}
 8000afc:	b087      	sub	sp, #28
 8000afe:	af00      	add	r7, sp, #0
 8000b00:	60f8      	str	r0, [r7, #12]
 8000b02:	60b9      	str	r1, [r7, #8]
 8000b04:	607a      	str	r2, [r7, #4]
 8000b06:	603b      	str	r3, [r7, #0]
  uint8_t i; for (i = 0; i < ECU_NMT_command_DLC; _d[i++] = 0);
 8000b08:	2300      	movs	r3, #0
 8000b0a:	75fb      	strb	r3, [r7, #23]
 8000b0c:	e007      	b.n	8000b1e <Pack_ECU_NMT_command__DO_QUASAR_CANopen+0x24>
 8000b0e:	7dfb      	ldrb	r3, [r7, #23]
 8000b10:	1c5a      	adds	r2, r3, #1
 8000b12:	75fa      	strb	r2, [r7, #23]
 8000b14:	461a      	mov	r2, r3
 8000b16:	68bb      	ldr	r3, [r7, #8]
 8000b18:	4413      	add	r3, r2
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	701a      	strb	r2, [r3, #0]
 8000b1e:	7dfb      	ldrb	r3, [r7, #23]
 8000b20:	2b01      	cmp	r3, #1
 8000b22:	d9f4      	bls.n	8000b0e <Pack_ECU_NMT_command__DO_QUASAR_CANopen+0x14>

  _d[0] |= (_m->ECU_NMT_CommandSpecifier & (0xFFU));
 8000b24:	68bb      	ldr	r3, [r7, #8]
 8000b26:	781a      	ldrb	r2, [r3, #0]
 8000b28:	68fb      	ldr	r3, [r7, #12]
 8000b2a:	781b      	ldrb	r3, [r3, #0]
 8000b2c:	4313      	orrs	r3, r2
 8000b2e:	b2da      	uxtb	r2, r3
 8000b30:	68bb      	ldr	r3, [r7, #8]
 8000b32:	701a      	strb	r2, [r3, #0]
  _d[1] |= (_m->ECU_NMT_NodeId & (0xFFU));
 8000b34:	68bb      	ldr	r3, [r7, #8]
 8000b36:	3301      	adds	r3, #1
 8000b38:	7819      	ldrb	r1, [r3, #0]
 8000b3a:	68fb      	ldr	r3, [r7, #12]
 8000b3c:	785a      	ldrb	r2, [r3, #1]
 8000b3e:	68bb      	ldr	r3, [r7, #8]
 8000b40:	3301      	adds	r3, #1
 8000b42:	430a      	orrs	r2, r1
 8000b44:	b2d2      	uxtb	r2, r2
 8000b46:	701a      	strb	r2, [r3, #0]
  *_len = 2; *_ide = 0;
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	2202      	movs	r2, #2
 8000b4c:	701a      	strb	r2, [r3, #0]
 8000b4e:	683b      	ldr	r3, [r7, #0]
 8000b50:	2200      	movs	r2, #0
 8000b52:	701a      	strb	r2, [r3, #0]
  return ECU_NMT_command_CANID;
 8000b54:	2300      	movs	r3, #0
}
 8000b56:	4618      	mov	r0, r3
 8000b58:	371c      	adds	r7, #28
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b60:	4770      	bx	lr

08000b62 <Pack_ECU_SYNC__DO_QUASAR_CANopen>:
  _m->ECU_SYNCH_Counter = (_d[0] & (0xFFU));
  return ECU_SYNC_CANID;
}

uint32_t Pack_ECU_SYNC__DO_QUASAR_CANopen(const ECU_SYNC_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide)
{
 8000b62:	b480      	push	{r7}
 8000b64:	b087      	sub	sp, #28
 8000b66:	af00      	add	r7, sp, #0
 8000b68:	60f8      	str	r0, [r7, #12]
 8000b6a:	60b9      	str	r1, [r7, #8]
 8000b6c:	607a      	str	r2, [r7, #4]
 8000b6e:	603b      	str	r3, [r7, #0]
  uint8_t i; for (i = 0; i < ECU_SYNC_DLC; _d[i++] = 0);
 8000b70:	2300      	movs	r3, #0
 8000b72:	75fb      	strb	r3, [r7, #23]
 8000b74:	e007      	b.n	8000b86 <Pack_ECU_SYNC__DO_QUASAR_CANopen+0x24>
 8000b76:	7dfb      	ldrb	r3, [r7, #23]
 8000b78:	1c5a      	adds	r2, r3, #1
 8000b7a:	75fa      	strb	r2, [r7, #23]
 8000b7c:	461a      	mov	r2, r3
 8000b7e:	68bb      	ldr	r3, [r7, #8]
 8000b80:	4413      	add	r3, r2
 8000b82:	2200      	movs	r2, #0
 8000b84:	701a      	strb	r2, [r3, #0]
 8000b86:	7dfb      	ldrb	r3, [r7, #23]
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d0f4      	beq.n	8000b76 <Pack_ECU_SYNC__DO_QUASAR_CANopen+0x14>

  _d[0] |= (_m->ECU_SYNCH_Counter & (0xFFU));
 8000b8c:	68bb      	ldr	r3, [r7, #8]
 8000b8e:	781a      	ldrb	r2, [r3, #0]
 8000b90:	68fb      	ldr	r3, [r7, #12]
 8000b92:	781b      	ldrb	r3, [r3, #0]
 8000b94:	4313      	orrs	r3, r2
 8000b96:	b2da      	uxtb	r2, r3
 8000b98:	68bb      	ldr	r3, [r7, #8]
 8000b9a:	701a      	strb	r2, [r3, #0]
  *_len = 1; *_ide = 0;
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	2201      	movs	r2, #1
 8000ba0:	701a      	strb	r2, [r3, #0]
 8000ba2:	683b      	ldr	r3, [r7, #0]
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	701a      	strb	r2, [r3, #0]
  return ECU_SYNC_CANID;
 8000ba8:	2380      	movs	r3, #128	@ 0x80
}
 8000baa:	4618      	mov	r0, r3
 8000bac:	371c      	adds	r7, #28
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb4:	4770      	bx	lr

08000bb6 <Unpack_EMD_TxPDO_5__DO_QUASAR_CANopen>:

// --------------------------------------------------------------------------
uint32_t Unpack_EMD_TxPDO_5__DO_QUASAR_CANopen(EMD_TxPDO_5_t* _m, const uint8_t* _d, uint8_t dlc_)
{
 8000bb6:	b480      	push	{r7}
 8000bb8:	b085      	sub	sp, #20
 8000bba:	af00      	add	r7, sp, #0
 8000bbc:	60f8      	str	r0, [r7, #12]
 8000bbe:	60b9      	str	r1, [r7, #8]
 8000bc0:	4613      	mov	r3, r2
 8000bc2:	71fb      	strb	r3, [r7, #7]
  _m->EMD_ACT_MaxJunctionTemp = ((_d[0] & (0xFFU))) - 40;
 8000bc4:	68bb      	ldr	r3, [r7, #8]
 8000bc6:	781b      	ldrb	r3, [r3, #0]
 8000bc8:	3b28      	subs	r3, #40	@ 0x28
 8000bca:	b29b      	uxth	r3, r3
 8000bcc:	b21a      	sxth	r2, r3
 8000bce:	68fb      	ldr	r3, [r7, #12]
 8000bd0:	801a      	strh	r2, [r3, #0]
  _m->EMD_ACT_MotorTemperature = ((_d[1] & (0xFFU))) - 40;
 8000bd2:	68bb      	ldr	r3, [r7, #8]
 8000bd4:	3301      	adds	r3, #1
 8000bd6:	781b      	ldrb	r3, [r3, #0]
 8000bd8:	3b28      	subs	r3, #40	@ 0x28
 8000bda:	b29b      	uxth	r3, r3
 8000bdc:	b21a      	sxth	r2, r3
 8000bde:	68fb      	ldr	r3, [r7, #12]
 8000be0:	805a      	strh	r2, [r3, #2]
  _m->EMD_ACT_ControlStrategy = (_d[2] & (0x07U));
 8000be2:	68bb      	ldr	r3, [r7, #8]
 8000be4:	3302      	adds	r3, #2
 8000be6:	781b      	ldrb	r3, [r3, #0]
 8000be8:	f003 0307 	and.w	r3, r3, #7
 8000bec:	b2da      	uxtb	r2, r3
 8000bee:	68fb      	ldr	r3, [r7, #12]
 8000bf0:	711a      	strb	r2, [r3, #4]
  _m->EMD_ACT_MotorTemperature_VAL = ((_d[2] >> 3) & (0x03U));
 8000bf2:	68bb      	ldr	r3, [r7, #8]
 8000bf4:	3302      	adds	r3, #2
 8000bf6:	781b      	ldrb	r3, [r3, #0]
 8000bf8:	08db      	lsrs	r3, r3, #3
 8000bfa:	b2db      	uxtb	r3, r3
 8000bfc:	f003 0303 	and.w	r3, r3, #3
 8000c00:	b2da      	uxtb	r2, r3
 8000c02:	68fb      	ldr	r3, [r7, #12]
 8000c04:	715a      	strb	r2, [r3, #5]
  _m->EMD_ACT_MaxJunctionTemp_VAL = ((_d[2] >> 5) & (0x03U));
 8000c06:	68bb      	ldr	r3, [r7, #8]
 8000c08:	3302      	adds	r3, #2
 8000c0a:	781b      	ldrb	r3, [r3, #0]
 8000c0c:	095b      	lsrs	r3, r3, #5
 8000c0e:	b2db      	uxtb	r3, r3
 8000c10:	f003 0303 	and.w	r3, r3, #3
 8000c14:	b2da      	uxtb	r2, r3
 8000c16:	68fb      	ldr	r3, [r7, #12]
 8000c18:	719a      	strb	r2, [r3, #6]
  _m->EMD_MSGCNT_TxPDO5 = (_d[3] & (0x0FU));
 8000c1a:	68bb      	ldr	r3, [r7, #8]
 8000c1c:	3303      	adds	r3, #3
 8000c1e:	781b      	ldrb	r3, [r3, #0]
 8000c20:	f003 030f 	and.w	r3, r3, #15
 8000c24:	b2da      	uxtb	r2, r3
 8000c26:	68fb      	ldr	r3, [r7, #12]
 8000c28:	71da      	strb	r2, [r3, #7]
  return EMD_TxPDO_5_CANID;
 8000c2a:	f44f 73dd 	mov.w	r3, #442	@ 0x1ba
}
 8000c2e:	4618      	mov	r0, r3
 8000c30:	3714      	adds	r7, #20
 8000c32:	46bd      	mov	sp, r7
 8000c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c38:	4770      	bx	lr

08000c3a <Unpack_EMD_TxPDO_3__DO_QUASAR_CANopen>:
  return EMD_RxPDO_2_CANID;
}

// --------------------------------------------------------------------------
uint32_t Unpack_EMD_TxPDO_3__DO_QUASAR_CANopen(EMD_TxPDO_3_t* _m, const uint8_t* _d, uint8_t dlc_)
{
 8000c3a:	b480      	push	{r7}
 8000c3c:	b085      	sub	sp, #20
 8000c3e:	af00      	add	r7, sp, #0
 8000c40:	60f8      	str	r0, [r7, #12]
 8000c42:	60b9      	str	r1, [r7, #8]
 8000c44:	4613      	mov	r3, r2
 8000c46:	71fb      	strb	r3, [r7, #7]
  _m->EMD_ACT_MotorSpeed = (((_d[1] & (0xFFU)) << 8) | (_d[0] & (0xFFU))) - 32768;
 8000c48:	68bb      	ldr	r3, [r7, #8]
 8000c4a:	3301      	adds	r3, #1
 8000c4c:	781b      	ldrb	r3, [r3, #0]
 8000c4e:	021b      	lsls	r3, r3, #8
 8000c50:	68ba      	ldr	r2, [r7, #8]
 8000c52:	7812      	ldrb	r2, [r2, #0]
 8000c54:	4313      	orrs	r3, r2
 8000c56:	f5a3 4300 	sub.w	r3, r3, #32768	@ 0x8000
 8000c5a:	461a      	mov	r2, r3
 8000c5c:	68fb      	ldr	r3, [r7, #12]
 8000c5e:	601a      	str	r2, [r3, #0]
  _m->EMD_ACT_MechanicPower = (((_d[3] & (0xFFU)) << 8) | (_d[2] & (0xFFU))) - 32768;
 8000c60:	68bb      	ldr	r3, [r7, #8]
 8000c62:	3303      	adds	r3, #3
 8000c64:	781b      	ldrb	r3, [r3, #0]
 8000c66:	021b      	lsls	r3, r3, #8
 8000c68:	68ba      	ldr	r2, [r7, #8]
 8000c6a:	3202      	adds	r2, #2
 8000c6c:	7812      	ldrb	r2, [r2, #0]
 8000c6e:	4313      	orrs	r3, r2
 8000c70:	f5a3 4300 	sub.w	r3, r3, #32768	@ 0x8000
 8000c74:	461a      	mov	r2, r3
 8000c76:	68fb      	ldr	r3, [r7, #12]
 8000c78:	605a      	str	r2, [r3, #4]
  _m->EMD_ACT_DcLinkPower = (((_d[5] & (0xFFU)) << 8) | (_d[4] & (0xFFU))) - 32768;
 8000c7a:	68bb      	ldr	r3, [r7, #8]
 8000c7c:	3305      	adds	r3, #5
 8000c7e:	781b      	ldrb	r3, [r3, #0]
 8000c80:	021b      	lsls	r3, r3, #8
 8000c82:	68ba      	ldr	r2, [r7, #8]
 8000c84:	3204      	adds	r2, #4
 8000c86:	7812      	ldrb	r2, [r2, #0]
 8000c88:	4313      	orrs	r3, r2
 8000c8a:	f5a3 4300 	sub.w	r3, r3, #32768	@ 0x8000
 8000c8e:	461a      	mov	r2, r3
 8000c90:	68fb      	ldr	r3, [r7, #12]
 8000c92:	609a      	str	r2, [r3, #8]
  _m->EMD_MSGCNT_TxPDO3 = (_d[6] & (0x0FU));
 8000c94:	68bb      	ldr	r3, [r7, #8]
 8000c96:	3306      	adds	r3, #6
 8000c98:	781b      	ldrb	r3, [r3, #0]
 8000c9a:	f003 030f 	and.w	r3, r3, #15
 8000c9e:	b2da      	uxtb	r2, r3
 8000ca0:	68fb      	ldr	r3, [r7, #12]
 8000ca2:	731a      	strb	r2, [r3, #12]
  _m->EMD_ACT_MechanicPower_VAL = ((_d[6] >> 4) & (0x03U));
 8000ca4:	68bb      	ldr	r3, [r7, #8]
 8000ca6:	3306      	adds	r3, #6
 8000ca8:	781b      	ldrb	r3, [r3, #0]
 8000caa:	091b      	lsrs	r3, r3, #4
 8000cac:	b2db      	uxtb	r3, r3
 8000cae:	f003 0303 	and.w	r3, r3, #3
 8000cb2:	b2da      	uxtb	r2, r3
 8000cb4:	68fb      	ldr	r3, [r7, #12]
 8000cb6:	735a      	strb	r2, [r3, #13]
  _m->EMD_ACT_MotorSpeed_VAL = ((_d[6] >> 6) & (0x03U));
 8000cb8:	68bb      	ldr	r3, [r7, #8]
 8000cba:	3306      	adds	r3, #6
 8000cbc:	781b      	ldrb	r3, [r3, #0]
 8000cbe:	099b      	lsrs	r3, r3, #6
 8000cc0:	b2da      	uxtb	r2, r3
 8000cc2:	68fb      	ldr	r3, [r7, #12]
 8000cc4:	739a      	strb	r2, [r3, #14]
  _m->EMD_ACT_DcLinkPower_VAL = (_d[7] & (0x03U));
 8000cc6:	68bb      	ldr	r3, [r7, #8]
 8000cc8:	3307      	adds	r3, #7
 8000cca:	781b      	ldrb	r3, [r3, #0]
 8000ccc:	f003 0303 	and.w	r3, r3, #3
 8000cd0:	b2da      	uxtb	r2, r3
 8000cd2:	68fb      	ldr	r3, [r7, #12]
 8000cd4:	73da      	strb	r2, [r3, #15]
  return EMD_TxPDO_3_CANID;
 8000cd6:	f240 33fa 	movw	r3, #1018	@ 0x3fa
}
 8000cda:	4618      	mov	r0, r3
 8000cdc:	3714      	adds	r7, #20
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce4:	4770      	bx	lr

08000ce6 <Pack_EMD_RxPDO_3__DO_QUASAR_CANopen>:
  _m->EMD_CMD_DigitalOutput1 = ((_d[5] >> 7) & (0x01U));
  return EMD_RxPDO_3_CANID;
}

uint32_t Pack_EMD_RxPDO_3__DO_QUASAR_CANopen(const EMD_RxPDO_3_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide)
{
 8000ce6:	b480      	push	{r7}
 8000ce8:	b087      	sub	sp, #28
 8000cea:	af00      	add	r7, sp, #0
 8000cec:	60f8      	str	r0, [r7, #12]
 8000cee:	60b9      	str	r1, [r7, #8]
 8000cf0:	607a      	str	r2, [r7, #4]
 8000cf2:	603b      	str	r3, [r7, #0]
  uint8_t i; for (i = 0; i < EMD_RxPDO_3_DLC; _d[i++] = 0);
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	75fb      	strb	r3, [r7, #23]
 8000cf8:	e007      	b.n	8000d0a <Pack_EMD_RxPDO_3__DO_QUASAR_CANopen+0x24>
 8000cfa:	7dfb      	ldrb	r3, [r7, #23]
 8000cfc:	1c5a      	adds	r2, r3, #1
 8000cfe:	75fa      	strb	r2, [r7, #23]
 8000d00:	461a      	mov	r2, r3
 8000d02:	68bb      	ldr	r3, [r7, #8]
 8000d04:	4413      	add	r3, r2
 8000d06:	2200      	movs	r2, #0
 8000d08:	701a      	strb	r2, [r3, #0]
 8000d0a:	7dfb      	ldrb	r3, [r7, #23]
 8000d0c:	2b05      	cmp	r3, #5
 8000d0e:	d9f4      	bls.n	8000cfa <Pack_EMD_RxPDO_3__DO_QUASAR_CANopen+0x14>

  _d[0] |= (_m->EMD_CMD_TorqueRefLim & (0xFFU));
 8000d10:	68bb      	ldr	r3, [r7, #8]
 8000d12:	781a      	ldrb	r2, [r3, #0]
 8000d14:	68fb      	ldr	r3, [r7, #12]
 8000d16:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000d1a:	b2db      	uxtb	r3, r3
 8000d1c:	4313      	orrs	r3, r2
 8000d1e:	b2da      	uxtb	r2, r3
 8000d20:	68bb      	ldr	r3, [r7, #8]
 8000d22:	701a      	strb	r2, [r3, #0]
  _d[1] |= ((_m->EMD_CMD_TorqueRefLim >> 8) & (0x3FU)) | ((_m->EMD_CMD_TorqueRefLim_VAL & (0x03U)) << 6);
 8000d24:	68bb      	ldr	r3, [r7, #8]
 8000d26:	3301      	adds	r3, #1
 8000d28:	7819      	ldrb	r1, [r3, #0]
 8000d2a:	68fb      	ldr	r3, [r7, #12]
 8000d2c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000d30:	121b      	asrs	r3, r3, #8
 8000d32:	b21b      	sxth	r3, r3
 8000d34:	b2db      	uxtb	r3, r3
 8000d36:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8000d3a:	b2da      	uxtb	r2, r3
 8000d3c:	68fb      	ldr	r3, [r7, #12]
 8000d3e:	789b      	ldrb	r3, [r3, #2]
 8000d40:	019b      	lsls	r3, r3, #6
 8000d42:	b2db      	uxtb	r3, r3
 8000d44:	4313      	orrs	r3, r2
 8000d46:	b2da      	uxtb	r2, r3
 8000d48:	68bb      	ldr	r3, [r7, #8]
 8000d4a:	3301      	adds	r3, #1
 8000d4c:	430a      	orrs	r2, r1
 8000d4e:	b2d2      	uxtb	r2, r2
 8000d50:	701a      	strb	r2, [r3, #0]
  _d[2] |= (_m->EMD_CMD_SpeedRefLim & (0xFFU));
 8000d52:	68bb      	ldr	r3, [r7, #8]
 8000d54:	3302      	adds	r3, #2
 8000d56:	7819      	ldrb	r1, [r3, #0]
 8000d58:	68fb      	ldr	r3, [r7, #12]
 8000d5a:	685b      	ldr	r3, [r3, #4]
 8000d5c:	b2da      	uxtb	r2, r3
 8000d5e:	68bb      	ldr	r3, [r7, #8]
 8000d60:	3302      	adds	r3, #2
 8000d62:	430a      	orrs	r2, r1
 8000d64:	b2d2      	uxtb	r2, r2
 8000d66:	701a      	strb	r2, [r3, #0]
  _d[3] |= ((_m->EMD_CMD_SpeedRefLim >> 8) & (0xFFU));
 8000d68:	68bb      	ldr	r3, [r7, #8]
 8000d6a:	3303      	adds	r3, #3
 8000d6c:	7819      	ldrb	r1, [r3, #0]
 8000d6e:	68fb      	ldr	r3, [r7, #12]
 8000d70:	685b      	ldr	r3, [r3, #4]
 8000d72:	121b      	asrs	r3, r3, #8
 8000d74:	b2da      	uxtb	r2, r3
 8000d76:	68bb      	ldr	r3, [r7, #8]
 8000d78:	3303      	adds	r3, #3
 8000d7a:	430a      	orrs	r2, r1
 8000d7c:	b2d2      	uxtb	r2, r2
 8000d7e:	701a      	strb	r2, [r3, #0]
  _d[4] |= (_m->EMD_CMD_ControlMode & (0x0FU)) | ((_m->EMD_MSGCNT_RxPDO3 & (0x0FU)) << 4);
 8000d80:	68bb      	ldr	r3, [r7, #8]
 8000d82:	3304      	adds	r3, #4
 8000d84:	7819      	ldrb	r1, [r3, #0]
 8000d86:	68fb      	ldr	r3, [r7, #12]
 8000d88:	7a1b      	ldrb	r3, [r3, #8]
 8000d8a:	f003 030f 	and.w	r3, r3, #15
 8000d8e:	b2da      	uxtb	r2, r3
 8000d90:	68fb      	ldr	r3, [r7, #12]
 8000d92:	7a5b      	ldrb	r3, [r3, #9]
 8000d94:	011b      	lsls	r3, r3, #4
 8000d96:	b2db      	uxtb	r3, r3
 8000d98:	4313      	orrs	r3, r2
 8000d9a:	b2da      	uxtb	r2, r3
 8000d9c:	68bb      	ldr	r3, [r7, #8]
 8000d9e:	3304      	adds	r3, #4
 8000da0:	430a      	orrs	r2, r1
 8000da2:	b2d2      	uxtb	r2, r2
 8000da4:	701a      	strb	r2, [r3, #0]
  _d[5] |= (_m->EMD_CMD_SpeedRefLim_VAL & (0x03U)) | ((_m->EMD_CMD_ClearErrors & (0x01U)) << 2) | ((_m->EMD_CMD_RestartRequest & (0x01U)) << 3) | ((_m->EMD_CMD_ActiveDischarge & (0x01U)) << 4) | ((_m->EMD_CMD_LimitationMode & (0x01U)) << 5) | ((_m->EMD_CMD_DigitalOutput2 & (0x01U)) << 6) | ((_m->EMD_CMD_DigitalOutput1 & (0x01U)) << 7);
 8000da6:	68bb      	ldr	r3, [r7, #8]
 8000da8:	3305      	adds	r3, #5
 8000daa:	7819      	ldrb	r1, [r3, #0]
 8000dac:	68fb      	ldr	r3, [r7, #12]
 8000dae:	7a9b      	ldrb	r3, [r3, #10]
 8000db0:	f003 0303 	and.w	r3, r3, #3
 8000db4:	b2da      	uxtb	r2, r3
 8000db6:	68fb      	ldr	r3, [r7, #12]
 8000db8:	7adb      	ldrb	r3, [r3, #11]
 8000dba:	009b      	lsls	r3, r3, #2
 8000dbc:	b2db      	uxtb	r3, r3
 8000dbe:	f003 0304 	and.w	r3, r3, #4
 8000dc2:	b2db      	uxtb	r3, r3
 8000dc4:	4313      	orrs	r3, r2
 8000dc6:	b2da      	uxtb	r2, r3
 8000dc8:	68fb      	ldr	r3, [r7, #12]
 8000dca:	7b1b      	ldrb	r3, [r3, #12]
 8000dcc:	00db      	lsls	r3, r3, #3
 8000dce:	b2db      	uxtb	r3, r3
 8000dd0:	f003 0308 	and.w	r3, r3, #8
 8000dd4:	b2db      	uxtb	r3, r3
 8000dd6:	4313      	orrs	r3, r2
 8000dd8:	b2da      	uxtb	r2, r3
 8000dda:	68fb      	ldr	r3, [r7, #12]
 8000ddc:	7b5b      	ldrb	r3, [r3, #13]
 8000dde:	011b      	lsls	r3, r3, #4
 8000de0:	b2db      	uxtb	r3, r3
 8000de2:	f003 0310 	and.w	r3, r3, #16
 8000de6:	b2db      	uxtb	r3, r3
 8000de8:	4313      	orrs	r3, r2
 8000dea:	b2da      	uxtb	r2, r3
 8000dec:	68fb      	ldr	r3, [r7, #12]
 8000dee:	7b9b      	ldrb	r3, [r3, #14]
 8000df0:	015b      	lsls	r3, r3, #5
 8000df2:	b2db      	uxtb	r3, r3
 8000df4:	f003 0320 	and.w	r3, r3, #32
 8000df8:	b2db      	uxtb	r3, r3
 8000dfa:	4313      	orrs	r3, r2
 8000dfc:	b2da      	uxtb	r2, r3
 8000dfe:	68fb      	ldr	r3, [r7, #12]
 8000e00:	7bdb      	ldrb	r3, [r3, #15]
 8000e02:	019b      	lsls	r3, r3, #6
 8000e04:	b2db      	uxtb	r3, r3
 8000e06:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000e0a:	b2db      	uxtb	r3, r3
 8000e0c:	4313      	orrs	r3, r2
 8000e0e:	b2da      	uxtb	r2, r3
 8000e10:	68fb      	ldr	r3, [r7, #12]
 8000e12:	7c1b      	ldrb	r3, [r3, #16]
 8000e14:	01db      	lsls	r3, r3, #7
 8000e16:	b2db      	uxtb	r3, r3
 8000e18:	4313      	orrs	r3, r2
 8000e1a:	b2da      	uxtb	r2, r3
 8000e1c:	68bb      	ldr	r3, [r7, #8]
 8000e1e:	3305      	adds	r3, #5
 8000e20:	430a      	orrs	r2, r1
 8000e22:	b2d2      	uxtb	r2, r2
 8000e24:	701a      	strb	r2, [r3, #0]
  *_len = 6; *_ide = 0;
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	2206      	movs	r2, #6
 8000e2a:	701a      	strb	r2, [r3, #0]
 8000e2c:	683b      	ldr	r3, [r7, #0]
 8000e2e:	2200      	movs	r2, #0
 8000e30:	701a      	strb	r2, [r3, #0]
  return EMD_RxPDO_3_CANID;
 8000e32:	f240 437a 	movw	r3, #1146	@ 0x47a
}
 8000e36:	4618      	mov	r0, r3
 8000e38:	371c      	adds	r7, #28
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e40:	4770      	bx	lr

08000e42 <Unpack_IMD_Info_isolation>:
  return IMD_Response_CANID;
}

// --------------------------------------------------------------------------
uint32_t Unpack_IMD_Info_isolation(IMD_Info_t* _m, const uint8_t* _d, uint8_t dlc_)
{
 8000e42:	b480      	push	{r7}
 8000e44:	b085      	sub	sp, #20
 8000e46:	af00      	add	r7, sp, #0
 8000e48:	60f8      	str	r0, [r7, #12]
 8000e4a:	60b9      	str	r1, [r7, #8]
 8000e4c:	4613      	mov	r3, r2
 8000e4e:	71fb      	strb	r3, [r7, #7]
  _m->II_IMC_R_ISO = (int)((_d[1] & (0xFFU)) << 8) | (_d[0] & (0xFFU));
 8000e50:	68bb      	ldr	r3, [r7, #8]
 8000e52:	3301      	adds	r3, #1
 8000e54:	781b      	ldrb	r3, [r3, #0]
 8000e56:	021b      	lsls	r3, r3, #8
 8000e58:	68ba      	ldr	r2, [r7, #8]
 8000e5a:	7812      	ldrb	r2, [r2, #0]
 8000e5c:	4313      	orrs	r3, r2
 8000e5e:	461a      	mov	r2, r3
 8000e60:	68fb      	ldr	r3, [r7, #12]
 8000e62:	601a      	str	r2, [r3, #0]
  _m->II_IMC_STATUS_00_IsoFailure = (_d[2] & (0x01U));
 8000e64:	68bb      	ldr	r3, [r7, #8]
 8000e66:	3302      	adds	r3, #2
 8000e68:	781b      	ldrb	r3, [r3, #0]
 8000e6a:	f003 0301 	and.w	r3, r3, #1
 8000e6e:	b2da      	uxtb	r2, r3
 8000e70:	68fb      	ldr	r3, [r7, #12]
 8000e72:	711a      	strb	r2, [r3, #4]
  _m->II_IMC_STATUS_01_Ground = ((_d[2] >> 1) & (0x01U));
 8000e74:	68bb      	ldr	r3, [r7, #8]
 8000e76:	3302      	adds	r3, #2
 8000e78:	781b      	ldrb	r3, [r3, #0]
 8000e7a:	085b      	lsrs	r3, r3, #1
 8000e7c:	b2db      	uxtb	r3, r3
 8000e7e:	f003 0301 	and.w	r3, r3, #1
 8000e82:	b2da      	uxtb	r2, r3
 8000e84:	68fb      	ldr	r3, [r7, #12]
 8000e86:	715a      	strb	r2, [r3, #5]
  _m->II_IMC_STATUS_02_System = ((_d[2] >> 2) & (0x01U));
 8000e88:	68bb      	ldr	r3, [r7, #8]
 8000e8a:	3302      	adds	r3, #2
 8000e8c:	781b      	ldrb	r3, [r3, #0]
 8000e8e:	089b      	lsrs	r3, r3, #2
 8000e90:	b2db      	uxtb	r3, r3
 8000e92:	f003 0301 	and.w	r3, r3, #1
 8000e96:	b2da      	uxtb	r2, r3
 8000e98:	68fb      	ldr	r3, [r7, #12]
 8000e9a:	719a      	strb	r2, [r3, #6]
  _m->II_IMC_STATUS_03_Calibration = ((_d[2] >> 3) & (0x01U));
 8000e9c:	68bb      	ldr	r3, [r7, #8]
 8000e9e:	3302      	adds	r3, #2
 8000ea0:	781b      	ldrb	r3, [r3, #0]
 8000ea2:	08db      	lsrs	r3, r3, #3
 8000ea4:	b2db      	uxtb	r3, r3
 8000ea6:	f003 0301 	and.w	r3, r3, #1
 8000eaa:	b2da      	uxtb	r2, r3
 8000eac:	68fb      	ldr	r3, [r7, #12]
 8000eae:	71da      	strb	r2, [r3, #7]
  _m->II_IMC_STATUS_04_Selftest = ((_d[2] >> 4) & (0x01U));
 8000eb0:	68bb      	ldr	r3, [r7, #8]
 8000eb2:	3302      	adds	r3, #2
 8000eb4:	781b      	ldrb	r3, [r3, #0]
 8000eb6:	091b      	lsrs	r3, r3, #4
 8000eb8:	b2db      	uxtb	r3, r3
 8000eba:	f003 0301 	and.w	r3, r3, #1
 8000ebe:	b2da      	uxtb	r2, r3
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	721a      	strb	r2, [r3, #8]
  _m->II_IMC_STATUS_05_IsoWarning = ((_d[2] >> 5) & (0x01U));
 8000ec4:	68bb      	ldr	r3, [r7, #8]
 8000ec6:	3302      	adds	r3, #2
 8000ec8:	781b      	ldrb	r3, [r3, #0]
 8000eca:	095b      	lsrs	r3, r3, #5
 8000ecc:	b2db      	uxtb	r3, r3
 8000ece:	f003 0301 	and.w	r3, r3, #1
 8000ed2:	b2da      	uxtb	r2, r3
 8000ed4:	68fb      	ldr	r3, [r7, #12]
 8000ed6:	725a      	strb	r2, [r3, #9]
  _m->II_VIFC_STATUS_00_IsoMeasurement = (_d[4] & (0x01U));
 8000ed8:	68bb      	ldr	r3, [r7, #8]
 8000eda:	3304      	adds	r3, #4
 8000edc:	781b      	ldrb	r3, [r3, #0]
 8000ede:	f003 0301 	and.w	r3, r3, #1
 8000ee2:	b2da      	uxtb	r2, r3
 8000ee4:	68fb      	ldr	r3, [r7, #12]
 8000ee6:	729a      	strb	r2, [r3, #10]
  _m->II_VIFC_STATUS_01_IMC_Connection = ((_d[4] >> 1) & (0x01U));
 8000ee8:	68bb      	ldr	r3, [r7, #8]
 8000eea:	3304      	adds	r3, #4
 8000eec:	781b      	ldrb	r3, [r3, #0]
 8000eee:	085b      	lsrs	r3, r3, #1
 8000ef0:	b2db      	uxtb	r3, r3
 8000ef2:	f003 0301 	and.w	r3, r3, #1
 8000ef6:	b2da      	uxtb	r2, r3
 8000ef8:	68fb      	ldr	r3, [r7, #12]
 8000efa:	72da      	strb	r2, [r3, #11]
  _m->II_VIFC_STATUS_02_IMC_Alive = ((_d[4] >> 2) & (0x01U));
 8000efc:	68bb      	ldr	r3, [r7, #8]
 8000efe:	3304      	adds	r3, #4
 8000f00:	781b      	ldrb	r3, [r3, #0]
 8000f02:	089b      	lsrs	r3, r3, #2
 8000f04:	b2db      	uxtb	r3, r3
 8000f06:	f003 0301 	and.w	r3, r3, #1
 8000f0a:	b2da      	uxtb	r2, r3
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	731a      	strb	r2, [r3, #12]
  _m->II_VIFC_STATUS_08_Outdated = (_d[5] & (0x01U));
 8000f10:	68bb      	ldr	r3, [r7, #8]
 8000f12:	3305      	adds	r3, #5
 8000f14:	781b      	ldrb	r3, [r3, #0]
 8000f16:	f003 0301 	and.w	r3, r3, #1
 8000f1a:	b2da      	uxtb	r2, r3
 8000f1c:	68fb      	ldr	r3, [r7, #12]
 8000f1e:	735a      	strb	r2, [r3, #13]
  return IMD_Info_CANID;
 8000f20:	2337      	movs	r3, #55	@ 0x37
}
 8000f22:	4618      	mov	r0, r3
 8000f24:	3714      	adds	r7, #20
 8000f26:	46bd      	mov	sp, r7
 8000f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2c:	4770      	bx	lr
	...

08000f30 <HAL_TIM_OC_DelayElapsedCallback>:
// Software Timer Handlers
TimerHandle_t xTimer;

// RTD Speaker ISR
void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b082      	sub	sp, #8
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  //UNUSED(htim);

	HAL_GPIO_WritePin(RTD_PIN_PORT, RTD_PIN, RTD_DISABLE);
 8000f38:	4b08      	ldr	r3, [pc, #32]	@ (8000f5c <HAL_TIM_OC_DelayElapsedCallback+0x2c>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000f40:	2200      	movs	r2, #0
 8000f42:	4618      	mov	r0, r3
 8000f44:	f003 fc7c 	bl	8004840 <HAL_GPIO_WritePin>

	HAL_TIM_OC_Stop_IT(&htim1, IGNITION_OUPUT_CAPTURE);
 8000f48:	2300      	movs	r3, #0
 8000f4a:	4619      	mov	r1, r3
 8000f4c:	4804      	ldr	r0, [pc, #16]	@ (8000f60 <HAL_TIM_OC_DelayElapsedCallback+0x30>)
 8000f4e:	f004 fbbd 	bl	80056cc <HAL_TIM_OC_Stop_IT>

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8000f52:	bf00      	nop
 8000f54:	3708      	adds	r7, #8
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bd80      	pop	{r7, pc}
 8000f5a:	bf00      	nop
 8000f5c:	2000000c 	.word	0x2000000c
 8000f60:	200000e4 	.word	0x200000e4

08000f64 <HAL_CAN_RxFifo0MsgPendingCallback>:

// CAN ISR
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b090      	sub	sp, #64	@ 0x40
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]

	CAN_RxHeaderTypeDef rxHeaderFIFO0;
	uint8_t dataFIFO0[8];
	CAN_MsgHeaderTypedef msgFIFO0;

	if (hcan->Instance == CAN1)
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	4a19      	ldr	r2, [pc, #100]	@ (8000fd8 <HAL_CAN_RxFifo0MsgPendingCallback+0x74>)
 8000f72:	4293      	cmp	r3, r2
 8000f74:	d12c      	bne.n	8000fd0 <HAL_CAN_RxFifo0MsgPendingCallback+0x6c>
	{
		if (HAL_CAN_GetRxMessage(hcan, CAN_LOW_PRIORITY_FIFO, &rxHeaderFIFO0, dataFIFO0) == HAL_OK)
 8000f76:	f107 031c 	add.w	r3, r7, #28
 8000f7a:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8000f7e:	2100      	movs	r1, #0
 8000f80:	6878      	ldr	r0, [r7, #4]
 8000f82:	f002 fe59 	bl	8003c38 <HAL_CAN_GetRxMessage>
 8000f86:	4603      	mov	r3, r0
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d121      	bne.n	8000fd0 <HAL_CAN_RxFifo0MsgPendingCallback+0x6c>
		{
			msgFIFO0.StdID = rxHeaderFIFO0.StdId;
 8000f8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f8e:	617b      	str	r3, [r7, #20]
			msgFIFO0.RTR = rxHeaderFIFO0.RTR;
 8000f90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000f92:	61bb      	str	r3, [r7, #24]

			memcpy(msgFIFO0.data, dataFIFO0, 8);
 8000f94:	f107 030c 	add.w	r3, r7, #12
 8000f98:	f107 021c 	add.w	r2, r7, #28
 8000f9c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000fa0:	e883 0003 	stmia.w	r3, {r0, r1}

			BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	60bb      	str	r3, [r7, #8]
			xQueueSendFromISR(lowPriorityQueue, &msgFIFO0, &xHigherPriorityTaskWoken);
 8000fa8:	4b0c      	ldr	r3, [pc, #48]	@ (8000fdc <HAL_CAN_RxFifo0MsgPendingCallback+0x78>)
 8000faa:	6818      	ldr	r0, [r3, #0]
 8000fac:	f107 0208 	add.w	r2, r7, #8
 8000fb0:	f107 010c 	add.w	r1, r7, #12
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	f006 f8d1 	bl	800715c <xQueueGenericSendFromISR>
			portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8000fba:	68bb      	ldr	r3, [r7, #8]
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d007      	beq.n	8000fd0 <HAL_CAN_RxFifo0MsgPendingCallback+0x6c>
 8000fc0:	4b07      	ldr	r3, [pc, #28]	@ (8000fe0 <HAL_CAN_RxFifo0MsgPendingCallback+0x7c>)
 8000fc2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000fc6:	601a      	str	r2, [r3, #0]
 8000fc8:	f3bf 8f4f 	dsb	sy
 8000fcc:	f3bf 8f6f 	isb	sy

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8000fd0:	bf00      	nop
 8000fd2:	3740      	adds	r7, #64	@ 0x40
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bd80      	pop	{r7, pc}
 8000fd8:	40006400 	.word	0x40006400
 8000fdc:	200002ac 	.word	0x200002ac
 8000fe0:	e000ed04 	.word	0xe000ed04

08000fe4 <HAL_CAN_RxFifo1MsgPendingCallback>:

void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b090      	sub	sp, #64	@ 0x40
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]

	CAN_RxHeaderTypeDef rxHeaderFIFO1;
	uint8_t dataFIFO1[8];
	CAN_MsgHeaderTypedef msgFIFO1;

	if (hcan->Instance == CAN1)
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	4a19      	ldr	r2, [pc, #100]	@ (8001058 <HAL_CAN_RxFifo1MsgPendingCallback+0x74>)
 8000ff2:	4293      	cmp	r3, r2
 8000ff4:	d12c      	bne.n	8001050 <HAL_CAN_RxFifo1MsgPendingCallback+0x6c>
	{
		if (HAL_CAN_GetRxMessage(hcan, CAN_HIGH_PRIORITY_FIFO, &rxHeaderFIFO1, dataFIFO1) == HAL_OK)
 8000ff6:	f107 031c 	add.w	r3, r7, #28
 8000ffa:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8000ffe:	2101      	movs	r1, #1
 8001000:	6878      	ldr	r0, [r7, #4]
 8001002:	f002 fe19 	bl	8003c38 <HAL_CAN_GetRxMessage>
 8001006:	4603      	mov	r3, r0
 8001008:	2b00      	cmp	r3, #0
 800100a:	d121      	bne.n	8001050 <HAL_CAN_RxFifo1MsgPendingCallback+0x6c>
		{
			msgFIFO1.StdID = rxHeaderFIFO1.StdId;
 800100c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800100e:	617b      	str	r3, [r7, #20]
			msgFIFO1.RTR = rxHeaderFIFO1.RTR;
 8001010:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001012:	61bb      	str	r3, [r7, #24]

			memcpy(msgFIFO1.data, dataFIFO1, 8);
 8001014:	f107 030c 	add.w	r3, r7, #12
 8001018:	f107 021c 	add.w	r2, r7, #28
 800101c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001020:	e883 0003 	stmia.w	r3, {r0, r1}

			BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8001024:	2300      	movs	r3, #0
 8001026:	60bb      	str	r3, [r7, #8]
			xQueueSendFromISR(highPriorityQueue, &msgFIFO1, &xHigherPriorityTaskWoken);
 8001028:	4b0c      	ldr	r3, [pc, #48]	@ (800105c <HAL_CAN_RxFifo1MsgPendingCallback+0x78>)
 800102a:	6818      	ldr	r0, [r3, #0]
 800102c:	f107 0208 	add.w	r2, r7, #8
 8001030:	f107 010c 	add.w	r1, r7, #12
 8001034:	2300      	movs	r3, #0
 8001036:	f006 f891 	bl	800715c <xQueueGenericSendFromISR>
			portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 800103a:	68bb      	ldr	r3, [r7, #8]
 800103c:	2b00      	cmp	r3, #0
 800103e:	d007      	beq.n	8001050 <HAL_CAN_RxFifo1MsgPendingCallback+0x6c>
 8001040:	4b07      	ldr	r3, [pc, #28]	@ (8001060 <HAL_CAN_RxFifo1MsgPendingCallback+0x7c>)
 8001042:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001046:	601a      	str	r2, [r3, #0]
 8001048:	f3bf 8f4f 	dsb	sy
 800104c:	f3bf 8f6f 	isb	sy

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001050:	bf00      	nop
 8001052:	3740      	adds	r7, #64	@ 0x40
 8001054:	46bd      	mov	sp, r7
 8001056:	bd80      	pop	{r7, pc}
 8001058:	40006400 	.word	0x40006400
 800105c:	200002b0 	.word	0x200002b0
 8001060:	e000ed04 	.word	0xe000ed04

08001064 <vTimerCallback>:

/***************************** Timer Callback Request Inverter Data *****************************/
void vTimerCallback(xTimerHandle xTimer)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b082      	sub	sp, #8
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
	// Inverter Sync Message
	sendSync(&hcan1);
 800106c:	4803      	ldr	r0, [pc, #12]	@ (800107c <vTimerCallback+0x18>)
 800106e:	f7ff fa90 	bl	8000592 <sendSync>
}
 8001072:	bf00      	nop
 8001074:	3708      	adds	r7, #8
 8001076:	46bd      	mov	sp, r7
 8001078:	bd80      	pop	{r7, pc}
 800107a:	bf00      	nop
 800107c:	20000094 	.word	0x20000094

08001080 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001080:	b590      	push	{r4, r7, lr}
 8001082:	b089      	sub	sp, #36	@ 0x24
 8001084:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001086:	f001 fe5c 	bl	8002d42 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800108a:	f000 f967 	bl	800135c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800108e:	f000 fc11 	bl	80018b4 <MX_GPIO_Init>
  MX_ADC1_Init();
 8001092:	f000 f9cd 	bl	8001430 <MX_ADC1_Init>
  MX_CAN1_Init();
 8001096:	f000 fa49 	bl	800152c <MX_CAN1_Init>
  MX_CAN2_Init();
 800109a:	f000 fa7d 	bl	8001598 <MX_CAN2_Init>
  MX_TIM1_Init();
 800109e:	f000 fab1 	bl	8001604 <MX_TIM1_Init>
  MX_TIM8_Init();
 80010a2:	f000 fb5b 	bl	800175c <MX_TIM8_Init>
  /* USER CODE BEGIN 2 */

  // Initialize tps limits
  tpsLimits.TPS_PrimaryMaxLimit = PRIMARY_THROTTLE_POSITION_MAX;
 80010a6:	f240 237b 	movw	r3, #635	@ 0x27b
 80010aa:	b29a      	uxth	r2, r3
 80010ac:	4b8e      	ldr	r3, [pc, #568]	@ (80012e8 <main+0x268>)
 80010ae:	801a      	strh	r2, [r3, #0]
  tpsLimits.TPS_PrimaryMinLimit = PRIMARY_THROTTLE_POSITION_MIN;
 80010b0:	f240 233a 	movw	r3, #570	@ 0x23a
 80010b4:	b29a      	uxth	r2, r3
 80010b6:	4b8c      	ldr	r3, [pc, #560]	@ (80012e8 <main+0x268>)
 80010b8:	805a      	strh	r2, [r3, #2]
  tpsLimits.TPS_SecondaryMaxLimit = SECONDARY_THROTTLE_POSITION_MAX;
 80010ba:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 80010be:	b29a      	uxth	r2, r3
 80010c0:	4b89      	ldr	r3, [pc, #548]	@ (80012e8 <main+0x268>)
 80010c2:	809a      	strh	r2, [r3, #4]
  tpsLimits.TPS_SecondaryMinLimit = SECONDARY_THROTTLE_POSITION_MIN;
 80010c4:	2391      	movs	r3, #145	@ 0x91
 80010c6:	b29a      	uxth	r2, r3
 80010c8:	4b87      	ldr	r3, [pc, #540]	@ (80012e8 <main+0x268>)
 80010ca:	80da      	strh	r2, [r3, #6]

  // Initialize CAN1
  initializeCAN(&hcan1);
 80010cc:	4887      	ldr	r0, [pc, #540]	@ (80012ec <main+0x26c>)
 80010ce:	f7ff fa2f 	bl	8000530 <initializeCAN>

  // CAN FAULT State -> Good
  HAL_GPIO_WritePin(CAN_FAULT_PORT, CAN_FAULT_PIN, NO_FAULT_STATE);
 80010d2:	4b87      	ldr	r3, [pc, #540]	@ (80012f0 <main+0x270>)
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	2110      	movs	r1, #16
 80010d8:	2201      	movs	r2, #1
 80010da:	4618      	mov	r0, r3
 80010dc:	f003 fbb0 	bl	8004840 <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(TEMP_SENSE_CAN_FAULT_PORT, TEMP_SENSE_CAN_FAULT_PIN, NO_FAULT_STATE);
 80010e0:	4b84      	ldr	r3, [pc, #528]	@ (80012f4 <main+0x274>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	2120      	movs	r1, #32
 80010e6:	2201      	movs	r2, #1
 80010e8:	4618      	mov	r0, r3
 80010ea:	f003 fba9 	bl	8004840 <HAL_GPIO_WritePin>

  // Enable CAN 1 Transreceiver
  HAL_GPIO_WritePin(CAN_ENABLE_1_PORT, CAN_ENABLE_1_PIN, CAN_ENABLE);
 80010ee:	4b82      	ldr	r3, [pc, #520]	@ (80012f8 <main+0x278>)
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80010f6:	2200      	movs	r2, #0
 80010f8:	4618      	mov	r0, r3
 80010fa:	f003 fba1 	bl	8004840 <HAL_GPIO_WritePin>

  // TPS Limits Message
  sendTPSLimits(&hcan1, &tpsLimits);
 80010fe:	497a      	ldr	r1, [pc, #488]	@ (80012e8 <main+0x268>)
 8001100:	487a      	ldr	r0, [pc, #488]	@ (80012ec <main+0x26c>)
 8001102:	f7ff fc81 	bl	8000a08 <sendTPSLimits>

  /***************************** Queue Creation *****************************/

  lowPriorityQueue = xQueueCreate(7, sizeof(CAN_MsgHeaderTypedef));
 8001106:	2200      	movs	r2, #0
 8001108:	2110      	movs	r1, #16
 800110a:	2007      	movs	r0, #7
 800110c:	f005 feac 	bl	8006e68 <xQueueGenericCreate>
 8001110:	4603      	mov	r3, r0
 8001112:	4a7a      	ldr	r2, [pc, #488]	@ (80012fc <main+0x27c>)
 8001114:	6013      	str	r3, [r2, #0]

  if (lowPriorityQueue == NULL)
 8001116:	4b79      	ldr	r3, [pc, #484]	@ (80012fc <main+0x27c>)
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	2b00      	cmp	r3, #0
 800111c:	d101      	bne.n	8001122 <main+0xa2>
  {
	  Error_Handler();
 800111e:	f001 f8ab 	bl	8002278 <Error_Handler>
  }

  highPriorityQueue = xQueueCreate(2, sizeof(CAN_MsgHeaderTypedef));
 8001122:	2200      	movs	r2, #0
 8001124:	2110      	movs	r1, #16
 8001126:	2002      	movs	r0, #2
 8001128:	f005 fe9e 	bl	8006e68 <xQueueGenericCreate>
 800112c:	4603      	mov	r3, r0
 800112e:	4a74      	ldr	r2, [pc, #464]	@ (8001300 <main+0x280>)
 8001130:	6013      	str	r3, [r2, #0]

  if (highPriorityQueue == NULL)
 8001132:	4b73      	ldr	r3, [pc, #460]	@ (8001300 <main+0x280>)
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	2b00      	cmp	r3, #0
 8001138:	d101      	bne.n	800113e <main+0xbe>
  {
	  Error_Handler();
 800113a:	f001 f89d 	bl	8002278 <Error_Handler>
  }

  /***************************** Timer Creation *****************************/
  xTimer = xTimerCreate("Sync_Timer", pdMS_TO_TICKS(SYNC_PERIOD), pdTRUE, (void*)0, vTimerCallback);
 800113e:	4b71      	ldr	r3, [pc, #452]	@ (8001304 <main+0x284>)
 8001140:	9300      	str	r3, [sp, #0]
 8001142:	2300      	movs	r3, #0
 8001144:	2201      	movs	r2, #1
 8001146:	2196      	movs	r1, #150	@ 0x96
 8001148:	486f      	ldr	r0, [pc, #444]	@ (8001308 <main+0x288>)
 800114a:	f007 fc31 	bl	80089b0 <xTimerCreate>
 800114e:	4603      	mov	r3, r0
 8001150:	4a6e      	ldr	r2, [pc, #440]	@ (800130c <main+0x28c>)
 8001152:	6013      	str	r3, [r2, #0]

  xTimerStart(xTimer, 0);
 8001154:	4b6d      	ldr	r3, [pc, #436]	@ (800130c <main+0x28c>)
 8001156:	681c      	ldr	r4, [r3, #0]
 8001158:	f006 fe8c 	bl	8007e74 <xTaskGetTickCount>
 800115c:	4602      	mov	r2, r0
 800115e:	2300      	movs	r3, #0
 8001160:	9300      	str	r3, [sp, #0]
 8001162:	2300      	movs	r3, #0
 8001164:	2101      	movs	r1, #1
 8001166:	4620      	mov	r0, r4
 8001168:	f007 fc7e 	bl	8008a68 <xTimerGenericCommand>

  /***************************** Task Creation *****************************/

  xReturned = xTaskCreate(Task1_Handler, "Node_Guarding", 200, NULL, tskIDLE_PRIORITY + 3, &task1Handle);
 800116c:	4b68      	ldr	r3, [pc, #416]	@ (8001310 <main+0x290>)
 800116e:	9301      	str	r3, [sp, #4]
 8001170:	2303      	movs	r3, #3
 8001172:	9300      	str	r3, [sp, #0]
 8001174:	2300      	movs	r3, #0
 8001176:	22c8      	movs	r2, #200	@ 0xc8
 8001178:	4966      	ldr	r1, [pc, #408]	@ (8001314 <main+0x294>)
 800117a:	4867      	ldr	r0, [pc, #412]	@ (8001318 <main+0x298>)
 800117c:	f006 fb2c 	bl	80077d8 <xTaskCreate>
 8001180:	4603      	mov	r3, r0
 8001182:	4a66      	ldr	r2, [pc, #408]	@ (800131c <main+0x29c>)
 8001184:	6013      	str	r3, [r2, #0]
  configASSERT(xReturned == pdPASS);
 8001186:	4b65      	ldr	r3, [pc, #404]	@ (800131c <main+0x29c>)
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	2b01      	cmp	r3, #1
 800118c:	d00d      	beq.n	80011aa <main+0x12a>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 800118e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001192:	b672      	cpsid	i
 8001194:	f383 8811 	msr	BASEPRI, r3
 8001198:	f3bf 8f6f 	isb	sy
 800119c:	f3bf 8f4f 	dsb	sy
 80011a0:	b662      	cpsie	i
 80011a2:	617b      	str	r3, [r7, #20]
            "	isb														\n"\
            "	dsb														\n"\
            "	cpsie i													\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 80011a4:	bf00      	nop
 80011a6:	bf00      	nop
 80011a8:	e7fd      	b.n	80011a6 <main+0x126>

  xReturned = xTaskCreate(Task2_Handler, "Torque_Control", 200, NULL, tskIDLE_PRIORITY + 2, &task2Handle);
 80011aa:	4b5d      	ldr	r3, [pc, #372]	@ (8001320 <main+0x2a0>)
 80011ac:	9301      	str	r3, [sp, #4]
 80011ae:	2302      	movs	r3, #2
 80011b0:	9300      	str	r3, [sp, #0]
 80011b2:	2300      	movs	r3, #0
 80011b4:	22c8      	movs	r2, #200	@ 0xc8
 80011b6:	495b      	ldr	r1, [pc, #364]	@ (8001324 <main+0x2a4>)
 80011b8:	485b      	ldr	r0, [pc, #364]	@ (8001328 <main+0x2a8>)
 80011ba:	f006 fb0d 	bl	80077d8 <xTaskCreate>
 80011be:	4603      	mov	r3, r0
 80011c0:	4a56      	ldr	r2, [pc, #344]	@ (800131c <main+0x29c>)
 80011c2:	6013      	str	r3, [r2, #0]
  configASSERT(xReturned == pdPASS);
 80011c4:	4b55      	ldr	r3, [pc, #340]	@ (800131c <main+0x29c>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	2b01      	cmp	r3, #1
 80011ca:	d00d      	beq.n	80011e8 <main+0x168>
        __asm volatile
 80011cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80011d0:	b672      	cpsid	i
 80011d2:	f383 8811 	msr	BASEPRI, r3
 80011d6:	f3bf 8f6f 	isb	sy
 80011da:	f3bf 8f4f 	dsb	sy
 80011de:	b662      	cpsie	i
 80011e0:	613b      	str	r3, [r7, #16]
    }
 80011e2:	bf00      	nop
 80011e4:	bf00      	nop
 80011e6:	e7fd      	b.n	80011e4 <main+0x164>

  xReturned = xTaskCreate(Task3_Handler, "Ignition", 200, NULL, tskIDLE_PRIORITY + 1, &task3Handle);
 80011e8:	4b50      	ldr	r3, [pc, #320]	@ (800132c <main+0x2ac>)
 80011ea:	9301      	str	r3, [sp, #4]
 80011ec:	2301      	movs	r3, #1
 80011ee:	9300      	str	r3, [sp, #0]
 80011f0:	2300      	movs	r3, #0
 80011f2:	22c8      	movs	r2, #200	@ 0xc8
 80011f4:	494e      	ldr	r1, [pc, #312]	@ (8001330 <main+0x2b0>)
 80011f6:	484f      	ldr	r0, [pc, #316]	@ (8001334 <main+0x2b4>)
 80011f8:	f006 faee 	bl	80077d8 <xTaskCreate>
 80011fc:	4603      	mov	r3, r0
 80011fe:	4a47      	ldr	r2, [pc, #284]	@ (800131c <main+0x29c>)
 8001200:	6013      	str	r3, [r2, #0]
  configASSERT(xReturned == pdPASS);
 8001202:	4b46      	ldr	r3, [pc, #280]	@ (800131c <main+0x29c>)
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	2b01      	cmp	r3, #1
 8001208:	d00d      	beq.n	8001226 <main+0x1a6>
        __asm volatile
 800120a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800120e:	b672      	cpsid	i
 8001210:	f383 8811 	msr	BASEPRI, r3
 8001214:	f3bf 8f6f 	isb	sy
 8001218:	f3bf 8f4f 	dsb	sy
 800121c:	b662      	cpsie	i
 800121e:	60fb      	str	r3, [r7, #12]
    }
 8001220:	bf00      	nop
 8001222:	bf00      	nop
 8001224:	e7fd      	b.n	8001222 <main+0x1a2>

  xReturned = xTaskCreate(Task4_Handler, "Process_CAN_Data", 200, NULL, tskIDLE_PRIORITY + 1, &task4Handle);
 8001226:	4b44      	ldr	r3, [pc, #272]	@ (8001338 <main+0x2b8>)
 8001228:	9301      	str	r3, [sp, #4]
 800122a:	2301      	movs	r3, #1
 800122c:	9300      	str	r3, [sp, #0]
 800122e:	2300      	movs	r3, #0
 8001230:	22c8      	movs	r2, #200	@ 0xc8
 8001232:	4942      	ldr	r1, [pc, #264]	@ (800133c <main+0x2bc>)
 8001234:	4842      	ldr	r0, [pc, #264]	@ (8001340 <main+0x2c0>)
 8001236:	f006 facf 	bl	80077d8 <xTaskCreate>
 800123a:	4603      	mov	r3, r0
 800123c:	4a37      	ldr	r2, [pc, #220]	@ (800131c <main+0x29c>)
 800123e:	6013      	str	r3, [r2, #0]
  configASSERT(xReturned == pdPASS);
 8001240:	4b36      	ldr	r3, [pc, #216]	@ (800131c <main+0x29c>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	2b01      	cmp	r3, #1
 8001246:	d00d      	beq.n	8001264 <main+0x1e4>
        __asm volatile
 8001248:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800124c:	b672      	cpsid	i
 800124e:	f383 8811 	msr	BASEPRI, r3
 8001252:	f3bf 8f6f 	isb	sy
 8001256:	f3bf 8f4f 	dsb	sy
 800125a:	b662      	cpsie	i
 800125c:	60bb      	str	r3, [r7, #8]
    }
 800125e:	bf00      	nop
 8001260:	bf00      	nop
 8001262:	e7fd      	b.n	8001260 <main+0x1e0>

  xReturned = xTaskCreate(Task5_Handler, "Safety_System_Check", 200, NULL, tskIDLE_PRIORITY + 1, &task5Handle);
 8001264:	4b37      	ldr	r3, [pc, #220]	@ (8001344 <main+0x2c4>)
 8001266:	9301      	str	r3, [sp, #4]
 8001268:	2301      	movs	r3, #1
 800126a:	9300      	str	r3, [sp, #0]
 800126c:	2300      	movs	r3, #0
 800126e:	22c8      	movs	r2, #200	@ 0xc8
 8001270:	4935      	ldr	r1, [pc, #212]	@ (8001348 <main+0x2c8>)
 8001272:	4836      	ldr	r0, [pc, #216]	@ (800134c <main+0x2cc>)
 8001274:	f006 fab0 	bl	80077d8 <xTaskCreate>
 8001278:	4603      	mov	r3, r0
 800127a:	4a28      	ldr	r2, [pc, #160]	@ (800131c <main+0x29c>)
 800127c:	6013      	str	r3, [r2, #0]
  configASSERT(xReturned == pdPASS);
 800127e:	4b27      	ldr	r3, [pc, #156]	@ (800131c <main+0x29c>)
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	2b01      	cmp	r3, #1
 8001284:	d00d      	beq.n	80012a2 <main+0x222>
        __asm volatile
 8001286:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800128a:	b672      	cpsid	i
 800128c:	f383 8811 	msr	BASEPRI, r3
 8001290:	f3bf 8f6f 	isb	sy
 8001294:	f3bf 8f4f 	dsb	sy
 8001298:	b662      	cpsie	i
 800129a:	607b      	str	r3, [r7, #4]
    }
 800129c:	bf00      	nop
 800129e:	bf00      	nop
 80012a0:	e7fd      	b.n	800129e <main+0x21e>

  xReturned = xTaskCreate(Task6_Handler, "Torque_Derate", 200, NULL, tskIDLE_PRIORITY + 1, &task6Handle);
 80012a2:	4b2b      	ldr	r3, [pc, #172]	@ (8001350 <main+0x2d0>)
 80012a4:	9301      	str	r3, [sp, #4]
 80012a6:	2301      	movs	r3, #1
 80012a8:	9300      	str	r3, [sp, #0]
 80012aa:	2300      	movs	r3, #0
 80012ac:	22c8      	movs	r2, #200	@ 0xc8
 80012ae:	4929      	ldr	r1, [pc, #164]	@ (8001354 <main+0x2d4>)
 80012b0:	4829      	ldr	r0, [pc, #164]	@ (8001358 <main+0x2d8>)
 80012b2:	f006 fa91 	bl	80077d8 <xTaskCreate>
 80012b6:	4603      	mov	r3, r0
 80012b8:	4a18      	ldr	r2, [pc, #96]	@ (800131c <main+0x29c>)
 80012ba:	6013      	str	r3, [r2, #0]
  configASSERT(xReturned == pdPASS);
 80012bc:	4b17      	ldr	r3, [pc, #92]	@ (800131c <main+0x29c>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	2b01      	cmp	r3, #1
 80012c2:	d00d      	beq.n	80012e0 <main+0x260>
        __asm volatile
 80012c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80012c8:	b672      	cpsid	i
 80012ca:	f383 8811 	msr	BASEPRI, r3
 80012ce:	f3bf 8f6f 	isb	sy
 80012d2:	f3bf 8f4f 	dsb	sy
 80012d6:	b662      	cpsie	i
 80012d8:	603b      	str	r3, [r7, #0]
    }
 80012da:	bf00      	nop
 80012dc:	bf00      	nop
 80012de:	e7fd      	b.n	80012dc <main+0x25c>

  vTaskStartScheduler();
 80012e0:	f006 fc66 	bl	8007bb0 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80012e4:	bf00      	nop
 80012e6:	e7fd      	b.n	80012e4 <main+0x264>
 80012e8:	20000284 	.word	0x20000284
 80012ec:	20000094 	.word	0x20000094
 80012f0:	20000000 	.word	0x20000000
 80012f4:	20000004 	.word	0x20000004
 80012f8:	20000008 	.word	0x20000008
 80012fc:	200002ac 	.word	0x200002ac
 8001300:	200002b0 	.word	0x200002b0
 8001304:	08001065 	.word	0x08001065
 8001308:	08009898 	.word	0x08009898
 800130c:	200002b4 	.word	0x200002b4
 8001310:	20000294 	.word	0x20000294
 8001314:	080098a4 	.word	0x080098a4
 8001318:	08001a21 	.word	0x08001a21
 800131c:	20000290 	.word	0x20000290
 8001320:	20000298 	.word	0x20000298
 8001324:	080098b4 	.word	0x080098b4
 8001328:	08001a51 	.word	0x08001a51
 800132c:	2000029c 	.word	0x2000029c
 8001330:	080098c4 	.word	0x080098c4
 8001334:	08001aa9 	.word	0x08001aa9
 8001338:	200002a0 	.word	0x200002a0
 800133c:	080098d0 	.word	0x080098d0
 8001340:	08001ad5 	.word	0x08001ad5
 8001344:	200002a4 	.word	0x200002a4
 8001348:	080098e4 	.word	0x080098e4
 800134c:	08001be9 	.word	0x08001be9
 8001350:	200002a8 	.word	0x200002a8
 8001354:	080098f8 	.word	0x080098f8
 8001358:	08001c45 	.word	0x08001c45

0800135c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b094      	sub	sp, #80	@ 0x50
 8001360:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001362:	f107 031c 	add.w	r3, r7, #28
 8001366:	2234      	movs	r2, #52	@ 0x34
 8001368:	2100      	movs	r1, #0
 800136a:	4618      	mov	r0, r3
 800136c:	f008 fa46 	bl	80097fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001370:	f107 0308 	add.w	r3, r7, #8
 8001374:	2200      	movs	r2, #0
 8001376:	601a      	str	r2, [r3, #0]
 8001378:	605a      	str	r2, [r3, #4]
 800137a:	609a      	str	r2, [r3, #8]
 800137c:	60da      	str	r2, [r3, #12]
 800137e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001380:	4b29      	ldr	r3, [pc, #164]	@ (8001428 <SystemClock_Config+0xcc>)
 8001382:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001384:	4a28      	ldr	r2, [pc, #160]	@ (8001428 <SystemClock_Config+0xcc>)
 8001386:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800138a:	6413      	str	r3, [r2, #64]	@ 0x40
 800138c:	4b26      	ldr	r3, [pc, #152]	@ (8001428 <SystemClock_Config+0xcc>)
 800138e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001390:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001394:	607b      	str	r3, [r7, #4]
 8001396:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001398:	4b24      	ldr	r3, [pc, #144]	@ (800142c <SystemClock_Config+0xd0>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80013a0:	4a22      	ldr	r2, [pc, #136]	@ (800142c <SystemClock_Config+0xd0>)
 80013a2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80013a6:	6013      	str	r3, [r2, #0]
 80013a8:	4b20      	ldr	r3, [pc, #128]	@ (800142c <SystemClock_Config+0xd0>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80013b0:	603b      	str	r3, [r7, #0]
 80013b2:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80013b4:	2302      	movs	r3, #2
 80013b6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80013b8:	2301      	movs	r3, #1
 80013ba:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80013bc:	2310      	movs	r3, #16
 80013be:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013c0:	2302      	movs	r3, #2
 80013c2:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80013c4:	2300      	movs	r3, #0
 80013c6:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 80013c8:	2308      	movs	r3, #8
 80013ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 80013cc:	23b4      	movs	r3, #180	@ 0xb4
 80013ce:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80013d0:	2302      	movs	r3, #2
 80013d2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80013d4:	2302      	movs	r3, #2
 80013d6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80013d8:	2302      	movs	r3, #2
 80013da:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013dc:	f107 031c 	add.w	r3, r7, #28
 80013e0:	4618      	mov	r0, r3
 80013e2:	f003 fa47 	bl	8004874 <HAL_RCC_OscConfig>
 80013e6:	4603      	mov	r3, r0
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d001      	beq.n	80013f0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80013ec:	f000 ff44 	bl	8002278 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013f0:	230f      	movs	r3, #15
 80013f2:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013f4:	2302      	movs	r3, #2
 80013f6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 80013f8:	2380      	movs	r3, #128	@ 0x80
 80013fa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80013fc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001400:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001402:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001406:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001408:	f107 0308 	add.w	r3, r7, #8
 800140c:	2102      	movs	r1, #2
 800140e:	4618      	mov	r0, r3
 8001410:	f003 fcde 	bl	8004dd0 <HAL_RCC_ClockConfig>
 8001414:	4603      	mov	r3, r0
 8001416:	2b00      	cmp	r3, #0
 8001418:	d001      	beq.n	800141e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800141a:	f000 ff2d 	bl	8002278 <Error_Handler>
  }
}
 800141e:	bf00      	nop
 8001420:	3750      	adds	r7, #80	@ 0x50
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}
 8001426:	bf00      	nop
 8001428:	40023800 	.word	0x40023800
 800142c:	40007000 	.word	0x40007000

08001430 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b084      	sub	sp, #16
 8001434:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001436:	463b      	mov	r3, r7
 8001438:	2200      	movs	r2, #0
 800143a:	601a      	str	r2, [r3, #0]
 800143c:	605a      	str	r2, [r3, #4]
 800143e:	609a      	str	r2, [r3, #8]
 8001440:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001442:	4b37      	ldr	r3, [pc, #220]	@ (8001520 <MX_ADC1_Init+0xf0>)
 8001444:	4a37      	ldr	r2, [pc, #220]	@ (8001524 <MX_ADC1_Init+0xf4>)
 8001446:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8001448:	4b35      	ldr	r3, [pc, #212]	@ (8001520 <MX_ADC1_Init+0xf0>)
 800144a:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 800144e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_10B;
 8001450:	4b33      	ldr	r3, [pc, #204]	@ (8001520 <MX_ADC1_Init+0xf0>)
 8001452:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001456:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001458:	4b31      	ldr	r3, [pc, #196]	@ (8001520 <MX_ADC1_Init+0xf0>)
 800145a:	2201      	movs	r2, #1
 800145c:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800145e:	4b30      	ldr	r3, [pc, #192]	@ (8001520 <MX_ADC1_Init+0xf0>)
 8001460:	2200      	movs	r2, #0
 8001462:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001464:	4b2e      	ldr	r3, [pc, #184]	@ (8001520 <MX_ADC1_Init+0xf0>)
 8001466:	2200      	movs	r2, #0
 8001468:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800146c:	4b2c      	ldr	r3, [pc, #176]	@ (8001520 <MX_ADC1_Init+0xf0>)
 800146e:	2200      	movs	r2, #0
 8001470:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001472:	4b2b      	ldr	r3, [pc, #172]	@ (8001520 <MX_ADC1_Init+0xf0>)
 8001474:	4a2c      	ldr	r2, [pc, #176]	@ (8001528 <MX_ADC1_Init+0xf8>)
 8001476:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001478:	4b29      	ldr	r3, [pc, #164]	@ (8001520 <MX_ADC1_Init+0xf0>)
 800147a:	2200      	movs	r2, #0
 800147c:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 4;
 800147e:	4b28      	ldr	r3, [pc, #160]	@ (8001520 <MX_ADC1_Init+0xf0>)
 8001480:	2204      	movs	r2, #4
 8001482:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001484:	4b26      	ldr	r3, [pc, #152]	@ (8001520 <MX_ADC1_Init+0xf0>)
 8001486:	2200      	movs	r2, #0
 8001488:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800148c:	4b24      	ldr	r3, [pc, #144]	@ (8001520 <MX_ADC1_Init+0xf0>)
 800148e:	2201      	movs	r2, #1
 8001490:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001492:	4823      	ldr	r0, [pc, #140]	@ (8001520 <MX_ADC1_Init+0xf0>)
 8001494:	f001 fc82 	bl	8002d9c <HAL_ADC_Init>
 8001498:	4603      	mov	r3, r0
 800149a:	2b00      	cmp	r3, #0
 800149c:	d001      	beq.n	80014a2 <MX_ADC1_Init+0x72>
  {
    Error_Handler();
 800149e:	f000 feeb 	bl	8002278 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80014a2:	2300      	movs	r3, #0
 80014a4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80014a6:	2301      	movs	r3, #1
 80014a8:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 80014aa:	2303      	movs	r3, #3
 80014ac:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80014ae:	463b      	mov	r3, r7
 80014b0:	4619      	mov	r1, r3
 80014b2:	481b      	ldr	r0, [pc, #108]	@ (8001520 <MX_ADC1_Init+0xf0>)
 80014b4:	f001 fe50 	bl	8003158 <HAL_ADC_ConfigChannel>
 80014b8:	4603      	mov	r3, r0
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d001      	beq.n	80014c2 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 80014be:	f000 fedb 	bl	8002278 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80014c2:	2301      	movs	r3, #1
 80014c4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80014c6:	2302      	movs	r3, #2
 80014c8:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80014ca:	463b      	mov	r3, r7
 80014cc:	4619      	mov	r1, r3
 80014ce:	4814      	ldr	r0, [pc, #80]	@ (8001520 <MX_ADC1_Init+0xf0>)
 80014d0:	f001 fe42 	bl	8003158 <HAL_ADC_ConfigChannel>
 80014d4:	4603      	mov	r3, r0
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d001      	beq.n	80014de <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 80014da:	f000 fecd 	bl	8002278 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80014de:	2302      	movs	r3, #2
 80014e0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80014e2:	2303      	movs	r3, #3
 80014e4:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80014e6:	463b      	mov	r3, r7
 80014e8:	4619      	mov	r1, r3
 80014ea:	480d      	ldr	r0, [pc, #52]	@ (8001520 <MX_ADC1_Init+0xf0>)
 80014ec:	f001 fe34 	bl	8003158 <HAL_ADC_ConfigChannel>
 80014f0:	4603      	mov	r3, r0
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d001      	beq.n	80014fa <MX_ADC1_Init+0xca>
  {
    Error_Handler();
 80014f6:	f000 febf 	bl	8002278 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80014fa:	2303      	movs	r3, #3
 80014fc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80014fe:	2304      	movs	r3, #4
 8001500:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001502:	463b      	mov	r3, r7
 8001504:	4619      	mov	r1, r3
 8001506:	4806      	ldr	r0, [pc, #24]	@ (8001520 <MX_ADC1_Init+0xf0>)
 8001508:	f001 fe26 	bl	8003158 <HAL_ADC_ConfigChannel>
 800150c:	4603      	mov	r3, r0
 800150e:	2b00      	cmp	r3, #0
 8001510:	d001      	beq.n	8001516 <MX_ADC1_Init+0xe6>
  {
    Error_Handler();
 8001512:	f000 feb1 	bl	8002278 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001516:	bf00      	nop
 8001518:	3710      	adds	r7, #16
 800151a:	46bd      	mov	sp, r7
 800151c:	bd80      	pop	{r7, pc}
 800151e:	bf00      	nop
 8001520:	2000004c 	.word	0x2000004c
 8001524:	40012000 	.word	0x40012000
 8001528:	0f000001 	.word	0x0f000001

0800152c <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8001530:	4b17      	ldr	r3, [pc, #92]	@ (8001590 <MX_CAN1_Init+0x64>)
 8001532:	4a18      	ldr	r2, [pc, #96]	@ (8001594 <MX_CAN1_Init+0x68>)
 8001534:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 5;
 8001536:	4b16      	ldr	r3, [pc, #88]	@ (8001590 <MX_CAN1_Init+0x64>)
 8001538:	2205      	movs	r2, #5
 800153a:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 800153c:	4b14      	ldr	r3, [pc, #80]	@ (8001590 <MX_CAN1_Init+0x64>)
 800153e:	2200      	movs	r2, #0
 8001540:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001542:	4b13      	ldr	r3, [pc, #76]	@ (8001590 <MX_CAN1_Init+0x64>)
 8001544:	2200      	movs	r2, #0
 8001546:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_15TQ;
 8001548:	4b11      	ldr	r3, [pc, #68]	@ (8001590 <MX_CAN1_Init+0x64>)
 800154a:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 800154e:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8001550:	4b0f      	ldr	r3, [pc, #60]	@ (8001590 <MX_CAN1_Init+0x64>)
 8001552:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8001556:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8001558:	4b0d      	ldr	r3, [pc, #52]	@ (8001590 <MX_CAN1_Init+0x64>)
 800155a:	2200      	movs	r2, #0
 800155c:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 800155e:	4b0c      	ldr	r3, [pc, #48]	@ (8001590 <MX_CAN1_Init+0x64>)
 8001560:	2200      	movs	r2, #0
 8001562:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8001564:	4b0a      	ldr	r3, [pc, #40]	@ (8001590 <MX_CAN1_Init+0x64>)
 8001566:	2200      	movs	r2, #0
 8001568:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 800156a:	4b09      	ldr	r3, [pc, #36]	@ (8001590 <MX_CAN1_Init+0x64>)
 800156c:	2200      	movs	r2, #0
 800156e:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001570:	4b07      	ldr	r3, [pc, #28]	@ (8001590 <MX_CAN1_Init+0x64>)
 8001572:	2200      	movs	r2, #0
 8001574:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8001576:	4b06      	ldr	r3, [pc, #24]	@ (8001590 <MX_CAN1_Init+0x64>)
 8001578:	2200      	movs	r2, #0
 800157a:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 800157c:	4804      	ldr	r0, [pc, #16]	@ (8001590 <MX_CAN1_Init+0x64>)
 800157e:	f002 f83b 	bl	80035f8 <HAL_CAN_Init>
 8001582:	4603      	mov	r3, r0
 8001584:	2b00      	cmp	r3, #0
 8001586:	d001      	beq.n	800158c <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8001588:	f000 fe76 	bl	8002278 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 800158c:	bf00      	nop
 800158e:	bd80      	pop	{r7, pc}
 8001590:	20000094 	.word	0x20000094
 8001594:	40006400 	.word	0x40006400

08001598 <MX_CAN2_Init>:
  * @brief CAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN2_Init(void)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 800159c:	4b17      	ldr	r3, [pc, #92]	@ (80015fc <MX_CAN2_Init+0x64>)
 800159e:	4a18      	ldr	r2, [pc, #96]	@ (8001600 <MX_CAN2_Init+0x68>)
 80015a0:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 5;
 80015a2:	4b16      	ldr	r3, [pc, #88]	@ (80015fc <MX_CAN2_Init+0x64>)
 80015a4:	2205      	movs	r2, #5
 80015a6:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 80015a8:	4b14      	ldr	r3, [pc, #80]	@ (80015fc <MX_CAN2_Init+0x64>)
 80015aa:	2200      	movs	r2, #0
 80015ac:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80015ae:	4b13      	ldr	r3, [pc, #76]	@ (80015fc <MX_CAN2_Init+0x64>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_15TQ;
 80015b4:	4b11      	ldr	r3, [pc, #68]	@ (80015fc <MX_CAN2_Init+0x64>)
 80015b6:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 80015ba:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_2TQ;
 80015bc:	4b0f      	ldr	r3, [pc, #60]	@ (80015fc <MX_CAN2_Init+0x64>)
 80015be:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80015c2:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 80015c4:	4b0d      	ldr	r3, [pc, #52]	@ (80015fc <MX_CAN2_Init+0x64>)
 80015c6:	2200      	movs	r2, #0
 80015c8:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 80015ca:	4b0c      	ldr	r3, [pc, #48]	@ (80015fc <MX_CAN2_Init+0x64>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 80015d0:	4b0a      	ldr	r3, [pc, #40]	@ (80015fc <MX_CAN2_Init+0x64>)
 80015d2:	2200      	movs	r2, #0
 80015d4:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 80015d6:	4b09      	ldr	r3, [pc, #36]	@ (80015fc <MX_CAN2_Init+0x64>)
 80015d8:	2200      	movs	r2, #0
 80015da:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 80015dc:	4b07      	ldr	r3, [pc, #28]	@ (80015fc <MX_CAN2_Init+0x64>)
 80015de:	2200      	movs	r2, #0
 80015e0:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 80015e2:	4b06      	ldr	r3, [pc, #24]	@ (80015fc <MX_CAN2_Init+0x64>)
 80015e4:	2200      	movs	r2, #0
 80015e6:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 80015e8:	4804      	ldr	r0, [pc, #16]	@ (80015fc <MX_CAN2_Init+0x64>)
 80015ea:	f002 f805 	bl	80035f8 <HAL_CAN_Init>
 80015ee:	4603      	mov	r3, r0
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d001      	beq.n	80015f8 <MX_CAN2_Init+0x60>
  {
    Error_Handler();
 80015f4:	f000 fe40 	bl	8002278 <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 80015f8:	bf00      	nop
 80015fa:	bd80      	pop	{r7, pc}
 80015fc:	200000bc 	.word	0x200000bc
 8001600:	40006800 	.word	0x40006800

08001604 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b09a      	sub	sp, #104	@ 0x68
 8001608:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800160a:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800160e:	2200      	movs	r2, #0
 8001610:	601a      	str	r2, [r3, #0]
 8001612:	605a      	str	r2, [r3, #4]
 8001614:	609a      	str	r2, [r3, #8]
 8001616:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001618:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800161c:	2200      	movs	r2, #0
 800161e:	601a      	str	r2, [r3, #0]
 8001620:	605a      	str	r2, [r3, #4]
 8001622:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001624:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001628:	2200      	movs	r2, #0
 800162a:	601a      	str	r2, [r3, #0]
 800162c:	605a      	str	r2, [r3, #4]
 800162e:	609a      	str	r2, [r3, #8]
 8001630:	60da      	str	r2, [r3, #12]
 8001632:	611a      	str	r2, [r3, #16]
 8001634:	615a      	str	r2, [r3, #20]
 8001636:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001638:	1d3b      	adds	r3, r7, #4
 800163a:	222c      	movs	r2, #44	@ 0x2c
 800163c:	2100      	movs	r1, #0
 800163e:	4618      	mov	r0, r3
 8001640:	f008 f8dc 	bl	80097fc <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001644:	4b43      	ldr	r3, [pc, #268]	@ (8001754 <MX_TIM1_Init+0x150>)
 8001646:	4a44      	ldr	r2, [pc, #272]	@ (8001758 <MX_TIM1_Init+0x154>)
 8001648:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 18000-1;
 800164a:	4b42      	ldr	r3, [pc, #264]	@ (8001754 <MX_TIM1_Init+0x150>)
 800164c:	f244 624f 	movw	r2, #17999	@ 0x464f
 8001650:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001652:	4b40      	ldr	r3, [pc, #256]	@ (8001754 <MX_TIM1_Init+0x150>)
 8001654:	2200      	movs	r2, #0
 8001656:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 10000-1;
 8001658:	4b3e      	ldr	r3, [pc, #248]	@ (8001754 <MX_TIM1_Init+0x150>)
 800165a:	f242 720f 	movw	r2, #9999	@ 0x270f
 800165e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001660:	4b3c      	ldr	r3, [pc, #240]	@ (8001754 <MX_TIM1_Init+0x150>)
 8001662:	2200      	movs	r2, #0
 8001664:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001666:	4b3b      	ldr	r3, [pc, #236]	@ (8001754 <MX_TIM1_Init+0x150>)
 8001668:	2200      	movs	r2, #0
 800166a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800166c:	4b39      	ldr	r3, [pc, #228]	@ (8001754 <MX_TIM1_Init+0x150>)
 800166e:	2200      	movs	r2, #0
 8001670:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001672:	4838      	ldr	r0, [pc, #224]	@ (8001754 <MX_TIM1_Init+0x150>)
 8001674:	f003 fdb0 	bl	80051d8 <HAL_TIM_Base_Init>
 8001678:	4603      	mov	r3, r0
 800167a:	2b00      	cmp	r3, #0
 800167c:	d001      	beq.n	8001682 <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 800167e:	f000 fdfb 	bl	8002278 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001682:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001686:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001688:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800168c:	4619      	mov	r1, r3
 800168e:	4831      	ldr	r0, [pc, #196]	@ (8001754 <MX_TIM1_Init+0x150>)
 8001690:	f004 fcf4 	bl	800607c <HAL_TIM_ConfigClockSource>
 8001694:	4603      	mov	r3, r0
 8001696:	2b00      	cmp	r3, #0
 8001698:	d001      	beq.n	800169e <MX_TIM1_Init+0x9a>
  {
    Error_Handler();
 800169a:	f000 fded 	bl	8002278 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 800169e:	482d      	ldr	r0, [pc, #180]	@ (8001754 <MX_TIM1_Init+0x150>)
 80016a0:	f003 fe6a 	bl	8005378 <HAL_TIM_OC_Init>
 80016a4:	4603      	mov	r3, r0
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d001      	beq.n	80016ae <MX_TIM1_Init+0xaa>
  {
    Error_Handler();
 80016aa:	f000 fde5 	bl	8002278 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016ae:	2300      	movs	r3, #0
 80016b0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80016b2:	2300      	movs	r3, #0
 80016b4:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016b6:	2300      	movs	r3, #0
 80016b8:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80016ba:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80016be:	4619      	mov	r1, r3
 80016c0:	4824      	ldr	r0, [pc, #144]	@ (8001754 <MX_TIM1_Init+0x150>)
 80016c2:	f005 f981 	bl	80069c8 <HAL_TIMEx_MasterConfigSynchronization>
 80016c6:	4603      	mov	r3, r0
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d001      	beq.n	80016d0 <MX_TIM1_Init+0xcc>
  {
    Error_Handler();
 80016cc:	f000 fdd4 	bl	8002278 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80016d0:	2300      	movs	r3, #0
 80016d2:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 10000-1;
 80016d4:	f242 730f 	movw	r3, #9999	@ 0x270f
 80016d8:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80016da:	2300      	movs	r3, #0
 80016dc:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80016de:	2300      	movs	r3, #0
 80016e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80016e2:	2300      	movs	r3, #0
 80016e4:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80016e6:	2300      	movs	r3, #0
 80016e8:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80016ea:	2300      	movs	r3, #0
 80016ec:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80016ee:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80016f2:	2200      	movs	r2, #0
 80016f4:	4619      	mov	r1, r3
 80016f6:	4817      	ldr	r0, [pc, #92]	@ (8001754 <MX_TIM1_Init+0x150>)
 80016f8:	f004 fb32 	bl	8005d60 <HAL_TIM_OC_ConfigChannel>
 80016fc:	4603      	mov	r3, r0
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d001      	beq.n	8001706 <MX_TIM1_Init+0x102>
  {
    Error_Handler();
 8001702:	f000 fdb9 	bl	8002278 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001706:	2300      	movs	r3, #0
 8001708:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800170a:	2300      	movs	r3, #0
 800170c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800170e:	2300      	movs	r3, #0
 8001710:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001712:	2300      	movs	r3, #0
 8001714:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001716:	2300      	movs	r3, #0
 8001718:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800171a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800171e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001720:	2300      	movs	r3, #0
 8001722:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001724:	2300      	movs	r3, #0
 8001726:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001728:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800172c:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 800172e:	2300      	movs	r3, #0
 8001730:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001732:	2300      	movs	r3, #0
 8001734:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001736:	1d3b      	adds	r3, r7, #4
 8001738:	4619      	mov	r1, r3
 800173a:	4806      	ldr	r0, [pc, #24]	@ (8001754 <MX_TIM1_Init+0x150>)
 800173c:	f005 f9d2 	bl	8006ae4 <HAL_TIMEx_ConfigBreakDeadTime>
 8001740:	4603      	mov	r3, r0
 8001742:	2b00      	cmp	r3, #0
 8001744:	d001      	beq.n	800174a <MX_TIM1_Init+0x146>
  {
    Error_Handler();
 8001746:	f000 fd97 	bl	8002278 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800174a:	bf00      	nop
 800174c:	3768      	adds	r7, #104	@ 0x68
 800174e:	46bd      	mov	sp, r7
 8001750:	bd80      	pop	{r7, pc}
 8001752:	bf00      	nop
 8001754:	200000e4 	.word	0x200000e4
 8001758:	40010000 	.word	0x40010000

0800175c <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b09a      	sub	sp, #104	@ 0x68
 8001760:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001762:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8001766:	2200      	movs	r2, #0
 8001768:	601a      	str	r2, [r3, #0]
 800176a:	605a      	str	r2, [r3, #4]
 800176c:	609a      	str	r2, [r3, #8]
 800176e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001770:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001774:	2200      	movs	r2, #0
 8001776:	601a      	str	r2, [r3, #0]
 8001778:	605a      	str	r2, [r3, #4]
 800177a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800177c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001780:	2200      	movs	r2, #0
 8001782:	601a      	str	r2, [r3, #0]
 8001784:	605a      	str	r2, [r3, #4]
 8001786:	609a      	str	r2, [r3, #8]
 8001788:	60da      	str	r2, [r3, #12]
 800178a:	611a      	str	r2, [r3, #16]
 800178c:	615a      	str	r2, [r3, #20]
 800178e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001790:	1d3b      	adds	r3, r7, #4
 8001792:	222c      	movs	r2, #44	@ 0x2c
 8001794:	2100      	movs	r1, #0
 8001796:	4618      	mov	r0, r3
 8001798:	f008 f830 	bl	80097fc <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800179c:	4b43      	ldr	r3, [pc, #268]	@ (80018ac <MX_TIM8_Init+0x150>)
 800179e:	4a44      	ldr	r2, [pc, #272]	@ (80018b0 <MX_TIM8_Init+0x154>)
 80017a0:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 36-1;
 80017a2:	4b42      	ldr	r3, [pc, #264]	@ (80018ac <MX_TIM8_Init+0x150>)
 80017a4:	2223      	movs	r2, #35	@ 0x23
 80017a6:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017a8:	4b40      	ldr	r3, [pc, #256]	@ (80018ac <MX_TIM8_Init+0x150>)
 80017aa:	2200      	movs	r2, #0
 80017ac:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 100-1;
 80017ae:	4b3f      	ldr	r3, [pc, #252]	@ (80018ac <MX_TIM8_Init+0x150>)
 80017b0:	2263      	movs	r2, #99	@ 0x63
 80017b2:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017b4:	4b3d      	ldr	r3, [pc, #244]	@ (80018ac <MX_TIM8_Init+0x150>)
 80017b6:	2200      	movs	r2, #0
 80017b8:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80017ba:	4b3c      	ldr	r3, [pc, #240]	@ (80018ac <MX_TIM8_Init+0x150>)
 80017bc:	2200      	movs	r2, #0
 80017be:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017c0:	4b3a      	ldr	r3, [pc, #232]	@ (80018ac <MX_TIM8_Init+0x150>)
 80017c2:	2200      	movs	r2, #0
 80017c4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80017c6:	4839      	ldr	r0, [pc, #228]	@ (80018ac <MX_TIM8_Init+0x150>)
 80017c8:	f003 fd06 	bl	80051d8 <HAL_TIM_Base_Init>
 80017cc:	4603      	mov	r3, r0
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d001      	beq.n	80017d6 <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 80017d2:	f000 fd51 	bl	8002278 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80017d6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80017da:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80017dc:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80017e0:	4619      	mov	r1, r3
 80017e2:	4832      	ldr	r0, [pc, #200]	@ (80018ac <MX_TIM8_Init+0x150>)
 80017e4:	f004 fc4a 	bl	800607c <HAL_TIM_ConfigClockSource>
 80017e8:	4603      	mov	r3, r0
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d001      	beq.n	80017f2 <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 80017ee:	f000 fd43 	bl	8002278 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 80017f2:	482e      	ldr	r0, [pc, #184]	@ (80018ac <MX_TIM8_Init+0x150>)
 80017f4:	f004 f838 	bl	8005868 <HAL_TIM_PWM_Init>
 80017f8:	4603      	mov	r3, r0
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d001      	beq.n	8001802 <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 80017fe:	f000 fd3b 	bl	8002278 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001802:	2300      	movs	r3, #0
 8001804:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001806:	2300      	movs	r3, #0
 8001808:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800180a:	2300      	movs	r3, #0
 800180c:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800180e:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001812:	4619      	mov	r1, r3
 8001814:	4825      	ldr	r0, [pc, #148]	@ (80018ac <MX_TIM8_Init+0x150>)
 8001816:	f005 f8d7 	bl	80069c8 <HAL_TIMEx_MasterConfigSynchronization>
 800181a:	4603      	mov	r3, r0
 800181c:	2b00      	cmp	r3, #0
 800181e:	d001      	beq.n	8001824 <MX_TIM8_Init+0xc8>
  {
    Error_Handler();
 8001820:	f000 fd2a 	bl	8002278 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001824:	2360      	movs	r3, #96	@ 0x60
 8001826:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 8001828:	2300      	movs	r3, #0
 800182a:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800182c:	2300      	movs	r3, #0
 800182e:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001830:	2300      	movs	r3, #0
 8001832:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001834:	2300      	movs	r3, #0
 8001836:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001838:	2300      	movs	r3, #0
 800183a:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800183c:	2300      	movs	r3, #0
 800183e:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001840:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001844:	2208      	movs	r2, #8
 8001846:	4619      	mov	r1, r3
 8001848:	4818      	ldr	r0, [pc, #96]	@ (80018ac <MX_TIM8_Init+0x150>)
 800184a:	f004 fb03 	bl	8005e54 <HAL_TIM_PWM_ConfigChannel>
 800184e:	4603      	mov	r3, r0
 8001850:	2b00      	cmp	r3, #0
 8001852:	d001      	beq.n	8001858 <MX_TIM8_Init+0xfc>
  {
    Error_Handler();
 8001854:	f000 fd10 	bl	8002278 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001858:	2300      	movs	r3, #0
 800185a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800185c:	2300      	movs	r3, #0
 800185e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001860:	2300      	movs	r3, #0
 8001862:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001864:	2300      	movs	r3, #0
 8001866:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001868:	2300      	movs	r3, #0
 800186a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800186c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001870:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001872:	2300      	movs	r3, #0
 8001874:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001876:	2300      	movs	r3, #0
 8001878:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800187a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800187e:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001880:	2300      	movs	r3, #0
 8001882:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001884:	2300      	movs	r3, #0
 8001886:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8001888:	1d3b      	adds	r3, r7, #4
 800188a:	4619      	mov	r1, r3
 800188c:	4807      	ldr	r0, [pc, #28]	@ (80018ac <MX_TIM8_Init+0x150>)
 800188e:	f005 f929 	bl	8006ae4 <HAL_TIMEx_ConfigBreakDeadTime>
 8001892:	4603      	mov	r3, r0
 8001894:	2b00      	cmp	r3, #0
 8001896:	d001      	beq.n	800189c <MX_TIM8_Init+0x140>
  {
    Error_Handler();
 8001898:	f000 fcee 	bl	8002278 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 800189c:	4803      	ldr	r0, [pc, #12]	@ (80018ac <MX_TIM8_Init+0x150>)
 800189e:	f000 fe4f 	bl	8002540 <HAL_TIM_MspPostInit>

}
 80018a2:	bf00      	nop
 80018a4:	3768      	adds	r7, #104	@ 0x68
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bd80      	pop	{r7, pc}
 80018aa:	bf00      	nop
 80018ac:	20000130 	.word	0x20000130
 80018b0:	40010400 	.word	0x40010400

080018b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b08a      	sub	sp, #40	@ 0x28
 80018b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018ba:	f107 0314 	add.w	r3, r7, #20
 80018be:	2200      	movs	r2, #0
 80018c0:	601a      	str	r2, [r3, #0]
 80018c2:	605a      	str	r2, [r3, #4]
 80018c4:	609a      	str	r2, [r3, #8]
 80018c6:	60da      	str	r2, [r3, #12]
 80018c8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80018ca:	4b4c      	ldr	r3, [pc, #304]	@ (80019fc <MX_GPIO_Init+0x148>)
 80018cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018ce:	4a4b      	ldr	r2, [pc, #300]	@ (80019fc <MX_GPIO_Init+0x148>)
 80018d0:	f043 0304 	orr.w	r3, r3, #4
 80018d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80018d6:	4b49      	ldr	r3, [pc, #292]	@ (80019fc <MX_GPIO_Init+0x148>)
 80018d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018da:	f003 0304 	and.w	r3, r3, #4
 80018de:	613b      	str	r3, [r7, #16]
 80018e0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80018e2:	4b46      	ldr	r3, [pc, #280]	@ (80019fc <MX_GPIO_Init+0x148>)
 80018e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018e6:	4a45      	ldr	r2, [pc, #276]	@ (80019fc <MX_GPIO_Init+0x148>)
 80018e8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80018ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80018ee:	4b43      	ldr	r3, [pc, #268]	@ (80019fc <MX_GPIO_Init+0x148>)
 80018f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80018f6:	60fb      	str	r3, [r7, #12]
 80018f8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80018fa:	4b40      	ldr	r3, [pc, #256]	@ (80019fc <MX_GPIO_Init+0x148>)
 80018fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018fe:	4a3f      	ldr	r2, [pc, #252]	@ (80019fc <MX_GPIO_Init+0x148>)
 8001900:	f043 0301 	orr.w	r3, r3, #1
 8001904:	6313      	str	r3, [r2, #48]	@ 0x30
 8001906:	4b3d      	ldr	r3, [pc, #244]	@ (80019fc <MX_GPIO_Init+0x148>)
 8001908:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800190a:	f003 0301 	and.w	r3, r3, #1
 800190e:	60bb      	str	r3, [r7, #8]
 8001910:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001912:	4b3a      	ldr	r3, [pc, #232]	@ (80019fc <MX_GPIO_Init+0x148>)
 8001914:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001916:	4a39      	ldr	r2, [pc, #228]	@ (80019fc <MX_GPIO_Init+0x148>)
 8001918:	f043 0302 	orr.w	r3, r3, #2
 800191c:	6313      	str	r3, [r2, #48]	@ 0x30
 800191e:	4b37      	ldr	r3, [pc, #220]	@ (80019fc <MX_GPIO_Init+0x148>)
 8001920:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001922:	f003 0302 	and.w	r3, r3, #2
 8001926:	607b      	str	r3, [r7, #4]
 8001928:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800192a:	4b34      	ldr	r3, [pc, #208]	@ (80019fc <MX_GPIO_Init+0x148>)
 800192c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800192e:	4a33      	ldr	r2, [pc, #204]	@ (80019fc <MX_GPIO_Init+0x148>)
 8001930:	f043 0308 	orr.w	r3, r3, #8
 8001934:	6313      	str	r3, [r2, #48]	@ 0x30
 8001936:	4b31      	ldr	r3, [pc, #196]	@ (80019fc <MX_GPIO_Init+0x148>)
 8001938:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800193a:	f003 0308 	and.w	r3, r3, #8
 800193e:	603b      	str	r3, [r7, #0]
 8001940:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_10, GPIO_PIN_RESET);
 8001942:	2200      	movs	r2, #0
 8001944:	f44f 6186 	mov.w	r1, #1072	@ 0x430
 8001948:	482d      	ldr	r0, [pc, #180]	@ (8001a00 <MX_GPIO_Init+0x14c>)
 800194a:	f002 ff79 	bl	8004840 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 800194e:	2200      	movs	r2, #0
 8001950:	f44f 4140 	mov.w	r1, #49152	@ 0xc000
 8001954:	482b      	ldr	r0, [pc, #172]	@ (8001a04 <MX_GPIO_Init+0x150>)
 8001956:	f002 ff73 	bl	8004840 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6|GPIO_PIN_9, GPIO_PIN_RESET);
 800195a:	2200      	movs	r2, #0
 800195c:	f44f 7110 	mov.w	r1, #576	@ 0x240
 8001960:	4829      	ldr	r0, [pc, #164]	@ (8001a08 <MX_GPIO_Init+0x154>)
 8001962:	f002 ff6d 	bl	8004840 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA4 PA5 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_10;
 8001966:	f44f 6386 	mov.w	r3, #1072	@ 0x430
 800196a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800196c:	2301      	movs	r3, #1
 800196e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001970:	2300      	movs	r3, #0
 8001972:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001974:	2300      	movs	r3, #0
 8001976:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001978:	f107 0314 	add.w	r3, r7, #20
 800197c:	4619      	mov	r1, r3
 800197e:	4820      	ldr	r0, [pc, #128]	@ (8001a00 <MX_GPIO_Init+0x14c>)
 8001980:	f002 fd9a 	bl	80044b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001984:	2340      	movs	r3, #64	@ 0x40
 8001986:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001988:	2300      	movs	r3, #0
 800198a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800198c:	2301      	movs	r3, #1
 800198e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001990:	f107 0314 	add.w	r3, r7, #20
 8001994:	4619      	mov	r1, r3
 8001996:	481a      	ldr	r0, [pc, #104]	@ (8001a00 <MX_GPIO_Init+0x14c>)
 8001998:	f002 fd8e 	bl	80044b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 800199c:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 80019a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019a2:	2301      	movs	r3, #1
 80019a4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019a6:	2300      	movs	r3, #0
 80019a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019aa:	2300      	movs	r3, #0
 80019ac:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019ae:	f107 0314 	add.w	r3, r7, #20
 80019b2:	4619      	mov	r1, r3
 80019b4:	4813      	ldr	r0, [pc, #76]	@ (8001a04 <MX_GPIO_Init+0x150>)
 80019b6:	f002 fd7f 	bl	80044b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 80019ba:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80019be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019c0:	2300      	movs	r3, #0
 80019c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019c4:	2300      	movs	r3, #0
 80019c6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80019c8:	f107 0314 	add.w	r3, r7, #20
 80019cc:	4619      	mov	r1, r3
 80019ce:	480f      	ldr	r0, [pc, #60]	@ (8001a0c <MX_GPIO_Init+0x158>)
 80019d0:	f002 fd72 	bl	80044b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC6 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 80019d4:	f44f 7310 	mov.w	r3, #576	@ 0x240
 80019d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019da:	2301      	movs	r3, #1
 80019dc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019de:	2300      	movs	r3, #0
 80019e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019e2:	2300      	movs	r3, #0
 80019e4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019e6:	f107 0314 	add.w	r3, r7, #20
 80019ea:	4619      	mov	r1, r3
 80019ec:	4806      	ldr	r0, [pc, #24]	@ (8001a08 <MX_GPIO_Init+0x154>)
 80019ee:	f002 fd63 	bl	80044b8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80019f2:	bf00      	nop
 80019f4:	3728      	adds	r7, #40	@ 0x28
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bd80      	pop	{r7, pc}
 80019fa:	bf00      	nop
 80019fc:	40023800 	.word	0x40023800
 8001a00:	40020000 	.word	0x40020000
 8001a04:	40020400 	.word	0x40020400
 8001a08:	40020800 	.word	0x40020800
 8001a0c:	40020c00 	.word	0x40020c00

08001a10 <vApplicationIdleHook>:

/* USER CODE BEGIN 4 */

/***************************** Idle Task *****************************/
void vApplicationIdleHook(void)
{
 8001a10:	b480      	push	{r7}
 8001a12:	af00      	add	r7, sp, #0

}
 8001a14:	bf00      	nop
 8001a16:	46bd      	mov	sp, r7
 8001a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1c:	4770      	bx	lr
	...

08001a20 <Task1_Handler>:

/***************************** Node Guarding Task *****************************/
void Task1_Handler(void* pvParameters)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b084      	sub	sp, #16
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = NODE_GUARDING_PERIOD;
 8001a28:	2364      	movs	r3, #100	@ 0x64
 8001a2a:	60fb      	str	r3, [r7, #12]

	xLastWakeTime = xTaskGetTickCount();
 8001a2c:	f006 fa22 	bl	8007e74 <xTaskGetTickCount>
 8001a30:	4603      	mov	r3, r0
 8001a32:	60bb      	str	r3, [r7, #8]

	for (;;)
	{
		// Suspend task until period
		vTaskDelayUntil(&xLastWakeTime, xFrequency);
 8001a34:	f107 0308 	add.w	r3, r7, #8
 8001a38:	68f9      	ldr	r1, [r7, #12]
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	f006 f830 	bl	8007aa0 <xTaskDelayUntil>

		// Inverter Node Guarding Frame
		nodeGuarding(&hcan1);
 8001a40:	4802      	ldr	r0, [pc, #8]	@ (8001a4c <Task1_Handler+0x2c>)
 8001a42:	f7fe fde1 	bl	8000608 <nodeGuarding>
		vTaskDelayUntil(&xLastWakeTime, xFrequency);
 8001a46:	bf00      	nop
 8001a48:	e7f4      	b.n	8001a34 <Task1_Handler+0x14>
 8001a4a:	bf00      	nop
 8001a4c:	20000094 	.word	0x20000094

08001a50 <Task2_Handler>:
	}
}

/***************************** Torque Control Task *****************************/
void Task2_Handler(void* pvParameters)
{
 8001a50:	b590      	push	{r4, r7, lr}
 8001a52:	b085      	sub	sp, #20
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = TORQUE_CONTROL_PERIOD;
 8001a58:	230a      	movs	r3, #10
 8001a5a:	60fb      	str	r3, [r7, #12]

	xLastWakeTime = xTaskGetTickCount();
 8001a5c:	f006 fa0a 	bl	8007e74 <xTaskGetTickCount>
 8001a60:	4603      	mov	r3, r0
 8001a62:	60bb      	str	r3, [r7, #8]

	for (;;)
	{
		// Suspend task until period
		vTaskDelayUntil(&xLastWakeTime, xFrequency);
 8001a64:	f107 0308 	add.w	r3, r7, #8
 8001a68:	68f9      	ldr	r1, [r7, #12]
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	f006 f818 	bl	8007aa0 <xTaskDelayUntil>

		// Throttle Sensor Error Checks
		errorSet[PRIM_THROTTLE_SENS_ERR] = primaryThrottleSensorErrorCheck();
 8001a70:	2400      	movs	r4, #0
 8001a72:	f000 facd 	bl	8002010 <primaryThrottleSensorErrorCheck>
 8001a76:	4603      	mov	r3, r0
 8001a78:	461a      	mov	r2, r3
 8001a7a:	4b0a      	ldr	r3, [pc, #40]	@ (8001aa4 <Task2_Handler+0x54>)
 8001a7c:	551a      	strb	r2, [r3, r4]

		errorSet[SECOND_THROTTLE_SENS_ERR] = secondaryThrottleSensorErrorCheck();
 8001a7e:	2401      	movs	r4, #1
 8001a80:	f000 fae4 	bl	800204c <secondaryThrottleSensorErrorCheck>
 8001a84:	4603      	mov	r3, r0
 8001a86:	461a      	mov	r2, r3
 8001a88:	4b06      	ldr	r3, [pc, #24]	@ (8001aa4 <Task2_Handler+0x54>)
 8001a8a:	551a      	strb	r2, [r3, r4]

		errorSet[THROTTLE_OFFSET_ERROR] = throttleSensorDeviationCheck();
 8001a8c:	2402      	movs	r4, #2
 8001a8e:	f000 fb01 	bl	8002094 <throttleSensorDeviationCheck>
 8001a92:	4603      	mov	r3, r0
 8001a94:	461a      	mov	r2, r3
 8001a96:	4b03      	ldr	r3, [pc, #12]	@ (8001aa4 <Task2_Handler+0x54>)
 8001a98:	551a      	strb	r2, [r3, r4]

		// Torque Request
		torqueRequest();
 8001a9a:	f000 fb7f 	bl	800219c <torqueRequest>
		vTaskDelayUntil(&xLastWakeTime, xFrequency);
 8001a9e:	bf00      	nop
 8001aa0:	e7e0      	b.n	8001a64 <Task2_Handler+0x14>
 8001aa2:	bf00      	nop
 8001aa4:	200001f4 	.word	0x200001f4

08001aa8 <Task3_Handler>:
	}
}

/***************************** Ignition Task *****************************/
void Task3_Handler(void* pvParameters)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b082      	sub	sp, #8
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
	for (;;)
	{
		if (HAL_GPIO_ReadPin(IGNITION_ENABLE_PORT, IGNITION_ENABLE_PIN) == IGNITION_ACTIVE_STATE)
 8001ab0:	4b07      	ldr	r3, [pc, #28]	@ (8001ad0 <Task3_Handler+0x28>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	2240      	movs	r2, #64	@ 0x40
 8001ab6:	4611      	mov	r1, r2
 8001ab8:	4618      	mov	r0, r3
 8001aba:	f002 fea9 	bl	8004810 <HAL_GPIO_ReadPin>
 8001abe:	4603      	mov	r3, r0
 8001ac0:	461a      	mov	r2, r3
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	429a      	cmp	r2, r3
 8001ac6:	d1f3      	bne.n	8001ab0 <Task3_Handler+0x8>
		{
			ignitionTask();
 8001ac8:	f000 f926 	bl	8001d18 <ignitionTask>
		if (HAL_GPIO_ReadPin(IGNITION_ENABLE_PORT, IGNITION_ENABLE_PIN) == IGNITION_ACTIVE_STATE)
 8001acc:	e7f0      	b.n	8001ab0 <Task3_Handler+0x8>
 8001ace:	bf00      	nop
 8001ad0:	20000014 	.word	0x20000014

08001ad4 <Task4_Handler>:
	}
}

/***************************** CAN Data Processing Task *****************************/
void Task4_Handler(void* pvParameters)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b086      	sub	sp, #24
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
	CAN_MsgHeaderTypedef msg;

	for (;;)
	{
		// Get Low Priority CAN Queue Data
		if (xQueueReceive(lowPriorityQueue, &msg, portMAX_DELAY) == pdPASS)
 8001adc:	4b3a      	ldr	r3, [pc, #232]	@ (8001bc8 <Task4_Handler+0xf4>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f107 0108 	add.w	r1, r7, #8
 8001ae4:	f04f 32ff 	mov.w	r2, #4294967295
 8001ae8:	4618      	mov	r0, r3
 8001aea:	f005 fbf7 	bl	80072dc <xQueueReceive>
 8001aee:	4603      	mov	r3, r0
 8001af0:	2b01      	cmp	r3, #1
 8001af2:	d1f3      	bne.n	8001adc <Task4_Handler+0x8>
		{
			switch (msg.StdID)
 8001af4:	693b      	ldr	r3, [r7, #16]
 8001af6:	f240 3251 	movw	r2, #849	@ 0x351
 8001afa:	4293      	cmp	r3, r2
 8001afc:	d051      	beq.n	8001ba2 <Task4_Handler+0xce>
 8001afe:	f240 3251 	movw	r2, #849	@ 0x351
 8001b02:	4293      	cmp	r3, r2
 8001b04:	d85d      	bhi.n	8001bc2 <Task4_Handler+0xee>
 8001b06:	f240 3241 	movw	r2, #833	@ 0x341
 8001b0a:	4293      	cmp	r3, r2
 8001b0c:	d041      	beq.n	8001b92 <Task4_Handler+0xbe>
 8001b0e:	f240 3241 	movw	r2, #833	@ 0x341
 8001b12:	4293      	cmp	r3, r2
 8001b14:	d855      	bhi.n	8001bc2 <Task4_Handler+0xee>
 8001b16:	f240 3231 	movw	r2, #817	@ 0x331
 8001b1a:	4293      	cmp	r3, r2
 8001b1c:	d031      	beq.n	8001b82 <Task4_Handler+0xae>
 8001b1e:	f240 3231 	movw	r2, #817	@ 0x331
 8001b22:	4293      	cmp	r3, r2
 8001b24:	d84d      	bhi.n	8001bc2 <Task4_Handler+0xee>
 8001b26:	f240 3221 	movw	r2, #801	@ 0x321
 8001b2a:	4293      	cmp	r3, r2
 8001b2c:	d021      	beq.n	8001b72 <Task4_Handler+0x9e>
 8001b2e:	f240 3221 	movw	r2, #801	@ 0x321
 8001b32:	4293      	cmp	r3, r2
 8001b34:	d845      	bhi.n	8001bc2 <Task4_Handler+0xee>
 8001b36:	f240 3211 	movw	r2, #785	@ 0x311
 8001b3a:	4293      	cmp	r3, r2
 8001b3c:	d011      	beq.n	8001b62 <Task4_Handler+0x8e>
 8001b3e:	f240 3211 	movw	r2, #785	@ 0x311
 8001b42:	4293      	cmp	r3, r2
 8001b44:	d83d      	bhi.n	8001bc2 <Task4_Handler+0xee>
 8001b46:	2b37      	cmp	r3, #55	@ 0x37
 8001b48:	d003      	beq.n	8001b52 <Task4_Handler+0x7e>
 8001b4a:	f5b3 7fdd 	cmp.w	r3, #442	@ 0x1ba
 8001b4e:	d030      	beq.n	8001bb2 <Task4_Handler+0xde>
				break;
			case EMD_TxPDO_5_CANID:
				Unpack_EMD_TxPDO_5__DO_QUASAR_CANopen(&txpdo_5, msg.data, EMD_TxPDO_3_DLC);
				break;
			default:
				break;
 8001b50:	e037      	b.n	8001bc2 <Task4_Handler+0xee>
				Unpack_IMD_Info_isolation(&imdInfo, msg.data, IMD_Info_DLC);
 8001b52:	f107 0308 	add.w	r3, r7, #8
 8001b56:	2206      	movs	r2, #6
 8001b58:	4619      	mov	r1, r3
 8001b5a:	481c      	ldr	r0, [pc, #112]	@ (8001bcc <Task4_Handler+0xf8>)
 8001b5c:	f7ff f971 	bl	8000e42 <Unpack_IMD_Info_isolation>
				break;
 8001b60:	e030      	b.n	8001bc4 <Task4_Handler+0xf0>
				Unpack_TS_ECU1_TX1_Temp(&ecu1TX1, msg.data, TS_ECU1_TX1_DLC);
 8001b62:	f107 0308 	add.w	r3, r7, #8
 8001b66:	2205      	movs	r2, #5
 8001b68:	4619      	mov	r1, r3
 8001b6a:	4819      	ldr	r0, [pc, #100]	@ (8001bd0 <Task4_Handler+0xfc>)
 8001b6c:	f000 fe04 	bl	8002778 <Unpack_TS_ECU1_TX1_Temp>
				break;
 8001b70:	e028      	b.n	8001bc4 <Task4_Handler+0xf0>
				Unpack_TS_ECU2_TX1_Temp(&ecu2TX1, msg.data, TS_ECU2_TX1_DLC);
 8001b72:	f107 0308 	add.w	r3, r7, #8
 8001b76:	2205      	movs	r2, #5
 8001b78:	4619      	mov	r1, r3
 8001b7a:	4816      	ldr	r0, [pc, #88]	@ (8001bd4 <Task4_Handler+0x100>)
 8001b7c:	f000 fe5e 	bl	800283c <Unpack_TS_ECU2_TX1_Temp>
				break;
 8001b80:	e020      	b.n	8001bc4 <Task4_Handler+0xf0>
				Unpack_TS_ECU3_TX1_Temp(&ecu3TX1, msg.data, TS_ECU3_TX1_DLC);
 8001b82:	f107 0308 	add.w	r3, r7, #8
 8001b86:	2205      	movs	r2, #5
 8001b88:	4619      	mov	r1, r3
 8001b8a:	4813      	ldr	r0, [pc, #76]	@ (8001bd8 <Task4_Handler+0x104>)
 8001b8c:	f000 feb8 	bl	8002900 <Unpack_TS_ECU3_TX1_Temp>
				break;
 8001b90:	e018      	b.n	8001bc4 <Task4_Handler+0xf0>
				Unpack_TS_ECU4_TX1_Temp(&ecu4TX1, msg.data, TS_ECU4_TX1_DLC);
 8001b92:	f107 0308 	add.w	r3, r7, #8
 8001b96:	2205      	movs	r2, #5
 8001b98:	4619      	mov	r1, r3
 8001b9a:	4810      	ldr	r0, [pc, #64]	@ (8001bdc <Task4_Handler+0x108>)
 8001b9c:	f000 ff12 	bl	80029c4 <Unpack_TS_ECU4_TX1_Temp>
				break;
 8001ba0:	e010      	b.n	8001bc4 <Task4_Handler+0xf0>
				Unpack_TS_ECU5_TX1_Temp(&ecu5TX1, msg.data, TS_ECU5_TX1_DLC);
 8001ba2:	f107 0308 	add.w	r3, r7, #8
 8001ba6:	2205      	movs	r2, #5
 8001ba8:	4619      	mov	r1, r3
 8001baa:	480d      	ldr	r0, [pc, #52]	@ (8001be0 <Task4_Handler+0x10c>)
 8001bac:	f000 ff6c 	bl	8002a88 <Unpack_TS_ECU5_TX1_Temp>
				break;
 8001bb0:	e008      	b.n	8001bc4 <Task4_Handler+0xf0>
				Unpack_EMD_TxPDO_5__DO_QUASAR_CANopen(&txpdo_5, msg.data, EMD_TxPDO_3_DLC);
 8001bb2:	f107 0308 	add.w	r3, r7, #8
 8001bb6:	2208      	movs	r2, #8
 8001bb8:	4619      	mov	r1, r3
 8001bba:	480a      	ldr	r0, [pc, #40]	@ (8001be4 <Task4_Handler+0x110>)
 8001bbc:	f7fe fffb 	bl	8000bb6 <Unpack_EMD_TxPDO_5__DO_QUASAR_CANopen>
				break;
 8001bc0:	e000      	b.n	8001bc4 <Task4_Handler+0xf0>
				break;
 8001bc2:	bf00      	nop
		if (xQueueReceive(lowPriorityQueue, &msg, portMAX_DELAY) == pdPASS)
 8001bc4:	e78a      	b.n	8001adc <Task4_Handler+0x8>
 8001bc6:	bf00      	nop
 8001bc8:	200002ac 	.word	0x200002ac
 8001bcc:	200001fc 	.word	0x200001fc
 8001bd0:	2000020c 	.word	0x2000020c
 8001bd4:	2000021c 	.word	0x2000021c
 8001bd8:	2000022c 	.word	0x2000022c
 8001bdc:	2000023c 	.word	0x2000023c
 8001be0:	2000024c 	.word	0x2000024c
 8001be4:	2000026c 	.word	0x2000026c

08001be8 <Task5_Handler>:
	}
}

/***************************** Safety Systems Check *****************************/
void Task5_Handler(void* pvParameters)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b082      	sub	sp, #8
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
	for (;;)
	{
		motorTemp = txpdo_5.EMD_ACT_MotorTemperature;
 8001bf0:	4b0f      	ldr	r3, [pc, #60]	@ (8001c30 <Task5_Handler+0x48>)
 8001bf2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001bf6:	461a      	mov	r2, r3
 8001bf8:	4b0e      	ldr	r3, [pc, #56]	@ (8001c34 <Task5_Handler+0x4c>)
 8001bfa:	601a      	str	r2, [r3, #0]

		inverterTemp = txpdo_5.EMD_ACT_MaxJunctionTemp;
 8001bfc:	4b0c      	ldr	r3, [pc, #48]	@ (8001c30 <Task5_Handler+0x48>)
 8001bfe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c02:	461a      	mov	r2, r3
 8001c04:	4b0c      	ldr	r3, [pc, #48]	@ (8001c38 <Task5_Handler+0x50>)
 8001c06:	601a      	str	r2, [r3, #0]

		if (inverterTemp > INVERTER_TEMP_THRESHOLD)
 8001c08:	4b0b      	ldr	r3, [pc, #44]	@ (8001c38 <Task5_Handler+0x50>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	2b14      	cmp	r3, #20
 8001c0e:	dd07      	ble.n	8001c20 <Task5_Handler+0x38>
		{
		  // Enable Pump PWM
		  TIM8->CCR3 = 0;
 8001c10:	4b0a      	ldr	r3, [pc, #40]	@ (8001c3c <Task5_Handler+0x54>)
 8001c12:	2200      	movs	r2, #0
 8001c14:	63da      	str	r2, [r3, #60]	@ 0x3c

		  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);
 8001c16:	2108      	movs	r1, #8
 8001c18:	4809      	ldr	r0, [pc, #36]	@ (8001c40 <Task5_Handler+0x58>)
 8001c1a:	f003 fe87 	bl	800592c <HAL_TIM_PWM_Start>
 8001c1e:	e7e7      	b.n	8001bf0 <Task5_Handler+0x8>
		}
		else
		{
		  // Enable Pump PWM
		  TIM8->CCR3 = 0;
 8001c20:	4b06      	ldr	r3, [pc, #24]	@ (8001c3c <Task5_Handler+0x54>)
 8001c22:	2200      	movs	r2, #0
 8001c24:	63da      	str	r2, [r3, #60]	@ 0x3c

		  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);
 8001c26:	2108      	movs	r1, #8
 8001c28:	4805      	ldr	r0, [pc, #20]	@ (8001c40 <Task5_Handler+0x58>)
 8001c2a:	f003 fe7f 	bl	800592c <HAL_TIM_PWM_Start>
		motorTemp = txpdo_5.EMD_ACT_MotorTemperature;
 8001c2e:	e7df      	b.n	8001bf0 <Task5_Handler+0x8>
 8001c30:	2000026c 	.word	0x2000026c
 8001c34:	20000278 	.word	0x20000278
 8001c38:	2000027c 	.word	0x2000027c
 8001c3c:	40010400 	.word	0x40010400
 8001c40:	20000130 	.word	0x20000130

08001c44 <Task6_Handler>:
	}
}

/***************************** Torque Derate *****************************/
void Task6_Handler(void* pvParameters)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b086      	sub	sp, #24
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
	CAN_MsgHeaderTypedef msg;

	for (;;)
	{
		// Get Inverter Data
		if (xQueueReceive(highPriorityQueue, &msg, 100) == pdPASS)
 8001c4c:	4b13      	ldr	r3, [pc, #76]	@ (8001c9c <Task6_Handler+0x58>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f107 0108 	add.w	r1, r7, #8
 8001c54:	2264      	movs	r2, #100	@ 0x64
 8001c56:	4618      	mov	r0, r3
 8001c58:	f005 fb40 	bl	80072dc <xQueueReceive>
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	2b01      	cmp	r3, #1
 8001c60:	d1f4      	bne.n	8001c4c <Task6_Handler+0x8>
		{
			switch(msg.StdID)
 8001c62:	693b      	ldr	r3, [r7, #16]
 8001c64:	f240 32fa 	movw	r2, #1018	@ 0x3fa
 8001c68:	4293      	cmp	r3, r2
 8001c6a:	d003      	beq.n	8001c74 <Task6_Handler+0x30>
 8001c6c:	f5b3 6fd6 	cmp.w	r3, #1712	@ 0x6b0
 8001c70:	d00c      	beq.n	8001c8c <Task6_Handler+0x48>
				break;
			case BMS_CAN_ID:
				packSOC = (int)(msg.data[4] / 2);
				break;
			default:
				break;
 8001c72:	e012      	b.n	8001c9a <Task6_Handler+0x56>
				Unpack_EMD_TxPDO_3__DO_QUASAR_CANopen(&txpdo_3, msg.data, EMD_TxPDO_3_DLC);
 8001c74:	f107 0308 	add.w	r3, r7, #8
 8001c78:	2208      	movs	r2, #8
 8001c7a:	4619      	mov	r1, r3
 8001c7c:	4808      	ldr	r0, [pc, #32]	@ (8001ca0 <Task6_Handler+0x5c>)
 8001c7e:	f7fe ffdc 	bl	8000c3a <Unpack_EMD_TxPDO_3__DO_QUASAR_CANopen>
				motorRpm = txpdo_3.EMD_ACT_MotorSpeed;
 8001c82:	4b07      	ldr	r3, [pc, #28]	@ (8001ca0 <Task6_Handler+0x5c>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	4a07      	ldr	r2, [pc, #28]	@ (8001ca4 <Task6_Handler+0x60>)
 8001c88:	6013      	str	r3, [r2, #0]
				break;
 8001c8a:	e006      	b.n	8001c9a <Task6_Handler+0x56>
				packSOC = (int)(msg.data[4] / 2);
 8001c8c:	7b3b      	ldrb	r3, [r7, #12]
 8001c8e:	085b      	lsrs	r3, r3, #1
 8001c90:	b2db      	uxtb	r3, r3
 8001c92:	461a      	mov	r2, r3
 8001c94:	4b04      	ldr	r3, [pc, #16]	@ (8001ca8 <Task6_Handler+0x64>)
 8001c96:	601a      	str	r2, [r3, #0]
				break;
 8001c98:	bf00      	nop
		if (xQueueReceive(highPriorityQueue, &msg, 100) == pdPASS)
 8001c9a:	e7d7      	b.n	8001c4c <Task6_Handler+0x8>
 8001c9c:	200002b0 	.word	0x200002b0
 8001ca0:	2000025c 	.word	0x2000025c
 8001ca4:	20000274 	.word	0x20000274
 8001ca8:	2000028c 	.word	0x2000028c

08001cac <map>:
			}
		}
	}
}

long map(long x, long in_min, long in_max, long out_min, long out_max) {
 8001cac:	b480      	push	{r7}
 8001cae:	b085      	sub	sp, #20
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	60f8      	str	r0, [r7, #12]
 8001cb4:	60b9      	str	r1, [r7, #8]
 8001cb6:	607a      	str	r2, [r7, #4]
 8001cb8:	603b      	str	r3, [r7, #0]
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8001cba:	68fa      	ldr	r2, [r7, #12]
 8001cbc:	68bb      	ldr	r3, [r7, #8]
 8001cbe:	1ad3      	subs	r3, r2, r3
 8001cc0:	69b9      	ldr	r1, [r7, #24]
 8001cc2:	683a      	ldr	r2, [r7, #0]
 8001cc4:	1a8a      	subs	r2, r1, r2
 8001cc6:	fb03 f202 	mul.w	r2, r3, r2
 8001cca:	6879      	ldr	r1, [r7, #4]
 8001ccc:	68bb      	ldr	r3, [r7, #8]
 8001cce:	1acb      	subs	r3, r1, r3
 8001cd0:	fb92 f2f3 	sdiv	r2, r2, r3
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	4413      	add	r3, r2
}
 8001cd8:	4618      	mov	r0, r3
 8001cda:	3714      	adds	r7, #20
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce2:	4770      	bx	lr

08001ce4 <constrain>:

long constrain(long x, long out_min, long out_max)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	b085      	sub	sp, #20
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	60f8      	str	r0, [r7, #12]
 8001cec:	60b9      	str	r1, [r7, #8]
 8001cee:	607a      	str	r2, [r7, #4]
	if (x < out_min)
 8001cf0:	68fa      	ldr	r2, [r7, #12]
 8001cf2:	68bb      	ldr	r3, [r7, #8]
 8001cf4:	429a      	cmp	r2, r3
 8001cf6:	da01      	bge.n	8001cfc <constrain+0x18>
	{
		return out_min;
 8001cf8:	68bb      	ldr	r3, [r7, #8]
 8001cfa:	e006      	b.n	8001d0a <constrain+0x26>
	}

	if (x > out_max)
 8001cfc:	68fa      	ldr	r2, [r7, #12]
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	429a      	cmp	r2, r3
 8001d02:	dd01      	ble.n	8001d08 <constrain+0x24>
	{
		return out_max;
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	e000      	b.n	8001d0a <constrain+0x26>
	}

	return x;
 8001d08:	68fb      	ldr	r3, [r7, #12]
}
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	3714      	adds	r7, #20
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d14:	4770      	bx	lr
	...

08001d18 <ignitionTask>:

void ignitionTask(void)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	af00      	add	r7, sp, #0
	buttonState = HAL_GPIO_ReadPin(IGNITION_PORT, IGNITION_PIN);
 8001d1c:	4b25      	ldr	r3, [pc, #148]	@ (8001db4 <ignitionTask+0x9c>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001d24:	4611      	mov	r1, r2
 8001d26:	4618      	mov	r0, r3
 8001d28:	f002 fd72 	bl	8004810 <HAL_GPIO_ReadPin>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	461a      	mov	r2, r3
 8001d30:	4b21      	ldr	r3, [pc, #132]	@ (8001db8 <ignitionTask+0xa0>)
 8001d32:	701a      	strb	r2, [r3, #0]

	buttonPressTime = HAL_GetTick();
 8001d34:	f001 f826 	bl	8002d84 <HAL_GetTick>
 8001d38:	4603      	mov	r3, r0
 8001d3a:	4a20      	ldr	r2, [pc, #128]	@ (8001dbc <ignitionTask+0xa4>)
 8001d3c:	6013      	str	r3, [r2, #0]

	while (buttonState == IGNITION_ACTIVE)
 8001d3e:	e031      	b.n	8001da4 <ignitionTask+0x8c>
	{
		if (HAL_GetTick() - buttonPressTime > IGNITION_BUTTON_THRESHOLD)
 8001d40:	f001 f820 	bl	8002d84 <HAL_GetTick>
 8001d44:	4602      	mov	r2, r0
 8001d46:	4b1d      	ldr	r3, [pc, #116]	@ (8001dbc <ignitionTask+0xa4>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	1ad3      	subs	r3, r2, r3
 8001d4c:	2bc8      	cmp	r3, #200	@ 0xc8
 8001d4e:	d91d      	bls.n	8001d8c <ignitionTask+0x74>
		{
			startNode(&hcan1);
 8001d50:	481b      	ldr	r0, [pc, #108]	@ (8001dc0 <ignitionTask+0xa8>)
 8001d52:	f7fe fc89 	bl	8000668 <startNode>
			clearErrors(&hcan1);
 8001d56:	481a      	ldr	r0, [pc, #104]	@ (8001dc0 <ignitionTask+0xa8>)
 8001d58:	f7fe fcca 	bl	80006f0 <clearErrors>

			HAL_GPIO_WritePin(RTD_PIN_PORT, RTD_PIN, RTD_ACTIVE);
 8001d5c:	4b19      	ldr	r3, [pc, #100]	@ (8001dc4 <ignitionTask+0xac>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001d64:	2201      	movs	r2, #1
 8001d66:	4618      	mov	r0, r3
 8001d68:	f002 fd6a 	bl	8004840 <HAL_GPIO_WritePin>

			TIM1->CNT = 0;
 8001d6c:	4b16      	ldr	r3, [pc, #88]	@ (8001dc8 <ignitionTask+0xb0>)
 8001d6e:	2200      	movs	r2, #0
 8001d70:	625a      	str	r2, [r3, #36]	@ 0x24
			HAL_TIM_OC_Start_IT(&htim1, IGNITION_OUPUT_CAPTURE);
 8001d72:	2300      	movs	r3, #0
 8001d74:	4619      	mov	r1, r3
 8001d76:	4815      	ldr	r0, [pc, #84]	@ (8001dcc <ignitionTask+0xb4>)
 8001d78:	f003 fb60 	bl	800543c <HAL_TIM_OC_Start_IT>

			enableCar = true;
 8001d7c:	4b14      	ldr	r3, [pc, #80]	@ (8001dd0 <ignitionTask+0xb8>)
 8001d7e:	2201      	movs	r2, #1
 8001d80:	701a      	strb	r2, [r3, #0]

			buttonPressTime = HAL_GetTick();
 8001d82:	f000 ffff 	bl	8002d84 <HAL_GetTick>
 8001d86:	4603      	mov	r3, r0
 8001d88:	4a0c      	ldr	r2, [pc, #48]	@ (8001dbc <ignitionTask+0xa4>)
 8001d8a:	6013      	str	r3, [r2, #0]
		}

		buttonState = HAL_GPIO_ReadPin(IGNITION_PORT, IGNITION_PIN);
 8001d8c:	4b09      	ldr	r3, [pc, #36]	@ (8001db4 <ignitionTask+0x9c>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001d94:	4611      	mov	r1, r2
 8001d96:	4618      	mov	r0, r3
 8001d98:	f002 fd3a 	bl	8004810 <HAL_GPIO_ReadPin>
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	461a      	mov	r2, r3
 8001da0:	4b05      	ldr	r3, [pc, #20]	@ (8001db8 <ignitionTask+0xa0>)
 8001da2:	701a      	strb	r2, [r3, #0]
	while (buttonState == IGNITION_ACTIVE)
 8001da4:	4b04      	ldr	r3, [pc, #16]	@ (8001db8 <ignitionTask+0xa0>)
 8001da6:	781b      	ldrb	r3, [r3, #0]
 8001da8:	2200      	movs	r2, #0
 8001daa:	4293      	cmp	r3, r2
 8001dac:	d0c8      	beq.n	8001d40 <ignitionTask+0x28>
	}

	return;
 8001dae:	bf00      	nop
}
 8001db0:	bd80      	pop	{r7, pc}
 8001db2:	bf00      	nop
 8001db4:	20000010 	.word	0x20000010
 8001db8:	2000017c 	.word	0x2000017c
 8001dbc:	20000180 	.word	0x20000180
 8001dc0:	20000094 	.word	0x20000094
 8001dc4:	2000000c 	.word	0x2000000c
 8001dc8:	40010000 	.word	0x40010000
 8001dcc:	200000e4 	.word	0x200000e4
 8001dd0:	2000017d 	.word	0x2000017d

08001dd4 <setADCChannel>:

void setADCChannel(ADC_ChannelConfTypeDef* adcChConfig, uint32_t adcChannel)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b082      	sub	sp, #8
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
 8001ddc:	6039      	str	r1, [r7, #0]
	adcChConfig->Channel = adcChannel;
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	683a      	ldr	r2, [r7, #0]
 8001de2:	601a      	str	r2, [r3, #0]
	adcChConfig->Rank = ADC_REGULAR_RANK_1;
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	2201      	movs	r2, #1
 8001de8:	605a      	str	r2, [r3, #4]
	adcChConfig->SamplingTime = ADC_SAMPLETIME_56CYCLES;
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	2203      	movs	r2, #3
 8001dee:	609a      	str	r2, [r3, #8]

	if (HAL_ADC_ConfigChannel(&hadc1, adcChConfig) != HAL_OK)
 8001df0:	6879      	ldr	r1, [r7, #4]
 8001df2:	4806      	ldr	r0, [pc, #24]	@ (8001e0c <setADCChannel+0x38>)
 8001df4:	f001 f9b0 	bl	8003158 <HAL_ADC_ConfigChannel>
 8001df8:	4603      	mov	r3, r0
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d002      	beq.n	8001e04 <setADCChannel+0x30>
	{
		Error_Handler();
 8001dfe:	f000 fa3b 	bl	8002278 <Error_Handler>
	}

	return;
 8001e02:	bf00      	nop
 8001e04:	bf00      	nop
}
 8001e06:	3708      	adds	r7, #8
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	bd80      	pop	{r7, pc}
 8001e0c:	2000004c 	.word	0x2000004c

08001e10 <getADCAverage>:

uint32_t getADCAverage(ADC_ChannelConfTypeDef* adcChConfig, uint32_t adcChannel)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b088      	sub	sp, #32
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
 8001e18:	6039      	str	r1, [r7, #0]
	setADCChannel(adcChConfig, adcChannel);
 8001e1a:	6839      	ldr	r1, [r7, #0]
 8001e1c:	6878      	ldr	r0, [r7, #4]
 8001e1e:	f7ff ffd9 	bl	8001dd4 <setADCChannel>

	sum = 0;
 8001e22:	4b5c      	ldr	r3, [pc, #368]	@ (8001f94 <getADCAverage+0x184>)
 8001e24:	2200      	movs	r2, #0
 8001e26:	601a      	str	r2, [r3, #0]

	for (int i = 0; i < ADC_SAMPLE_COUNT; i++)
 8001e28:	2300      	movs	r3, #0
 8001e2a:	61fb      	str	r3, [r7, #28]
 8001e2c:	e014      	b.n	8001e58 <getADCAverage+0x48>
	{
		HAL_ADC_Start(&hadc1);
 8001e2e:	485a      	ldr	r0, [pc, #360]	@ (8001f98 <getADCAverage+0x188>)
 8001e30:	f000 fff8 	bl	8002e24 <HAL_ADC_Start>

		HAL_ADC_PollForConversion(&hadc1, (1U));
 8001e34:	2101      	movs	r1, #1
 8001e36:	4858      	ldr	r0, [pc, #352]	@ (8001f98 <getADCAverage+0x188>)
 8001e38:	f001 f8f6 	bl	8003028 <HAL_ADC_PollForConversion>

		adcBuffer[i] = HAL_ADC_GetValue(&hadc1);
 8001e3c:	4856      	ldr	r0, [pc, #344]	@ (8001f98 <getADCAverage+0x188>)
 8001e3e:	f001 f97e 	bl	800313e <HAL_ADC_GetValue>
 8001e42:	4602      	mov	r2, r0
 8001e44:	4955      	ldr	r1, [pc, #340]	@ (8001f9c <getADCAverage+0x18c>)
 8001e46:	69fb      	ldr	r3, [r7, #28]
 8001e48:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

		HAL_ADC_Stop(&hadc1);
 8001e4c:	4852      	ldr	r0, [pc, #328]	@ (8001f98 <getADCAverage+0x188>)
 8001e4e:	f001 f8b7 	bl	8002fc0 <HAL_ADC_Stop>
	for (int i = 0; i < ADC_SAMPLE_COUNT; i++)
 8001e52:	69fb      	ldr	r3, [r7, #28]
 8001e54:	3301      	adds	r3, #1
 8001e56:	61fb      	str	r3, [r7, #28]
 8001e58:	69fb      	ldr	r3, [r7, #28]
 8001e5a:	2b0e      	cmp	r3, #14
 8001e5c:	dde7      	ble.n	8001e2e <getADCAverage+0x1e>
	}

	max = adcBuffer[0];
 8001e5e:	4b4f      	ldr	r3, [pc, #316]	@ (8001f9c <getADCAverage+0x18c>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	461a      	mov	r2, r3
 8001e64:	4b4e      	ldr	r3, [pc, #312]	@ (8001fa0 <getADCAverage+0x190>)
 8001e66:	601a      	str	r2, [r3, #0]

	for (int i = 1; i < ADC_SAMPLE_COUNT; i++)
 8001e68:	2301      	movs	r3, #1
 8001e6a:	61bb      	str	r3, [r7, #24]
 8001e6c:	e014      	b.n	8001e98 <getADCAverage+0x88>
	{
		if (adcBuffer[i] > max)
 8001e6e:	4a4b      	ldr	r2, [pc, #300]	@ (8001f9c <getADCAverage+0x18c>)
 8001e70:	69bb      	ldr	r3, [r7, #24]
 8001e72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e76:	4a4a      	ldr	r2, [pc, #296]	@ (8001fa0 <getADCAverage+0x190>)
 8001e78:	6812      	ldr	r2, [r2, #0]
 8001e7a:	4293      	cmp	r3, r2
 8001e7c:	d909      	bls.n	8001e92 <getADCAverage+0x82>
		{
			max = adcBuffer[i];
 8001e7e:	4a47      	ldr	r2, [pc, #284]	@ (8001f9c <getADCAverage+0x18c>)
 8001e80:	69bb      	ldr	r3, [r7, #24]
 8001e82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e86:	461a      	mov	r2, r3
 8001e88:	4b45      	ldr	r3, [pc, #276]	@ (8001fa0 <getADCAverage+0x190>)
 8001e8a:	601a      	str	r2, [r3, #0]
			maxIndex = i;
 8001e8c:	4a45      	ldr	r2, [pc, #276]	@ (8001fa4 <getADCAverage+0x194>)
 8001e8e:	69bb      	ldr	r3, [r7, #24]
 8001e90:	6013      	str	r3, [r2, #0]
	for (int i = 1; i < ADC_SAMPLE_COUNT; i++)
 8001e92:	69bb      	ldr	r3, [r7, #24]
 8001e94:	3301      	adds	r3, #1
 8001e96:	61bb      	str	r3, [r7, #24]
 8001e98:	69bb      	ldr	r3, [r7, #24]
 8001e9a:	2b0e      	cmp	r3, #14
 8001e9c:	dde7      	ble.n	8001e6e <getADCAverage+0x5e>
		}
	}

	min = adcBuffer[0];
 8001e9e:	4b3f      	ldr	r3, [pc, #252]	@ (8001f9c <getADCAverage+0x18c>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	461a      	mov	r2, r3
 8001ea4:	4b40      	ldr	r3, [pc, #256]	@ (8001fa8 <getADCAverage+0x198>)
 8001ea6:	601a      	str	r2, [r3, #0]

	for (int i = 1; i < ADC_SAMPLE_COUNT; i++)
 8001ea8:	2301      	movs	r3, #1
 8001eaa:	617b      	str	r3, [r7, #20]
 8001eac:	e014      	b.n	8001ed8 <getADCAverage+0xc8>
	{
		if (adcBuffer[i] < min)
 8001eae:	4a3b      	ldr	r2, [pc, #236]	@ (8001f9c <getADCAverage+0x18c>)
 8001eb0:	697b      	ldr	r3, [r7, #20]
 8001eb2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001eb6:	4a3c      	ldr	r2, [pc, #240]	@ (8001fa8 <getADCAverage+0x198>)
 8001eb8:	6812      	ldr	r2, [r2, #0]
 8001eba:	4293      	cmp	r3, r2
 8001ebc:	d209      	bcs.n	8001ed2 <getADCAverage+0xc2>
		{
			min = adcBuffer[i];
 8001ebe:	4a37      	ldr	r2, [pc, #220]	@ (8001f9c <getADCAverage+0x18c>)
 8001ec0:	697b      	ldr	r3, [r7, #20]
 8001ec2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ec6:	461a      	mov	r2, r3
 8001ec8:	4b37      	ldr	r3, [pc, #220]	@ (8001fa8 <getADCAverage+0x198>)
 8001eca:	601a      	str	r2, [r3, #0]
			minIndex = i;
 8001ecc:	4a37      	ldr	r2, [pc, #220]	@ (8001fac <getADCAverage+0x19c>)
 8001ece:	697b      	ldr	r3, [r7, #20]
 8001ed0:	6013      	str	r3, [r2, #0]
	for (int i = 1; i < ADC_SAMPLE_COUNT; i++)
 8001ed2:	697b      	ldr	r3, [r7, #20]
 8001ed4:	3301      	adds	r3, #1
 8001ed6:	617b      	str	r3, [r7, #20]
 8001ed8:	697b      	ldr	r3, [r7, #20]
 8001eda:	2b0e      	cmp	r3, #14
 8001edc:	dde7      	ble.n	8001eae <getADCAverage+0x9e>
		}
	}

	for (int i = 0; i < ADC_SAMPLE_COUNT; i++)
 8001ede:	2300      	movs	r3, #0
 8001ee0:	613b      	str	r3, [r7, #16]
 8001ee2:	e01a      	b.n	8001f1a <getADCAverage+0x10a>
	{
		if (i == minIndex || i == maxIndex)
 8001ee4:	4b31      	ldr	r3, [pc, #196]	@ (8001fac <getADCAverage+0x19c>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	693a      	ldr	r2, [r7, #16]
 8001eea:	429a      	cmp	r2, r3
 8001eec:	d004      	beq.n	8001ef8 <getADCAverage+0xe8>
 8001eee:	4b2d      	ldr	r3, [pc, #180]	@ (8001fa4 <getADCAverage+0x194>)
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	693a      	ldr	r2, [r7, #16]
 8001ef4:	429a      	cmp	r2, r3
 8001ef6:	d104      	bne.n	8001f02 <getADCAverage+0xf2>
		{
			sum += 0;
 8001ef8:	4b26      	ldr	r3, [pc, #152]	@ (8001f94 <getADCAverage+0x184>)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	4a25      	ldr	r2, [pc, #148]	@ (8001f94 <getADCAverage+0x184>)
 8001efe:	6013      	str	r3, [r2, #0]
 8001f00:	e008      	b.n	8001f14 <getADCAverage+0x104>
		}
		else
		{
			sum += adcBuffer[i];
 8001f02:	4a26      	ldr	r2, [pc, #152]	@ (8001f9c <getADCAverage+0x18c>)
 8001f04:	693b      	ldr	r3, [r7, #16]
 8001f06:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001f0a:	4b22      	ldr	r3, [pc, #136]	@ (8001f94 <getADCAverage+0x184>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	4413      	add	r3, r2
 8001f10:	4a20      	ldr	r2, [pc, #128]	@ (8001f94 <getADCAverage+0x184>)
 8001f12:	6013      	str	r3, [r2, #0]
	for (int i = 0; i < ADC_SAMPLE_COUNT; i++)
 8001f14:	693b      	ldr	r3, [r7, #16]
 8001f16:	3301      	adds	r3, #1
 8001f18:	613b      	str	r3, [r7, #16]
 8001f1a:	693b      	ldr	r3, [r7, #16]
 8001f1c:	2b0e      	cmp	r3, #14
 8001f1e:	dde1      	ble.n	8001ee4 <getADCAverage+0xd4>
		}
	}

	average = sum / (ADC_SAMPLE_COUNT - 2);
 8001f20:	4b1c      	ldr	r3, [pc, #112]	@ (8001f94 <getADCAverage+0x184>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	4a22      	ldr	r2, [pc, #136]	@ (8001fb0 <getADCAverage+0x1a0>)
 8001f26:	fba2 2303 	umull	r2, r3, r2, r3
 8001f2a:	089b      	lsrs	r3, r3, #2
 8001f2c:	4a21      	ldr	r2, [pc, #132]	@ (8001fb4 <getADCAverage+0x1a4>)
 8001f2e:	6013      	str	r3, [r2, #0]

	adcBuffer[maxIndex] = average;
 8001f30:	4b1c      	ldr	r3, [pc, #112]	@ (8001fa4 <getADCAverage+0x194>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	4a1f      	ldr	r2, [pc, #124]	@ (8001fb4 <getADCAverage+0x1a4>)
 8001f36:	6812      	ldr	r2, [r2, #0]
 8001f38:	4918      	ldr	r1, [pc, #96]	@ (8001f9c <getADCAverage+0x18c>)
 8001f3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	adcBuffer[minIndex] = average;
 8001f3e:	4b1b      	ldr	r3, [pc, #108]	@ (8001fac <getADCAverage+0x19c>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	4a1c      	ldr	r2, [pc, #112]	@ (8001fb4 <getADCAverage+0x1a4>)
 8001f44:	6812      	ldr	r2, [r2, #0]
 8001f46:	4915      	ldr	r1, [pc, #84]	@ (8001f9c <getADCAverage+0x18c>)
 8001f48:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	sum = 0;
 8001f4c:	4b11      	ldr	r3, [pc, #68]	@ (8001f94 <getADCAverage+0x184>)
 8001f4e:	2200      	movs	r2, #0
 8001f50:	601a      	str	r2, [r3, #0]

	for (int i = 0; i < ADC_SAMPLE_COUNT; i++)
 8001f52:	2300      	movs	r3, #0
 8001f54:	60fb      	str	r3, [r7, #12]
 8001f56:	e00b      	b.n	8001f70 <getADCAverage+0x160>
	{
		sum += adcBuffer[i];
 8001f58:	4a10      	ldr	r2, [pc, #64]	@ (8001f9c <getADCAverage+0x18c>)
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001f60:	4b0c      	ldr	r3, [pc, #48]	@ (8001f94 <getADCAverage+0x184>)
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	4413      	add	r3, r2
 8001f66:	4a0b      	ldr	r2, [pc, #44]	@ (8001f94 <getADCAverage+0x184>)
 8001f68:	6013      	str	r3, [r2, #0]
	for (int i = 0; i < ADC_SAMPLE_COUNT; i++)
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	3301      	adds	r3, #1
 8001f6e:	60fb      	str	r3, [r7, #12]
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	2b0e      	cmp	r3, #14
 8001f74:	ddf0      	ble.n	8001f58 <getADCAverage+0x148>
	}

	average = sum / ADC_SAMPLE_COUNT;
 8001f76:	4b07      	ldr	r3, [pc, #28]	@ (8001f94 <getADCAverage+0x184>)
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	4a0f      	ldr	r2, [pc, #60]	@ (8001fb8 <getADCAverage+0x1a8>)
 8001f7c:	fba2 2303 	umull	r2, r3, r2, r3
 8001f80:	08db      	lsrs	r3, r3, #3
 8001f82:	4a0c      	ldr	r2, [pc, #48]	@ (8001fb4 <getADCAverage+0x1a4>)
 8001f84:	6013      	str	r3, [r2, #0]

	return average;
 8001f86:	4b0b      	ldr	r3, [pc, #44]	@ (8001fb4 <getADCAverage+0x1a4>)
 8001f88:	681b      	ldr	r3, [r3, #0]
}
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	3720      	adds	r7, #32
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	bd80      	pop	{r7, pc}
 8001f92:	bf00      	nop
 8001f94:	200001e0 	.word	0x200001e0
 8001f98:	2000004c 	.word	0x2000004c
 8001f9c:	200001a4 	.word	0x200001a4
 8001fa0:	20000194 	.word	0x20000194
 8001fa4:	2000019c 	.word	0x2000019c
 8001fa8:	20000198 	.word	0x20000198
 8001fac:	200001a0 	.word	0x200001a0
 8001fb0:	4ec4ec4f 	.word	0x4ec4ec4f
 8001fb4:	200001e4 	.word	0x200001e4
 8001fb8:	88888889 	.word	0x88888889

08001fbc <getPrimaryThrottlePosition>:

uint32_t getPrimaryThrottlePosition(ADC_ChannelConfTypeDef* adcChConfig)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b082      	sub	sp, #8
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
	return constrain(getADCAverage(adcChConfig, PRIMARY_THROTTLE_CHANNEL), ADC_MIN_LIMIT, ADC_MAX_LIMIT);
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	4619      	mov	r1, r3
 8001fc8:	6878      	ldr	r0, [r7, #4]
 8001fca:	f7ff ff21 	bl	8001e10 <getADCAverage>
 8001fce:	4603      	mov	r3, r0
 8001fd0:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 8001fd4:	2100      	movs	r1, #0
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	f7ff fe84 	bl	8001ce4 <constrain>
 8001fdc:	4603      	mov	r3, r0
}
 8001fde:	4618      	mov	r0, r3
 8001fe0:	3708      	adds	r7, #8
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	bd80      	pop	{r7, pc}

08001fe6 <getSecondaryThrottlePosition>:

uint32_t getSecondaryThrottlePosition(ADC_ChannelConfTypeDef* adcChConfig)
{
 8001fe6:	b580      	push	{r7, lr}
 8001fe8:	b082      	sub	sp, #8
 8001fea:	af00      	add	r7, sp, #0
 8001fec:	6078      	str	r0, [r7, #4]
	return constrain(getADCAverage(adcChConfig, SECONDARY_THROTTLE_CHANNEL), ADC_MIN_LIMIT, ADC_MAX_LIMIT);
 8001fee:	2301      	movs	r3, #1
 8001ff0:	4619      	mov	r1, r3
 8001ff2:	6878      	ldr	r0, [r7, #4]
 8001ff4:	f7ff ff0c 	bl	8001e10 <getADCAverage>
 8001ff8:	4603      	mov	r3, r0
 8001ffa:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 8001ffe:	2100      	movs	r1, #0
 8002000:	4618      	mov	r0, r3
 8002002:	f7ff fe6f 	bl	8001ce4 <constrain>
 8002006:	4603      	mov	r3, r0
}
 8002008:	4618      	mov	r0, r3
 800200a:	3708      	adds	r7, #8
 800200c:	46bd      	mov	sp, r7
 800200e:	bd80      	pop	{r7, pc}

08002010 <primaryThrottleSensorErrorCheck>:

bool primaryThrottleSensorErrorCheck()
{
 8002010:	b580      	push	{r7, lr}
 8002012:	af00      	add	r7, sp, #0
	primaryPotValue = getPrimaryThrottlePosition(&sConfig);
 8002014:	480b      	ldr	r0, [pc, #44]	@ (8002044 <primaryThrottleSensorErrorCheck+0x34>)
 8002016:	f7ff ffd1 	bl	8001fbc <getPrimaryThrottlePosition>
 800201a:	4603      	mov	r3, r0
 800201c:	4a0a      	ldr	r2, [pc, #40]	@ (8002048 <primaryThrottleSensorErrorCheck+0x38>)
 800201e:	6013      	str	r3, [r2, #0]

	if (primaryPotValue <= PRIMARY_THROTTLE_RANGE_MIN || primaryPotValue >= PRIMARY_THROTTLE_RANGE_MAX)
 8002020:	4b09      	ldr	r3, [pc, #36]	@ (8002048 <primaryThrottleSensorErrorCheck+0x38>)
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8002028:	4293      	cmp	r3, r2
 800202a:	d905      	bls.n	8002038 <primaryThrottleSensorErrorCheck+0x28>
 800202c:	4b06      	ldr	r3, [pc, #24]	@ (8002048 <primaryThrottleSensorErrorCheck+0x38>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f240 22ee 	movw	r2, #750	@ 0x2ee
 8002034:	4293      	cmp	r3, r2
 8002036:	d301      	bcc.n	800203c <primaryThrottleSensorErrorCheck+0x2c>
	{
		return true;
 8002038:	2301      	movs	r3, #1
 800203a:	e000      	b.n	800203e <primaryThrottleSensorErrorCheck+0x2e>
	}
	else
	{
		return false;
 800203c:	2300      	movs	r3, #0
	}
}
 800203e:	4618      	mov	r0, r3
 8002040:	bd80      	pop	{r7, pc}
 8002042:	bf00      	nop
 8002044:	20000184 	.word	0x20000184
 8002048:	200001ec 	.word	0x200001ec

0800204c <secondaryThrottleSensorErrorCheck>:

bool secondaryThrottleSensorErrorCheck()
{
 800204c:	b580      	push	{r7, lr}
 800204e:	af00      	add	r7, sp, #0
	secondaryPotValue = getSecondaryThrottlePosition(&sConfig);
 8002050:	480d      	ldr	r0, [pc, #52]	@ (8002088 <secondaryThrottleSensorErrorCheck+0x3c>)
 8002052:	f7ff ffc8 	bl	8001fe6 <getSecondaryThrottlePosition>
 8002056:	4603      	mov	r3, r0
 8002058:	4a0c      	ldr	r2, [pc, #48]	@ (800208c <secondaryThrottleSensorErrorCheck+0x40>)
 800205a:	6013      	str	r3, [r2, #0]

	tpsCurrentValues.TPS_SecondaryCurrentVal = secondaryPotValue;
 800205c:	4b0b      	ldr	r3, [pc, #44]	@ (800208c <secondaryThrottleSensorErrorCheck+0x40>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	b29a      	uxth	r2, r3
 8002062:	4b0b      	ldr	r3, [pc, #44]	@ (8002090 <secondaryThrottleSensorErrorCheck+0x44>)
 8002064:	805a      	strh	r2, [r3, #2]

	if (secondaryPotValue <= SECONDARY_THROTTLE_RANGE_MIN || secondaryPotValue >= SECONDARY_THROTTLE_RANGE_MAX)
 8002066:	4b09      	ldr	r3, [pc, #36]	@ (800208c <secondaryThrottleSensorErrorCheck+0x40>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	2264      	movs	r2, #100	@ 0x64
 800206c:	4293      	cmp	r3, r2
 800206e:	d905      	bls.n	800207c <secondaryThrottleSensorErrorCheck+0x30>
 8002070:	4b06      	ldr	r3, [pc, #24]	@ (800208c <secondaryThrottleSensorErrorCheck+0x40>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8002078:	4293      	cmp	r3, r2
 800207a:	d301      	bcc.n	8002080 <secondaryThrottleSensorErrorCheck+0x34>
	{
		return true;
 800207c:	2301      	movs	r3, #1
 800207e:	e000      	b.n	8002082 <secondaryThrottleSensorErrorCheck+0x36>
	}
	else
	{
		return false;
 8002080:	2300      	movs	r3, #0
	}
}
 8002082:	4618      	mov	r0, r3
 8002084:	bd80      	pop	{r7, pc}
 8002086:	bf00      	nop
 8002088:	20000184 	.word	0x20000184
 800208c:	200001f0 	.word	0x200001f0
 8002090:	20000280 	.word	0x20000280

08002094 <throttleSensorDeviationCheck>:

bool throttleSensorDeviationCheck()
{
 8002094:	b580      	push	{r7, lr}
 8002096:	af00      	add	r7, sp, #0
	if (errorSet[PRIM_THROTTLE_SENS_ERR] == true || errorSet[SECOND_THROTTLE_SENS_ERR] == true)
 8002098:	2300      	movs	r3, #0
 800209a:	4a3a      	ldr	r2, [pc, #232]	@ (8002184 <throttleSensorDeviationCheck+0xf0>)
 800209c:	5cd3      	ldrb	r3, [r2, r3]
 800209e:	2b01      	cmp	r3, #1
 80020a0:	d004      	beq.n	80020ac <throttleSensorDeviationCheck+0x18>
 80020a2:	2301      	movs	r3, #1
 80020a4:	4a37      	ldr	r2, [pc, #220]	@ (8002184 <throttleSensorDeviationCheck+0xf0>)
 80020a6:	5cd3      	ldrb	r3, [r2, r3]
 80020a8:	2b01      	cmp	r3, #1
 80020aa:	d101      	bne.n	80020b0 <throttleSensorDeviationCheck+0x1c>
	{
		return false;
 80020ac:	2300      	movs	r3, #0
 80020ae:	e066      	b.n	800217e <throttleSensorDeviationCheck+0xea>
	}
	else
	{
		primaryPotValue = getPrimaryThrottlePosition(&sConfig);
 80020b0:	4835      	ldr	r0, [pc, #212]	@ (8002188 <throttleSensorDeviationCheck+0xf4>)
 80020b2:	f7ff ff83 	bl	8001fbc <getPrimaryThrottlePosition>
 80020b6:	4603      	mov	r3, r0
 80020b8:	4a34      	ldr	r2, [pc, #208]	@ (800218c <throttleSensorDeviationCheck+0xf8>)
 80020ba:	6013      	str	r3, [r2, #0]

		secondaryPotValue = getSecondaryThrottlePosition(&sConfig);
 80020bc:	4832      	ldr	r0, [pc, #200]	@ (8002188 <throttleSensorDeviationCheck+0xf4>)
 80020be:	f7ff ff92 	bl	8001fe6 <getSecondaryThrottlePosition>
 80020c2:	4603      	mov	r3, r0
 80020c4:	4a32      	ldr	r2, [pc, #200]	@ (8002190 <throttleSensorDeviationCheck+0xfc>)
 80020c6:	6013      	str	r3, [r2, #0]

		if (primaryPotValue == 0 || secondaryPotValue == 0)
 80020c8:	4b30      	ldr	r3, [pc, #192]	@ (800218c <throttleSensorDeviationCheck+0xf8>)
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d003      	beq.n	80020d8 <throttleSensorDeviationCheck+0x44>
 80020d0:	4b2f      	ldr	r3, [pc, #188]	@ (8002190 <throttleSensorDeviationCheck+0xfc>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d104      	bne.n	80020e2 <throttleSensorDeviationCheck+0x4e>
		{
			percentageDeviation = 0;
 80020d8:	4b2e      	ldr	r3, [pc, #184]	@ (8002194 <throttleSensorDeviationCheck+0x100>)
 80020da:	2200      	movs	r2, #0
 80020dc:	601a      	str	r2, [r3, #0]

			return true;
 80020de:	2301      	movs	r3, #1
 80020e0:	e04d      	b.n	800217e <throttleSensorDeviationCheck+0xea>
		}
		else
		{
			if (primaryPotValue > secondaryPotValue)
 80020e2:	4b2a      	ldr	r3, [pc, #168]	@ (800218c <throttleSensorDeviationCheck+0xf8>)
 80020e4:	681a      	ldr	r2, [r3, #0]
 80020e6:	4b2a      	ldr	r3, [pc, #168]	@ (8002190 <throttleSensorDeviationCheck+0xfc>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	429a      	cmp	r2, r3
 80020ec:	d91b      	bls.n	8002126 <throttleSensorDeviationCheck+0x92>
			{
				percentageDeviation = (((primaryPotValue - secondaryPotValue) / (float)primaryPotValue) * 100);
 80020ee:	4b27      	ldr	r3, [pc, #156]	@ (800218c <throttleSensorDeviationCheck+0xf8>)
 80020f0:	681a      	ldr	r2, [r3, #0]
 80020f2:	4b27      	ldr	r3, [pc, #156]	@ (8002190 <throttleSensorDeviationCheck+0xfc>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	1ad3      	subs	r3, r2, r3
 80020f8:	ee07 3a90 	vmov	s15, r3
 80020fc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002100:	4b22      	ldr	r3, [pc, #136]	@ (800218c <throttleSensorDeviationCheck+0xf8>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	ee07 3a90 	vmov	s15, r3
 8002108:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800210c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002110:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 8002198 <throttleSensorDeviationCheck+0x104>
 8002114:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002118:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800211c:	ee17 2a90 	vmov	r2, s15
 8002120:	4b1c      	ldr	r3, [pc, #112]	@ (8002194 <throttleSensorDeviationCheck+0x100>)
 8002122:	601a      	str	r2, [r3, #0]
 8002124:	e024      	b.n	8002170 <throttleSensorDeviationCheck+0xdc>
			}
			else if (secondaryPotValue > primaryPotValue)
 8002126:	4b1a      	ldr	r3, [pc, #104]	@ (8002190 <throttleSensorDeviationCheck+0xfc>)
 8002128:	681a      	ldr	r2, [r3, #0]
 800212a:	4b18      	ldr	r3, [pc, #96]	@ (800218c <throttleSensorDeviationCheck+0xf8>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	429a      	cmp	r2, r3
 8002130:	d91b      	bls.n	800216a <throttleSensorDeviationCheck+0xd6>
			{
				percentageDeviation = (((secondaryPotValue - primaryPotValue) / (float)secondaryPotValue) * 100);
 8002132:	4b17      	ldr	r3, [pc, #92]	@ (8002190 <throttleSensorDeviationCheck+0xfc>)
 8002134:	681a      	ldr	r2, [r3, #0]
 8002136:	4b15      	ldr	r3, [pc, #84]	@ (800218c <throttleSensorDeviationCheck+0xf8>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	1ad3      	subs	r3, r2, r3
 800213c:	ee07 3a90 	vmov	s15, r3
 8002140:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002144:	4b12      	ldr	r3, [pc, #72]	@ (8002190 <throttleSensorDeviationCheck+0xfc>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	ee07 3a90 	vmov	s15, r3
 800214c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002150:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002154:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 8002198 <throttleSensorDeviationCheck+0x104>
 8002158:	ee67 7a87 	vmul.f32	s15, s15, s14
 800215c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002160:	ee17 2a90 	vmov	r2, s15
 8002164:	4b0b      	ldr	r3, [pc, #44]	@ (8002194 <throttleSensorDeviationCheck+0x100>)
 8002166:	601a      	str	r2, [r3, #0]
 8002168:	e002      	b.n	8002170 <throttleSensorDeviationCheck+0xdc>
			}
			else
			{
				percentageDeviation = 0;
 800216a:	4b0a      	ldr	r3, [pc, #40]	@ (8002194 <throttleSensorDeviationCheck+0x100>)
 800216c:	2200      	movs	r2, #0
 800216e:	601a      	str	r2, [r3, #0]
			}
		}

		if (percentageDeviation > THROTTLE_DEVIATION_THRESHOLD)
 8002170:	4b08      	ldr	r3, [pc, #32]	@ (8002194 <throttleSensorDeviationCheck+0x100>)
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	2b0a      	cmp	r3, #10
 8002176:	dd01      	ble.n	800217c <throttleSensorDeviationCheck+0xe8>
		{
			return true;
 8002178:	2301      	movs	r3, #1
 800217a:	e000      	b.n	800217e <throttleSensorDeviationCheck+0xea>
		}
		else
		{
			return false;
 800217c:	2300      	movs	r3, #0
		}
	}
}
 800217e:	4618      	mov	r0, r3
 8002180:	bd80      	pop	{r7, pc}
 8002182:	bf00      	nop
 8002184:	200001f4 	.word	0x200001f4
 8002188:	20000184 	.word	0x20000184
 800218c:	200001ec 	.word	0x200001ec
 8002190:	200001f0 	.word	0x200001f0
 8002194:	200001e8 	.word	0x200001e8
 8002198:	42c80000 	.word	0x42c80000

0800219c <torqueRequest>:

void torqueRequest(void)
{
 800219c:	b590      	push	{r4, r7, lr}
 800219e:	b083      	sub	sp, #12
 80021a0:	af02      	add	r7, sp, #8
	if (errorSet[PRIM_THROTTLE_SENS_ERR] == true || errorSet[SECOND_THROTTLE_SENS_ERR] == true || errorSet[THROTTLE_OFFSET_ERROR] == true)
 80021a2:	2300      	movs	r3, #0
 80021a4:	4a26      	ldr	r2, [pc, #152]	@ (8002240 <torqueRequest+0xa4>)
 80021a6:	5cd3      	ldrb	r3, [r2, r3]
 80021a8:	2b01      	cmp	r3, #1
 80021aa:	d009      	beq.n	80021c0 <torqueRequest+0x24>
 80021ac:	2301      	movs	r3, #1
 80021ae:	4a24      	ldr	r2, [pc, #144]	@ (8002240 <torqueRequest+0xa4>)
 80021b0:	5cd3      	ldrb	r3, [r2, r3]
 80021b2:	2b01      	cmp	r3, #1
 80021b4:	d004      	beq.n	80021c0 <torqueRequest+0x24>
 80021b6:	2302      	movs	r3, #2
 80021b8:	4a21      	ldr	r2, [pc, #132]	@ (8002240 <torqueRequest+0xa4>)
 80021ba:	5cd3      	ldrb	r3, [r2, r3]
 80021bc:	2b01      	cmp	r3, #1
 80021be:	d104      	bne.n	80021ca <torqueRequest+0x2e>
	{
		torqueRefLimit = 5000;
 80021c0:	4b20      	ldr	r3, [pc, #128]	@ (8002244 <torqueRequest+0xa8>)
 80021c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80021c6:	601a      	str	r2, [r3, #0]
 80021c8:	e02b      	b.n	8002222 <torqueRequest+0x86>
	}
	else
	{
		primaryPotValue = getPrimaryThrottlePosition(&sConfig);
 80021ca:	481f      	ldr	r0, [pc, #124]	@ (8002248 <torqueRequest+0xac>)
 80021cc:	f7ff fef6 	bl	8001fbc <getPrimaryThrottlePosition>
 80021d0:	4603      	mov	r3, r0
 80021d2:	4a1e      	ldr	r2, [pc, #120]	@ (800224c <torqueRequest+0xb0>)
 80021d4:	6013      	str	r3, [r2, #0]

		torqueRefLimit = map(primaryPotValue, PRIMARY_THROTTLE_POSITION_MIN, PRIMARY_THROTTLE_POSITION_MAX, TORQUE_REF_LIMIT_MIN, TORQUE_REF_LIMIT_MAX);
 80021d6:	4b1d      	ldr	r3, [pc, #116]	@ (800224c <torqueRequest+0xb0>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	4618      	mov	r0, r3
 80021dc:	f240 233a 	movw	r3, #570	@ 0x23a
 80021e0:	4619      	mov	r1, r3
 80021e2:	f240 237b 	movw	r3, #635	@ 0x27b
 80021e6:	461c      	mov	r4, r3
 80021e8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80021ec:	f242 232e 	movw	r3, #8750	@ 0x222e
 80021f0:	9300      	str	r3, [sp, #0]
 80021f2:	4613      	mov	r3, r2
 80021f4:	4622      	mov	r2, r4
 80021f6:	f7ff fd59 	bl	8001cac <map>
 80021fa:	4603      	mov	r3, r0
 80021fc:	4a11      	ldr	r2, [pc, #68]	@ (8002244 <torqueRequest+0xa8>)
 80021fe:	6013      	str	r3, [r2, #0]

		torqueRefLimit = constrain(torqueRefLimit, TORQUE_REF_LIMIT_MIN, TORQUE_REF_LIMIT_MAX);
 8002200:	4b10      	ldr	r3, [pc, #64]	@ (8002244 <torqueRequest+0xa8>)
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f241 3188 	movw	r1, #5000	@ 0x1388
 8002208:	f242 222e 	movw	r2, #8750	@ 0x222e
 800220c:	4618      	mov	r0, r3
 800220e:	f7ff fd69 	bl	8001ce4 <constrain>
 8002212:	4603      	mov	r3, r0
 8002214:	4a0b      	ldr	r2, [pc, #44]	@ (8002244 <torqueRequest+0xa8>)
 8002216:	6013      	str	r3, [r2, #0]

		tpsCurrentValues.TPS_PrimaryCurrentVal = primaryPotValue;
 8002218:	4b0c      	ldr	r3, [pc, #48]	@ (800224c <torqueRequest+0xb0>)
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	b29a      	uxth	r2, r3
 800221e:	4b0c      	ldr	r3, [pc, #48]	@ (8002250 <torqueRequest+0xb4>)
 8002220:	801a      	strh	r2, [r3, #0]
	}

	torqueControlMessage(&hcan1, SPEED_REF_LIMIT, &torqueRefLimit);
 8002222:	f649 1364 	movw	r3, #39268	@ 0x9964
 8002226:	4a07      	ldr	r2, [pc, #28]	@ (8002244 <torqueRequest+0xa8>)
 8002228:	4619      	mov	r1, r3
 800222a:	480a      	ldr	r0, [pc, #40]	@ (8002254 <torqueRequest+0xb8>)
 800222c:	f7fe faba 	bl	80007a4 <torqueControlMessage>

	sendTPSCurrentValue(&hcan1, &tpsCurrentValues);
 8002230:	4907      	ldr	r1, [pc, #28]	@ (8002250 <torqueRequest+0xb4>)
 8002232:	4808      	ldr	r0, [pc, #32]	@ (8002254 <torqueRequest+0xb8>)
 8002234:	f7fe fc28 	bl	8000a88 <sendTPSCurrentValue>

	return;
 8002238:	bf00      	nop
}
 800223a:	3704      	adds	r7, #4
 800223c:	46bd      	mov	sp, r7
 800223e:	bd90      	pop	{r4, r7, pc}
 8002240:	200001f4 	.word	0x200001f4
 8002244:	20000018 	.word	0x20000018
 8002248:	20000184 	.word	0x20000184
 800224c:	200001ec 	.word	0x200001ec
 8002250:	20000280 	.word	0x20000280
 8002254:	20000094 	.word	0x20000094

08002258 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b082      	sub	sp, #8
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002268:	d101      	bne.n	800226e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800226a:	f000 fd77 	bl	8002d5c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800226e:	bf00      	nop
 8002270:	3708      	adds	r7, #8
 8002272:	46bd      	mov	sp, r7
 8002274:	bd80      	pop	{r7, pc}
	...

08002278 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800227c:	b672      	cpsid	i
}
 800227e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  HAL_GPIO_WritePin(CAN_FAULT_PORT, CAN_FAULT_PIN, FAULT_STATE);
 8002280:	4b03      	ldr	r3, [pc, #12]	@ (8002290 <Error_Handler+0x18>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	2110      	movs	r1, #16
 8002286:	2200      	movs	r2, #0
 8002288:	4618      	mov	r0, r3
 800228a:	f002 fad9 	bl	8004840 <HAL_GPIO_WritePin>
 800228e:	e7f7      	b.n	8002280 <Error_Handler+0x8>
 8002290:	20000000 	.word	0x20000000

08002294 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002294:	b480      	push	{r7}
 8002296:	b083      	sub	sp, #12
 8002298:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800229a:	4b0f      	ldr	r3, [pc, #60]	@ (80022d8 <HAL_MspInit+0x44>)
 800229c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800229e:	4a0e      	ldr	r2, [pc, #56]	@ (80022d8 <HAL_MspInit+0x44>)
 80022a0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80022a4:	6413      	str	r3, [r2, #64]	@ 0x40
 80022a6:	4b0c      	ldr	r3, [pc, #48]	@ (80022d8 <HAL_MspInit+0x44>)
 80022a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80022ae:	607b      	str	r3, [r7, #4]
 80022b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022b2:	4b09      	ldr	r3, [pc, #36]	@ (80022d8 <HAL_MspInit+0x44>)
 80022b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022b6:	4a08      	ldr	r2, [pc, #32]	@ (80022d8 <HAL_MspInit+0x44>)
 80022b8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80022bc:	6453      	str	r3, [r2, #68]	@ 0x44
 80022be:	4b06      	ldr	r3, [pc, #24]	@ (80022d8 <HAL_MspInit+0x44>)
 80022c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022c2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80022c6:	603b      	str	r3, [r7, #0]
 80022c8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80022ca:	bf00      	nop
 80022cc:	370c      	adds	r7, #12
 80022ce:	46bd      	mov	sp, r7
 80022d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d4:	4770      	bx	lr
 80022d6:	bf00      	nop
 80022d8:	40023800 	.word	0x40023800

080022dc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b08a      	sub	sp, #40	@ 0x28
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022e4:	f107 0314 	add.w	r3, r7, #20
 80022e8:	2200      	movs	r2, #0
 80022ea:	601a      	str	r2, [r3, #0]
 80022ec:	605a      	str	r2, [r3, #4]
 80022ee:	609a      	str	r2, [r3, #8]
 80022f0:	60da      	str	r2, [r3, #12]
 80022f2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	4a15      	ldr	r2, [pc, #84]	@ (8002350 <HAL_ADC_MspInit+0x74>)
 80022fa:	4293      	cmp	r3, r2
 80022fc:	d123      	bne.n	8002346 <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80022fe:	4b15      	ldr	r3, [pc, #84]	@ (8002354 <HAL_ADC_MspInit+0x78>)
 8002300:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002302:	4a14      	ldr	r2, [pc, #80]	@ (8002354 <HAL_ADC_MspInit+0x78>)
 8002304:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002308:	6453      	str	r3, [r2, #68]	@ 0x44
 800230a:	4b12      	ldr	r3, [pc, #72]	@ (8002354 <HAL_ADC_MspInit+0x78>)
 800230c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800230e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002312:	613b      	str	r3, [r7, #16]
 8002314:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002316:	4b0f      	ldr	r3, [pc, #60]	@ (8002354 <HAL_ADC_MspInit+0x78>)
 8002318:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800231a:	4a0e      	ldr	r2, [pc, #56]	@ (8002354 <HAL_ADC_MspInit+0x78>)
 800231c:	f043 0301 	orr.w	r3, r3, #1
 8002320:	6313      	str	r3, [r2, #48]	@ 0x30
 8002322:	4b0c      	ldr	r3, [pc, #48]	@ (8002354 <HAL_ADC_MspInit+0x78>)
 8002324:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002326:	f003 0301 	and.w	r3, r3, #1
 800232a:	60fb      	str	r3, [r7, #12]
 800232c:	68fb      	ldr	r3, [r7, #12]
    PA0/WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 800232e:	230f      	movs	r3, #15
 8002330:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002332:	2303      	movs	r3, #3
 8002334:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002336:	2300      	movs	r3, #0
 8002338:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800233a:	f107 0314 	add.w	r3, r7, #20
 800233e:	4619      	mov	r1, r3
 8002340:	4805      	ldr	r0, [pc, #20]	@ (8002358 <HAL_ADC_MspInit+0x7c>)
 8002342:	f002 f8b9 	bl	80044b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002346:	bf00      	nop
 8002348:	3728      	adds	r7, #40	@ 0x28
 800234a:	46bd      	mov	sp, r7
 800234c:	bd80      	pop	{r7, pc}
 800234e:	bf00      	nop
 8002350:	40012000 	.word	0x40012000
 8002354:	40023800 	.word	0x40023800
 8002358:	40020000 	.word	0x40020000

0800235c <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	b08c      	sub	sp, #48	@ 0x30
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002364:	f107 031c 	add.w	r3, r7, #28
 8002368:	2200      	movs	r2, #0
 800236a:	601a      	str	r2, [r3, #0]
 800236c:	605a      	str	r2, [r3, #4]
 800236e:	609a      	str	r2, [r3, #8]
 8002370:	60da      	str	r2, [r3, #12]
 8002372:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	4a4e      	ldr	r2, [pc, #312]	@ (80024b4 <HAL_CAN_MspInit+0x158>)
 800237a:	4293      	cmp	r3, r2
 800237c:	d142      	bne.n	8002404 <HAL_CAN_MspInit+0xa8>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 800237e:	4b4e      	ldr	r3, [pc, #312]	@ (80024b8 <HAL_CAN_MspInit+0x15c>)
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	3301      	adds	r3, #1
 8002384:	4a4c      	ldr	r2, [pc, #304]	@ (80024b8 <HAL_CAN_MspInit+0x15c>)
 8002386:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8002388:	4b4b      	ldr	r3, [pc, #300]	@ (80024b8 <HAL_CAN_MspInit+0x15c>)
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	2b01      	cmp	r3, #1
 800238e:	d10b      	bne.n	80023a8 <HAL_CAN_MspInit+0x4c>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8002390:	4b4a      	ldr	r3, [pc, #296]	@ (80024bc <HAL_CAN_MspInit+0x160>)
 8002392:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002394:	4a49      	ldr	r2, [pc, #292]	@ (80024bc <HAL_CAN_MspInit+0x160>)
 8002396:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800239a:	6413      	str	r3, [r2, #64]	@ 0x40
 800239c:	4b47      	ldr	r3, [pc, #284]	@ (80024bc <HAL_CAN_MspInit+0x160>)
 800239e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023a0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80023a4:	61bb      	str	r3, [r7, #24]
 80023a6:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023a8:	4b44      	ldr	r3, [pc, #272]	@ (80024bc <HAL_CAN_MspInit+0x160>)
 80023aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023ac:	4a43      	ldr	r2, [pc, #268]	@ (80024bc <HAL_CAN_MspInit+0x160>)
 80023ae:	f043 0301 	orr.w	r3, r3, #1
 80023b2:	6313      	str	r3, [r2, #48]	@ 0x30
 80023b4:	4b41      	ldr	r3, [pc, #260]	@ (80024bc <HAL_CAN_MspInit+0x160>)
 80023b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023b8:	f003 0301 	and.w	r3, r3, #1
 80023bc:	617b      	str	r3, [r7, #20]
 80023be:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80023c0:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80023c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023c6:	2302      	movs	r3, #2
 80023c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023ca:	2300      	movs	r3, #0
 80023cc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023ce:	2303      	movs	r3, #3
 80023d0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80023d2:	2309      	movs	r3, #9
 80023d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023d6:	f107 031c 	add.w	r3, r7, #28
 80023da:	4619      	mov	r1, r3
 80023dc:	4838      	ldr	r0, [pc, #224]	@ (80024c0 <HAL_CAN_MspInit+0x164>)
 80023de:	f002 f86b 	bl	80044b8 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 7, 0);
 80023e2:	2200      	movs	r2, #0
 80023e4:	2107      	movs	r1, #7
 80023e6:	2014      	movs	r0, #20
 80023e8:	f002 f83c 	bl	8004464 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 80023ec:	2014      	movs	r0, #20
 80023ee:	f002 f855 	bl	800449c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 6, 0);
 80023f2:	2200      	movs	r2, #0
 80023f4:	2106      	movs	r1, #6
 80023f6:	2015      	movs	r0, #21
 80023f8:	f002 f834 	bl	8004464 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 80023fc:	2015      	movs	r0, #21
 80023fe:	f002 f84d 	bl	800449c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }

}
 8002402:	e052      	b.n	80024aa <HAL_CAN_MspInit+0x14e>
  else if(hcan->Instance==CAN2)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	4a2e      	ldr	r2, [pc, #184]	@ (80024c4 <HAL_CAN_MspInit+0x168>)
 800240a:	4293      	cmp	r3, r2
 800240c:	d14d      	bne.n	80024aa <HAL_CAN_MspInit+0x14e>
    __HAL_RCC_CAN2_CLK_ENABLE();
 800240e:	4b2b      	ldr	r3, [pc, #172]	@ (80024bc <HAL_CAN_MspInit+0x160>)
 8002410:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002412:	4a2a      	ldr	r2, [pc, #168]	@ (80024bc <HAL_CAN_MspInit+0x160>)
 8002414:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002418:	6413      	str	r3, [r2, #64]	@ 0x40
 800241a:	4b28      	ldr	r3, [pc, #160]	@ (80024bc <HAL_CAN_MspInit+0x160>)
 800241c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800241e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002422:	613b      	str	r3, [r7, #16]
 8002424:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 8002426:	4b24      	ldr	r3, [pc, #144]	@ (80024b8 <HAL_CAN_MspInit+0x15c>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	3301      	adds	r3, #1
 800242c:	4a22      	ldr	r2, [pc, #136]	@ (80024b8 <HAL_CAN_MspInit+0x15c>)
 800242e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8002430:	4b21      	ldr	r3, [pc, #132]	@ (80024b8 <HAL_CAN_MspInit+0x15c>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	2b01      	cmp	r3, #1
 8002436:	d10b      	bne.n	8002450 <HAL_CAN_MspInit+0xf4>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8002438:	4b20      	ldr	r3, [pc, #128]	@ (80024bc <HAL_CAN_MspInit+0x160>)
 800243a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800243c:	4a1f      	ldr	r2, [pc, #124]	@ (80024bc <HAL_CAN_MspInit+0x160>)
 800243e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002442:	6413      	str	r3, [r2, #64]	@ 0x40
 8002444:	4b1d      	ldr	r3, [pc, #116]	@ (80024bc <HAL_CAN_MspInit+0x160>)
 8002446:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002448:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800244c:	60fb      	str	r3, [r7, #12]
 800244e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002450:	4b1a      	ldr	r3, [pc, #104]	@ (80024bc <HAL_CAN_MspInit+0x160>)
 8002452:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002454:	4a19      	ldr	r2, [pc, #100]	@ (80024bc <HAL_CAN_MspInit+0x160>)
 8002456:	f043 0302 	orr.w	r3, r3, #2
 800245a:	6313      	str	r3, [r2, #48]	@ 0x30
 800245c:	4b17      	ldr	r3, [pc, #92]	@ (80024bc <HAL_CAN_MspInit+0x160>)
 800245e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002460:	f003 0302 	and.w	r3, r3, #2
 8002464:	60bb      	str	r3, [r7, #8]
 8002466:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8002468:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 800246c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800246e:	2302      	movs	r3, #2
 8002470:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002472:	2300      	movs	r3, #0
 8002474:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002476:	2303      	movs	r3, #3
 8002478:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 800247a:	2309      	movs	r3, #9
 800247c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800247e:	f107 031c 	add.w	r3, r7, #28
 8002482:	4619      	mov	r1, r3
 8002484:	4810      	ldr	r0, [pc, #64]	@ (80024c8 <HAL_CAN_MspInit+0x16c>)
 8002486:	f002 f817 	bl	80044b8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(CAN2_RX0_IRQn, 1, 0);
 800248a:	2200      	movs	r2, #0
 800248c:	2101      	movs	r1, #1
 800248e:	2040      	movs	r0, #64	@ 0x40
 8002490:	f001 ffe8 	bl	8004464 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 8002494:	2040      	movs	r0, #64	@ 0x40
 8002496:	f002 f801 	bl	800449c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN2_RX1_IRQn, 2, 0);
 800249a:	2200      	movs	r2, #0
 800249c:	2102      	movs	r1, #2
 800249e:	2041      	movs	r0, #65	@ 0x41
 80024a0:	f001 ffe0 	bl	8004464 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX1_IRQn);
 80024a4:	2041      	movs	r0, #65	@ 0x41
 80024a6:	f001 fff9 	bl	800449c <HAL_NVIC_EnableIRQ>
}
 80024aa:	bf00      	nop
 80024ac:	3730      	adds	r7, #48	@ 0x30
 80024ae:	46bd      	mov	sp, r7
 80024b0:	bd80      	pop	{r7, pc}
 80024b2:	bf00      	nop
 80024b4:	40006400 	.word	0x40006400
 80024b8:	200002b8 	.word	0x200002b8
 80024bc:	40023800 	.word	0x40023800
 80024c0:	40020000 	.word	0x40020000
 80024c4:	40006800 	.word	0x40006800
 80024c8:	40020400 	.word	0x40020400

080024cc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b084      	sub	sp, #16
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	4a16      	ldr	r2, [pc, #88]	@ (8002534 <HAL_TIM_Base_MspInit+0x68>)
 80024da:	4293      	cmp	r3, r2
 80024dc:	d114      	bne.n	8002508 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80024de:	4b16      	ldr	r3, [pc, #88]	@ (8002538 <HAL_TIM_Base_MspInit+0x6c>)
 80024e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024e2:	4a15      	ldr	r2, [pc, #84]	@ (8002538 <HAL_TIM_Base_MspInit+0x6c>)
 80024e4:	f043 0301 	orr.w	r3, r3, #1
 80024e8:	6453      	str	r3, [r2, #68]	@ 0x44
 80024ea:	4b13      	ldr	r3, [pc, #76]	@ (8002538 <HAL_TIM_Base_MspInit+0x6c>)
 80024ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024ee:	f003 0301 	and.w	r3, r3, #1
 80024f2:	60fb      	str	r3, [r7, #12]
 80024f4:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 80024f6:	2200      	movs	r2, #0
 80024f8:	2100      	movs	r1, #0
 80024fa:	201b      	movs	r0, #27
 80024fc:	f001 ffb2 	bl	8004464 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8002500:	201b      	movs	r0, #27
 8002502:	f001 ffcb 	bl	800449c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8002506:	e010      	b.n	800252a <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM8)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	4a0b      	ldr	r2, [pc, #44]	@ (800253c <HAL_TIM_Base_MspInit+0x70>)
 800250e:	4293      	cmp	r3, r2
 8002510:	d10b      	bne.n	800252a <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002512:	4b09      	ldr	r3, [pc, #36]	@ (8002538 <HAL_TIM_Base_MspInit+0x6c>)
 8002514:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002516:	4a08      	ldr	r2, [pc, #32]	@ (8002538 <HAL_TIM_Base_MspInit+0x6c>)
 8002518:	f043 0302 	orr.w	r3, r3, #2
 800251c:	6453      	str	r3, [r2, #68]	@ 0x44
 800251e:	4b06      	ldr	r3, [pc, #24]	@ (8002538 <HAL_TIM_Base_MspInit+0x6c>)
 8002520:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002522:	f003 0302 	and.w	r3, r3, #2
 8002526:	60bb      	str	r3, [r7, #8]
 8002528:	68bb      	ldr	r3, [r7, #8]
}
 800252a:	bf00      	nop
 800252c:	3710      	adds	r7, #16
 800252e:	46bd      	mov	sp, r7
 8002530:	bd80      	pop	{r7, pc}
 8002532:	bf00      	nop
 8002534:	40010000 	.word	0x40010000
 8002538:	40023800 	.word	0x40023800
 800253c:	40010400 	.word	0x40010400

08002540 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	b088      	sub	sp, #32
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002548:	f107 030c 	add.w	r3, r7, #12
 800254c:	2200      	movs	r2, #0
 800254e:	601a      	str	r2, [r3, #0]
 8002550:	605a      	str	r2, [r3, #4]
 8002552:	609a      	str	r2, [r3, #8]
 8002554:	60da      	str	r2, [r3, #12]
 8002556:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM8)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	4a11      	ldr	r2, [pc, #68]	@ (80025a4 <HAL_TIM_MspPostInit+0x64>)
 800255e:	4293      	cmp	r3, r2
 8002560:	d11c      	bne.n	800259c <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM8_MspPostInit 0 */

  /* USER CODE END TIM8_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002562:	4b11      	ldr	r3, [pc, #68]	@ (80025a8 <HAL_TIM_MspPostInit+0x68>)
 8002564:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002566:	4a10      	ldr	r2, [pc, #64]	@ (80025a8 <HAL_TIM_MspPostInit+0x68>)
 8002568:	f043 0304 	orr.w	r3, r3, #4
 800256c:	6313      	str	r3, [r2, #48]	@ 0x30
 800256e:	4b0e      	ldr	r3, [pc, #56]	@ (80025a8 <HAL_TIM_MspPostInit+0x68>)
 8002570:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002572:	f003 0304 	and.w	r3, r3, #4
 8002576:	60bb      	str	r3, [r7, #8]
 8002578:	68bb      	ldr	r3, [r7, #8]
    /**TIM8 GPIO Configuration
    PC8     ------> TIM8_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800257a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800257e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002580:	2302      	movs	r3, #2
 8002582:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002584:	2300      	movs	r3, #0
 8002586:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002588:	2300      	movs	r3, #0
 800258a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800258c:	2303      	movs	r3, #3
 800258e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002590:	f107 030c 	add.w	r3, r7, #12
 8002594:	4619      	mov	r1, r3
 8002596:	4805      	ldr	r0, [pc, #20]	@ (80025ac <HAL_TIM_MspPostInit+0x6c>)
 8002598:	f001 ff8e 	bl	80044b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 800259c:	bf00      	nop
 800259e:	3720      	adds	r7, #32
 80025a0:	46bd      	mov	sp, r7
 80025a2:	bd80      	pop	{r7, pc}
 80025a4:	40010400 	.word	0x40010400
 80025a8:	40023800 	.word	0x40023800
 80025ac:	40020800 	.word	0x40020800

080025b0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b08e      	sub	sp, #56	@ 0x38
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80025b8:	2300      	movs	r3, #0
 80025ba:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80025bc:	2300      	movs	r3, #0
 80025be:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 80025c0:	4b34      	ldr	r3, [pc, #208]	@ (8002694 <HAL_InitTick+0xe4>)
 80025c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025c4:	4a33      	ldr	r2, [pc, #204]	@ (8002694 <HAL_InitTick+0xe4>)
 80025c6:	f043 0301 	orr.w	r3, r3, #1
 80025ca:	6413      	str	r3, [r2, #64]	@ 0x40
 80025cc:	4b31      	ldr	r3, [pc, #196]	@ (8002694 <HAL_InitTick+0xe4>)
 80025ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025d0:	f003 0301 	and.w	r3, r3, #1
 80025d4:	60fb      	str	r3, [r7, #12]
 80025d6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80025d8:	f107 0210 	add.w	r2, r7, #16
 80025dc:	f107 0314 	add.w	r3, r7, #20
 80025e0:	4611      	mov	r1, r2
 80025e2:	4618      	mov	r0, r3
 80025e4:	f002 fdc6 	bl	8005174 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80025e8:	6a3b      	ldr	r3, [r7, #32]
 80025ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80025ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d103      	bne.n	80025fa <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80025f2:	f002 fdab 	bl	800514c <HAL_RCC_GetPCLK1Freq>
 80025f6:	6378      	str	r0, [r7, #52]	@ 0x34
 80025f8:	e004      	b.n	8002604 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80025fa:	f002 fda7 	bl	800514c <HAL_RCC_GetPCLK1Freq>
 80025fe:	4603      	mov	r3, r0
 8002600:	005b      	lsls	r3, r3, #1
 8002602:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002604:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002606:	4a24      	ldr	r2, [pc, #144]	@ (8002698 <HAL_InitTick+0xe8>)
 8002608:	fba2 2303 	umull	r2, r3, r2, r3
 800260c:	0c9b      	lsrs	r3, r3, #18
 800260e:	3b01      	subs	r3, #1
 8002610:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8002612:	4b22      	ldr	r3, [pc, #136]	@ (800269c <HAL_InitTick+0xec>)
 8002614:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002618:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 800261a:	4b20      	ldr	r3, [pc, #128]	@ (800269c <HAL_InitTick+0xec>)
 800261c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002620:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 8002622:	4a1e      	ldr	r2, [pc, #120]	@ (800269c <HAL_InitTick+0xec>)
 8002624:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002626:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8002628:	4b1c      	ldr	r3, [pc, #112]	@ (800269c <HAL_InitTick+0xec>)
 800262a:	2200      	movs	r2, #0
 800262c:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800262e:	4b1b      	ldr	r3, [pc, #108]	@ (800269c <HAL_InitTick+0xec>)
 8002630:	2200      	movs	r2, #0
 8002632:	609a      	str	r2, [r3, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002634:	4b19      	ldr	r3, [pc, #100]	@ (800269c <HAL_InitTick+0xec>)
 8002636:	2200      	movs	r2, #0
 8002638:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim2);
 800263a:	4818      	ldr	r0, [pc, #96]	@ (800269c <HAL_InitTick+0xec>)
 800263c:	f002 fdcc 	bl	80051d8 <HAL_TIM_Base_Init>
 8002640:	4603      	mov	r3, r0
 8002642:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8002646:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800264a:	2b00      	cmp	r3, #0
 800264c:	d11b      	bne.n	8002686 <HAL_InitTick+0xd6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 800264e:	4813      	ldr	r0, [pc, #76]	@ (800269c <HAL_InitTick+0xec>)
 8002650:	f002 fe1a 	bl	8005288 <HAL_TIM_Base_Start_IT>
 8002654:	4603      	mov	r3, r0
 8002656:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 800265a:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800265e:	2b00      	cmp	r3, #0
 8002660:	d111      	bne.n	8002686 <HAL_InitTick+0xd6>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002662:	201c      	movs	r0, #28
 8002664:	f001 ff1a 	bl	800449c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	2b0f      	cmp	r3, #15
 800266c:	d808      	bhi.n	8002680 <HAL_InitTick+0xd0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 800266e:	2200      	movs	r2, #0
 8002670:	6879      	ldr	r1, [r7, #4]
 8002672:	201c      	movs	r0, #28
 8002674:	f001 fef6 	bl	8004464 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002678:	4a09      	ldr	r2, [pc, #36]	@ (80026a0 <HAL_InitTick+0xf0>)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	6013      	str	r3, [r2, #0]
 800267e:	e002      	b.n	8002686 <HAL_InitTick+0xd6>
      }
      else
      {
        status = HAL_ERROR;
 8002680:	2301      	movs	r3, #1
 8002682:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8002686:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 800268a:	4618      	mov	r0, r3
 800268c:	3738      	adds	r7, #56	@ 0x38
 800268e:	46bd      	mov	sp, r7
 8002690:	bd80      	pop	{r7, pc}
 8002692:	bf00      	nop
 8002694:	40023800 	.word	0x40023800
 8002698:	431bde83 	.word	0x431bde83
 800269c:	200002bc 	.word	0x200002bc
 80026a0:	20000020 	.word	0x20000020

080026a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80026a4:	b480      	push	{r7}
 80026a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80026a8:	bf00      	nop
 80026aa:	e7fd      	b.n	80026a8 <NMI_Handler+0x4>

080026ac <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80026ac:	b480      	push	{r7}
 80026ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80026b0:	bf00      	nop
 80026b2:	e7fd      	b.n	80026b0 <HardFault_Handler+0x4>

080026b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80026b4:	b480      	push	{r7}
 80026b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80026b8:	bf00      	nop
 80026ba:	e7fd      	b.n	80026b8 <MemManage_Handler+0x4>

080026bc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80026bc:	b480      	push	{r7}
 80026be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80026c0:	bf00      	nop
 80026c2:	e7fd      	b.n	80026c0 <BusFault_Handler+0x4>

080026c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80026c4:	b480      	push	{r7}
 80026c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80026c8:	bf00      	nop
 80026ca:	e7fd      	b.n	80026c8 <UsageFault_Handler+0x4>

080026cc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80026cc:	b480      	push	{r7}
 80026ce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80026d0:	bf00      	nop
 80026d2:	46bd      	mov	sp, r7
 80026d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d8:	4770      	bx	lr
	...

080026dc <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80026e0:	4802      	ldr	r0, [pc, #8]	@ (80026ec <CAN1_RX0_IRQHandler+0x10>)
 80026e2:	f001 fbe1 	bl	8003ea8 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 80026e6:	bf00      	nop
 80026e8:	bd80      	pop	{r7, pc}
 80026ea:	bf00      	nop
 80026ec:	20000094 	.word	0x20000094

080026f0 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80026f4:	4802      	ldr	r0, [pc, #8]	@ (8002700 <CAN1_RX1_IRQHandler+0x10>)
 80026f6:	f001 fbd7 	bl	8003ea8 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 80026fa:	bf00      	nop
 80026fc:	bd80      	pop	{r7, pc}
 80026fe:	bf00      	nop
 8002700:	20000094 	.word	0x20000094

08002704 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002708:	4802      	ldr	r0, [pc, #8]	@ (8002714 <TIM1_CC_IRQHandler+0x10>)
 800270a:	f003 fa09 	bl	8005b20 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 800270e:	bf00      	nop
 8002710:	bd80      	pop	{r7, pc}
 8002712:	bf00      	nop
 8002714:	200000e4 	.word	0x200000e4

08002718 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800271c:	4802      	ldr	r0, [pc, #8]	@ (8002728 <TIM2_IRQHandler+0x10>)
 800271e:	f003 f9ff 	bl	8005b20 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002722:	bf00      	nop
 8002724:	bd80      	pop	{r7, pc}
 8002726:	bf00      	nop
 8002728:	200002bc 	.word	0x200002bc

0800272c <CAN2_RX0_IRQHandler>:

/**
  * @brief This function handles CAN2 RX0 interrupts.
  */
void CAN2_RX0_IRQHandler(void)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX0_IRQn 0 */

  /* USER CODE END CAN2_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8002730:	4802      	ldr	r0, [pc, #8]	@ (800273c <CAN2_RX0_IRQHandler+0x10>)
 8002732:	f001 fbb9 	bl	8003ea8 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX0_IRQn 1 */

  /* USER CODE END CAN2_RX0_IRQn 1 */
}
 8002736:	bf00      	nop
 8002738:	bd80      	pop	{r7, pc}
 800273a:	bf00      	nop
 800273c:	200000bc 	.word	0x200000bc

08002740 <CAN2_RX1_IRQHandler>:

/**
  * @brief This function handles CAN2 RX1 interrupt.
  */
void CAN2_RX1_IRQHandler(void)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX1_IRQn 0 */

  /* USER CODE END CAN2_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8002744:	4802      	ldr	r0, [pc, #8]	@ (8002750 <CAN2_RX1_IRQHandler+0x10>)
 8002746:	f001 fbaf 	bl	8003ea8 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX1_IRQn 1 */

  /* USER CODE END CAN2_RX1_IRQn 1 */
}
 800274a:	bf00      	nop
 800274c:	bd80      	pop	{r7, pc}
 800274e:	bf00      	nop
 8002750:	200000bc 	.word	0x200000bc

08002754 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002754:	b480      	push	{r7}
 8002756:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002758:	4b06      	ldr	r3, [pc, #24]	@ (8002774 <SystemInit+0x20>)
 800275a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800275e:	4a05      	ldr	r2, [pc, #20]	@ (8002774 <SystemInit+0x20>)
 8002760:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002764:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002768:	bf00      	nop
 800276a:	46bd      	mov	sp, r7
 800276c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002770:	4770      	bx	lr
 8002772:	bf00      	nop
 8002774:	e000ed00 	.word	0xe000ed00

08002778 <Unpack_TS_ECU1_TX1_Temp>:
  return TS_ECU_SYNC_RX2_CANID;
}

// --------------------------------------------------------------------------
uint32_t Unpack_TS_ECU1_TX1_Temp(TS_ECU1_TX1_t* _m, const uint8_t* _d, uint8_t dlc_)
{
 8002778:	b480      	push	{r7}
 800277a:	b085      	sub	sp, #20
 800277c:	af00      	add	r7, sp, #0
 800277e:	60f8      	str	r0, [r7, #12]
 8002780:	60b9      	str	r1, [r7, #8]
 8002782:	4613      	mov	r3, r2
 8002784:	71fb      	strb	r3, [r7, #7]
  _m->TS_ECU_MaxSegmentTemperature = ((_d[0] & (0xFFU))) - 40;
 8002786:	68bb      	ldr	r3, [r7, #8]
 8002788:	781b      	ldrb	r3, [r3, #0]
 800278a:	3b28      	subs	r3, #40	@ 0x28
 800278c:	b29b      	uxth	r3, r3
 800278e:	b21a      	sxth	r2, r3
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	801a      	strh	r2, [r3, #0]
  _m->TS_ECU_MinSegmentTemperature = ((_d[1] & (0xFFU))) - 40;
 8002794:	68bb      	ldr	r3, [r7, #8]
 8002796:	3301      	adds	r3, #1
 8002798:	781b      	ldrb	r3, [r3, #0]
 800279a:	3b28      	subs	r3, #40	@ 0x28
 800279c:	b29b      	uxth	r3, r3
 800279e:	b21a      	sxth	r2, r3
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	805a      	strh	r2, [r3, #2]
  _m->TS_ECU_AverageSegmentTemp = ((_d[2] & (0xFFU))) - 40;
 80027a4:	68bb      	ldr	r3, [r7, #8]
 80027a6:	3302      	adds	r3, #2
 80027a8:	781b      	ldrb	r3, [r3, #0]
 80027aa:	3b28      	subs	r3, #40	@ 0x28
 80027ac:	b29b      	uxth	r3, r3
 80027ae:	b21a      	sxth	r2, r3
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	809a      	strh	r2, [r3, #4]
  _m->TS_ECU_MaxTemperatureCellCount = (_d[3] & (0xFFU));
 80027b4:	68bb      	ldr	r3, [r7, #8]
 80027b6:	3303      	adds	r3, #3
 80027b8:	781a      	ldrb	r2, [r3, #0]
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	719a      	strb	r2, [r3, #6]
  _m->TS_ECU_FaultInState = (_d[4] & (0x01U));
 80027be:	68bb      	ldr	r3, [r7, #8]
 80027c0:	3304      	adds	r3, #4
 80027c2:	781b      	ldrb	r3, [r3, #0]
 80027c4:	f003 0301 	and.w	r3, r3, #1
 80027c8:	b2da      	uxtb	r2, r3
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	71da      	strb	r2, [r3, #7]
  _m->TS_ECU_FaultOutState = ((_d[4] >> 1) & (0x01U));
 80027ce:	68bb      	ldr	r3, [r7, #8]
 80027d0:	3304      	adds	r3, #4
 80027d2:	781b      	ldrb	r3, [r3, #0]
 80027d4:	085b      	lsrs	r3, r3, #1
 80027d6:	b2db      	uxtb	r3, r3
 80027d8:	f003 0301 	and.w	r3, r3, #1
 80027dc:	b2da      	uxtb	r2, r3
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	721a      	strb	r2, [r3, #8]
  _m->TS_ECU_TempThresholdFault = ((_d[4] >> 2) & (0x01U));
 80027e2:	68bb      	ldr	r3, [r7, #8]
 80027e4:	3304      	adds	r3, #4
 80027e6:	781b      	ldrb	r3, [r3, #0]
 80027e8:	089b      	lsrs	r3, r3, #2
 80027ea:	b2db      	uxtb	r3, r3
 80027ec:	f003 0301 	and.w	r3, r3, #1
 80027f0:	b2da      	uxtb	r2, r3
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	725a      	strb	r2, [r3, #9]
  _m->TS_ECU_OpenCircuitFault = ((_d[4] >> 3) & (0x01U));
 80027f6:	68bb      	ldr	r3, [r7, #8]
 80027f8:	3304      	adds	r3, #4
 80027fa:	781b      	ldrb	r3, [r3, #0]
 80027fc:	08db      	lsrs	r3, r3, #3
 80027fe:	b2db      	uxtb	r3, r3
 8002800:	f003 0301 	and.w	r3, r3, #1
 8002804:	b2da      	uxtb	r2, r3
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	729a      	strb	r2, [r3, #10]
  _m->FAN_ECU_ShortToGroundFault = ((_d[4] >> 4) & (0x01U));
 800280a:	68bb      	ldr	r3, [r7, #8]
 800280c:	3304      	adds	r3, #4
 800280e:	781b      	ldrb	r3, [r3, #0]
 8002810:	091b      	lsrs	r3, r3, #4
 8002812:	b2db      	uxtb	r3, r3
 8002814:	f003 0301 	and.w	r3, r3, #1
 8002818:	b2da      	uxtb	r2, r3
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	72da      	strb	r2, [r3, #11]
  _m->TS_ECU_CurrentState = ((_d[4] >> 5) & (0x07U));
 800281e:	68bb      	ldr	r3, [r7, #8]
 8002820:	3304      	adds	r3, #4
 8002822:	781b      	ldrb	r3, [r3, #0]
 8002824:	095b      	lsrs	r3, r3, #5
 8002826:	b2da      	uxtb	r2, r3
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	731a      	strb	r2, [r3, #12]
  return TS_ECU1_TX1_CANID;
 800282c:	f240 3311 	movw	r3, #785	@ 0x311
}
 8002830:	4618      	mov	r0, r3
 8002832:	3714      	adds	r7, #20
 8002834:	46bd      	mov	sp, r7
 8002836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283a:	4770      	bx	lr

0800283c <Unpack_TS_ECU2_TX1_Temp>:
  return TS_ECU1_TX4_CANID;
}

// --------------------------------------------------------------------------
uint32_t Unpack_TS_ECU2_TX1_Temp(TS_ECU2_TX1_t* _m, const uint8_t* _d, uint8_t dlc_)
{
 800283c:	b480      	push	{r7}
 800283e:	b085      	sub	sp, #20
 8002840:	af00      	add	r7, sp, #0
 8002842:	60f8      	str	r0, [r7, #12]
 8002844:	60b9      	str	r1, [r7, #8]
 8002846:	4613      	mov	r3, r2
 8002848:	71fb      	strb	r3, [r7, #7]
  _m->TS_ECU_MaxSegmentTemperature = ((_d[0] & (0xFFU))) - 40;
 800284a:	68bb      	ldr	r3, [r7, #8]
 800284c:	781b      	ldrb	r3, [r3, #0]
 800284e:	3b28      	subs	r3, #40	@ 0x28
 8002850:	b29b      	uxth	r3, r3
 8002852:	b21a      	sxth	r2, r3
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	801a      	strh	r2, [r3, #0]
  _m->TS_ECU_MinSegmentTemperature = ((_d[1] & (0xFFU))) - 40;
 8002858:	68bb      	ldr	r3, [r7, #8]
 800285a:	3301      	adds	r3, #1
 800285c:	781b      	ldrb	r3, [r3, #0]
 800285e:	3b28      	subs	r3, #40	@ 0x28
 8002860:	b29b      	uxth	r3, r3
 8002862:	b21a      	sxth	r2, r3
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	805a      	strh	r2, [r3, #2]
  _m->TS_ECU_AverageSegmentTemp = ((_d[2] & (0xFFU))) - 40;
 8002868:	68bb      	ldr	r3, [r7, #8]
 800286a:	3302      	adds	r3, #2
 800286c:	781b      	ldrb	r3, [r3, #0]
 800286e:	3b28      	subs	r3, #40	@ 0x28
 8002870:	b29b      	uxth	r3, r3
 8002872:	b21a      	sxth	r2, r3
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	809a      	strh	r2, [r3, #4]
  _m->TS_ECU_MaxTemperatureCellCount = (_d[3] & (0xFFU));
 8002878:	68bb      	ldr	r3, [r7, #8]
 800287a:	3303      	adds	r3, #3
 800287c:	781a      	ldrb	r2, [r3, #0]
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	719a      	strb	r2, [r3, #6]
  _m->TS_ECU_FaultInState = (_d[4] & (0x01U));
 8002882:	68bb      	ldr	r3, [r7, #8]
 8002884:	3304      	adds	r3, #4
 8002886:	781b      	ldrb	r3, [r3, #0]
 8002888:	f003 0301 	and.w	r3, r3, #1
 800288c:	b2da      	uxtb	r2, r3
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	71da      	strb	r2, [r3, #7]
  _m->TS_ECU_FaultOutState = ((_d[4] >> 1) & (0x01U));
 8002892:	68bb      	ldr	r3, [r7, #8]
 8002894:	3304      	adds	r3, #4
 8002896:	781b      	ldrb	r3, [r3, #0]
 8002898:	085b      	lsrs	r3, r3, #1
 800289a:	b2db      	uxtb	r3, r3
 800289c:	f003 0301 	and.w	r3, r3, #1
 80028a0:	b2da      	uxtb	r2, r3
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	721a      	strb	r2, [r3, #8]
  _m->TS_ECU_TempThresholdFault = ((_d[4] >> 2) & (0x01U));
 80028a6:	68bb      	ldr	r3, [r7, #8]
 80028a8:	3304      	adds	r3, #4
 80028aa:	781b      	ldrb	r3, [r3, #0]
 80028ac:	089b      	lsrs	r3, r3, #2
 80028ae:	b2db      	uxtb	r3, r3
 80028b0:	f003 0301 	and.w	r3, r3, #1
 80028b4:	b2da      	uxtb	r2, r3
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	725a      	strb	r2, [r3, #9]
  _m->TS_ECU_OpenCircuitFault = ((_d[4] >> 3) & (0x01U));
 80028ba:	68bb      	ldr	r3, [r7, #8]
 80028bc:	3304      	adds	r3, #4
 80028be:	781b      	ldrb	r3, [r3, #0]
 80028c0:	08db      	lsrs	r3, r3, #3
 80028c2:	b2db      	uxtb	r3, r3
 80028c4:	f003 0301 	and.w	r3, r3, #1
 80028c8:	b2da      	uxtb	r2, r3
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	729a      	strb	r2, [r3, #10]
  _m->FAN_ECU_ShortToGroundFault = ((_d[4] >> 4) & (0x01U));
 80028ce:	68bb      	ldr	r3, [r7, #8]
 80028d0:	3304      	adds	r3, #4
 80028d2:	781b      	ldrb	r3, [r3, #0]
 80028d4:	091b      	lsrs	r3, r3, #4
 80028d6:	b2db      	uxtb	r3, r3
 80028d8:	f003 0301 	and.w	r3, r3, #1
 80028dc:	b2da      	uxtb	r2, r3
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	72da      	strb	r2, [r3, #11]
  _m->TS_ECU_CurrentState = ((_d[4] >> 5) & (0x07U));
 80028e2:	68bb      	ldr	r3, [r7, #8]
 80028e4:	3304      	adds	r3, #4
 80028e6:	781b      	ldrb	r3, [r3, #0]
 80028e8:	095b      	lsrs	r3, r3, #5
 80028ea:	b2da      	uxtb	r2, r3
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	731a      	strb	r2, [r3, #12]
  return TS_ECU2_TX1_CANID;
 80028f0:	f240 3321 	movw	r3, #801	@ 0x321
}
 80028f4:	4618      	mov	r0, r3
 80028f6:	3714      	adds	r7, #20
 80028f8:	46bd      	mov	sp, r7
 80028fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fe:	4770      	bx	lr

08002900 <Unpack_TS_ECU3_TX1_Temp>:
  return TS_ECU2_TX4_CANID;
}

// --------------------------------------------------------------------------
uint32_t Unpack_TS_ECU3_TX1_Temp(TS_ECU3_TX1_t* _m, const uint8_t* _d, uint8_t dlc_)
{
 8002900:	b480      	push	{r7}
 8002902:	b085      	sub	sp, #20
 8002904:	af00      	add	r7, sp, #0
 8002906:	60f8      	str	r0, [r7, #12]
 8002908:	60b9      	str	r1, [r7, #8]
 800290a:	4613      	mov	r3, r2
 800290c:	71fb      	strb	r3, [r7, #7]
  _m->TS_ECU_MaxSegmentTemperature = ((_d[0] & (0xFFU))) - 40;
 800290e:	68bb      	ldr	r3, [r7, #8]
 8002910:	781b      	ldrb	r3, [r3, #0]
 8002912:	3b28      	subs	r3, #40	@ 0x28
 8002914:	b29b      	uxth	r3, r3
 8002916:	b21a      	sxth	r2, r3
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	801a      	strh	r2, [r3, #0]
  _m->TS_ECU_MinSegmentTemperature = ((_d[1] & (0xFFU))) - 40;
 800291c:	68bb      	ldr	r3, [r7, #8]
 800291e:	3301      	adds	r3, #1
 8002920:	781b      	ldrb	r3, [r3, #0]
 8002922:	3b28      	subs	r3, #40	@ 0x28
 8002924:	b29b      	uxth	r3, r3
 8002926:	b21a      	sxth	r2, r3
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	805a      	strh	r2, [r3, #2]
  _m->TS_ECU_AverageSegmentTemp = ((_d[2] & (0xFFU))) - 40;
 800292c:	68bb      	ldr	r3, [r7, #8]
 800292e:	3302      	adds	r3, #2
 8002930:	781b      	ldrb	r3, [r3, #0]
 8002932:	3b28      	subs	r3, #40	@ 0x28
 8002934:	b29b      	uxth	r3, r3
 8002936:	b21a      	sxth	r2, r3
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	809a      	strh	r2, [r3, #4]
  _m->TS_ECU_MaxTemperatureCellCount = (_d[3] & (0xFFU));
 800293c:	68bb      	ldr	r3, [r7, #8]
 800293e:	3303      	adds	r3, #3
 8002940:	781a      	ldrb	r2, [r3, #0]
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	719a      	strb	r2, [r3, #6]
  _m->TS_ECU_FaultInState = (_d[4] & (0x01U));
 8002946:	68bb      	ldr	r3, [r7, #8]
 8002948:	3304      	adds	r3, #4
 800294a:	781b      	ldrb	r3, [r3, #0]
 800294c:	f003 0301 	and.w	r3, r3, #1
 8002950:	b2da      	uxtb	r2, r3
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	71da      	strb	r2, [r3, #7]
  _m->TS_ECU_FaultOutState = ((_d[4] >> 1) & (0x01U));
 8002956:	68bb      	ldr	r3, [r7, #8]
 8002958:	3304      	adds	r3, #4
 800295a:	781b      	ldrb	r3, [r3, #0]
 800295c:	085b      	lsrs	r3, r3, #1
 800295e:	b2db      	uxtb	r3, r3
 8002960:	f003 0301 	and.w	r3, r3, #1
 8002964:	b2da      	uxtb	r2, r3
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	721a      	strb	r2, [r3, #8]
  _m->TS_ECU_TempThresholdFault = ((_d[4] >> 2) & (0x01U));
 800296a:	68bb      	ldr	r3, [r7, #8]
 800296c:	3304      	adds	r3, #4
 800296e:	781b      	ldrb	r3, [r3, #0]
 8002970:	089b      	lsrs	r3, r3, #2
 8002972:	b2db      	uxtb	r3, r3
 8002974:	f003 0301 	and.w	r3, r3, #1
 8002978:	b2da      	uxtb	r2, r3
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	725a      	strb	r2, [r3, #9]
  _m->TS_ECU_OpenCircuitFault = ((_d[4] >> 3) & (0x01U));
 800297e:	68bb      	ldr	r3, [r7, #8]
 8002980:	3304      	adds	r3, #4
 8002982:	781b      	ldrb	r3, [r3, #0]
 8002984:	08db      	lsrs	r3, r3, #3
 8002986:	b2db      	uxtb	r3, r3
 8002988:	f003 0301 	and.w	r3, r3, #1
 800298c:	b2da      	uxtb	r2, r3
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	729a      	strb	r2, [r3, #10]
  _m->FAN_ECU_ShortToGroundFault = ((_d[4] >> 4) & (0x01U));
 8002992:	68bb      	ldr	r3, [r7, #8]
 8002994:	3304      	adds	r3, #4
 8002996:	781b      	ldrb	r3, [r3, #0]
 8002998:	091b      	lsrs	r3, r3, #4
 800299a:	b2db      	uxtb	r3, r3
 800299c:	f003 0301 	and.w	r3, r3, #1
 80029a0:	b2da      	uxtb	r2, r3
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	72da      	strb	r2, [r3, #11]
  _m->TS_ECU_CurrentState = ((_d[4] >> 5) & (0x07U));
 80029a6:	68bb      	ldr	r3, [r7, #8]
 80029a8:	3304      	adds	r3, #4
 80029aa:	781b      	ldrb	r3, [r3, #0]
 80029ac:	095b      	lsrs	r3, r3, #5
 80029ae:	b2da      	uxtb	r2, r3
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	731a      	strb	r2, [r3, #12]
  return TS_ECU3_TX1_CANID;
 80029b4:	f240 3331 	movw	r3, #817	@ 0x331
}
 80029b8:	4618      	mov	r0, r3
 80029ba:	3714      	adds	r7, #20
 80029bc:	46bd      	mov	sp, r7
 80029be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c2:	4770      	bx	lr

080029c4 <Unpack_TS_ECU4_TX1_Temp>:
  return TS_ECU3_TX4_CANID;
}

// --------------------------------------------------------------------------
uint32_t Unpack_TS_ECU4_TX1_Temp(TS_ECU4_TX1_t* _m, const uint8_t* _d, uint8_t dlc_)
{
 80029c4:	b480      	push	{r7}
 80029c6:	b085      	sub	sp, #20
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	60f8      	str	r0, [r7, #12]
 80029cc:	60b9      	str	r1, [r7, #8]
 80029ce:	4613      	mov	r3, r2
 80029d0:	71fb      	strb	r3, [r7, #7]
  _m->TS_ECU_MaxSegmentTemperature = ((_d[0] & (0xFFU))) - 40;
 80029d2:	68bb      	ldr	r3, [r7, #8]
 80029d4:	781b      	ldrb	r3, [r3, #0]
 80029d6:	3b28      	subs	r3, #40	@ 0x28
 80029d8:	b29b      	uxth	r3, r3
 80029da:	b21a      	sxth	r2, r3
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	801a      	strh	r2, [r3, #0]
  _m->TS_ECU_MinSegmentTemperature = ((_d[1] & (0xFFU))) - 40;
 80029e0:	68bb      	ldr	r3, [r7, #8]
 80029e2:	3301      	adds	r3, #1
 80029e4:	781b      	ldrb	r3, [r3, #0]
 80029e6:	3b28      	subs	r3, #40	@ 0x28
 80029e8:	b29b      	uxth	r3, r3
 80029ea:	b21a      	sxth	r2, r3
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	805a      	strh	r2, [r3, #2]
  _m->TS_ECU_AverageSegmentTemp = ((_d[2] & (0xFFU))) - 40;
 80029f0:	68bb      	ldr	r3, [r7, #8]
 80029f2:	3302      	adds	r3, #2
 80029f4:	781b      	ldrb	r3, [r3, #0]
 80029f6:	3b28      	subs	r3, #40	@ 0x28
 80029f8:	b29b      	uxth	r3, r3
 80029fa:	b21a      	sxth	r2, r3
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	809a      	strh	r2, [r3, #4]
  _m->TS_ECU_MaxTemperatureCellCount = (_d[3] & (0xFFU));
 8002a00:	68bb      	ldr	r3, [r7, #8]
 8002a02:	3303      	adds	r3, #3
 8002a04:	781a      	ldrb	r2, [r3, #0]
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	719a      	strb	r2, [r3, #6]
  _m->TS_ECU_FaultInState = (_d[4] & (0x01U));
 8002a0a:	68bb      	ldr	r3, [r7, #8]
 8002a0c:	3304      	adds	r3, #4
 8002a0e:	781b      	ldrb	r3, [r3, #0]
 8002a10:	f003 0301 	and.w	r3, r3, #1
 8002a14:	b2da      	uxtb	r2, r3
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	71da      	strb	r2, [r3, #7]
  _m->TS_ECU_FaultOutState = ((_d[4] >> 1) & (0x01U));
 8002a1a:	68bb      	ldr	r3, [r7, #8]
 8002a1c:	3304      	adds	r3, #4
 8002a1e:	781b      	ldrb	r3, [r3, #0]
 8002a20:	085b      	lsrs	r3, r3, #1
 8002a22:	b2db      	uxtb	r3, r3
 8002a24:	f003 0301 	and.w	r3, r3, #1
 8002a28:	b2da      	uxtb	r2, r3
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	721a      	strb	r2, [r3, #8]
  _m->TS_ECU_TempThresholdFault = ((_d[4] >> 2) & (0x01U));
 8002a2e:	68bb      	ldr	r3, [r7, #8]
 8002a30:	3304      	adds	r3, #4
 8002a32:	781b      	ldrb	r3, [r3, #0]
 8002a34:	089b      	lsrs	r3, r3, #2
 8002a36:	b2db      	uxtb	r3, r3
 8002a38:	f003 0301 	and.w	r3, r3, #1
 8002a3c:	b2da      	uxtb	r2, r3
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	725a      	strb	r2, [r3, #9]
  _m->TS_ECU_OpenCircuitFault = ((_d[4] >> 3) & (0x01U));
 8002a42:	68bb      	ldr	r3, [r7, #8]
 8002a44:	3304      	adds	r3, #4
 8002a46:	781b      	ldrb	r3, [r3, #0]
 8002a48:	08db      	lsrs	r3, r3, #3
 8002a4a:	b2db      	uxtb	r3, r3
 8002a4c:	f003 0301 	and.w	r3, r3, #1
 8002a50:	b2da      	uxtb	r2, r3
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	729a      	strb	r2, [r3, #10]
  _m->FAN_ECU_ShortToGroundFault = ((_d[4] >> 4) & (0x01U));
 8002a56:	68bb      	ldr	r3, [r7, #8]
 8002a58:	3304      	adds	r3, #4
 8002a5a:	781b      	ldrb	r3, [r3, #0]
 8002a5c:	091b      	lsrs	r3, r3, #4
 8002a5e:	b2db      	uxtb	r3, r3
 8002a60:	f003 0301 	and.w	r3, r3, #1
 8002a64:	b2da      	uxtb	r2, r3
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	72da      	strb	r2, [r3, #11]
  _m->TS_ECU_CurrentState = ((_d[4] >> 5) & (0x07U));
 8002a6a:	68bb      	ldr	r3, [r7, #8]
 8002a6c:	3304      	adds	r3, #4
 8002a6e:	781b      	ldrb	r3, [r3, #0]
 8002a70:	095b      	lsrs	r3, r3, #5
 8002a72:	b2da      	uxtb	r2, r3
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	731a      	strb	r2, [r3, #12]
  return TS_ECU4_TX1_CANID;
 8002a78:	f240 3341 	movw	r3, #833	@ 0x341
}
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	3714      	adds	r7, #20
 8002a80:	46bd      	mov	sp, r7
 8002a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a86:	4770      	bx	lr

08002a88 <Unpack_TS_ECU5_TX1_Temp>:
  return TS_ECU4_TX4_CANID;
}

// --------------------------------------------------------------------------
uint32_t Unpack_TS_ECU5_TX1_Temp(TS_ECU5_TX1_t* _m, const uint8_t* _d, uint8_t dlc_)
{
 8002a88:	b480      	push	{r7}
 8002a8a:	b085      	sub	sp, #20
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	60f8      	str	r0, [r7, #12]
 8002a90:	60b9      	str	r1, [r7, #8]
 8002a92:	4613      	mov	r3, r2
 8002a94:	71fb      	strb	r3, [r7, #7]
  _m->TS_ECU_MaxSegmentTemperature = ((_d[0] & (0xFFU))) - 40;
 8002a96:	68bb      	ldr	r3, [r7, #8]
 8002a98:	781b      	ldrb	r3, [r3, #0]
 8002a9a:	3b28      	subs	r3, #40	@ 0x28
 8002a9c:	b29b      	uxth	r3, r3
 8002a9e:	b21a      	sxth	r2, r3
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	801a      	strh	r2, [r3, #0]
  _m->TS_ECU_MinSegmentTemperature = ((_d[1] & (0xFFU))) - 40;
 8002aa4:	68bb      	ldr	r3, [r7, #8]
 8002aa6:	3301      	adds	r3, #1
 8002aa8:	781b      	ldrb	r3, [r3, #0]
 8002aaa:	3b28      	subs	r3, #40	@ 0x28
 8002aac:	b29b      	uxth	r3, r3
 8002aae:	b21a      	sxth	r2, r3
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	805a      	strh	r2, [r3, #2]
  _m->TS_ECU_AverageSegmentTemp = ((_d[2] & (0xFFU))) - 40;
 8002ab4:	68bb      	ldr	r3, [r7, #8]
 8002ab6:	3302      	adds	r3, #2
 8002ab8:	781b      	ldrb	r3, [r3, #0]
 8002aba:	3b28      	subs	r3, #40	@ 0x28
 8002abc:	b29b      	uxth	r3, r3
 8002abe:	b21a      	sxth	r2, r3
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	809a      	strh	r2, [r3, #4]
  _m->TS_ECU_MaxTemperatureCellCount = (_d[3] & (0xFFU));
 8002ac4:	68bb      	ldr	r3, [r7, #8]
 8002ac6:	3303      	adds	r3, #3
 8002ac8:	781a      	ldrb	r2, [r3, #0]
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	719a      	strb	r2, [r3, #6]
  _m->TS_ECU_FaultInState = (_d[4] & (0x01U));
 8002ace:	68bb      	ldr	r3, [r7, #8]
 8002ad0:	3304      	adds	r3, #4
 8002ad2:	781b      	ldrb	r3, [r3, #0]
 8002ad4:	f003 0301 	and.w	r3, r3, #1
 8002ad8:	b2da      	uxtb	r2, r3
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	71da      	strb	r2, [r3, #7]
  _m->TS_ECU_FaultOutState = ((_d[4] >> 1) & (0x01U));
 8002ade:	68bb      	ldr	r3, [r7, #8]
 8002ae0:	3304      	adds	r3, #4
 8002ae2:	781b      	ldrb	r3, [r3, #0]
 8002ae4:	085b      	lsrs	r3, r3, #1
 8002ae6:	b2db      	uxtb	r3, r3
 8002ae8:	f003 0301 	and.w	r3, r3, #1
 8002aec:	b2da      	uxtb	r2, r3
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	721a      	strb	r2, [r3, #8]
  _m->TS_ECU_TempThresholdFault = ((_d[4] >> 2) & (0x01U));
 8002af2:	68bb      	ldr	r3, [r7, #8]
 8002af4:	3304      	adds	r3, #4
 8002af6:	781b      	ldrb	r3, [r3, #0]
 8002af8:	089b      	lsrs	r3, r3, #2
 8002afa:	b2db      	uxtb	r3, r3
 8002afc:	f003 0301 	and.w	r3, r3, #1
 8002b00:	b2da      	uxtb	r2, r3
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	725a      	strb	r2, [r3, #9]
  _m->TS_ECU_OpenCircuitFault = ((_d[4] >> 3) & (0x01U));
 8002b06:	68bb      	ldr	r3, [r7, #8]
 8002b08:	3304      	adds	r3, #4
 8002b0a:	781b      	ldrb	r3, [r3, #0]
 8002b0c:	08db      	lsrs	r3, r3, #3
 8002b0e:	b2db      	uxtb	r3, r3
 8002b10:	f003 0301 	and.w	r3, r3, #1
 8002b14:	b2da      	uxtb	r2, r3
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	729a      	strb	r2, [r3, #10]
  _m->FAN_ECU_ShortToGroundFault = ((_d[4] >> 4) & (0x01U));
 8002b1a:	68bb      	ldr	r3, [r7, #8]
 8002b1c:	3304      	adds	r3, #4
 8002b1e:	781b      	ldrb	r3, [r3, #0]
 8002b20:	091b      	lsrs	r3, r3, #4
 8002b22:	b2db      	uxtb	r3, r3
 8002b24:	f003 0301 	and.w	r3, r3, #1
 8002b28:	b2da      	uxtb	r2, r3
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	72da      	strb	r2, [r3, #11]
  _m->TS_ECU_CurrentState = ((_d[4] >> 5) & (0x07U));
 8002b2e:	68bb      	ldr	r3, [r7, #8]
 8002b30:	3304      	adds	r3, #4
 8002b32:	781b      	ldrb	r3, [r3, #0]
 8002b34:	095b      	lsrs	r3, r3, #5
 8002b36:	b2da      	uxtb	r2, r3
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	731a      	strb	r2, [r3, #12]
  return TS_ECU5_TX1_CANID;
 8002b3c:	f240 3351 	movw	r3, #849	@ 0x351
}
 8002b40:	4618      	mov	r0, r3
 8002b42:	3714      	adds	r7, #20
 8002b44:	46bd      	mov	sp, r7
 8002b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4a:	4770      	bx	lr

08002b4c <Pack_VCU_TPS_Limits_TPS>:
  _m->TPS_SecondaryMinLimit = ((_d[7] & (0xFFU)) << 8) | (_d[6] & (0xFFU));
  return VCU_TPS_Limits_CANID;
}

uint32_t Pack_VCU_TPS_Limits_TPS(const VCU_TPS_Limits_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide)
{
 8002b4c:	b480      	push	{r7}
 8002b4e:	b087      	sub	sp, #28
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	60f8      	str	r0, [r7, #12]
 8002b54:	60b9      	str	r1, [r7, #8]
 8002b56:	607a      	str	r2, [r7, #4]
 8002b58:	603b      	str	r3, [r7, #0]
  uint8_t i; for (i = 0; i < VCU_TPS_Limits_DLC; _d[i++] = 0);
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	75fb      	strb	r3, [r7, #23]
 8002b5e:	e007      	b.n	8002b70 <Pack_VCU_TPS_Limits_TPS+0x24>
 8002b60:	7dfb      	ldrb	r3, [r7, #23]
 8002b62:	1c5a      	adds	r2, r3, #1
 8002b64:	75fa      	strb	r2, [r7, #23]
 8002b66:	461a      	mov	r2, r3
 8002b68:	68bb      	ldr	r3, [r7, #8]
 8002b6a:	4413      	add	r3, r2
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	701a      	strb	r2, [r3, #0]
 8002b70:	7dfb      	ldrb	r3, [r7, #23]
 8002b72:	2b07      	cmp	r3, #7
 8002b74:	d9f4      	bls.n	8002b60 <Pack_VCU_TPS_Limits_TPS+0x14>

  _d[0] |= (_m->TPS_PrimaryMaxLimit & (0xFFU));
 8002b76:	68bb      	ldr	r3, [r7, #8]
 8002b78:	781a      	ldrb	r2, [r3, #0]
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	881b      	ldrh	r3, [r3, #0]
 8002b7e:	b2db      	uxtb	r3, r3
 8002b80:	4313      	orrs	r3, r2
 8002b82:	b2da      	uxtb	r2, r3
 8002b84:	68bb      	ldr	r3, [r7, #8]
 8002b86:	701a      	strb	r2, [r3, #0]
  _d[1] |= ((_m->TPS_PrimaryMaxLimit >> 8) & (0xFFU));
 8002b88:	68bb      	ldr	r3, [r7, #8]
 8002b8a:	3301      	adds	r3, #1
 8002b8c:	7819      	ldrb	r1, [r3, #0]
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	881b      	ldrh	r3, [r3, #0]
 8002b92:	0a1b      	lsrs	r3, r3, #8
 8002b94:	b29b      	uxth	r3, r3
 8002b96:	b2da      	uxtb	r2, r3
 8002b98:	68bb      	ldr	r3, [r7, #8]
 8002b9a:	3301      	adds	r3, #1
 8002b9c:	430a      	orrs	r2, r1
 8002b9e:	b2d2      	uxtb	r2, r2
 8002ba0:	701a      	strb	r2, [r3, #0]
  _d[2] |= (_m->TPS_PrimaryMinLimit & (0xFFU));
 8002ba2:	68bb      	ldr	r3, [r7, #8]
 8002ba4:	3302      	adds	r3, #2
 8002ba6:	7819      	ldrb	r1, [r3, #0]
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	885b      	ldrh	r3, [r3, #2]
 8002bac:	b2da      	uxtb	r2, r3
 8002bae:	68bb      	ldr	r3, [r7, #8]
 8002bb0:	3302      	adds	r3, #2
 8002bb2:	430a      	orrs	r2, r1
 8002bb4:	b2d2      	uxtb	r2, r2
 8002bb6:	701a      	strb	r2, [r3, #0]
  _d[3] |= ((_m->TPS_PrimaryMinLimit >> 8) & (0xFFU));
 8002bb8:	68bb      	ldr	r3, [r7, #8]
 8002bba:	3303      	adds	r3, #3
 8002bbc:	7819      	ldrb	r1, [r3, #0]
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	885b      	ldrh	r3, [r3, #2]
 8002bc2:	0a1b      	lsrs	r3, r3, #8
 8002bc4:	b29b      	uxth	r3, r3
 8002bc6:	b2da      	uxtb	r2, r3
 8002bc8:	68bb      	ldr	r3, [r7, #8]
 8002bca:	3303      	adds	r3, #3
 8002bcc:	430a      	orrs	r2, r1
 8002bce:	b2d2      	uxtb	r2, r2
 8002bd0:	701a      	strb	r2, [r3, #0]
  _d[4] |= (_m->TPS_SecondaryMaxLimit & (0xFFU));
 8002bd2:	68bb      	ldr	r3, [r7, #8]
 8002bd4:	3304      	adds	r3, #4
 8002bd6:	7819      	ldrb	r1, [r3, #0]
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	889b      	ldrh	r3, [r3, #4]
 8002bdc:	b2da      	uxtb	r2, r3
 8002bde:	68bb      	ldr	r3, [r7, #8]
 8002be0:	3304      	adds	r3, #4
 8002be2:	430a      	orrs	r2, r1
 8002be4:	b2d2      	uxtb	r2, r2
 8002be6:	701a      	strb	r2, [r3, #0]
  _d[5] |= ((_m->TPS_SecondaryMaxLimit >> 8) & (0xFFU));
 8002be8:	68bb      	ldr	r3, [r7, #8]
 8002bea:	3305      	adds	r3, #5
 8002bec:	7819      	ldrb	r1, [r3, #0]
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	889b      	ldrh	r3, [r3, #4]
 8002bf2:	0a1b      	lsrs	r3, r3, #8
 8002bf4:	b29b      	uxth	r3, r3
 8002bf6:	b2da      	uxtb	r2, r3
 8002bf8:	68bb      	ldr	r3, [r7, #8]
 8002bfa:	3305      	adds	r3, #5
 8002bfc:	430a      	orrs	r2, r1
 8002bfe:	b2d2      	uxtb	r2, r2
 8002c00:	701a      	strb	r2, [r3, #0]
  _d[6] |= (_m->TPS_SecondaryMinLimit & (0xFFU));
 8002c02:	68bb      	ldr	r3, [r7, #8]
 8002c04:	3306      	adds	r3, #6
 8002c06:	7819      	ldrb	r1, [r3, #0]
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	88db      	ldrh	r3, [r3, #6]
 8002c0c:	b2da      	uxtb	r2, r3
 8002c0e:	68bb      	ldr	r3, [r7, #8]
 8002c10:	3306      	adds	r3, #6
 8002c12:	430a      	orrs	r2, r1
 8002c14:	b2d2      	uxtb	r2, r2
 8002c16:	701a      	strb	r2, [r3, #0]
  _d[7] |= ((_m->TPS_SecondaryMinLimit >> 8) & (0xFFU));
 8002c18:	68bb      	ldr	r3, [r7, #8]
 8002c1a:	3307      	adds	r3, #7
 8002c1c:	7819      	ldrb	r1, [r3, #0]
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	88db      	ldrh	r3, [r3, #6]
 8002c22:	0a1b      	lsrs	r3, r3, #8
 8002c24:	b29b      	uxth	r3, r3
 8002c26:	b2da      	uxtb	r2, r3
 8002c28:	68bb      	ldr	r3, [r7, #8]
 8002c2a:	3307      	adds	r3, #7
 8002c2c:	430a      	orrs	r2, r1
 8002c2e:	b2d2      	uxtb	r2, r2
 8002c30:	701a      	strb	r2, [r3, #0]
  *_len = 8; *_ide = 0;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	2208      	movs	r2, #8
 8002c36:	701a      	strb	r2, [r3, #0]
 8002c38:	683b      	ldr	r3, [r7, #0]
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	701a      	strb	r2, [r3, #0]
  return VCU_TPS_Limits_CANID;
 8002c3e:	f44f 7341 	mov.w	r3, #772	@ 0x304
}
 8002c42:	4618      	mov	r0, r3
 8002c44:	371c      	adds	r7, #28
 8002c46:	46bd      	mov	sp, r7
 8002c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4c:	4770      	bx	lr

08002c4e <Pack_VCU_TPS_CurrentValue_TPS>:
  _m->TPS_SecondaryCurrentVal = ((_d[3] & (0xFFU)) << 8) | (_d[2] & (0xFFU));
  return VCU_TPS_CurrentValue_CANID;
}

uint32_t Pack_VCU_TPS_CurrentValue_TPS(const VCU_TPS_CurrentValue_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide)
{
 8002c4e:	b480      	push	{r7}
 8002c50:	b087      	sub	sp, #28
 8002c52:	af00      	add	r7, sp, #0
 8002c54:	60f8      	str	r0, [r7, #12]
 8002c56:	60b9      	str	r1, [r7, #8]
 8002c58:	607a      	str	r2, [r7, #4]
 8002c5a:	603b      	str	r3, [r7, #0]
  uint8_t i; for (i = 0; i < VCU_TPS_CurrentValue_DLC; _d[i++] = 0);
 8002c5c:	2300      	movs	r3, #0
 8002c5e:	75fb      	strb	r3, [r7, #23]
 8002c60:	e007      	b.n	8002c72 <Pack_VCU_TPS_CurrentValue_TPS+0x24>
 8002c62:	7dfb      	ldrb	r3, [r7, #23]
 8002c64:	1c5a      	adds	r2, r3, #1
 8002c66:	75fa      	strb	r2, [r7, #23]
 8002c68:	461a      	mov	r2, r3
 8002c6a:	68bb      	ldr	r3, [r7, #8]
 8002c6c:	4413      	add	r3, r2
 8002c6e:	2200      	movs	r2, #0
 8002c70:	701a      	strb	r2, [r3, #0]
 8002c72:	7dfb      	ldrb	r3, [r7, #23]
 8002c74:	2b03      	cmp	r3, #3
 8002c76:	d9f4      	bls.n	8002c62 <Pack_VCU_TPS_CurrentValue_TPS+0x14>

  _d[0] |= (_m->TPS_PrimaryCurrentVal & (0xFFU));
 8002c78:	68bb      	ldr	r3, [r7, #8]
 8002c7a:	781a      	ldrb	r2, [r3, #0]
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	881b      	ldrh	r3, [r3, #0]
 8002c80:	b2db      	uxtb	r3, r3
 8002c82:	4313      	orrs	r3, r2
 8002c84:	b2da      	uxtb	r2, r3
 8002c86:	68bb      	ldr	r3, [r7, #8]
 8002c88:	701a      	strb	r2, [r3, #0]
  _d[1] |= ((_m->TPS_PrimaryCurrentVal >> 8) & (0xFFU));
 8002c8a:	68bb      	ldr	r3, [r7, #8]
 8002c8c:	3301      	adds	r3, #1
 8002c8e:	7819      	ldrb	r1, [r3, #0]
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	881b      	ldrh	r3, [r3, #0]
 8002c94:	0a1b      	lsrs	r3, r3, #8
 8002c96:	b29b      	uxth	r3, r3
 8002c98:	b2da      	uxtb	r2, r3
 8002c9a:	68bb      	ldr	r3, [r7, #8]
 8002c9c:	3301      	adds	r3, #1
 8002c9e:	430a      	orrs	r2, r1
 8002ca0:	b2d2      	uxtb	r2, r2
 8002ca2:	701a      	strb	r2, [r3, #0]
  _d[2] |= (_m->TPS_SecondaryCurrentVal & (0xFFU));
 8002ca4:	68bb      	ldr	r3, [r7, #8]
 8002ca6:	3302      	adds	r3, #2
 8002ca8:	7819      	ldrb	r1, [r3, #0]
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	885b      	ldrh	r3, [r3, #2]
 8002cae:	b2da      	uxtb	r2, r3
 8002cb0:	68bb      	ldr	r3, [r7, #8]
 8002cb2:	3302      	adds	r3, #2
 8002cb4:	430a      	orrs	r2, r1
 8002cb6:	b2d2      	uxtb	r2, r2
 8002cb8:	701a      	strb	r2, [r3, #0]
  _d[3] |= ((_m->TPS_SecondaryCurrentVal >> 8) & (0xFFU));
 8002cba:	68bb      	ldr	r3, [r7, #8]
 8002cbc:	3303      	adds	r3, #3
 8002cbe:	7819      	ldrb	r1, [r3, #0]
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	885b      	ldrh	r3, [r3, #2]
 8002cc4:	0a1b      	lsrs	r3, r3, #8
 8002cc6:	b29b      	uxth	r3, r3
 8002cc8:	b2da      	uxtb	r2, r3
 8002cca:	68bb      	ldr	r3, [r7, #8]
 8002ccc:	3303      	adds	r3, #3
 8002cce:	430a      	orrs	r2, r1
 8002cd0:	b2d2      	uxtb	r2, r2
 8002cd2:	701a      	strb	r2, [r3, #0]
  *_len = 4; *_ide = 0;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	2204      	movs	r2, #4
 8002cd8:	701a      	strb	r2, [r3, #0]
 8002cda:	683b      	ldr	r3, [r7, #0]
 8002cdc:	2200      	movs	r2, #0
 8002cde:	701a      	strb	r2, [r3, #0]
  return VCU_TPS_CurrentValue_CANID;
 8002ce0:	f240 3305 	movw	r3, #773	@ 0x305
}
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	371c      	adds	r7, #28
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cee:	4770      	bx	lr

08002cf0 <Reset_Handler>:
 8002cf0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002d28 <LoopFillZerobss+0x12>
 8002cf4:	480d      	ldr	r0, [pc, #52]	@ (8002d2c <LoopFillZerobss+0x16>)
 8002cf6:	490e      	ldr	r1, [pc, #56]	@ (8002d30 <LoopFillZerobss+0x1a>)
 8002cf8:	4a0e      	ldr	r2, [pc, #56]	@ (8002d34 <LoopFillZerobss+0x1e>)
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	e002      	b.n	8002d04 <LoopCopyDataInit>

08002cfe <CopyDataInit>:
 8002cfe:	58d4      	ldr	r4, [r2, r3]
 8002d00:	50c4      	str	r4, [r0, r3]
 8002d02:	3304      	adds	r3, #4

08002d04 <LoopCopyDataInit>:
 8002d04:	18c4      	adds	r4, r0, r3
 8002d06:	428c      	cmp	r4, r1
 8002d08:	d3f9      	bcc.n	8002cfe <CopyDataInit>
 8002d0a:	4a0b      	ldr	r2, [pc, #44]	@ (8002d38 <LoopFillZerobss+0x22>)
 8002d0c:	4c0b      	ldr	r4, [pc, #44]	@ (8002d3c <LoopFillZerobss+0x26>)
 8002d0e:	2300      	movs	r3, #0
 8002d10:	e001      	b.n	8002d16 <LoopFillZerobss>

08002d12 <FillZerobss>:
 8002d12:	6013      	str	r3, [r2, #0]
 8002d14:	3204      	adds	r2, #4

08002d16 <LoopFillZerobss>:
 8002d16:	42a2      	cmp	r2, r4
 8002d18:	d3fb      	bcc.n	8002d12 <FillZerobss>
 8002d1a:	f7ff fd1b 	bl	8002754 <SystemInit>
 8002d1e:	f006 fd75 	bl	800980c <__libc_init_array>
 8002d22:	f7fe f9ad 	bl	8001080 <main>
 8002d26:	4770      	bx	lr
 8002d28:	20080000 	.word	0x20080000
 8002d2c:	20000000 	.word	0x20000000
 8002d30:	20000030 	.word	0x20000030
 8002d34:	08009948 	.word	0x08009948
 8002d38:	20000030 	.word	0x20000030
 8002d3c:	200040b0 	.word	0x200040b0

08002d40 <ADC_IRQHandler>:
 8002d40:	e7fe      	b.n	8002d40 <ADC_IRQHandler>

08002d42 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002d42:	b580      	push	{r7, lr}
 8002d44:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002d46:	2003      	movs	r0, #3
 8002d48:	f001 fb81 	bl	800444e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002d4c:	200f      	movs	r0, #15
 8002d4e:	f7ff fc2f 	bl	80025b0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002d52:	f7ff fa9f 	bl	8002294 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002d56:	2300      	movs	r3, #0
}
 8002d58:	4618      	mov	r0, r3
 8002d5a:	bd80      	pop	{r7, pc}

08002d5c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002d5c:	b480      	push	{r7}
 8002d5e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002d60:	4b06      	ldr	r3, [pc, #24]	@ (8002d7c <HAL_IncTick+0x20>)
 8002d62:	781b      	ldrb	r3, [r3, #0]
 8002d64:	461a      	mov	r2, r3
 8002d66:	4b06      	ldr	r3, [pc, #24]	@ (8002d80 <HAL_IncTick+0x24>)
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	4413      	add	r3, r2
 8002d6c:	4a04      	ldr	r2, [pc, #16]	@ (8002d80 <HAL_IncTick+0x24>)
 8002d6e:	6013      	str	r3, [r2, #0]
}
 8002d70:	bf00      	nop
 8002d72:	46bd      	mov	sp, r7
 8002d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d78:	4770      	bx	lr
 8002d7a:	bf00      	nop
 8002d7c:	20000024 	.word	0x20000024
 8002d80:	20000308 	.word	0x20000308

08002d84 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002d84:	b480      	push	{r7}
 8002d86:	af00      	add	r7, sp, #0
  return uwTick;
 8002d88:	4b03      	ldr	r3, [pc, #12]	@ (8002d98 <HAL_GetTick+0x14>)
 8002d8a:	681b      	ldr	r3, [r3, #0]
}
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d94:	4770      	bx	lr
 8002d96:	bf00      	nop
 8002d98:	20000308 	.word	0x20000308

08002d9c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b084      	sub	sp, #16
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002da4:	2300      	movs	r3, #0
 8002da6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d101      	bne.n	8002db2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002dae:	2301      	movs	r3, #1
 8002db0:	e031      	b.n	8002e16 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d109      	bne.n	8002dce <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002dba:	6878      	ldr	r0, [r7, #4]
 8002dbc:	f7ff fa8e 	bl	80022dc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	2200      	movs	r2, #0
 8002dca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dd2:	f003 0310 	and.w	r3, r3, #16
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d116      	bne.n	8002e08 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002dde:	4b10      	ldr	r3, [pc, #64]	@ (8002e20 <HAL_ADC_Init+0x84>)
 8002de0:	4013      	ands	r3, r2
 8002de2:	f043 0202 	orr.w	r2, r3, #2
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002dea:	6878      	ldr	r0, [r7, #4]
 8002dec:	f000 fb0a 	bl	8003404 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	2200      	movs	r2, #0
 8002df4:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dfa:	f023 0303 	bic.w	r3, r3, #3
 8002dfe:	f043 0201 	orr.w	r2, r3, #1
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	641a      	str	r2, [r3, #64]	@ 0x40
 8002e06:	e001      	b.n	8002e0c <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002e08:	2301      	movs	r3, #1
 8002e0a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	2200      	movs	r2, #0
 8002e10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002e14:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e16:	4618      	mov	r0, r3
 8002e18:	3710      	adds	r7, #16
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	bd80      	pop	{r7, pc}
 8002e1e:	bf00      	nop
 8002e20:	ffffeefd 	.word	0xffffeefd

08002e24 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002e24:	b480      	push	{r7}
 8002e26:	b085      	sub	sp, #20
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002e36:	2b01      	cmp	r3, #1
 8002e38:	d101      	bne.n	8002e3e <HAL_ADC_Start+0x1a>
 8002e3a:	2302      	movs	r3, #2
 8002e3c:	e0ad      	b.n	8002f9a <HAL_ADC_Start+0x176>
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	2201      	movs	r2, #1
 8002e42:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	689b      	ldr	r3, [r3, #8]
 8002e4c:	f003 0301 	and.w	r3, r3, #1
 8002e50:	2b01      	cmp	r3, #1
 8002e52:	d018      	beq.n	8002e86 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	689a      	ldr	r2, [r3, #8]
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f042 0201 	orr.w	r2, r2, #1
 8002e62:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8002e64:	4b50      	ldr	r3, [pc, #320]	@ (8002fa8 <HAL_ADC_Start+0x184>)
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	4a50      	ldr	r2, [pc, #320]	@ (8002fac <HAL_ADC_Start+0x188>)
 8002e6a:	fba2 2303 	umull	r2, r3, r2, r3
 8002e6e:	0c9a      	lsrs	r2, r3, #18
 8002e70:	4613      	mov	r3, r2
 8002e72:	005b      	lsls	r3, r3, #1
 8002e74:	4413      	add	r3, r2
 8002e76:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8002e78:	e002      	b.n	8002e80 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	3b01      	subs	r3, #1
 8002e7e:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d1f9      	bne.n	8002e7a <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	689b      	ldr	r3, [r3, #8]
 8002e8c:	f003 0301 	and.w	r3, r3, #1
 8002e90:	2b01      	cmp	r3, #1
 8002e92:	d175      	bne.n	8002f80 <HAL_ADC_Start+0x15c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002e98:	4b45      	ldr	r3, [pc, #276]	@ (8002fb0 <HAL_ADC_Start+0x18c>)
 8002e9a:	4013      	ands	r3, r2
 8002e9c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	685b      	ldr	r3, [r3, #4]
 8002eaa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d007      	beq.n	8002ec2 <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002eb6:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002eba:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ec6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002eca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002ece:	d106      	bne.n	8002ede <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ed4:	f023 0206 	bic.w	r2, r3, #6
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	645a      	str	r2, [r3, #68]	@ 0x44
 8002edc:	e002      	b.n	8002ee4 <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	645a      	str	r2, [r3, #68]	@ 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8002ef4:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8002ef6:	4b2f      	ldr	r3, [pc, #188]	@ (8002fb4 <HAL_ADC_Start+0x190>)
 8002ef8:	685b      	ldr	r3, [r3, #4]
 8002efa:	f003 031f 	and.w	r3, r3, #31
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d10f      	bne.n	8002f22 <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	689b      	ldr	r3, [r3, #8]
 8002f08:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d143      	bne.n	8002f98 <HAL_ADC_Start+0x174>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	689a      	ldr	r2, [r3, #8]
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002f1e:	609a      	str	r2, [r3, #8]
 8002f20:	e03a      	b.n	8002f98 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	4a24      	ldr	r2, [pc, #144]	@ (8002fb8 <HAL_ADC_Start+0x194>)
 8002f28:	4293      	cmp	r3, r2
 8002f2a:	d10e      	bne.n	8002f4a <HAL_ADC_Start+0x126>
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	689b      	ldr	r3, [r3, #8]
 8002f32:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d107      	bne.n	8002f4a <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	689a      	ldr	r2, [r3, #8]
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002f48:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8002f4a:	4b1a      	ldr	r3, [pc, #104]	@ (8002fb4 <HAL_ADC_Start+0x190>)
 8002f4c:	685b      	ldr	r3, [r3, #4]
 8002f4e:	f003 0310 	and.w	r3, r3, #16
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d120      	bne.n	8002f98 <HAL_ADC_Start+0x174>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	4a18      	ldr	r2, [pc, #96]	@ (8002fbc <HAL_ADC_Start+0x198>)
 8002f5c:	4293      	cmp	r3, r2
 8002f5e:	d11b      	bne.n	8002f98 <HAL_ADC_Start+0x174>
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	689b      	ldr	r3, [r3, #8]
 8002f66:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d114      	bne.n	8002f98 <HAL_ADC_Start+0x174>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	689a      	ldr	r2, [r3, #8]
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002f7c:	609a      	str	r2, [r3, #8]
 8002f7e:	e00b      	b.n	8002f98 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f84:	f043 0210 	orr.w	r2, r3, #16
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f90:	f043 0201 	orr.w	r2, r3, #1
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	645a      	str	r2, [r3, #68]	@ 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002f98:	2300      	movs	r3, #0
}
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	3714      	adds	r7, #20
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa4:	4770      	bx	lr
 8002fa6:	bf00      	nop
 8002fa8:	2000001c 	.word	0x2000001c
 8002fac:	431bde83 	.word	0x431bde83
 8002fb0:	fffff8fe 	.word	0xfffff8fe
 8002fb4:	40012300 	.word	0x40012300
 8002fb8:	40012000 	.word	0x40012000
 8002fbc:	40012200 	.word	0x40012200

08002fc0 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8002fc0:	b480      	push	{r7}
 8002fc2:	b083      	sub	sp, #12
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002fce:	2b01      	cmp	r3, #1
 8002fd0:	d101      	bne.n	8002fd6 <HAL_ADC_Stop+0x16>
 8002fd2:	2302      	movs	r3, #2
 8002fd4:	e01f      	b.n	8003016 <HAL_ADC_Stop+0x56>
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	2201      	movs	r2, #1
 8002fda:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	689a      	ldr	r2, [r3, #8]
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f022 0201 	bic.w	r2, r2, #1
 8002fec:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	689b      	ldr	r3, [r3, #8]
 8002ff4:	f003 0301 	and.w	r3, r3, #1
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d107      	bne.n	800300c <HAL_ADC_Stop+0x4c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003000:	4b08      	ldr	r3, [pc, #32]	@ (8003024 <HAL_ADC_Stop+0x64>)
 8003002:	4013      	ands	r3, r2
 8003004:	f043 0201 	orr.w	r2, r3, #1
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2200      	movs	r2, #0
 8003010:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003014:	2300      	movs	r3, #0
}
 8003016:	4618      	mov	r0, r3
 8003018:	370c      	adds	r7, #12
 800301a:	46bd      	mov	sp, r7
 800301c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003020:	4770      	bx	lr
 8003022:	bf00      	nop
 8003024:	ffffeefe 	.word	0xffffeefe

08003028 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8003028:	b580      	push	{r7, lr}
 800302a:	b084      	sub	sp, #16
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
 8003030:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003032:	2300      	movs	r3, #0
 8003034:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	689b      	ldr	r3, [r3, #8]
 800303c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003040:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003044:	d113      	bne.n	800306e <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	689b      	ldr	r3, [r3, #8]
 800304c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8003050:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003054:	d10b      	bne.n	800306e <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800305a:	f043 0220 	orr.w	r2, r3, #32
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	2200      	movs	r2, #0
 8003066:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    return HAL_ERROR;
 800306a:	2301      	movs	r3, #1
 800306c:	e063      	b.n	8003136 <HAL_ADC_PollForConversion+0x10e>
  }
 
  /* Get tick */ 
  tickstart = HAL_GetTick();
 800306e:	f7ff fe89 	bl	8002d84 <HAL_GetTick>
 8003072:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003074:	e021      	b.n	80030ba <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8003076:	683b      	ldr	r3, [r7, #0]
 8003078:	f1b3 3fff 	cmp.w	r3, #4294967295
 800307c:	d01d      	beq.n	80030ba <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 800307e:	683b      	ldr	r3, [r7, #0]
 8003080:	2b00      	cmp	r3, #0
 8003082:	d007      	beq.n	8003094 <HAL_ADC_PollForConversion+0x6c>
 8003084:	f7ff fe7e 	bl	8002d84 <HAL_GetTick>
 8003088:	4602      	mov	r2, r0
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	1ad3      	subs	r3, r2, r3
 800308e:	683a      	ldr	r2, [r7, #0]
 8003090:	429a      	cmp	r2, r3
 8003092:	d212      	bcs.n	80030ba <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f003 0302 	and.w	r3, r3, #2
 800309e:	2b02      	cmp	r3, #2
 80030a0:	d00b      	beq.n	80030ba <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030a6:	f043 0204 	orr.w	r2, r3, #4
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	641a      	str	r2, [r3, #64]	@ 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	2200      	movs	r2, #0
 80030b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
          
          return HAL_TIMEOUT;
 80030b6:	2303      	movs	r3, #3
 80030b8:	e03d      	b.n	8003136 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f003 0302 	and.w	r3, r3, #2
 80030c4:	2b02      	cmp	r3, #2
 80030c6:	d1d6      	bne.n	8003076 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f06f 0212 	mvn.w	r2, #18
 80030d0:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030d6:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F7, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	689b      	ldr	r3, [r3, #8]
 80030e4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d123      	bne.n	8003134 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	699b      	ldr	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d11f      	bne.n	8003134 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030fa:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d006      	beq.n	8003110 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	689b      	ldr	r3, [r3, #8]
 8003108:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800310c:	2b00      	cmp	r3, #0
 800310e:	d111      	bne.n	8003134 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003114:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	641a      	str	r2, [r3, #64]	@ 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003120:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003124:	2b00      	cmp	r3, #0
 8003126:	d105      	bne.n	8003134 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800312c:	f043 0201 	orr.w	r2, r3, #1
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8003134:	2300      	movs	r3, #0
}
 8003136:	4618      	mov	r0, r3
 8003138:	3710      	adds	r7, #16
 800313a:	46bd      	mov	sp, r7
 800313c:	bd80      	pop	{r7, pc}

0800313e <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 800313e:	b480      	push	{r7}
 8003140:	b083      	sub	sp, #12
 8003142:	af00      	add	r7, sp, #0
 8003144:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 800314c:	4618      	mov	r0, r3
 800314e:	370c      	adds	r7, #12
 8003150:	46bd      	mov	sp, r7
 8003152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003156:	4770      	bx	lr

08003158 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003158:	b480      	push	{r7}
 800315a:	b085      	sub	sp, #20
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
 8003160:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8003162:	2300      	movs	r3, #0
 8003164:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800316c:	2b01      	cmp	r3, #1
 800316e:	d101      	bne.n	8003174 <HAL_ADC_ConfigChannel+0x1c>
 8003170:	2302      	movs	r3, #2
 8003172:	e136      	b.n	80033e2 <HAL_ADC_ConfigChannel+0x28a>
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2201      	movs	r2, #1
 8003178:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 800317c:	683b      	ldr	r3, [r7, #0]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	2b09      	cmp	r3, #9
 8003182:	d93a      	bls.n	80031fa <HAL_ADC_ConfigChannel+0xa2>
 8003184:	683b      	ldr	r3, [r7, #0]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800318c:	d035      	beq.n	80031fa <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	68d9      	ldr	r1, [r3, #12]
 8003194:	683b      	ldr	r3, [r7, #0]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	b29b      	uxth	r3, r3
 800319a:	461a      	mov	r2, r3
 800319c:	4613      	mov	r3, r2
 800319e:	005b      	lsls	r3, r3, #1
 80031a0:	4413      	add	r3, r2
 80031a2:	3b1e      	subs	r3, #30
 80031a4:	2207      	movs	r2, #7
 80031a6:	fa02 f303 	lsl.w	r3, r2, r3
 80031aa:	43da      	mvns	r2, r3
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	400a      	ands	r2, r1
 80031b2:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80031b4:	683b      	ldr	r3, [r7, #0]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	4a8d      	ldr	r2, [pc, #564]	@ (80033f0 <HAL_ADC_ConfigChannel+0x298>)
 80031ba:	4293      	cmp	r3, r2
 80031bc:	d10a      	bne.n	80031d4 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	68d9      	ldr	r1, [r3, #12]
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	689b      	ldr	r3, [r3, #8]
 80031c8:	061a      	lsls	r2, r3, #24
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	430a      	orrs	r2, r1
 80031d0:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80031d2:	e035      	b.n	8003240 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	68d9      	ldr	r1, [r3, #12]
 80031da:	683b      	ldr	r3, [r7, #0]
 80031dc:	689a      	ldr	r2, [r3, #8]
 80031de:	683b      	ldr	r3, [r7, #0]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	b29b      	uxth	r3, r3
 80031e4:	4618      	mov	r0, r3
 80031e6:	4603      	mov	r3, r0
 80031e8:	005b      	lsls	r3, r3, #1
 80031ea:	4403      	add	r3, r0
 80031ec:	3b1e      	subs	r3, #30
 80031ee:	409a      	lsls	r2, r3
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	430a      	orrs	r2, r1
 80031f6:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80031f8:	e022      	b.n	8003240 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	6919      	ldr	r1, [r3, #16]
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	b29b      	uxth	r3, r3
 8003206:	461a      	mov	r2, r3
 8003208:	4613      	mov	r3, r2
 800320a:	005b      	lsls	r3, r3, #1
 800320c:	4413      	add	r3, r2
 800320e:	2207      	movs	r2, #7
 8003210:	fa02 f303 	lsl.w	r3, r2, r3
 8003214:	43da      	mvns	r2, r3
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	400a      	ands	r2, r1
 800321c:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	6919      	ldr	r1, [r3, #16]
 8003224:	683b      	ldr	r3, [r7, #0]
 8003226:	689a      	ldr	r2, [r3, #8]
 8003228:	683b      	ldr	r3, [r7, #0]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	b29b      	uxth	r3, r3
 800322e:	4618      	mov	r0, r3
 8003230:	4603      	mov	r3, r0
 8003232:	005b      	lsls	r3, r3, #1
 8003234:	4403      	add	r3, r0
 8003236:	409a      	lsls	r2, r3
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	430a      	orrs	r2, r1
 800323e:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8003240:	683b      	ldr	r3, [r7, #0]
 8003242:	685b      	ldr	r3, [r3, #4]
 8003244:	2b06      	cmp	r3, #6
 8003246:	d824      	bhi.n	8003292 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800324e:	683b      	ldr	r3, [r7, #0]
 8003250:	685a      	ldr	r2, [r3, #4]
 8003252:	4613      	mov	r3, r2
 8003254:	009b      	lsls	r3, r3, #2
 8003256:	4413      	add	r3, r2
 8003258:	3b05      	subs	r3, #5
 800325a:	221f      	movs	r2, #31
 800325c:	fa02 f303 	lsl.w	r3, r2, r3
 8003260:	43da      	mvns	r2, r3
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	400a      	ands	r2, r1
 8003268:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003270:	683b      	ldr	r3, [r7, #0]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	b29b      	uxth	r3, r3
 8003276:	4618      	mov	r0, r3
 8003278:	683b      	ldr	r3, [r7, #0]
 800327a:	685a      	ldr	r2, [r3, #4]
 800327c:	4613      	mov	r3, r2
 800327e:	009b      	lsls	r3, r3, #2
 8003280:	4413      	add	r3, r2
 8003282:	3b05      	subs	r3, #5
 8003284:	fa00 f203 	lsl.w	r2, r0, r3
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	430a      	orrs	r2, r1
 800328e:	635a      	str	r2, [r3, #52]	@ 0x34
 8003290:	e04c      	b.n	800332c <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8003292:	683b      	ldr	r3, [r7, #0]
 8003294:	685b      	ldr	r3, [r3, #4]
 8003296:	2b0c      	cmp	r3, #12
 8003298:	d824      	bhi.n	80032e4 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80032a0:	683b      	ldr	r3, [r7, #0]
 80032a2:	685a      	ldr	r2, [r3, #4]
 80032a4:	4613      	mov	r3, r2
 80032a6:	009b      	lsls	r3, r3, #2
 80032a8:	4413      	add	r3, r2
 80032aa:	3b23      	subs	r3, #35	@ 0x23
 80032ac:	221f      	movs	r2, #31
 80032ae:	fa02 f303 	lsl.w	r3, r2, r3
 80032b2:	43da      	mvns	r2, r3
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	400a      	ands	r2, r1
 80032ba:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80032c2:	683b      	ldr	r3, [r7, #0]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	b29b      	uxth	r3, r3
 80032c8:	4618      	mov	r0, r3
 80032ca:	683b      	ldr	r3, [r7, #0]
 80032cc:	685a      	ldr	r2, [r3, #4]
 80032ce:	4613      	mov	r3, r2
 80032d0:	009b      	lsls	r3, r3, #2
 80032d2:	4413      	add	r3, r2
 80032d4:	3b23      	subs	r3, #35	@ 0x23
 80032d6:	fa00 f203 	lsl.w	r2, r0, r3
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	430a      	orrs	r2, r1
 80032e0:	631a      	str	r2, [r3, #48]	@ 0x30
 80032e2:	e023      	b.n	800332c <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	685a      	ldr	r2, [r3, #4]
 80032ee:	4613      	mov	r3, r2
 80032f0:	009b      	lsls	r3, r3, #2
 80032f2:	4413      	add	r3, r2
 80032f4:	3b41      	subs	r3, #65	@ 0x41
 80032f6:	221f      	movs	r2, #31
 80032f8:	fa02 f303 	lsl.w	r3, r2, r3
 80032fc:	43da      	mvns	r2, r3
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	400a      	ands	r2, r1
 8003304:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	b29b      	uxth	r3, r3
 8003312:	4618      	mov	r0, r3
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	685a      	ldr	r2, [r3, #4]
 8003318:	4613      	mov	r3, r2
 800331a:	009b      	lsls	r3, r3, #2
 800331c:	4413      	add	r3, r2
 800331e:	3b41      	subs	r3, #65	@ 0x41
 8003320:	fa00 f203 	lsl.w	r2, r0, r3
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	430a      	orrs	r2, r1
 800332a:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	4a30      	ldr	r2, [pc, #192]	@ (80033f4 <HAL_ADC_ConfigChannel+0x29c>)
 8003332:	4293      	cmp	r3, r2
 8003334:	d10a      	bne.n	800334c <HAL_ADC_ConfigChannel+0x1f4>
 8003336:	683b      	ldr	r3, [r7, #0]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800333e:	d105      	bne.n	800334c <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8003340:	4b2d      	ldr	r3, [pc, #180]	@ (80033f8 <HAL_ADC_ConfigChannel+0x2a0>)
 8003342:	685b      	ldr	r3, [r3, #4]
 8003344:	4a2c      	ldr	r2, [pc, #176]	@ (80033f8 <HAL_ADC_ConfigChannel+0x2a0>)
 8003346:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 800334a:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	4a28      	ldr	r2, [pc, #160]	@ (80033f4 <HAL_ADC_ConfigChannel+0x29c>)
 8003352:	4293      	cmp	r3, r2
 8003354:	d10f      	bne.n	8003376 <HAL_ADC_ConfigChannel+0x21e>
 8003356:	683b      	ldr	r3, [r7, #0]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	2b12      	cmp	r3, #18
 800335c:	d10b      	bne.n	8003376 <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 800335e:	4b26      	ldr	r3, [pc, #152]	@ (80033f8 <HAL_ADC_ConfigChannel+0x2a0>)
 8003360:	685b      	ldr	r3, [r3, #4]
 8003362:	4a25      	ldr	r2, [pc, #148]	@ (80033f8 <HAL_ADC_ConfigChannel+0x2a0>)
 8003364:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8003368:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 800336a:	4b23      	ldr	r3, [pc, #140]	@ (80033f8 <HAL_ADC_ConfigChannel+0x2a0>)
 800336c:	685b      	ldr	r3, [r3, #4]
 800336e:	4a22      	ldr	r2, [pc, #136]	@ (80033f8 <HAL_ADC_ConfigChannel+0x2a0>)
 8003370:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003374:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	4a1e      	ldr	r2, [pc, #120]	@ (80033f4 <HAL_ADC_ConfigChannel+0x29c>)
 800337c:	4293      	cmp	r3, r2
 800337e:	d12b      	bne.n	80033d8 <HAL_ADC_ConfigChannel+0x280>
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	4a1a      	ldr	r2, [pc, #104]	@ (80033f0 <HAL_ADC_ConfigChannel+0x298>)
 8003386:	4293      	cmp	r3, r2
 8003388:	d003      	beq.n	8003392 <HAL_ADC_ConfigChannel+0x23a>
 800338a:	683b      	ldr	r3, [r7, #0]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	2b11      	cmp	r3, #17
 8003390:	d122      	bne.n	80033d8 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8003392:	4b19      	ldr	r3, [pc, #100]	@ (80033f8 <HAL_ADC_ConfigChannel+0x2a0>)
 8003394:	685b      	ldr	r3, [r3, #4]
 8003396:	4a18      	ldr	r2, [pc, #96]	@ (80033f8 <HAL_ADC_ConfigChannel+0x2a0>)
 8003398:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 800339c:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 800339e:	4b16      	ldr	r3, [pc, #88]	@ (80033f8 <HAL_ADC_ConfigChannel+0x2a0>)
 80033a0:	685b      	ldr	r3, [r3, #4]
 80033a2:	4a15      	ldr	r2, [pc, #84]	@ (80033f8 <HAL_ADC_ConfigChannel+0x2a0>)
 80033a4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80033a8:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80033aa:	683b      	ldr	r3, [r7, #0]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	4a10      	ldr	r2, [pc, #64]	@ (80033f0 <HAL_ADC_ConfigChannel+0x298>)
 80033b0:	4293      	cmp	r3, r2
 80033b2:	d111      	bne.n	80033d8 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 80033b4:	4b11      	ldr	r3, [pc, #68]	@ (80033fc <HAL_ADC_ConfigChannel+0x2a4>)
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	4a11      	ldr	r2, [pc, #68]	@ (8003400 <HAL_ADC_ConfigChannel+0x2a8>)
 80033ba:	fba2 2303 	umull	r2, r3, r2, r3
 80033be:	0c9a      	lsrs	r2, r3, #18
 80033c0:	4613      	mov	r3, r2
 80033c2:	009b      	lsls	r3, r3, #2
 80033c4:	4413      	add	r3, r2
 80033c6:	005b      	lsls	r3, r3, #1
 80033c8:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80033ca:	e002      	b.n	80033d2 <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	3b01      	subs	r3, #1
 80033d0:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d1f9      	bne.n	80033cc <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2200      	movs	r2, #0
 80033dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 80033e0:	2300      	movs	r3, #0
}
 80033e2:	4618      	mov	r0, r3
 80033e4:	3714      	adds	r7, #20
 80033e6:	46bd      	mov	sp, r7
 80033e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ec:	4770      	bx	lr
 80033ee:	bf00      	nop
 80033f0:	10000012 	.word	0x10000012
 80033f4:	40012000 	.word	0x40012000
 80033f8:	40012300 	.word	0x40012300
 80033fc:	2000001c 	.word	0x2000001c
 8003400:	431bde83 	.word	0x431bde83

08003404 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003404:	b480      	push	{r7}
 8003406:	b083      	sub	sp, #12
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 800340c:	4b78      	ldr	r3, [pc, #480]	@ (80035f0 <ADC_Init+0x1ec>)
 800340e:	685b      	ldr	r3, [r3, #4]
 8003410:	4a77      	ldr	r2, [pc, #476]	@ (80035f0 <ADC_Init+0x1ec>)
 8003412:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 8003416:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8003418:	4b75      	ldr	r3, [pc, #468]	@ (80035f0 <ADC_Init+0x1ec>)
 800341a:	685a      	ldr	r2, [r3, #4]
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	685b      	ldr	r3, [r3, #4]
 8003420:	4973      	ldr	r1, [pc, #460]	@ (80035f0 <ADC_Init+0x1ec>)
 8003422:	4313      	orrs	r3, r2
 8003424:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	685a      	ldr	r2, [r3, #4]
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003434:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	6859      	ldr	r1, [r3, #4]
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	691b      	ldr	r3, [r3, #16]
 8003440:	021a      	lsls	r2, r3, #8
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	430a      	orrs	r2, r1
 8003448:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	685a      	ldr	r2, [r3, #4]
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8003458:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	6859      	ldr	r1, [r3, #4]
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	689a      	ldr	r2, [r3, #8]
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	430a      	orrs	r2, r1
 800346a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	689a      	ldr	r2, [r3, #8]
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800347a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	6899      	ldr	r1, [r3, #8]
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	68da      	ldr	r2, [r3, #12]
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	430a      	orrs	r2, r1
 800348c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003492:	4a58      	ldr	r2, [pc, #352]	@ (80035f4 <ADC_Init+0x1f0>)
 8003494:	4293      	cmp	r3, r2
 8003496:	d022      	beq.n	80034de <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	689a      	ldr	r2, [r3, #8]
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80034a6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	6899      	ldr	r1, [r3, #8]
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	430a      	orrs	r2, r1
 80034b8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	689a      	ldr	r2, [r3, #8]
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80034c8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	6899      	ldr	r1, [r3, #8]
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	430a      	orrs	r2, r1
 80034da:	609a      	str	r2, [r3, #8]
 80034dc:	e00f      	b.n	80034fe <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	689a      	ldr	r2, [r3, #8]
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80034ec:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	689a      	ldr	r2, [r3, #8]
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80034fc:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	689a      	ldr	r2, [r3, #8]
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f022 0202 	bic.w	r2, r2, #2
 800350c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	6899      	ldr	r1, [r3, #8]
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	699b      	ldr	r3, [r3, #24]
 8003518:	005a      	lsls	r2, r3, #1
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	430a      	orrs	r2, r1
 8003520:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003528:	2b00      	cmp	r3, #0
 800352a:	d01b      	beq.n	8003564 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	685a      	ldr	r2, [r3, #4]
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800353a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	685a      	ldr	r2, [r3, #4]
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800354a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	6859      	ldr	r1, [r3, #4]
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003556:	3b01      	subs	r3, #1
 8003558:	035a      	lsls	r2, r3, #13
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	430a      	orrs	r2, r1
 8003560:	605a      	str	r2, [r3, #4]
 8003562:	e007      	b.n	8003574 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	685a      	ldr	r2, [r3, #4]
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003572:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8003582:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	69db      	ldr	r3, [r3, #28]
 800358e:	3b01      	subs	r3, #1
 8003590:	051a      	lsls	r2, r3, #20
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	430a      	orrs	r2, r1
 8003598:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	689a      	ldr	r2, [r3, #8]
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80035a8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	6899      	ldr	r1, [r3, #8]
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80035b6:	025a      	lsls	r2, r3, #9
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	430a      	orrs	r2, r1
 80035be:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	689a      	ldr	r2, [r3, #8]
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80035ce:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	6899      	ldr	r1, [r3, #8]
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	695b      	ldr	r3, [r3, #20]
 80035da:	029a      	lsls	r2, r3, #10
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	430a      	orrs	r2, r1
 80035e2:	609a      	str	r2, [r3, #8]
}
 80035e4:	bf00      	nop
 80035e6:	370c      	adds	r7, #12
 80035e8:	46bd      	mov	sp, r7
 80035ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ee:	4770      	bx	lr
 80035f0:	40012300 	.word	0x40012300
 80035f4:	0f000001 	.word	0x0f000001

080035f8 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80035f8:	b580      	push	{r7, lr}
 80035fa:	b084      	sub	sp, #16
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2b00      	cmp	r3, #0
 8003604:	d101      	bne.n	800360a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8003606:	2301      	movs	r3, #1
 8003608:	e0ed      	b.n	80037e6 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003610:	b2db      	uxtb	r3, r3
 8003612:	2b00      	cmp	r3, #0
 8003614:	d102      	bne.n	800361c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8003616:	6878      	ldr	r0, [r7, #4]
 8003618:	f7fe fea0 	bl	800235c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	681a      	ldr	r2, [r3, #0]
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f042 0201 	orr.w	r2, r2, #1
 800362a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800362c:	f7ff fbaa 	bl	8002d84 <HAL_GetTick>
 8003630:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003632:	e012      	b.n	800365a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003634:	f7ff fba6 	bl	8002d84 <HAL_GetTick>
 8003638:	4602      	mov	r2, r0
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	1ad3      	subs	r3, r2, r3
 800363e:	2b0a      	cmp	r3, #10
 8003640:	d90b      	bls.n	800365a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003646:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	2205      	movs	r2, #5
 8003652:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003656:	2301      	movs	r3, #1
 8003658:	e0c5      	b.n	80037e6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	685b      	ldr	r3, [r3, #4]
 8003660:	f003 0301 	and.w	r3, r3, #1
 8003664:	2b00      	cmp	r3, #0
 8003666:	d0e5      	beq.n	8003634 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	681a      	ldr	r2, [r3, #0]
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f022 0202 	bic.w	r2, r2, #2
 8003676:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003678:	f7ff fb84 	bl	8002d84 <HAL_GetTick>
 800367c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800367e:	e012      	b.n	80036a6 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003680:	f7ff fb80 	bl	8002d84 <HAL_GetTick>
 8003684:	4602      	mov	r2, r0
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	1ad3      	subs	r3, r2, r3
 800368a:	2b0a      	cmp	r3, #10
 800368c:	d90b      	bls.n	80036a6 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003692:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	2205      	movs	r2, #5
 800369e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80036a2:	2301      	movs	r3, #1
 80036a4:	e09f      	b.n	80037e6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	685b      	ldr	r3, [r3, #4]
 80036ac:	f003 0302 	and.w	r3, r3, #2
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d1e5      	bne.n	8003680 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	7e1b      	ldrb	r3, [r3, #24]
 80036b8:	2b01      	cmp	r3, #1
 80036ba:	d108      	bne.n	80036ce <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	681a      	ldr	r2, [r3, #0]
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80036ca:	601a      	str	r2, [r3, #0]
 80036cc:	e007      	b.n	80036de <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	681a      	ldr	r2, [r3, #0]
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80036dc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	7e5b      	ldrb	r3, [r3, #25]
 80036e2:	2b01      	cmp	r3, #1
 80036e4:	d108      	bne.n	80036f8 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	681a      	ldr	r2, [r3, #0]
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80036f4:	601a      	str	r2, [r3, #0]
 80036f6:	e007      	b.n	8003708 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	681a      	ldr	r2, [r3, #0]
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003706:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	7e9b      	ldrb	r3, [r3, #26]
 800370c:	2b01      	cmp	r3, #1
 800370e:	d108      	bne.n	8003722 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	681a      	ldr	r2, [r3, #0]
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f042 0220 	orr.w	r2, r2, #32
 800371e:	601a      	str	r2, [r3, #0]
 8003720:	e007      	b.n	8003732 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	681a      	ldr	r2, [r3, #0]
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f022 0220 	bic.w	r2, r2, #32
 8003730:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	7edb      	ldrb	r3, [r3, #27]
 8003736:	2b01      	cmp	r3, #1
 8003738:	d108      	bne.n	800374c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	681a      	ldr	r2, [r3, #0]
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f022 0210 	bic.w	r2, r2, #16
 8003748:	601a      	str	r2, [r3, #0]
 800374a:	e007      	b.n	800375c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	681a      	ldr	r2, [r3, #0]
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f042 0210 	orr.w	r2, r2, #16
 800375a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	7f1b      	ldrb	r3, [r3, #28]
 8003760:	2b01      	cmp	r3, #1
 8003762:	d108      	bne.n	8003776 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	681a      	ldr	r2, [r3, #0]
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f042 0208 	orr.w	r2, r2, #8
 8003772:	601a      	str	r2, [r3, #0]
 8003774:	e007      	b.n	8003786 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	681a      	ldr	r2, [r3, #0]
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f022 0208 	bic.w	r2, r2, #8
 8003784:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	7f5b      	ldrb	r3, [r3, #29]
 800378a:	2b01      	cmp	r3, #1
 800378c:	d108      	bne.n	80037a0 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	681a      	ldr	r2, [r3, #0]
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f042 0204 	orr.w	r2, r2, #4
 800379c:	601a      	str	r2, [r3, #0]
 800379e:	e007      	b.n	80037b0 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	681a      	ldr	r2, [r3, #0]
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f022 0204 	bic.w	r2, r2, #4
 80037ae:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	689a      	ldr	r2, [r3, #8]
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	68db      	ldr	r3, [r3, #12]
 80037b8:	431a      	orrs	r2, r3
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	691b      	ldr	r3, [r3, #16]
 80037be:	431a      	orrs	r2, r3
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	695b      	ldr	r3, [r3, #20]
 80037c4:	ea42 0103 	orr.w	r1, r2, r3
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	685b      	ldr	r3, [r3, #4]
 80037cc:	1e5a      	subs	r2, r3, #1
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	430a      	orrs	r2, r1
 80037d4:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	2200      	movs	r2, #0
 80037da:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2201      	movs	r2, #1
 80037e0:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80037e4:	2300      	movs	r3, #0
}
 80037e6:	4618      	mov	r0, r3
 80037e8:	3710      	adds	r7, #16
 80037ea:	46bd      	mov	sp, r7
 80037ec:	bd80      	pop	{r7, pc}
	...

080037f0 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 80037f0:	b480      	push	{r7}
 80037f2:	b087      	sub	sp, #28
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
 80037f8:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003806:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8003808:	7cfb      	ldrb	r3, [r7, #19]
 800380a:	2b01      	cmp	r3, #1
 800380c:	d003      	beq.n	8003816 <HAL_CAN_ConfigFilter+0x26>
 800380e:	7cfb      	ldrb	r3, [r7, #19]
 8003810:	2b02      	cmp	r3, #2
 8003812:	f040 80c7 	bne.w	80039a4 <HAL_CAN_ConfigFilter+0x1b4>
    assert_param(IS_CAN_FILTER_FIFO(sFilterConfig->FilterFIFOAssignment));
    assert_param(IS_CAN_FILTER_ACTIVATION(sFilterConfig->FilterActivation));

#if defined(CAN3)
    /* Check the CAN instance */
    if (hcan->Instance == CAN3)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	4a69      	ldr	r2, [pc, #420]	@ (80039c0 <HAL_CAN_ConfigFilter+0x1d0>)
 800381c:	4293      	cmp	r3, r2
 800381e:	d001      	beq.n	8003824 <HAL_CAN_ConfigFilter+0x34>
    }
    else
    {
      /* CAN1 and CAN2 are dual instances with 28 common filters banks */
      /* Select master instance to access the filter banks */
      can_ip = CAN1;
 8003820:	4b68      	ldr	r3, [pc, #416]	@ (80039c4 <HAL_CAN_ConfigFilter+0x1d4>)
 8003822:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8003824:	697b      	ldr	r3, [r7, #20]
 8003826:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800382a:	f043 0201 	orr.w	r2, r3, #1
 800382e:	697b      	ldr	r3, [r7, #20]
 8003830:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

#if defined(CAN3)
    /* Check the CAN instance */
    if (can_ip == CAN1)
 8003834:	697b      	ldr	r3, [r7, #20]
 8003836:	4a63      	ldr	r2, [pc, #396]	@ (80039c4 <HAL_CAN_ConfigFilter+0x1d4>)
 8003838:	4293      	cmp	r3, r2
 800383a:	d111      	bne.n	8003860 <HAL_CAN_ConfigFilter+0x70>
    {
      /* Select the start filter number of CAN2 slave instance */
      CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 800383c:	697b      	ldr	r3, [r7, #20]
 800383e:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8003842:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 8003846:	697b      	ldr	r3, [r7, #20]
 8003848:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 800384c:	697b      	ldr	r3, [r7, #20]
 800384e:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8003852:	683b      	ldr	r3, [r7, #0]
 8003854:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003856:	021b      	lsls	r3, r3, #8
 8003858:	431a      	orrs	r2, r3
 800385a:	697b      	ldr	r3, [r7, #20]
 800385c:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8003860:	683b      	ldr	r3, [r7, #0]
 8003862:	695b      	ldr	r3, [r3, #20]
 8003864:	f003 031f 	and.w	r3, r3, #31
 8003868:	2201      	movs	r2, #1
 800386a:	fa02 f303 	lsl.w	r3, r2, r3
 800386e:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8003870:	697b      	ldr	r3, [r7, #20]
 8003872:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	43db      	mvns	r3, r3
 800387a:	401a      	ands	r2, r3
 800387c:	697b      	ldr	r3, [r7, #20]
 800387e:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8003882:	683b      	ldr	r3, [r7, #0]
 8003884:	69db      	ldr	r3, [r3, #28]
 8003886:	2b00      	cmp	r3, #0
 8003888:	d123      	bne.n	80038d2 <HAL_CAN_ConfigFilter+0xe2>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800388a:	697b      	ldr	r3, [r7, #20]
 800388c:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	43db      	mvns	r3, r3
 8003894:	401a      	ands	r2, r3
 8003896:	697b      	ldr	r3, [r7, #20]
 8003898:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800389c:	683b      	ldr	r3, [r7, #0]
 800389e:	68db      	ldr	r3, [r3, #12]
 80038a0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80038a2:	683b      	ldr	r3, [r7, #0]
 80038a4:	685b      	ldr	r3, [r3, #4]
 80038a6:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80038a8:	683a      	ldr	r2, [r7, #0]
 80038aa:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80038ac:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80038ae:	697b      	ldr	r3, [r7, #20]
 80038b0:	3248      	adds	r2, #72	@ 0x48
 80038b2:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80038b6:	683b      	ldr	r3, [r7, #0]
 80038b8:	689b      	ldr	r3, [r3, #8]
 80038ba:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80038bc:	683b      	ldr	r3, [r7, #0]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80038c2:	683b      	ldr	r3, [r7, #0]
 80038c4:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80038c6:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80038c8:	6979      	ldr	r1, [r7, #20]
 80038ca:	3348      	adds	r3, #72	@ 0x48
 80038cc:	00db      	lsls	r3, r3, #3
 80038ce:	440b      	add	r3, r1
 80038d0:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80038d2:	683b      	ldr	r3, [r7, #0]
 80038d4:	69db      	ldr	r3, [r3, #28]
 80038d6:	2b01      	cmp	r3, #1
 80038d8:	d122      	bne.n	8003920 <HAL_CAN_ConfigFilter+0x130>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80038da:	697b      	ldr	r3, [r7, #20]
 80038dc:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	431a      	orrs	r2, r3
 80038e4:	697b      	ldr	r3, [r7, #20]
 80038e6:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80038ea:	683b      	ldr	r3, [r7, #0]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80038f0:	683b      	ldr	r3, [r7, #0]
 80038f2:	685b      	ldr	r3, [r3, #4]
 80038f4:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80038f6:	683a      	ldr	r2, [r7, #0]
 80038f8:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80038fa:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80038fc:	697b      	ldr	r3, [r7, #20]
 80038fe:	3248      	adds	r2, #72	@ 0x48
 8003900:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003904:	683b      	ldr	r3, [r7, #0]
 8003906:	689b      	ldr	r3, [r3, #8]
 8003908:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800390a:	683b      	ldr	r3, [r7, #0]
 800390c:	68db      	ldr	r3, [r3, #12]
 800390e:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003910:	683b      	ldr	r3, [r7, #0]
 8003912:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003914:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003916:	6979      	ldr	r1, [r7, #20]
 8003918:	3348      	adds	r3, #72	@ 0x48
 800391a:	00db      	lsls	r3, r3, #3
 800391c:	440b      	add	r3, r1
 800391e:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8003920:	683b      	ldr	r3, [r7, #0]
 8003922:	699b      	ldr	r3, [r3, #24]
 8003924:	2b00      	cmp	r3, #0
 8003926:	d109      	bne.n	800393c <HAL_CAN_ConfigFilter+0x14c>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8003928:	697b      	ldr	r3, [r7, #20]
 800392a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	43db      	mvns	r3, r3
 8003932:	401a      	ands	r2, r3
 8003934:	697b      	ldr	r3, [r7, #20]
 8003936:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 800393a:	e007      	b.n	800394c <HAL_CAN_ConfigFilter+0x15c>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800393c:	697b      	ldr	r3, [r7, #20]
 800393e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	431a      	orrs	r2, r3
 8003946:	697b      	ldr	r3, [r7, #20]
 8003948:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800394c:	683b      	ldr	r3, [r7, #0]
 800394e:	691b      	ldr	r3, [r3, #16]
 8003950:	2b00      	cmp	r3, #0
 8003952:	d109      	bne.n	8003968 <HAL_CAN_ConfigFilter+0x178>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8003954:	697b      	ldr	r3, [r7, #20]
 8003956:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	43db      	mvns	r3, r3
 800395e:	401a      	ands	r2, r3
 8003960:	697b      	ldr	r3, [r7, #20]
 8003962:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8003966:	e007      	b.n	8003978 <HAL_CAN_ConfigFilter+0x188>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8003968:	697b      	ldr	r3, [r7, #20]
 800396a:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	431a      	orrs	r2, r3
 8003972:	697b      	ldr	r3, [r7, #20]
 8003974:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8003978:	683b      	ldr	r3, [r7, #0]
 800397a:	6a1b      	ldr	r3, [r3, #32]
 800397c:	2b01      	cmp	r3, #1
 800397e:	d107      	bne.n	8003990 <HAL_CAN_ConfigFilter+0x1a0>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8003980:	697b      	ldr	r3, [r7, #20]
 8003982:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	431a      	orrs	r2, r3
 800398a:	697b      	ldr	r3, [r7, #20]
 800398c:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8003990:	697b      	ldr	r3, [r7, #20]
 8003992:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8003996:	f023 0201 	bic.w	r2, r3, #1
 800399a:	697b      	ldr	r3, [r7, #20]
 800399c:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 80039a0:	2300      	movs	r3, #0
 80039a2:	e006      	b.n	80039b2 <HAL_CAN_ConfigFilter+0x1c2>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039a8:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80039b0:	2301      	movs	r3, #1
  }
}
 80039b2:	4618      	mov	r0, r3
 80039b4:	371c      	adds	r7, #28
 80039b6:	46bd      	mov	sp, r7
 80039b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039bc:	4770      	bx	lr
 80039be:	bf00      	nop
 80039c0:	40003400 	.word	0x40003400
 80039c4:	40006400 	.word	0x40006400

080039c8 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b084      	sub	sp, #16
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80039d6:	b2db      	uxtb	r3, r3
 80039d8:	2b01      	cmp	r3, #1
 80039da:	d12e      	bne.n	8003a3a <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2202      	movs	r2, #2
 80039e0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	681a      	ldr	r2, [r3, #0]
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f022 0201 	bic.w	r2, r2, #1
 80039f2:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80039f4:	f7ff f9c6 	bl	8002d84 <HAL_GetTick>
 80039f8:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80039fa:	e012      	b.n	8003a22 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80039fc:	f7ff f9c2 	bl	8002d84 <HAL_GetTick>
 8003a00:	4602      	mov	r2, r0
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	1ad3      	subs	r3, r2, r3
 8003a06:	2b0a      	cmp	r3, #10
 8003a08:	d90b      	bls.n	8003a22 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a0e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	2205      	movs	r2, #5
 8003a1a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8003a1e:	2301      	movs	r3, #1
 8003a20:	e012      	b.n	8003a48 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	685b      	ldr	r3, [r3, #4]
 8003a28:	f003 0301 	and.w	r3, r3, #1
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d1e5      	bne.n	80039fc <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2200      	movs	r2, #0
 8003a34:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8003a36:	2300      	movs	r3, #0
 8003a38:	e006      	b.n	8003a48 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a3e:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8003a46:	2301      	movs	r3, #1
  }
}
 8003a48:	4618      	mov	r0, r3
 8003a4a:	3710      	adds	r7, #16
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	bd80      	pop	{r7, pc}

08003a50 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8003a50:	b480      	push	{r7}
 8003a52:	b089      	sub	sp, #36	@ 0x24
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	60f8      	str	r0, [r7, #12]
 8003a58:	60b9      	str	r1, [r7, #8]
 8003a5a:	607a      	str	r2, [r7, #4]
 8003a5c:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003a64:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	689b      	ldr	r3, [r3, #8]
 8003a6c:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8003a6e:	7ffb      	ldrb	r3, [r7, #31]
 8003a70:	2b01      	cmp	r3, #1
 8003a72:	d003      	beq.n	8003a7c <HAL_CAN_AddTxMessage+0x2c>
 8003a74:	7ffb      	ldrb	r3, [r7, #31]
 8003a76:	2b02      	cmp	r3, #2
 8003a78:	f040 80ad 	bne.w	8003bd6 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8003a7c:	69bb      	ldr	r3, [r7, #24]
 8003a7e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d10a      	bne.n	8003a9c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8003a86:	69bb      	ldr	r3, [r7, #24]
 8003a88:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d105      	bne.n	8003a9c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8003a90:	69bb      	ldr	r3, [r7, #24]
 8003a92:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	f000 8095 	beq.w	8003bc6 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8003a9c:	69bb      	ldr	r3, [r7, #24]
 8003a9e:	0e1b      	lsrs	r3, r3, #24
 8003aa0:	f003 0303 	and.w	r3, r3, #3
 8003aa4:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8003aa6:	2201      	movs	r2, #1
 8003aa8:	697b      	ldr	r3, [r7, #20]
 8003aaa:	409a      	lsls	r2, r3
 8003aac:	683b      	ldr	r3, [r7, #0]
 8003aae:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8003ab0:	68bb      	ldr	r3, [r7, #8]
 8003ab2:	689b      	ldr	r3, [r3, #8]
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d10d      	bne.n	8003ad4 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8003ab8:	68bb      	ldr	r3, [r7, #8]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8003abe:	68bb      	ldr	r3, [r7, #8]
 8003ac0:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8003ac2:	68f9      	ldr	r1, [r7, #12]
 8003ac4:	6809      	ldr	r1, [r1, #0]
 8003ac6:	431a      	orrs	r2, r3
 8003ac8:	697b      	ldr	r3, [r7, #20]
 8003aca:	3318      	adds	r3, #24
 8003acc:	011b      	lsls	r3, r3, #4
 8003ace:	440b      	add	r3, r1
 8003ad0:	601a      	str	r2, [r3, #0]
 8003ad2:	e00f      	b.n	8003af4 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003ad4:	68bb      	ldr	r3, [r7, #8]
 8003ad6:	685b      	ldr	r3, [r3, #4]
 8003ad8:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8003ada:	68bb      	ldr	r3, [r7, #8]
 8003adc:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003ade:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8003ae0:	68bb      	ldr	r3, [r7, #8]
 8003ae2:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003ae4:	68f9      	ldr	r1, [r7, #12]
 8003ae6:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8003ae8:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003aea:	697b      	ldr	r3, [r7, #20]
 8003aec:	3318      	adds	r3, #24
 8003aee:	011b      	lsls	r3, r3, #4
 8003af0:	440b      	add	r3, r1
 8003af2:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	6819      	ldr	r1, [r3, #0]
 8003af8:	68bb      	ldr	r3, [r7, #8]
 8003afa:	691a      	ldr	r2, [r3, #16]
 8003afc:	697b      	ldr	r3, [r7, #20]
 8003afe:	3318      	adds	r3, #24
 8003b00:	011b      	lsls	r3, r3, #4
 8003b02:	440b      	add	r3, r1
 8003b04:	3304      	adds	r3, #4
 8003b06:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8003b08:	68bb      	ldr	r3, [r7, #8]
 8003b0a:	7d1b      	ldrb	r3, [r3, #20]
 8003b0c:	2b01      	cmp	r3, #1
 8003b0e:	d111      	bne.n	8003b34 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	681a      	ldr	r2, [r3, #0]
 8003b14:	697b      	ldr	r3, [r7, #20]
 8003b16:	3318      	adds	r3, #24
 8003b18:	011b      	lsls	r3, r3, #4
 8003b1a:	4413      	add	r3, r2
 8003b1c:	3304      	adds	r3, #4
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	68fa      	ldr	r2, [r7, #12]
 8003b22:	6811      	ldr	r1, [r2, #0]
 8003b24:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003b28:	697b      	ldr	r3, [r7, #20]
 8003b2a:	3318      	adds	r3, #24
 8003b2c:	011b      	lsls	r3, r3, #4
 8003b2e:	440b      	add	r3, r1
 8003b30:	3304      	adds	r3, #4
 8003b32:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	3307      	adds	r3, #7
 8003b38:	781b      	ldrb	r3, [r3, #0]
 8003b3a:	061a      	lsls	r2, r3, #24
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	3306      	adds	r3, #6
 8003b40:	781b      	ldrb	r3, [r3, #0]
 8003b42:	041b      	lsls	r3, r3, #16
 8003b44:	431a      	orrs	r2, r3
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	3305      	adds	r3, #5
 8003b4a:	781b      	ldrb	r3, [r3, #0]
 8003b4c:	021b      	lsls	r3, r3, #8
 8003b4e:	4313      	orrs	r3, r2
 8003b50:	687a      	ldr	r2, [r7, #4]
 8003b52:	3204      	adds	r2, #4
 8003b54:	7812      	ldrb	r2, [r2, #0]
 8003b56:	4610      	mov	r0, r2
 8003b58:	68fa      	ldr	r2, [r7, #12]
 8003b5a:	6811      	ldr	r1, [r2, #0]
 8003b5c:	ea43 0200 	orr.w	r2, r3, r0
 8003b60:	697b      	ldr	r3, [r7, #20]
 8003b62:	011b      	lsls	r3, r3, #4
 8003b64:	440b      	add	r3, r1
 8003b66:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8003b6a:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	3303      	adds	r3, #3
 8003b70:	781b      	ldrb	r3, [r3, #0]
 8003b72:	061a      	lsls	r2, r3, #24
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	3302      	adds	r3, #2
 8003b78:	781b      	ldrb	r3, [r3, #0]
 8003b7a:	041b      	lsls	r3, r3, #16
 8003b7c:	431a      	orrs	r2, r3
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	3301      	adds	r3, #1
 8003b82:	781b      	ldrb	r3, [r3, #0]
 8003b84:	021b      	lsls	r3, r3, #8
 8003b86:	4313      	orrs	r3, r2
 8003b88:	687a      	ldr	r2, [r7, #4]
 8003b8a:	7812      	ldrb	r2, [r2, #0]
 8003b8c:	4610      	mov	r0, r2
 8003b8e:	68fa      	ldr	r2, [r7, #12]
 8003b90:	6811      	ldr	r1, [r2, #0]
 8003b92:	ea43 0200 	orr.w	r2, r3, r0
 8003b96:	697b      	ldr	r3, [r7, #20]
 8003b98:	011b      	lsls	r3, r3, #4
 8003b9a:	440b      	add	r3, r1
 8003b9c:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8003ba0:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	681a      	ldr	r2, [r3, #0]
 8003ba6:	697b      	ldr	r3, [r7, #20]
 8003ba8:	3318      	adds	r3, #24
 8003baa:	011b      	lsls	r3, r3, #4
 8003bac:	4413      	add	r3, r2
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	68fa      	ldr	r2, [r7, #12]
 8003bb2:	6811      	ldr	r1, [r2, #0]
 8003bb4:	f043 0201 	orr.w	r2, r3, #1
 8003bb8:	697b      	ldr	r3, [r7, #20]
 8003bba:	3318      	adds	r3, #24
 8003bbc:	011b      	lsls	r3, r3, #4
 8003bbe:	440b      	add	r3, r1
 8003bc0:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8003bc2:	2300      	movs	r3, #0
 8003bc4:	e00e      	b.n	8003be4 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bca:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8003bd2:	2301      	movs	r3, #1
 8003bd4:	e006      	b.n	8003be4 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bda:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8003be2:	2301      	movs	r3, #1
  }
}
 8003be4:	4618      	mov	r0, r3
 8003be6:	3724      	adds	r7, #36	@ 0x24
 8003be8:	46bd      	mov	sp, r7
 8003bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bee:	4770      	bx	lr

08003bf0 <HAL_CAN_IsTxMessagePending>:
  *          - 0 : No pending transmission request on any selected Tx Mailboxes.
  *          - 1 : Pending transmission request on at least one of the selected
  *                Tx Mailbox.
  */
uint32_t HAL_CAN_IsTxMessagePending(const CAN_HandleTypeDef *hcan, uint32_t TxMailboxes)
{
 8003bf0:	b480      	push	{r7}
 8003bf2:	b085      	sub	sp, #20
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]
 8003bf8:	6039      	str	r1, [r7, #0]
  uint32_t status = 0U;
 8003bfa:	2300      	movs	r3, #0
 8003bfc:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003c04:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_TX_MAILBOX_LIST(TxMailboxes));

  if ((state == HAL_CAN_STATE_READY) ||
 8003c06:	7afb      	ldrb	r3, [r7, #11]
 8003c08:	2b01      	cmp	r3, #1
 8003c0a:	d002      	beq.n	8003c12 <HAL_CAN_IsTxMessagePending+0x22>
 8003c0c:	7afb      	ldrb	r3, [r7, #11]
 8003c0e:	2b02      	cmp	r3, #2
 8003c10:	d10b      	bne.n	8003c2a <HAL_CAN_IsTxMessagePending+0x3a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check pending transmission request on the selected Tx Mailboxes */
    if ((hcan->Instance->TSR & (TxMailboxes << CAN_TSR_TME0_Pos)) != (TxMailboxes << CAN_TSR_TME0_Pos))
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	689a      	ldr	r2, [r3, #8]
 8003c18:	683b      	ldr	r3, [r7, #0]
 8003c1a:	069b      	lsls	r3, r3, #26
 8003c1c:	401a      	ands	r2, r3
 8003c1e:	683b      	ldr	r3, [r7, #0]
 8003c20:	069b      	lsls	r3, r3, #26
 8003c22:	429a      	cmp	r2, r3
 8003c24:	d001      	beq.n	8003c2a <HAL_CAN_IsTxMessagePending+0x3a>
    {
      status = 1U;
 8003c26:	2301      	movs	r3, #1
 8003c28:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return status */
  return status;
 8003c2a:	68fb      	ldr	r3, [r7, #12]
}
 8003c2c:	4618      	mov	r0, r3
 8003c2e:	3714      	adds	r7, #20
 8003c30:	46bd      	mov	sp, r7
 8003c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c36:	4770      	bx	lr

08003c38 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8003c38:	b480      	push	{r7}
 8003c3a:	b087      	sub	sp, #28
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	60f8      	str	r0, [r7, #12]
 8003c40:	60b9      	str	r1, [r7, #8]
 8003c42:	607a      	str	r2, [r7, #4]
 8003c44:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003c4c:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8003c4e:	7dfb      	ldrb	r3, [r7, #23]
 8003c50:	2b01      	cmp	r3, #1
 8003c52:	d003      	beq.n	8003c5c <HAL_CAN_GetRxMessage+0x24>
 8003c54:	7dfb      	ldrb	r3, [r7, #23]
 8003c56:	2b02      	cmp	r3, #2
 8003c58:	f040 80f3 	bne.w	8003e42 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003c5c:	68bb      	ldr	r3, [r7, #8]
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d10e      	bne.n	8003c80 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	68db      	ldr	r3, [r3, #12]
 8003c68:	f003 0303 	and.w	r3, r3, #3
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d116      	bne.n	8003c9e <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c74:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8003c7c:	2301      	movs	r3, #1
 8003c7e:	e0e7      	b.n	8003e50 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	691b      	ldr	r3, [r3, #16]
 8003c86:	f003 0303 	and.w	r3, r3, #3
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d107      	bne.n	8003c9e <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c92:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8003c9a:	2301      	movs	r3, #1
 8003c9c:	e0d8      	b.n	8003e50 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	681a      	ldr	r2, [r3, #0]
 8003ca2:	68bb      	ldr	r3, [r7, #8]
 8003ca4:	331b      	adds	r3, #27
 8003ca6:	011b      	lsls	r3, r3, #4
 8003ca8:	4413      	add	r3, r2
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f003 0204 	and.w	r2, r3, #4
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	689b      	ldr	r3, [r3, #8]
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d10c      	bne.n	8003cd6 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	681a      	ldr	r2, [r3, #0]
 8003cc0:	68bb      	ldr	r3, [r7, #8]
 8003cc2:	331b      	adds	r3, #27
 8003cc4:	011b      	lsls	r3, r3, #4
 8003cc6:	4413      	add	r3, r2
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	0d5b      	lsrs	r3, r3, #21
 8003ccc:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	601a      	str	r2, [r3, #0]
 8003cd4:	e00b      	b.n	8003cee <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	681a      	ldr	r2, [r3, #0]
 8003cda:	68bb      	ldr	r3, [r7, #8]
 8003cdc:	331b      	adds	r3, #27
 8003cde:	011b      	lsls	r3, r3, #4
 8003ce0:	4413      	add	r3, r2
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	08db      	lsrs	r3, r3, #3
 8003ce6:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	681a      	ldr	r2, [r3, #0]
 8003cf2:	68bb      	ldr	r3, [r7, #8]
 8003cf4:	331b      	adds	r3, #27
 8003cf6:	011b      	lsls	r3, r3, #4
 8003cf8:	4413      	add	r3, r2
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f003 0202 	and.w	r2, r3, #2
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	681a      	ldr	r2, [r3, #0]
 8003d08:	68bb      	ldr	r3, [r7, #8]
 8003d0a:	331b      	adds	r3, #27
 8003d0c:	011b      	lsls	r3, r3, #4
 8003d0e:	4413      	add	r3, r2
 8003d10:	3304      	adds	r3, #4
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f003 020f 	and.w	r2, r3, #15
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	681a      	ldr	r2, [r3, #0]
 8003d20:	68bb      	ldr	r3, [r7, #8]
 8003d22:	331b      	adds	r3, #27
 8003d24:	011b      	lsls	r3, r3, #4
 8003d26:	4413      	add	r3, r2
 8003d28:	3304      	adds	r3, #4
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	0a1b      	lsrs	r3, r3, #8
 8003d2e:	b2da      	uxtb	r2, r3
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	681a      	ldr	r2, [r3, #0]
 8003d38:	68bb      	ldr	r3, [r7, #8]
 8003d3a:	331b      	adds	r3, #27
 8003d3c:	011b      	lsls	r3, r3, #4
 8003d3e:	4413      	add	r3, r2
 8003d40:	3304      	adds	r3, #4
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	0c1b      	lsrs	r3, r3, #16
 8003d46:	b29a      	uxth	r2, r3
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	681a      	ldr	r2, [r3, #0]
 8003d50:	68bb      	ldr	r3, [r7, #8]
 8003d52:	011b      	lsls	r3, r3, #4
 8003d54:	4413      	add	r3, r2
 8003d56:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	b2da      	uxtb	r2, r3
 8003d5e:	683b      	ldr	r3, [r7, #0]
 8003d60:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	681a      	ldr	r2, [r3, #0]
 8003d66:	68bb      	ldr	r3, [r7, #8]
 8003d68:	011b      	lsls	r3, r3, #4
 8003d6a:	4413      	add	r3, r2
 8003d6c:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	0a1a      	lsrs	r2, r3, #8
 8003d74:	683b      	ldr	r3, [r7, #0]
 8003d76:	3301      	adds	r3, #1
 8003d78:	b2d2      	uxtb	r2, r2
 8003d7a:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	681a      	ldr	r2, [r3, #0]
 8003d80:	68bb      	ldr	r3, [r7, #8]
 8003d82:	011b      	lsls	r3, r3, #4
 8003d84:	4413      	add	r3, r2
 8003d86:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	0c1a      	lsrs	r2, r3, #16
 8003d8e:	683b      	ldr	r3, [r7, #0]
 8003d90:	3302      	adds	r3, #2
 8003d92:	b2d2      	uxtb	r2, r2
 8003d94:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	681a      	ldr	r2, [r3, #0]
 8003d9a:	68bb      	ldr	r3, [r7, #8]
 8003d9c:	011b      	lsls	r3, r3, #4
 8003d9e:	4413      	add	r3, r2
 8003da0:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	0e1a      	lsrs	r2, r3, #24
 8003da8:	683b      	ldr	r3, [r7, #0]
 8003daa:	3303      	adds	r3, #3
 8003dac:	b2d2      	uxtb	r2, r2
 8003dae:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	681a      	ldr	r2, [r3, #0]
 8003db4:	68bb      	ldr	r3, [r7, #8]
 8003db6:	011b      	lsls	r3, r3, #4
 8003db8:	4413      	add	r3, r2
 8003dba:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8003dbe:	681a      	ldr	r2, [r3, #0]
 8003dc0:	683b      	ldr	r3, [r7, #0]
 8003dc2:	3304      	adds	r3, #4
 8003dc4:	b2d2      	uxtb	r2, r2
 8003dc6:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	681a      	ldr	r2, [r3, #0]
 8003dcc:	68bb      	ldr	r3, [r7, #8]
 8003dce:	011b      	lsls	r3, r3, #4
 8003dd0:	4413      	add	r3, r2
 8003dd2:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	0a1a      	lsrs	r2, r3, #8
 8003dda:	683b      	ldr	r3, [r7, #0]
 8003ddc:	3305      	adds	r3, #5
 8003dde:	b2d2      	uxtb	r2, r2
 8003de0:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	681a      	ldr	r2, [r3, #0]
 8003de6:	68bb      	ldr	r3, [r7, #8]
 8003de8:	011b      	lsls	r3, r3, #4
 8003dea:	4413      	add	r3, r2
 8003dec:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	0c1a      	lsrs	r2, r3, #16
 8003df4:	683b      	ldr	r3, [r7, #0]
 8003df6:	3306      	adds	r3, #6
 8003df8:	b2d2      	uxtb	r2, r2
 8003dfa:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	681a      	ldr	r2, [r3, #0]
 8003e00:	68bb      	ldr	r3, [r7, #8]
 8003e02:	011b      	lsls	r3, r3, #4
 8003e04:	4413      	add	r3, r2
 8003e06:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	0e1a      	lsrs	r2, r3, #24
 8003e0e:	683b      	ldr	r3, [r7, #0]
 8003e10:	3307      	adds	r3, #7
 8003e12:	b2d2      	uxtb	r2, r2
 8003e14:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003e16:	68bb      	ldr	r3, [r7, #8]
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d108      	bne.n	8003e2e <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	68da      	ldr	r2, [r3, #12]
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f042 0220 	orr.w	r2, r2, #32
 8003e2a:	60da      	str	r2, [r3, #12]
 8003e2c:	e007      	b.n	8003e3e <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	691a      	ldr	r2, [r3, #16]
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f042 0220 	orr.w	r2, r2, #32
 8003e3c:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8003e3e:	2300      	movs	r3, #0
 8003e40:	e006      	b.n	8003e50 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e46:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8003e4e:	2301      	movs	r3, #1
  }
}
 8003e50:	4618      	mov	r0, r3
 8003e52:	371c      	adds	r7, #28
 8003e54:	46bd      	mov	sp, r7
 8003e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5a:	4770      	bx	lr

08003e5c <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8003e5c:	b480      	push	{r7}
 8003e5e:	b085      	sub	sp, #20
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	6078      	str	r0, [r7, #4]
 8003e64:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003e6c:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8003e6e:	7bfb      	ldrb	r3, [r7, #15]
 8003e70:	2b01      	cmp	r3, #1
 8003e72:	d002      	beq.n	8003e7a <HAL_CAN_ActivateNotification+0x1e>
 8003e74:	7bfb      	ldrb	r3, [r7, #15]
 8003e76:	2b02      	cmp	r3, #2
 8003e78:	d109      	bne.n	8003e8e <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	6959      	ldr	r1, [r3, #20]
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	683a      	ldr	r2, [r7, #0]
 8003e86:	430a      	orrs	r2, r1
 8003e88:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8003e8a:	2300      	movs	r3, #0
 8003e8c:	e006      	b.n	8003e9c <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e92:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8003e9a:	2301      	movs	r3, #1
  }
}
 8003e9c:	4618      	mov	r0, r3
 8003e9e:	3714      	adds	r7, #20
 8003ea0:	46bd      	mov	sp, r7
 8003ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea6:	4770      	bx	lr

08003ea8 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	b08a      	sub	sp, #40	@ 0x28
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8003eb0:	2300      	movs	r3, #0
 8003eb2:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	695b      	ldr	r3, [r3, #20]
 8003eba:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	685b      	ldr	r3, [r3, #4]
 8003ec2:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	689b      	ldr	r3, [r3, #8]
 8003eca:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	68db      	ldr	r3, [r3, #12]
 8003ed2:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	691b      	ldr	r3, [r3, #16]
 8003eda:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	699b      	ldr	r3, [r3, #24]
 8003ee2:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8003ee4:	6a3b      	ldr	r3, [r7, #32]
 8003ee6:	f003 0301 	and.w	r3, r3, #1
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d07c      	beq.n	8003fe8 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8003eee:	69bb      	ldr	r3, [r7, #24]
 8003ef0:	f003 0301 	and.w	r3, r3, #1
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d023      	beq.n	8003f40 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	2201      	movs	r2, #1
 8003efe:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8003f00:	69bb      	ldr	r3, [r7, #24]
 8003f02:	f003 0302 	and.w	r3, r3, #2
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d003      	beq.n	8003f12 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8003f0a:	6878      	ldr	r0, [r7, #4]
 8003f0c:	f000 f983 	bl	8004216 <HAL_CAN_TxMailbox0CompleteCallback>
 8003f10:	e016      	b.n	8003f40 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8003f12:	69bb      	ldr	r3, [r7, #24]
 8003f14:	f003 0304 	and.w	r3, r3, #4
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d004      	beq.n	8003f26 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8003f1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f1e:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003f22:	627b      	str	r3, [r7, #36]	@ 0x24
 8003f24:	e00c      	b.n	8003f40 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8003f26:	69bb      	ldr	r3, [r7, #24]
 8003f28:	f003 0308 	and.w	r3, r3, #8
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d004      	beq.n	8003f3a <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8003f30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f32:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003f36:	627b      	str	r3, [r7, #36]	@ 0x24
 8003f38:	e002      	b.n	8003f40 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8003f3a:	6878      	ldr	r0, [r7, #4]
 8003f3c:	f000 f989 	bl	8004252 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8003f40:	69bb      	ldr	r3, [r7, #24]
 8003f42:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d024      	beq.n	8003f94 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003f52:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8003f54:	69bb      	ldr	r3, [r7, #24]
 8003f56:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d003      	beq.n	8003f66 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8003f5e:	6878      	ldr	r0, [r7, #4]
 8003f60:	f000 f963 	bl	800422a <HAL_CAN_TxMailbox1CompleteCallback>
 8003f64:	e016      	b.n	8003f94 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8003f66:	69bb      	ldr	r3, [r7, #24]
 8003f68:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d004      	beq.n	8003f7a <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8003f70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f72:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003f76:	627b      	str	r3, [r7, #36]	@ 0x24
 8003f78:	e00c      	b.n	8003f94 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8003f7a:	69bb      	ldr	r3, [r7, #24]
 8003f7c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d004      	beq.n	8003f8e <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8003f84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f86:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003f8a:	627b      	str	r3, [r7, #36]	@ 0x24
 8003f8c:	e002      	b.n	8003f94 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8003f8e:	6878      	ldr	r0, [r7, #4]
 8003f90:	f000 f969 	bl	8004266 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8003f94:	69bb      	ldr	r3, [r7, #24]
 8003f96:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d024      	beq.n	8003fe8 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8003fa6:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8003fa8:	69bb      	ldr	r3, [r7, #24]
 8003faa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d003      	beq.n	8003fba <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8003fb2:	6878      	ldr	r0, [r7, #4]
 8003fb4:	f000 f943 	bl	800423e <HAL_CAN_TxMailbox2CompleteCallback>
 8003fb8:	e016      	b.n	8003fe8 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8003fba:	69bb      	ldr	r3, [r7, #24]
 8003fbc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d004      	beq.n	8003fce <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8003fc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fc6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003fca:	627b      	str	r3, [r7, #36]	@ 0x24
 8003fcc:	e00c      	b.n	8003fe8 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8003fce:	69bb      	ldr	r3, [r7, #24]
 8003fd0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d004      	beq.n	8003fe2 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8003fd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fda:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003fde:	627b      	str	r3, [r7, #36]	@ 0x24
 8003fe0:	e002      	b.n	8003fe8 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8003fe2:	6878      	ldr	r0, [r7, #4]
 8003fe4:	f000 f949 	bl	800427a <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8003fe8:	6a3b      	ldr	r3, [r7, #32]
 8003fea:	f003 0308 	and.w	r3, r3, #8
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d00c      	beq.n	800400c <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8003ff2:	697b      	ldr	r3, [r7, #20]
 8003ff4:	f003 0310 	and.w	r3, r3, #16
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d007      	beq.n	800400c <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8003ffc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ffe:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004002:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	2210      	movs	r2, #16
 800400a:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800400c:	6a3b      	ldr	r3, [r7, #32]
 800400e:	f003 0304 	and.w	r3, r3, #4
 8004012:	2b00      	cmp	r3, #0
 8004014:	d00b      	beq.n	800402e <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8004016:	697b      	ldr	r3, [r7, #20]
 8004018:	f003 0308 	and.w	r3, r3, #8
 800401c:	2b00      	cmp	r3, #0
 800401e:	d006      	beq.n	800402e <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	2208      	movs	r2, #8
 8004026:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8004028:	6878      	ldr	r0, [r7, #4]
 800402a:	f000 f930 	bl	800428e <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800402e:	6a3b      	ldr	r3, [r7, #32]
 8004030:	f003 0302 	and.w	r3, r3, #2
 8004034:	2b00      	cmp	r3, #0
 8004036:	d009      	beq.n	800404c <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	68db      	ldr	r3, [r3, #12]
 800403e:	f003 0303 	and.w	r3, r3, #3
 8004042:	2b00      	cmp	r3, #0
 8004044:	d002      	beq.n	800404c <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8004046:	6878      	ldr	r0, [r7, #4]
 8004048:	f7fc ff8c 	bl	8000f64 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800404c:	6a3b      	ldr	r3, [r7, #32]
 800404e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004052:	2b00      	cmp	r3, #0
 8004054:	d00c      	beq.n	8004070 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8004056:	693b      	ldr	r3, [r7, #16]
 8004058:	f003 0310 	and.w	r3, r3, #16
 800405c:	2b00      	cmp	r3, #0
 800405e:	d007      	beq.n	8004070 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8004060:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004062:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004066:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	2210      	movs	r2, #16
 800406e:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8004070:	6a3b      	ldr	r3, [r7, #32]
 8004072:	f003 0320 	and.w	r3, r3, #32
 8004076:	2b00      	cmp	r3, #0
 8004078:	d00b      	beq.n	8004092 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800407a:	693b      	ldr	r3, [r7, #16]
 800407c:	f003 0308 	and.w	r3, r3, #8
 8004080:	2b00      	cmp	r3, #0
 8004082:	d006      	beq.n	8004092 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	2208      	movs	r2, #8
 800408a:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800408c:	6878      	ldr	r0, [r7, #4]
 800408e:	f000 f908 	bl	80042a2 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8004092:	6a3b      	ldr	r3, [r7, #32]
 8004094:	f003 0310 	and.w	r3, r3, #16
 8004098:	2b00      	cmp	r3, #0
 800409a:	d009      	beq.n	80040b0 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	691b      	ldr	r3, [r3, #16]
 80040a2:	f003 0303 	and.w	r3, r3, #3
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d002      	beq.n	80040b0 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80040aa:	6878      	ldr	r0, [r7, #4]
 80040ac:	f7fc ff9a 	bl	8000fe4 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80040b0:	6a3b      	ldr	r3, [r7, #32]
 80040b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d00b      	beq.n	80040d2 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80040ba:	69fb      	ldr	r3, [r7, #28]
 80040bc:	f003 0310 	and.w	r3, r3, #16
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d006      	beq.n	80040d2 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	2210      	movs	r2, #16
 80040ca:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80040cc:	6878      	ldr	r0, [r7, #4]
 80040ce:	f000 f8f2 	bl	80042b6 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80040d2:	6a3b      	ldr	r3, [r7, #32]
 80040d4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d00b      	beq.n	80040f4 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80040dc:	69fb      	ldr	r3, [r7, #28]
 80040de:	f003 0308 	and.w	r3, r3, #8
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d006      	beq.n	80040f4 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	2208      	movs	r2, #8
 80040ec:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80040ee:	6878      	ldr	r0, [r7, #4]
 80040f0:	f000 f8eb 	bl	80042ca <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80040f4:	6a3b      	ldr	r3, [r7, #32]
 80040f6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d07b      	beq.n	80041f6 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80040fe:	69fb      	ldr	r3, [r7, #28]
 8004100:	f003 0304 	and.w	r3, r3, #4
 8004104:	2b00      	cmp	r3, #0
 8004106:	d072      	beq.n	80041ee <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8004108:	6a3b      	ldr	r3, [r7, #32]
 800410a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800410e:	2b00      	cmp	r3, #0
 8004110:	d008      	beq.n	8004124 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8004118:	2b00      	cmp	r3, #0
 800411a:	d003      	beq.n	8004124 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800411c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800411e:	f043 0301 	orr.w	r3, r3, #1
 8004122:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8004124:	6a3b      	ldr	r3, [r7, #32]
 8004126:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800412a:	2b00      	cmp	r3, #0
 800412c:	d008      	beq.n	8004140 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8004134:	2b00      	cmp	r3, #0
 8004136:	d003      	beq.n	8004140 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8004138:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800413a:	f043 0302 	orr.w	r3, r3, #2
 800413e:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8004140:	6a3b      	ldr	r3, [r7, #32]
 8004142:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004146:	2b00      	cmp	r3, #0
 8004148:	d008      	beq.n	800415c <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8004150:	2b00      	cmp	r3, #0
 8004152:	d003      	beq.n	800415c <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8004154:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004156:	f043 0304 	orr.w	r3, r3, #4
 800415a:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800415c:	6a3b      	ldr	r3, [r7, #32]
 800415e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004162:	2b00      	cmp	r3, #0
 8004164:	d043      	beq.n	80041ee <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800416c:	2b00      	cmp	r3, #0
 800416e:	d03e      	beq.n	80041ee <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004176:	2b60      	cmp	r3, #96	@ 0x60
 8004178:	d02b      	beq.n	80041d2 <HAL_CAN_IRQHandler+0x32a>
 800417a:	2b60      	cmp	r3, #96	@ 0x60
 800417c:	d82e      	bhi.n	80041dc <HAL_CAN_IRQHandler+0x334>
 800417e:	2b50      	cmp	r3, #80	@ 0x50
 8004180:	d022      	beq.n	80041c8 <HAL_CAN_IRQHandler+0x320>
 8004182:	2b50      	cmp	r3, #80	@ 0x50
 8004184:	d82a      	bhi.n	80041dc <HAL_CAN_IRQHandler+0x334>
 8004186:	2b40      	cmp	r3, #64	@ 0x40
 8004188:	d019      	beq.n	80041be <HAL_CAN_IRQHandler+0x316>
 800418a:	2b40      	cmp	r3, #64	@ 0x40
 800418c:	d826      	bhi.n	80041dc <HAL_CAN_IRQHandler+0x334>
 800418e:	2b30      	cmp	r3, #48	@ 0x30
 8004190:	d010      	beq.n	80041b4 <HAL_CAN_IRQHandler+0x30c>
 8004192:	2b30      	cmp	r3, #48	@ 0x30
 8004194:	d822      	bhi.n	80041dc <HAL_CAN_IRQHandler+0x334>
 8004196:	2b10      	cmp	r3, #16
 8004198:	d002      	beq.n	80041a0 <HAL_CAN_IRQHandler+0x2f8>
 800419a:	2b20      	cmp	r3, #32
 800419c:	d005      	beq.n	80041aa <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800419e:	e01d      	b.n	80041dc <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80041a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041a2:	f043 0308 	orr.w	r3, r3, #8
 80041a6:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80041a8:	e019      	b.n	80041de <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80041aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041ac:	f043 0310 	orr.w	r3, r3, #16
 80041b0:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80041b2:	e014      	b.n	80041de <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80041b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041b6:	f043 0320 	orr.w	r3, r3, #32
 80041ba:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80041bc:	e00f      	b.n	80041de <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80041be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041c0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80041c4:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80041c6:	e00a      	b.n	80041de <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80041c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041ca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80041ce:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80041d0:	e005      	b.n	80041de <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80041d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041d4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80041d8:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80041da:	e000      	b.n	80041de <HAL_CAN_IRQHandler+0x336>
            break;
 80041dc:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	699a      	ldr	r2, [r3, #24]
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 80041ec:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	2204      	movs	r2, #4
 80041f4:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80041f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d008      	beq.n	800420e <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004200:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004202:	431a      	orrs	r2, r3
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8004208:	6878      	ldr	r0, [r7, #4]
 800420a:	f000 f868 	bl	80042de <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800420e:	bf00      	nop
 8004210:	3728      	adds	r7, #40	@ 0x28
 8004212:	46bd      	mov	sp, r7
 8004214:	bd80      	pop	{r7, pc}

08004216 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8004216:	b480      	push	{r7}
 8004218:	b083      	sub	sp, #12
 800421a:	af00      	add	r7, sp, #0
 800421c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 800421e:	bf00      	nop
 8004220:	370c      	adds	r7, #12
 8004222:	46bd      	mov	sp, r7
 8004224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004228:	4770      	bx	lr

0800422a <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800422a:	b480      	push	{r7}
 800422c:	b083      	sub	sp, #12
 800422e:	af00      	add	r7, sp, #0
 8004230:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8004232:	bf00      	nop
 8004234:	370c      	adds	r7, #12
 8004236:	46bd      	mov	sp, r7
 8004238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423c:	4770      	bx	lr

0800423e <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800423e:	b480      	push	{r7}
 8004240:	b083      	sub	sp, #12
 8004242:	af00      	add	r7, sp, #0
 8004244:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8004246:	bf00      	nop
 8004248:	370c      	adds	r7, #12
 800424a:	46bd      	mov	sp, r7
 800424c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004250:	4770      	bx	lr

08004252 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004252:	b480      	push	{r7}
 8004254:	b083      	sub	sp, #12
 8004256:	af00      	add	r7, sp, #0
 8004258:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800425a:	bf00      	nop
 800425c:	370c      	adds	r7, #12
 800425e:	46bd      	mov	sp, r7
 8004260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004264:	4770      	bx	lr

08004266 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004266:	b480      	push	{r7}
 8004268:	b083      	sub	sp, #12
 800426a:	af00      	add	r7, sp, #0
 800426c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800426e:	bf00      	nop
 8004270:	370c      	adds	r7, #12
 8004272:	46bd      	mov	sp, r7
 8004274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004278:	4770      	bx	lr

0800427a <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 800427a:	b480      	push	{r7}
 800427c:	b083      	sub	sp, #12
 800427e:	af00      	add	r7, sp, #0
 8004280:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8004282:	bf00      	nop
 8004284:	370c      	adds	r7, #12
 8004286:	46bd      	mov	sp, r7
 8004288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428c:	4770      	bx	lr

0800428e <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 800428e:	b480      	push	{r7}
 8004290:	b083      	sub	sp, #12
 8004292:	af00      	add	r7, sp, #0
 8004294:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8004296:	bf00      	nop
 8004298:	370c      	adds	r7, #12
 800429a:	46bd      	mov	sp, r7
 800429c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a0:	4770      	bx	lr

080042a2 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80042a2:	b480      	push	{r7}
 80042a4:	b083      	sub	sp, #12
 80042a6:	af00      	add	r7, sp, #0
 80042a8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80042aa:	bf00      	nop
 80042ac:	370c      	adds	r7, #12
 80042ae:	46bd      	mov	sp, r7
 80042b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b4:	4770      	bx	lr

080042b6 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80042b6:	b480      	push	{r7}
 80042b8:	b083      	sub	sp, #12
 80042ba:	af00      	add	r7, sp, #0
 80042bc:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80042be:	bf00      	nop
 80042c0:	370c      	adds	r7, #12
 80042c2:	46bd      	mov	sp, r7
 80042c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c8:	4770      	bx	lr

080042ca <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80042ca:	b480      	push	{r7}
 80042cc:	b083      	sub	sp, #12
 80042ce:	af00      	add	r7, sp, #0
 80042d0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80042d2:	bf00      	nop
 80042d4:	370c      	adds	r7, #12
 80042d6:	46bd      	mov	sp, r7
 80042d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042dc:	4770      	bx	lr

080042de <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80042de:	b480      	push	{r7}
 80042e0:	b083      	sub	sp, #12
 80042e2:	af00      	add	r7, sp, #0
 80042e4:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80042e6:	bf00      	nop
 80042e8:	370c      	adds	r7, #12
 80042ea:	46bd      	mov	sp, r7
 80042ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f0:	4770      	bx	lr
	...

080042f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80042f4:	b480      	push	{r7}
 80042f6:	b085      	sub	sp, #20
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	f003 0307 	and.w	r3, r3, #7
 8004302:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004304:	4b0b      	ldr	r3, [pc, #44]	@ (8004334 <__NVIC_SetPriorityGrouping+0x40>)
 8004306:	68db      	ldr	r3, [r3, #12]
 8004308:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800430a:	68ba      	ldr	r2, [r7, #8]
 800430c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004310:	4013      	ands	r3, r2
 8004312:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004318:	68bb      	ldr	r3, [r7, #8]
 800431a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800431c:	4b06      	ldr	r3, [pc, #24]	@ (8004338 <__NVIC_SetPriorityGrouping+0x44>)
 800431e:	4313      	orrs	r3, r2
 8004320:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004322:	4a04      	ldr	r2, [pc, #16]	@ (8004334 <__NVIC_SetPriorityGrouping+0x40>)
 8004324:	68bb      	ldr	r3, [r7, #8]
 8004326:	60d3      	str	r3, [r2, #12]
}
 8004328:	bf00      	nop
 800432a:	3714      	adds	r7, #20
 800432c:	46bd      	mov	sp, r7
 800432e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004332:	4770      	bx	lr
 8004334:	e000ed00 	.word	0xe000ed00
 8004338:	05fa0000 	.word	0x05fa0000

0800433c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800433c:	b480      	push	{r7}
 800433e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004340:	4b04      	ldr	r3, [pc, #16]	@ (8004354 <__NVIC_GetPriorityGrouping+0x18>)
 8004342:	68db      	ldr	r3, [r3, #12]
 8004344:	0a1b      	lsrs	r3, r3, #8
 8004346:	f003 0307 	and.w	r3, r3, #7
}
 800434a:	4618      	mov	r0, r3
 800434c:	46bd      	mov	sp, r7
 800434e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004352:	4770      	bx	lr
 8004354:	e000ed00 	.word	0xe000ed00

08004358 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004358:	b480      	push	{r7}
 800435a:	b083      	sub	sp, #12
 800435c:	af00      	add	r7, sp, #0
 800435e:	4603      	mov	r3, r0
 8004360:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004362:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004366:	2b00      	cmp	r3, #0
 8004368:	db0b      	blt.n	8004382 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800436a:	79fb      	ldrb	r3, [r7, #7]
 800436c:	f003 021f 	and.w	r2, r3, #31
 8004370:	4907      	ldr	r1, [pc, #28]	@ (8004390 <__NVIC_EnableIRQ+0x38>)
 8004372:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004376:	095b      	lsrs	r3, r3, #5
 8004378:	2001      	movs	r0, #1
 800437a:	fa00 f202 	lsl.w	r2, r0, r2
 800437e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004382:	bf00      	nop
 8004384:	370c      	adds	r7, #12
 8004386:	46bd      	mov	sp, r7
 8004388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800438c:	4770      	bx	lr
 800438e:	bf00      	nop
 8004390:	e000e100 	.word	0xe000e100

08004394 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004394:	b480      	push	{r7}
 8004396:	b083      	sub	sp, #12
 8004398:	af00      	add	r7, sp, #0
 800439a:	4603      	mov	r3, r0
 800439c:	6039      	str	r1, [r7, #0]
 800439e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80043a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	db0a      	blt.n	80043be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80043a8:	683b      	ldr	r3, [r7, #0]
 80043aa:	b2da      	uxtb	r2, r3
 80043ac:	490c      	ldr	r1, [pc, #48]	@ (80043e0 <__NVIC_SetPriority+0x4c>)
 80043ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043b2:	0112      	lsls	r2, r2, #4
 80043b4:	b2d2      	uxtb	r2, r2
 80043b6:	440b      	add	r3, r1
 80043b8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80043bc:	e00a      	b.n	80043d4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80043be:	683b      	ldr	r3, [r7, #0]
 80043c0:	b2da      	uxtb	r2, r3
 80043c2:	4908      	ldr	r1, [pc, #32]	@ (80043e4 <__NVIC_SetPriority+0x50>)
 80043c4:	79fb      	ldrb	r3, [r7, #7]
 80043c6:	f003 030f 	and.w	r3, r3, #15
 80043ca:	3b04      	subs	r3, #4
 80043cc:	0112      	lsls	r2, r2, #4
 80043ce:	b2d2      	uxtb	r2, r2
 80043d0:	440b      	add	r3, r1
 80043d2:	761a      	strb	r2, [r3, #24]
}
 80043d4:	bf00      	nop
 80043d6:	370c      	adds	r7, #12
 80043d8:	46bd      	mov	sp, r7
 80043da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043de:	4770      	bx	lr
 80043e0:	e000e100 	.word	0xe000e100
 80043e4:	e000ed00 	.word	0xe000ed00

080043e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80043e8:	b480      	push	{r7}
 80043ea:	b089      	sub	sp, #36	@ 0x24
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	60f8      	str	r0, [r7, #12]
 80043f0:	60b9      	str	r1, [r7, #8]
 80043f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	f003 0307 	and.w	r3, r3, #7
 80043fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80043fc:	69fb      	ldr	r3, [r7, #28]
 80043fe:	f1c3 0307 	rsb	r3, r3, #7
 8004402:	2b04      	cmp	r3, #4
 8004404:	bf28      	it	cs
 8004406:	2304      	movcs	r3, #4
 8004408:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800440a:	69fb      	ldr	r3, [r7, #28]
 800440c:	3304      	adds	r3, #4
 800440e:	2b06      	cmp	r3, #6
 8004410:	d902      	bls.n	8004418 <NVIC_EncodePriority+0x30>
 8004412:	69fb      	ldr	r3, [r7, #28]
 8004414:	3b03      	subs	r3, #3
 8004416:	e000      	b.n	800441a <NVIC_EncodePriority+0x32>
 8004418:	2300      	movs	r3, #0
 800441a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800441c:	f04f 32ff 	mov.w	r2, #4294967295
 8004420:	69bb      	ldr	r3, [r7, #24]
 8004422:	fa02 f303 	lsl.w	r3, r2, r3
 8004426:	43da      	mvns	r2, r3
 8004428:	68bb      	ldr	r3, [r7, #8]
 800442a:	401a      	ands	r2, r3
 800442c:	697b      	ldr	r3, [r7, #20]
 800442e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004430:	f04f 31ff 	mov.w	r1, #4294967295
 8004434:	697b      	ldr	r3, [r7, #20]
 8004436:	fa01 f303 	lsl.w	r3, r1, r3
 800443a:	43d9      	mvns	r1, r3
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004440:	4313      	orrs	r3, r2
         );
}
 8004442:	4618      	mov	r0, r3
 8004444:	3724      	adds	r7, #36	@ 0x24
 8004446:	46bd      	mov	sp, r7
 8004448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444c:	4770      	bx	lr

0800444e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800444e:	b580      	push	{r7, lr}
 8004450:	b082      	sub	sp, #8
 8004452:	af00      	add	r7, sp, #0
 8004454:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004456:	6878      	ldr	r0, [r7, #4]
 8004458:	f7ff ff4c 	bl	80042f4 <__NVIC_SetPriorityGrouping>
}
 800445c:	bf00      	nop
 800445e:	3708      	adds	r7, #8
 8004460:	46bd      	mov	sp, r7
 8004462:	bd80      	pop	{r7, pc}

08004464 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004464:	b580      	push	{r7, lr}
 8004466:	b086      	sub	sp, #24
 8004468:	af00      	add	r7, sp, #0
 800446a:	4603      	mov	r3, r0
 800446c:	60b9      	str	r1, [r7, #8]
 800446e:	607a      	str	r2, [r7, #4]
 8004470:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8004472:	2300      	movs	r3, #0
 8004474:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004476:	f7ff ff61 	bl	800433c <__NVIC_GetPriorityGrouping>
 800447a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800447c:	687a      	ldr	r2, [r7, #4]
 800447e:	68b9      	ldr	r1, [r7, #8]
 8004480:	6978      	ldr	r0, [r7, #20]
 8004482:	f7ff ffb1 	bl	80043e8 <NVIC_EncodePriority>
 8004486:	4602      	mov	r2, r0
 8004488:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800448c:	4611      	mov	r1, r2
 800448e:	4618      	mov	r0, r3
 8004490:	f7ff ff80 	bl	8004394 <__NVIC_SetPriority>
}
 8004494:	bf00      	nop
 8004496:	3718      	adds	r7, #24
 8004498:	46bd      	mov	sp, r7
 800449a:	bd80      	pop	{r7, pc}

0800449c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800449c:	b580      	push	{r7, lr}
 800449e:	b082      	sub	sp, #8
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	4603      	mov	r3, r0
 80044a4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80044a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044aa:	4618      	mov	r0, r3
 80044ac:	f7ff ff54 	bl	8004358 <__NVIC_EnableIRQ>
}
 80044b0:	bf00      	nop
 80044b2:	3708      	adds	r7, #8
 80044b4:	46bd      	mov	sp, r7
 80044b6:	bd80      	pop	{r7, pc}

080044b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80044b8:	b480      	push	{r7}
 80044ba:	b089      	sub	sp, #36	@ 0x24
 80044bc:	af00      	add	r7, sp, #0
 80044be:	6078      	str	r0, [r7, #4]
 80044c0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80044c2:	2300      	movs	r3, #0
 80044c4:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80044c6:	2300      	movs	r3, #0
 80044c8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80044ca:	2300      	movs	r3, #0
 80044cc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80044ce:	2300      	movs	r3, #0
 80044d0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80044d2:	2300      	movs	r3, #0
 80044d4:	61fb      	str	r3, [r7, #28]
 80044d6:	e175      	b.n	80047c4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80044d8:	2201      	movs	r2, #1
 80044da:	69fb      	ldr	r3, [r7, #28]
 80044dc:	fa02 f303 	lsl.w	r3, r2, r3
 80044e0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80044e2:	683b      	ldr	r3, [r7, #0]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	697a      	ldr	r2, [r7, #20]
 80044e8:	4013      	ands	r3, r2
 80044ea:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80044ec:	693a      	ldr	r2, [r7, #16]
 80044ee:	697b      	ldr	r3, [r7, #20]
 80044f0:	429a      	cmp	r2, r3
 80044f2:	f040 8164 	bne.w	80047be <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80044f6:	683b      	ldr	r3, [r7, #0]
 80044f8:	685b      	ldr	r3, [r3, #4]
 80044fa:	f003 0303 	and.w	r3, r3, #3
 80044fe:	2b01      	cmp	r3, #1
 8004500:	d005      	beq.n	800450e <HAL_GPIO_Init+0x56>
 8004502:	683b      	ldr	r3, [r7, #0]
 8004504:	685b      	ldr	r3, [r3, #4]
 8004506:	f003 0303 	and.w	r3, r3, #3
 800450a:	2b02      	cmp	r3, #2
 800450c:	d130      	bne.n	8004570 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	689b      	ldr	r3, [r3, #8]
 8004512:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8004514:	69fb      	ldr	r3, [r7, #28]
 8004516:	005b      	lsls	r3, r3, #1
 8004518:	2203      	movs	r2, #3
 800451a:	fa02 f303 	lsl.w	r3, r2, r3
 800451e:	43db      	mvns	r3, r3
 8004520:	69ba      	ldr	r2, [r7, #24]
 8004522:	4013      	ands	r3, r2
 8004524:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8004526:	683b      	ldr	r3, [r7, #0]
 8004528:	68da      	ldr	r2, [r3, #12]
 800452a:	69fb      	ldr	r3, [r7, #28]
 800452c:	005b      	lsls	r3, r3, #1
 800452e:	fa02 f303 	lsl.w	r3, r2, r3
 8004532:	69ba      	ldr	r2, [r7, #24]
 8004534:	4313      	orrs	r3, r2
 8004536:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	69ba      	ldr	r2, [r7, #24]
 800453c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	685b      	ldr	r3, [r3, #4]
 8004542:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004544:	2201      	movs	r2, #1
 8004546:	69fb      	ldr	r3, [r7, #28]
 8004548:	fa02 f303 	lsl.w	r3, r2, r3
 800454c:	43db      	mvns	r3, r3
 800454e:	69ba      	ldr	r2, [r7, #24]
 8004550:	4013      	ands	r3, r2
 8004552:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004554:	683b      	ldr	r3, [r7, #0]
 8004556:	685b      	ldr	r3, [r3, #4]
 8004558:	091b      	lsrs	r3, r3, #4
 800455a:	f003 0201 	and.w	r2, r3, #1
 800455e:	69fb      	ldr	r3, [r7, #28]
 8004560:	fa02 f303 	lsl.w	r3, r2, r3
 8004564:	69ba      	ldr	r2, [r7, #24]
 8004566:	4313      	orrs	r3, r2
 8004568:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	69ba      	ldr	r2, [r7, #24]
 800456e:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004570:	683b      	ldr	r3, [r7, #0]
 8004572:	685b      	ldr	r3, [r3, #4]
 8004574:	f003 0303 	and.w	r3, r3, #3
 8004578:	2b03      	cmp	r3, #3
 800457a:	d017      	beq.n	80045ac <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	68db      	ldr	r3, [r3, #12]
 8004580:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8004582:	69fb      	ldr	r3, [r7, #28]
 8004584:	005b      	lsls	r3, r3, #1
 8004586:	2203      	movs	r2, #3
 8004588:	fa02 f303 	lsl.w	r3, r2, r3
 800458c:	43db      	mvns	r3, r3
 800458e:	69ba      	ldr	r2, [r7, #24]
 8004590:	4013      	ands	r3, r2
 8004592:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8004594:	683b      	ldr	r3, [r7, #0]
 8004596:	689a      	ldr	r2, [r3, #8]
 8004598:	69fb      	ldr	r3, [r7, #28]
 800459a:	005b      	lsls	r3, r3, #1
 800459c:	fa02 f303 	lsl.w	r3, r2, r3
 80045a0:	69ba      	ldr	r2, [r7, #24]
 80045a2:	4313      	orrs	r3, r2
 80045a4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	69ba      	ldr	r2, [r7, #24]
 80045aa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80045ac:	683b      	ldr	r3, [r7, #0]
 80045ae:	685b      	ldr	r3, [r3, #4]
 80045b0:	f003 0303 	and.w	r3, r3, #3
 80045b4:	2b02      	cmp	r3, #2
 80045b6:	d123      	bne.n	8004600 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80045b8:	69fb      	ldr	r3, [r7, #28]
 80045ba:	08da      	lsrs	r2, r3, #3
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	3208      	adds	r2, #8
 80045c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80045c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80045c6:	69fb      	ldr	r3, [r7, #28]
 80045c8:	f003 0307 	and.w	r3, r3, #7
 80045cc:	009b      	lsls	r3, r3, #2
 80045ce:	220f      	movs	r2, #15
 80045d0:	fa02 f303 	lsl.w	r3, r2, r3
 80045d4:	43db      	mvns	r3, r3
 80045d6:	69ba      	ldr	r2, [r7, #24]
 80045d8:	4013      	ands	r3, r2
 80045da:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80045dc:	683b      	ldr	r3, [r7, #0]
 80045de:	691a      	ldr	r2, [r3, #16]
 80045e0:	69fb      	ldr	r3, [r7, #28]
 80045e2:	f003 0307 	and.w	r3, r3, #7
 80045e6:	009b      	lsls	r3, r3, #2
 80045e8:	fa02 f303 	lsl.w	r3, r2, r3
 80045ec:	69ba      	ldr	r2, [r7, #24]
 80045ee:	4313      	orrs	r3, r2
 80045f0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80045f2:	69fb      	ldr	r3, [r7, #28]
 80045f4:	08da      	lsrs	r2, r3, #3
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	3208      	adds	r2, #8
 80045fa:	69b9      	ldr	r1, [r7, #24]
 80045fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8004606:	69fb      	ldr	r3, [r7, #28]
 8004608:	005b      	lsls	r3, r3, #1
 800460a:	2203      	movs	r2, #3
 800460c:	fa02 f303 	lsl.w	r3, r2, r3
 8004610:	43db      	mvns	r3, r3
 8004612:	69ba      	ldr	r2, [r7, #24]
 8004614:	4013      	ands	r3, r2
 8004616:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8004618:	683b      	ldr	r3, [r7, #0]
 800461a:	685b      	ldr	r3, [r3, #4]
 800461c:	f003 0203 	and.w	r2, r3, #3
 8004620:	69fb      	ldr	r3, [r7, #28]
 8004622:	005b      	lsls	r3, r3, #1
 8004624:	fa02 f303 	lsl.w	r3, r2, r3
 8004628:	69ba      	ldr	r2, [r7, #24]
 800462a:	4313      	orrs	r3, r2
 800462c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	69ba      	ldr	r2, [r7, #24]
 8004632:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004634:	683b      	ldr	r3, [r7, #0]
 8004636:	685b      	ldr	r3, [r3, #4]
 8004638:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800463c:	2b00      	cmp	r3, #0
 800463e:	f000 80be 	beq.w	80047be <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004642:	4b66      	ldr	r3, [pc, #408]	@ (80047dc <HAL_GPIO_Init+0x324>)
 8004644:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004646:	4a65      	ldr	r2, [pc, #404]	@ (80047dc <HAL_GPIO_Init+0x324>)
 8004648:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800464c:	6453      	str	r3, [r2, #68]	@ 0x44
 800464e:	4b63      	ldr	r3, [pc, #396]	@ (80047dc <HAL_GPIO_Init+0x324>)
 8004650:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004652:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004656:	60fb      	str	r3, [r7, #12]
 8004658:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800465a:	4a61      	ldr	r2, [pc, #388]	@ (80047e0 <HAL_GPIO_Init+0x328>)
 800465c:	69fb      	ldr	r3, [r7, #28]
 800465e:	089b      	lsrs	r3, r3, #2
 8004660:	3302      	adds	r3, #2
 8004662:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004666:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8004668:	69fb      	ldr	r3, [r7, #28]
 800466a:	f003 0303 	and.w	r3, r3, #3
 800466e:	009b      	lsls	r3, r3, #2
 8004670:	220f      	movs	r2, #15
 8004672:	fa02 f303 	lsl.w	r3, r2, r3
 8004676:	43db      	mvns	r3, r3
 8004678:	69ba      	ldr	r2, [r7, #24]
 800467a:	4013      	ands	r3, r2
 800467c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	4a58      	ldr	r2, [pc, #352]	@ (80047e4 <HAL_GPIO_Init+0x32c>)
 8004682:	4293      	cmp	r3, r2
 8004684:	d037      	beq.n	80046f6 <HAL_GPIO_Init+0x23e>
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	4a57      	ldr	r2, [pc, #348]	@ (80047e8 <HAL_GPIO_Init+0x330>)
 800468a:	4293      	cmp	r3, r2
 800468c:	d031      	beq.n	80046f2 <HAL_GPIO_Init+0x23a>
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	4a56      	ldr	r2, [pc, #344]	@ (80047ec <HAL_GPIO_Init+0x334>)
 8004692:	4293      	cmp	r3, r2
 8004694:	d02b      	beq.n	80046ee <HAL_GPIO_Init+0x236>
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	4a55      	ldr	r2, [pc, #340]	@ (80047f0 <HAL_GPIO_Init+0x338>)
 800469a:	4293      	cmp	r3, r2
 800469c:	d025      	beq.n	80046ea <HAL_GPIO_Init+0x232>
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	4a54      	ldr	r2, [pc, #336]	@ (80047f4 <HAL_GPIO_Init+0x33c>)
 80046a2:	4293      	cmp	r3, r2
 80046a4:	d01f      	beq.n	80046e6 <HAL_GPIO_Init+0x22e>
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	4a53      	ldr	r2, [pc, #332]	@ (80047f8 <HAL_GPIO_Init+0x340>)
 80046aa:	4293      	cmp	r3, r2
 80046ac:	d019      	beq.n	80046e2 <HAL_GPIO_Init+0x22a>
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	4a52      	ldr	r2, [pc, #328]	@ (80047fc <HAL_GPIO_Init+0x344>)
 80046b2:	4293      	cmp	r3, r2
 80046b4:	d013      	beq.n	80046de <HAL_GPIO_Init+0x226>
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	4a51      	ldr	r2, [pc, #324]	@ (8004800 <HAL_GPIO_Init+0x348>)
 80046ba:	4293      	cmp	r3, r2
 80046bc:	d00d      	beq.n	80046da <HAL_GPIO_Init+0x222>
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	4a50      	ldr	r2, [pc, #320]	@ (8004804 <HAL_GPIO_Init+0x34c>)
 80046c2:	4293      	cmp	r3, r2
 80046c4:	d007      	beq.n	80046d6 <HAL_GPIO_Init+0x21e>
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	4a4f      	ldr	r2, [pc, #316]	@ (8004808 <HAL_GPIO_Init+0x350>)
 80046ca:	4293      	cmp	r3, r2
 80046cc:	d101      	bne.n	80046d2 <HAL_GPIO_Init+0x21a>
 80046ce:	2309      	movs	r3, #9
 80046d0:	e012      	b.n	80046f8 <HAL_GPIO_Init+0x240>
 80046d2:	230a      	movs	r3, #10
 80046d4:	e010      	b.n	80046f8 <HAL_GPIO_Init+0x240>
 80046d6:	2308      	movs	r3, #8
 80046d8:	e00e      	b.n	80046f8 <HAL_GPIO_Init+0x240>
 80046da:	2307      	movs	r3, #7
 80046dc:	e00c      	b.n	80046f8 <HAL_GPIO_Init+0x240>
 80046de:	2306      	movs	r3, #6
 80046e0:	e00a      	b.n	80046f8 <HAL_GPIO_Init+0x240>
 80046e2:	2305      	movs	r3, #5
 80046e4:	e008      	b.n	80046f8 <HAL_GPIO_Init+0x240>
 80046e6:	2304      	movs	r3, #4
 80046e8:	e006      	b.n	80046f8 <HAL_GPIO_Init+0x240>
 80046ea:	2303      	movs	r3, #3
 80046ec:	e004      	b.n	80046f8 <HAL_GPIO_Init+0x240>
 80046ee:	2302      	movs	r3, #2
 80046f0:	e002      	b.n	80046f8 <HAL_GPIO_Init+0x240>
 80046f2:	2301      	movs	r3, #1
 80046f4:	e000      	b.n	80046f8 <HAL_GPIO_Init+0x240>
 80046f6:	2300      	movs	r3, #0
 80046f8:	69fa      	ldr	r2, [r7, #28]
 80046fa:	f002 0203 	and.w	r2, r2, #3
 80046fe:	0092      	lsls	r2, r2, #2
 8004700:	4093      	lsls	r3, r2
 8004702:	69ba      	ldr	r2, [r7, #24]
 8004704:	4313      	orrs	r3, r2
 8004706:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8004708:	4935      	ldr	r1, [pc, #212]	@ (80047e0 <HAL_GPIO_Init+0x328>)
 800470a:	69fb      	ldr	r3, [r7, #28]
 800470c:	089b      	lsrs	r3, r3, #2
 800470e:	3302      	adds	r3, #2
 8004710:	69ba      	ldr	r2, [r7, #24]
 8004712:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004716:	4b3d      	ldr	r3, [pc, #244]	@ (800480c <HAL_GPIO_Init+0x354>)
 8004718:	689b      	ldr	r3, [r3, #8]
 800471a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800471c:	693b      	ldr	r3, [r7, #16]
 800471e:	43db      	mvns	r3, r3
 8004720:	69ba      	ldr	r2, [r7, #24]
 8004722:	4013      	ands	r3, r2
 8004724:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004726:	683b      	ldr	r3, [r7, #0]
 8004728:	685b      	ldr	r3, [r3, #4]
 800472a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800472e:	2b00      	cmp	r3, #0
 8004730:	d003      	beq.n	800473a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8004732:	69ba      	ldr	r2, [r7, #24]
 8004734:	693b      	ldr	r3, [r7, #16]
 8004736:	4313      	orrs	r3, r2
 8004738:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800473a:	4a34      	ldr	r2, [pc, #208]	@ (800480c <HAL_GPIO_Init+0x354>)
 800473c:	69bb      	ldr	r3, [r7, #24]
 800473e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004740:	4b32      	ldr	r3, [pc, #200]	@ (800480c <HAL_GPIO_Init+0x354>)
 8004742:	68db      	ldr	r3, [r3, #12]
 8004744:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004746:	693b      	ldr	r3, [r7, #16]
 8004748:	43db      	mvns	r3, r3
 800474a:	69ba      	ldr	r2, [r7, #24]
 800474c:	4013      	ands	r3, r2
 800474e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004750:	683b      	ldr	r3, [r7, #0]
 8004752:	685b      	ldr	r3, [r3, #4]
 8004754:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004758:	2b00      	cmp	r3, #0
 800475a:	d003      	beq.n	8004764 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800475c:	69ba      	ldr	r2, [r7, #24]
 800475e:	693b      	ldr	r3, [r7, #16]
 8004760:	4313      	orrs	r3, r2
 8004762:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004764:	4a29      	ldr	r2, [pc, #164]	@ (800480c <HAL_GPIO_Init+0x354>)
 8004766:	69bb      	ldr	r3, [r7, #24]
 8004768:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800476a:	4b28      	ldr	r3, [pc, #160]	@ (800480c <HAL_GPIO_Init+0x354>)
 800476c:	685b      	ldr	r3, [r3, #4]
 800476e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004770:	693b      	ldr	r3, [r7, #16]
 8004772:	43db      	mvns	r3, r3
 8004774:	69ba      	ldr	r2, [r7, #24]
 8004776:	4013      	ands	r3, r2
 8004778:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800477a:	683b      	ldr	r3, [r7, #0]
 800477c:	685b      	ldr	r3, [r3, #4]
 800477e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004782:	2b00      	cmp	r3, #0
 8004784:	d003      	beq.n	800478e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8004786:	69ba      	ldr	r2, [r7, #24]
 8004788:	693b      	ldr	r3, [r7, #16]
 800478a:	4313      	orrs	r3, r2
 800478c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800478e:	4a1f      	ldr	r2, [pc, #124]	@ (800480c <HAL_GPIO_Init+0x354>)
 8004790:	69bb      	ldr	r3, [r7, #24]
 8004792:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004794:	4b1d      	ldr	r3, [pc, #116]	@ (800480c <HAL_GPIO_Init+0x354>)
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800479a:	693b      	ldr	r3, [r7, #16]
 800479c:	43db      	mvns	r3, r3
 800479e:	69ba      	ldr	r2, [r7, #24]
 80047a0:	4013      	ands	r3, r2
 80047a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80047a4:	683b      	ldr	r3, [r7, #0]
 80047a6:	685b      	ldr	r3, [r3, #4]
 80047a8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d003      	beq.n	80047b8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80047b0:	69ba      	ldr	r2, [r7, #24]
 80047b2:	693b      	ldr	r3, [r7, #16]
 80047b4:	4313      	orrs	r3, r2
 80047b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80047b8:	4a14      	ldr	r2, [pc, #80]	@ (800480c <HAL_GPIO_Init+0x354>)
 80047ba:	69bb      	ldr	r3, [r7, #24]
 80047bc:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80047be:	69fb      	ldr	r3, [r7, #28]
 80047c0:	3301      	adds	r3, #1
 80047c2:	61fb      	str	r3, [r7, #28]
 80047c4:	69fb      	ldr	r3, [r7, #28]
 80047c6:	2b0f      	cmp	r3, #15
 80047c8:	f67f ae86 	bls.w	80044d8 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80047cc:	bf00      	nop
 80047ce:	bf00      	nop
 80047d0:	3724      	adds	r7, #36	@ 0x24
 80047d2:	46bd      	mov	sp, r7
 80047d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d8:	4770      	bx	lr
 80047da:	bf00      	nop
 80047dc:	40023800 	.word	0x40023800
 80047e0:	40013800 	.word	0x40013800
 80047e4:	40020000 	.word	0x40020000
 80047e8:	40020400 	.word	0x40020400
 80047ec:	40020800 	.word	0x40020800
 80047f0:	40020c00 	.word	0x40020c00
 80047f4:	40021000 	.word	0x40021000
 80047f8:	40021400 	.word	0x40021400
 80047fc:	40021800 	.word	0x40021800
 8004800:	40021c00 	.word	0x40021c00
 8004804:	40022000 	.word	0x40022000
 8004808:	40022400 	.word	0x40022400
 800480c:	40013c00 	.word	0x40013c00

08004810 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004810:	b480      	push	{r7}
 8004812:	b085      	sub	sp, #20
 8004814:	af00      	add	r7, sp, #0
 8004816:	6078      	str	r0, [r7, #4]
 8004818:	460b      	mov	r3, r1
 800481a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	691a      	ldr	r2, [r3, #16]
 8004820:	887b      	ldrh	r3, [r7, #2]
 8004822:	4013      	ands	r3, r2
 8004824:	2b00      	cmp	r3, #0
 8004826:	d002      	beq.n	800482e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004828:	2301      	movs	r3, #1
 800482a:	73fb      	strb	r3, [r7, #15]
 800482c:	e001      	b.n	8004832 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800482e:	2300      	movs	r3, #0
 8004830:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004832:	7bfb      	ldrb	r3, [r7, #15]
}
 8004834:	4618      	mov	r0, r3
 8004836:	3714      	adds	r7, #20
 8004838:	46bd      	mov	sp, r7
 800483a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483e:	4770      	bx	lr

08004840 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004840:	b480      	push	{r7}
 8004842:	b083      	sub	sp, #12
 8004844:	af00      	add	r7, sp, #0
 8004846:	6078      	str	r0, [r7, #4]
 8004848:	460b      	mov	r3, r1
 800484a:	807b      	strh	r3, [r7, #2]
 800484c:	4613      	mov	r3, r2
 800484e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004850:	787b      	ldrb	r3, [r7, #1]
 8004852:	2b00      	cmp	r3, #0
 8004854:	d003      	beq.n	800485e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004856:	887a      	ldrh	r2, [r7, #2]
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800485c:	e003      	b.n	8004866 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800485e:	887b      	ldrh	r3, [r7, #2]
 8004860:	041a      	lsls	r2, r3, #16
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	619a      	str	r2, [r3, #24]
}
 8004866:	bf00      	nop
 8004868:	370c      	adds	r7, #12
 800486a:	46bd      	mov	sp, r7
 800486c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004870:	4770      	bx	lr
	...

08004874 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004874:	b580      	push	{r7, lr}
 8004876:	b086      	sub	sp, #24
 8004878:	af00      	add	r7, sp, #0
 800487a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800487c:	2300      	movs	r3, #0
 800487e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	2b00      	cmp	r3, #0
 8004884:	d101      	bne.n	800488a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8004886:	2301      	movs	r3, #1
 8004888:	e29b      	b.n	8004dc2 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f003 0301 	and.w	r3, r3, #1
 8004892:	2b00      	cmp	r3, #0
 8004894:	f000 8087 	beq.w	80049a6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004898:	4b96      	ldr	r3, [pc, #600]	@ (8004af4 <HAL_RCC_OscConfig+0x280>)
 800489a:	689b      	ldr	r3, [r3, #8]
 800489c:	f003 030c 	and.w	r3, r3, #12
 80048a0:	2b04      	cmp	r3, #4
 80048a2:	d00c      	beq.n	80048be <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80048a4:	4b93      	ldr	r3, [pc, #588]	@ (8004af4 <HAL_RCC_OscConfig+0x280>)
 80048a6:	689b      	ldr	r3, [r3, #8]
 80048a8:	f003 030c 	and.w	r3, r3, #12
 80048ac:	2b08      	cmp	r3, #8
 80048ae:	d112      	bne.n	80048d6 <HAL_RCC_OscConfig+0x62>
 80048b0:	4b90      	ldr	r3, [pc, #576]	@ (8004af4 <HAL_RCC_OscConfig+0x280>)
 80048b2:	685b      	ldr	r3, [r3, #4]
 80048b4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80048b8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80048bc:	d10b      	bne.n	80048d6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80048be:	4b8d      	ldr	r3, [pc, #564]	@ (8004af4 <HAL_RCC_OscConfig+0x280>)
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d06c      	beq.n	80049a4 <HAL_RCC_OscConfig+0x130>
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	685b      	ldr	r3, [r3, #4]
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d168      	bne.n	80049a4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80048d2:	2301      	movs	r3, #1
 80048d4:	e275      	b.n	8004dc2 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	685b      	ldr	r3, [r3, #4]
 80048da:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80048de:	d106      	bne.n	80048ee <HAL_RCC_OscConfig+0x7a>
 80048e0:	4b84      	ldr	r3, [pc, #528]	@ (8004af4 <HAL_RCC_OscConfig+0x280>)
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	4a83      	ldr	r2, [pc, #524]	@ (8004af4 <HAL_RCC_OscConfig+0x280>)
 80048e6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80048ea:	6013      	str	r3, [r2, #0]
 80048ec:	e02e      	b.n	800494c <HAL_RCC_OscConfig+0xd8>
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	685b      	ldr	r3, [r3, #4]
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d10c      	bne.n	8004910 <HAL_RCC_OscConfig+0x9c>
 80048f6:	4b7f      	ldr	r3, [pc, #508]	@ (8004af4 <HAL_RCC_OscConfig+0x280>)
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	4a7e      	ldr	r2, [pc, #504]	@ (8004af4 <HAL_RCC_OscConfig+0x280>)
 80048fc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004900:	6013      	str	r3, [r2, #0]
 8004902:	4b7c      	ldr	r3, [pc, #496]	@ (8004af4 <HAL_RCC_OscConfig+0x280>)
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	4a7b      	ldr	r2, [pc, #492]	@ (8004af4 <HAL_RCC_OscConfig+0x280>)
 8004908:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800490c:	6013      	str	r3, [r2, #0]
 800490e:	e01d      	b.n	800494c <HAL_RCC_OscConfig+0xd8>
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	685b      	ldr	r3, [r3, #4]
 8004914:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004918:	d10c      	bne.n	8004934 <HAL_RCC_OscConfig+0xc0>
 800491a:	4b76      	ldr	r3, [pc, #472]	@ (8004af4 <HAL_RCC_OscConfig+0x280>)
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	4a75      	ldr	r2, [pc, #468]	@ (8004af4 <HAL_RCC_OscConfig+0x280>)
 8004920:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004924:	6013      	str	r3, [r2, #0]
 8004926:	4b73      	ldr	r3, [pc, #460]	@ (8004af4 <HAL_RCC_OscConfig+0x280>)
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	4a72      	ldr	r2, [pc, #456]	@ (8004af4 <HAL_RCC_OscConfig+0x280>)
 800492c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004930:	6013      	str	r3, [r2, #0]
 8004932:	e00b      	b.n	800494c <HAL_RCC_OscConfig+0xd8>
 8004934:	4b6f      	ldr	r3, [pc, #444]	@ (8004af4 <HAL_RCC_OscConfig+0x280>)
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	4a6e      	ldr	r2, [pc, #440]	@ (8004af4 <HAL_RCC_OscConfig+0x280>)
 800493a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800493e:	6013      	str	r3, [r2, #0]
 8004940:	4b6c      	ldr	r3, [pc, #432]	@ (8004af4 <HAL_RCC_OscConfig+0x280>)
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	4a6b      	ldr	r2, [pc, #428]	@ (8004af4 <HAL_RCC_OscConfig+0x280>)
 8004946:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800494a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	685b      	ldr	r3, [r3, #4]
 8004950:	2b00      	cmp	r3, #0
 8004952:	d013      	beq.n	800497c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004954:	f7fe fa16 	bl	8002d84 <HAL_GetTick>
 8004958:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800495a:	e008      	b.n	800496e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800495c:	f7fe fa12 	bl	8002d84 <HAL_GetTick>
 8004960:	4602      	mov	r2, r0
 8004962:	693b      	ldr	r3, [r7, #16]
 8004964:	1ad3      	subs	r3, r2, r3
 8004966:	2b64      	cmp	r3, #100	@ 0x64
 8004968:	d901      	bls.n	800496e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800496a:	2303      	movs	r3, #3
 800496c:	e229      	b.n	8004dc2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800496e:	4b61      	ldr	r3, [pc, #388]	@ (8004af4 <HAL_RCC_OscConfig+0x280>)
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004976:	2b00      	cmp	r3, #0
 8004978:	d0f0      	beq.n	800495c <HAL_RCC_OscConfig+0xe8>
 800497a:	e014      	b.n	80049a6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800497c:	f7fe fa02 	bl	8002d84 <HAL_GetTick>
 8004980:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004982:	e008      	b.n	8004996 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004984:	f7fe f9fe 	bl	8002d84 <HAL_GetTick>
 8004988:	4602      	mov	r2, r0
 800498a:	693b      	ldr	r3, [r7, #16]
 800498c:	1ad3      	subs	r3, r2, r3
 800498e:	2b64      	cmp	r3, #100	@ 0x64
 8004990:	d901      	bls.n	8004996 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8004992:	2303      	movs	r3, #3
 8004994:	e215      	b.n	8004dc2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004996:	4b57      	ldr	r3, [pc, #348]	@ (8004af4 <HAL_RCC_OscConfig+0x280>)
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d1f0      	bne.n	8004984 <HAL_RCC_OscConfig+0x110>
 80049a2:	e000      	b.n	80049a6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80049a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f003 0302 	and.w	r3, r3, #2
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d069      	beq.n	8004a86 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80049b2:	4b50      	ldr	r3, [pc, #320]	@ (8004af4 <HAL_RCC_OscConfig+0x280>)
 80049b4:	689b      	ldr	r3, [r3, #8]
 80049b6:	f003 030c 	and.w	r3, r3, #12
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d00b      	beq.n	80049d6 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80049be:	4b4d      	ldr	r3, [pc, #308]	@ (8004af4 <HAL_RCC_OscConfig+0x280>)
 80049c0:	689b      	ldr	r3, [r3, #8]
 80049c2:	f003 030c 	and.w	r3, r3, #12
 80049c6:	2b08      	cmp	r3, #8
 80049c8:	d11c      	bne.n	8004a04 <HAL_RCC_OscConfig+0x190>
 80049ca:	4b4a      	ldr	r3, [pc, #296]	@ (8004af4 <HAL_RCC_OscConfig+0x280>)
 80049cc:	685b      	ldr	r3, [r3, #4]
 80049ce:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d116      	bne.n	8004a04 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80049d6:	4b47      	ldr	r3, [pc, #284]	@ (8004af4 <HAL_RCC_OscConfig+0x280>)
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f003 0302 	and.w	r3, r3, #2
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d005      	beq.n	80049ee <HAL_RCC_OscConfig+0x17a>
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	68db      	ldr	r3, [r3, #12]
 80049e6:	2b01      	cmp	r3, #1
 80049e8:	d001      	beq.n	80049ee <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80049ea:	2301      	movs	r3, #1
 80049ec:	e1e9      	b.n	8004dc2 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80049ee:	4b41      	ldr	r3, [pc, #260]	@ (8004af4 <HAL_RCC_OscConfig+0x280>)
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	691b      	ldr	r3, [r3, #16]
 80049fa:	00db      	lsls	r3, r3, #3
 80049fc:	493d      	ldr	r1, [pc, #244]	@ (8004af4 <HAL_RCC_OscConfig+0x280>)
 80049fe:	4313      	orrs	r3, r2
 8004a00:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004a02:	e040      	b.n	8004a86 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	68db      	ldr	r3, [r3, #12]
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d023      	beq.n	8004a54 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004a0c:	4b39      	ldr	r3, [pc, #228]	@ (8004af4 <HAL_RCC_OscConfig+0x280>)
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	4a38      	ldr	r2, [pc, #224]	@ (8004af4 <HAL_RCC_OscConfig+0x280>)
 8004a12:	f043 0301 	orr.w	r3, r3, #1
 8004a16:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a18:	f7fe f9b4 	bl	8002d84 <HAL_GetTick>
 8004a1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a1e:	e008      	b.n	8004a32 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004a20:	f7fe f9b0 	bl	8002d84 <HAL_GetTick>
 8004a24:	4602      	mov	r2, r0
 8004a26:	693b      	ldr	r3, [r7, #16]
 8004a28:	1ad3      	subs	r3, r2, r3
 8004a2a:	2b02      	cmp	r3, #2
 8004a2c:	d901      	bls.n	8004a32 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8004a2e:	2303      	movs	r3, #3
 8004a30:	e1c7      	b.n	8004dc2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a32:	4b30      	ldr	r3, [pc, #192]	@ (8004af4 <HAL_RCC_OscConfig+0x280>)
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f003 0302 	and.w	r3, r3, #2
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d0f0      	beq.n	8004a20 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a3e:	4b2d      	ldr	r3, [pc, #180]	@ (8004af4 <HAL_RCC_OscConfig+0x280>)
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	691b      	ldr	r3, [r3, #16]
 8004a4a:	00db      	lsls	r3, r3, #3
 8004a4c:	4929      	ldr	r1, [pc, #164]	@ (8004af4 <HAL_RCC_OscConfig+0x280>)
 8004a4e:	4313      	orrs	r3, r2
 8004a50:	600b      	str	r3, [r1, #0]
 8004a52:	e018      	b.n	8004a86 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004a54:	4b27      	ldr	r3, [pc, #156]	@ (8004af4 <HAL_RCC_OscConfig+0x280>)
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	4a26      	ldr	r2, [pc, #152]	@ (8004af4 <HAL_RCC_OscConfig+0x280>)
 8004a5a:	f023 0301 	bic.w	r3, r3, #1
 8004a5e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a60:	f7fe f990 	bl	8002d84 <HAL_GetTick>
 8004a64:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004a66:	e008      	b.n	8004a7a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004a68:	f7fe f98c 	bl	8002d84 <HAL_GetTick>
 8004a6c:	4602      	mov	r2, r0
 8004a6e:	693b      	ldr	r3, [r7, #16]
 8004a70:	1ad3      	subs	r3, r2, r3
 8004a72:	2b02      	cmp	r3, #2
 8004a74:	d901      	bls.n	8004a7a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004a76:	2303      	movs	r3, #3
 8004a78:	e1a3      	b.n	8004dc2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004a7a:	4b1e      	ldr	r3, [pc, #120]	@ (8004af4 <HAL_RCC_OscConfig+0x280>)
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f003 0302 	and.w	r3, r3, #2
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d1f0      	bne.n	8004a68 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f003 0308 	and.w	r3, r3, #8
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d038      	beq.n	8004b04 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	695b      	ldr	r3, [r3, #20]
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d019      	beq.n	8004ace <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004a9a:	4b16      	ldr	r3, [pc, #88]	@ (8004af4 <HAL_RCC_OscConfig+0x280>)
 8004a9c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004a9e:	4a15      	ldr	r2, [pc, #84]	@ (8004af4 <HAL_RCC_OscConfig+0x280>)
 8004aa0:	f043 0301 	orr.w	r3, r3, #1
 8004aa4:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004aa6:	f7fe f96d 	bl	8002d84 <HAL_GetTick>
 8004aaa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004aac:	e008      	b.n	8004ac0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004aae:	f7fe f969 	bl	8002d84 <HAL_GetTick>
 8004ab2:	4602      	mov	r2, r0
 8004ab4:	693b      	ldr	r3, [r7, #16]
 8004ab6:	1ad3      	subs	r3, r2, r3
 8004ab8:	2b02      	cmp	r3, #2
 8004aba:	d901      	bls.n	8004ac0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004abc:	2303      	movs	r3, #3
 8004abe:	e180      	b.n	8004dc2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004ac0:	4b0c      	ldr	r3, [pc, #48]	@ (8004af4 <HAL_RCC_OscConfig+0x280>)
 8004ac2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004ac4:	f003 0302 	and.w	r3, r3, #2
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d0f0      	beq.n	8004aae <HAL_RCC_OscConfig+0x23a>
 8004acc:	e01a      	b.n	8004b04 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004ace:	4b09      	ldr	r3, [pc, #36]	@ (8004af4 <HAL_RCC_OscConfig+0x280>)
 8004ad0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004ad2:	4a08      	ldr	r2, [pc, #32]	@ (8004af4 <HAL_RCC_OscConfig+0x280>)
 8004ad4:	f023 0301 	bic.w	r3, r3, #1
 8004ad8:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ada:	f7fe f953 	bl	8002d84 <HAL_GetTick>
 8004ade:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004ae0:	e00a      	b.n	8004af8 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004ae2:	f7fe f94f 	bl	8002d84 <HAL_GetTick>
 8004ae6:	4602      	mov	r2, r0
 8004ae8:	693b      	ldr	r3, [r7, #16]
 8004aea:	1ad3      	subs	r3, r2, r3
 8004aec:	2b02      	cmp	r3, #2
 8004aee:	d903      	bls.n	8004af8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004af0:	2303      	movs	r3, #3
 8004af2:	e166      	b.n	8004dc2 <HAL_RCC_OscConfig+0x54e>
 8004af4:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004af8:	4b92      	ldr	r3, [pc, #584]	@ (8004d44 <HAL_RCC_OscConfig+0x4d0>)
 8004afa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004afc:	f003 0302 	and.w	r3, r3, #2
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d1ee      	bne.n	8004ae2 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	f003 0304 	and.w	r3, r3, #4
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	f000 80a4 	beq.w	8004c5a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004b12:	4b8c      	ldr	r3, [pc, #560]	@ (8004d44 <HAL_RCC_OscConfig+0x4d0>)
 8004b14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b16:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d10d      	bne.n	8004b3a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8004b1e:	4b89      	ldr	r3, [pc, #548]	@ (8004d44 <HAL_RCC_OscConfig+0x4d0>)
 8004b20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b22:	4a88      	ldr	r2, [pc, #544]	@ (8004d44 <HAL_RCC_OscConfig+0x4d0>)
 8004b24:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004b28:	6413      	str	r3, [r2, #64]	@ 0x40
 8004b2a:	4b86      	ldr	r3, [pc, #536]	@ (8004d44 <HAL_RCC_OscConfig+0x4d0>)
 8004b2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b2e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004b32:	60bb      	str	r3, [r7, #8]
 8004b34:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004b36:	2301      	movs	r3, #1
 8004b38:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004b3a:	4b83      	ldr	r3, [pc, #524]	@ (8004d48 <HAL_RCC_OscConfig+0x4d4>)
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d118      	bne.n	8004b78 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8004b46:	4b80      	ldr	r3, [pc, #512]	@ (8004d48 <HAL_RCC_OscConfig+0x4d4>)
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	4a7f      	ldr	r2, [pc, #508]	@ (8004d48 <HAL_RCC_OscConfig+0x4d4>)
 8004b4c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004b50:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004b52:	f7fe f917 	bl	8002d84 <HAL_GetTick>
 8004b56:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004b58:	e008      	b.n	8004b6c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b5a:	f7fe f913 	bl	8002d84 <HAL_GetTick>
 8004b5e:	4602      	mov	r2, r0
 8004b60:	693b      	ldr	r3, [r7, #16]
 8004b62:	1ad3      	subs	r3, r2, r3
 8004b64:	2b64      	cmp	r3, #100	@ 0x64
 8004b66:	d901      	bls.n	8004b6c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8004b68:	2303      	movs	r3, #3
 8004b6a:	e12a      	b.n	8004dc2 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004b6c:	4b76      	ldr	r3, [pc, #472]	@ (8004d48 <HAL_RCC_OscConfig+0x4d4>)
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d0f0      	beq.n	8004b5a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	689b      	ldr	r3, [r3, #8]
 8004b7c:	2b01      	cmp	r3, #1
 8004b7e:	d106      	bne.n	8004b8e <HAL_RCC_OscConfig+0x31a>
 8004b80:	4b70      	ldr	r3, [pc, #448]	@ (8004d44 <HAL_RCC_OscConfig+0x4d0>)
 8004b82:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b84:	4a6f      	ldr	r2, [pc, #444]	@ (8004d44 <HAL_RCC_OscConfig+0x4d0>)
 8004b86:	f043 0301 	orr.w	r3, r3, #1
 8004b8a:	6713      	str	r3, [r2, #112]	@ 0x70
 8004b8c:	e02d      	b.n	8004bea <HAL_RCC_OscConfig+0x376>
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	689b      	ldr	r3, [r3, #8]
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d10c      	bne.n	8004bb0 <HAL_RCC_OscConfig+0x33c>
 8004b96:	4b6b      	ldr	r3, [pc, #428]	@ (8004d44 <HAL_RCC_OscConfig+0x4d0>)
 8004b98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b9a:	4a6a      	ldr	r2, [pc, #424]	@ (8004d44 <HAL_RCC_OscConfig+0x4d0>)
 8004b9c:	f023 0301 	bic.w	r3, r3, #1
 8004ba0:	6713      	str	r3, [r2, #112]	@ 0x70
 8004ba2:	4b68      	ldr	r3, [pc, #416]	@ (8004d44 <HAL_RCC_OscConfig+0x4d0>)
 8004ba4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ba6:	4a67      	ldr	r2, [pc, #412]	@ (8004d44 <HAL_RCC_OscConfig+0x4d0>)
 8004ba8:	f023 0304 	bic.w	r3, r3, #4
 8004bac:	6713      	str	r3, [r2, #112]	@ 0x70
 8004bae:	e01c      	b.n	8004bea <HAL_RCC_OscConfig+0x376>
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	689b      	ldr	r3, [r3, #8]
 8004bb4:	2b05      	cmp	r3, #5
 8004bb6:	d10c      	bne.n	8004bd2 <HAL_RCC_OscConfig+0x35e>
 8004bb8:	4b62      	ldr	r3, [pc, #392]	@ (8004d44 <HAL_RCC_OscConfig+0x4d0>)
 8004bba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004bbc:	4a61      	ldr	r2, [pc, #388]	@ (8004d44 <HAL_RCC_OscConfig+0x4d0>)
 8004bbe:	f043 0304 	orr.w	r3, r3, #4
 8004bc2:	6713      	str	r3, [r2, #112]	@ 0x70
 8004bc4:	4b5f      	ldr	r3, [pc, #380]	@ (8004d44 <HAL_RCC_OscConfig+0x4d0>)
 8004bc6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004bc8:	4a5e      	ldr	r2, [pc, #376]	@ (8004d44 <HAL_RCC_OscConfig+0x4d0>)
 8004bca:	f043 0301 	orr.w	r3, r3, #1
 8004bce:	6713      	str	r3, [r2, #112]	@ 0x70
 8004bd0:	e00b      	b.n	8004bea <HAL_RCC_OscConfig+0x376>
 8004bd2:	4b5c      	ldr	r3, [pc, #368]	@ (8004d44 <HAL_RCC_OscConfig+0x4d0>)
 8004bd4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004bd6:	4a5b      	ldr	r2, [pc, #364]	@ (8004d44 <HAL_RCC_OscConfig+0x4d0>)
 8004bd8:	f023 0301 	bic.w	r3, r3, #1
 8004bdc:	6713      	str	r3, [r2, #112]	@ 0x70
 8004bde:	4b59      	ldr	r3, [pc, #356]	@ (8004d44 <HAL_RCC_OscConfig+0x4d0>)
 8004be0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004be2:	4a58      	ldr	r2, [pc, #352]	@ (8004d44 <HAL_RCC_OscConfig+0x4d0>)
 8004be4:	f023 0304 	bic.w	r3, r3, #4
 8004be8:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	689b      	ldr	r3, [r3, #8]
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d015      	beq.n	8004c1e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004bf2:	f7fe f8c7 	bl	8002d84 <HAL_GetTick>
 8004bf6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004bf8:	e00a      	b.n	8004c10 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004bfa:	f7fe f8c3 	bl	8002d84 <HAL_GetTick>
 8004bfe:	4602      	mov	r2, r0
 8004c00:	693b      	ldr	r3, [r7, #16]
 8004c02:	1ad3      	subs	r3, r2, r3
 8004c04:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004c08:	4293      	cmp	r3, r2
 8004c0a:	d901      	bls.n	8004c10 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8004c0c:	2303      	movs	r3, #3
 8004c0e:	e0d8      	b.n	8004dc2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c10:	4b4c      	ldr	r3, [pc, #304]	@ (8004d44 <HAL_RCC_OscConfig+0x4d0>)
 8004c12:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c14:	f003 0302 	and.w	r3, r3, #2
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d0ee      	beq.n	8004bfa <HAL_RCC_OscConfig+0x386>
 8004c1c:	e014      	b.n	8004c48 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c1e:	f7fe f8b1 	bl	8002d84 <HAL_GetTick>
 8004c22:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004c24:	e00a      	b.n	8004c3c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c26:	f7fe f8ad 	bl	8002d84 <HAL_GetTick>
 8004c2a:	4602      	mov	r2, r0
 8004c2c:	693b      	ldr	r3, [r7, #16]
 8004c2e:	1ad3      	subs	r3, r2, r3
 8004c30:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004c34:	4293      	cmp	r3, r2
 8004c36:	d901      	bls.n	8004c3c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8004c38:	2303      	movs	r3, #3
 8004c3a:	e0c2      	b.n	8004dc2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004c3c:	4b41      	ldr	r3, [pc, #260]	@ (8004d44 <HAL_RCC_OscConfig+0x4d0>)
 8004c3e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c40:	f003 0302 	and.w	r3, r3, #2
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d1ee      	bne.n	8004c26 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004c48:	7dfb      	ldrb	r3, [r7, #23]
 8004c4a:	2b01      	cmp	r3, #1
 8004c4c:	d105      	bne.n	8004c5a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004c4e:	4b3d      	ldr	r3, [pc, #244]	@ (8004d44 <HAL_RCC_OscConfig+0x4d0>)
 8004c50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c52:	4a3c      	ldr	r2, [pc, #240]	@ (8004d44 <HAL_RCC_OscConfig+0x4d0>)
 8004c54:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004c58:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	699b      	ldr	r3, [r3, #24]
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	f000 80ae 	beq.w	8004dc0 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004c64:	4b37      	ldr	r3, [pc, #220]	@ (8004d44 <HAL_RCC_OscConfig+0x4d0>)
 8004c66:	689b      	ldr	r3, [r3, #8]
 8004c68:	f003 030c 	and.w	r3, r3, #12
 8004c6c:	2b08      	cmp	r3, #8
 8004c6e:	d06d      	beq.n	8004d4c <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	699b      	ldr	r3, [r3, #24]
 8004c74:	2b02      	cmp	r3, #2
 8004c76:	d14b      	bne.n	8004d10 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c78:	4b32      	ldr	r3, [pc, #200]	@ (8004d44 <HAL_RCC_OscConfig+0x4d0>)
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	4a31      	ldr	r2, [pc, #196]	@ (8004d44 <HAL_RCC_OscConfig+0x4d0>)
 8004c7e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004c82:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c84:	f7fe f87e 	bl	8002d84 <HAL_GetTick>
 8004c88:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c8a:	e008      	b.n	8004c9e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c8c:	f7fe f87a 	bl	8002d84 <HAL_GetTick>
 8004c90:	4602      	mov	r2, r0
 8004c92:	693b      	ldr	r3, [r7, #16]
 8004c94:	1ad3      	subs	r3, r2, r3
 8004c96:	2b02      	cmp	r3, #2
 8004c98:	d901      	bls.n	8004c9e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8004c9a:	2303      	movs	r3, #3
 8004c9c:	e091      	b.n	8004dc2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c9e:	4b29      	ldr	r3, [pc, #164]	@ (8004d44 <HAL_RCC_OscConfig+0x4d0>)
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d1f0      	bne.n	8004c8c <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	69da      	ldr	r2, [r3, #28]
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	6a1b      	ldr	r3, [r3, #32]
 8004cb2:	431a      	orrs	r2, r3
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cb8:	019b      	lsls	r3, r3, #6
 8004cba:	431a      	orrs	r2, r3
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cc0:	085b      	lsrs	r3, r3, #1
 8004cc2:	3b01      	subs	r3, #1
 8004cc4:	041b      	lsls	r3, r3, #16
 8004cc6:	431a      	orrs	r2, r3
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ccc:	061b      	lsls	r3, r3, #24
 8004cce:	431a      	orrs	r2, r3
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004cd4:	071b      	lsls	r3, r3, #28
 8004cd6:	491b      	ldr	r1, [pc, #108]	@ (8004d44 <HAL_RCC_OscConfig+0x4d0>)
 8004cd8:	4313      	orrs	r3, r2
 8004cda:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004cdc:	4b19      	ldr	r3, [pc, #100]	@ (8004d44 <HAL_RCC_OscConfig+0x4d0>)
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	4a18      	ldr	r2, [pc, #96]	@ (8004d44 <HAL_RCC_OscConfig+0x4d0>)
 8004ce2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004ce6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ce8:	f7fe f84c 	bl	8002d84 <HAL_GetTick>
 8004cec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004cee:	e008      	b.n	8004d02 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004cf0:	f7fe f848 	bl	8002d84 <HAL_GetTick>
 8004cf4:	4602      	mov	r2, r0
 8004cf6:	693b      	ldr	r3, [r7, #16]
 8004cf8:	1ad3      	subs	r3, r2, r3
 8004cfa:	2b02      	cmp	r3, #2
 8004cfc:	d901      	bls.n	8004d02 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8004cfe:	2303      	movs	r3, #3
 8004d00:	e05f      	b.n	8004dc2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d02:	4b10      	ldr	r3, [pc, #64]	@ (8004d44 <HAL_RCC_OscConfig+0x4d0>)
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d0f0      	beq.n	8004cf0 <HAL_RCC_OscConfig+0x47c>
 8004d0e:	e057      	b.n	8004dc0 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d10:	4b0c      	ldr	r3, [pc, #48]	@ (8004d44 <HAL_RCC_OscConfig+0x4d0>)
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	4a0b      	ldr	r2, [pc, #44]	@ (8004d44 <HAL_RCC_OscConfig+0x4d0>)
 8004d16:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004d1a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d1c:	f7fe f832 	bl	8002d84 <HAL_GetTick>
 8004d20:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d22:	e008      	b.n	8004d36 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d24:	f7fe f82e 	bl	8002d84 <HAL_GetTick>
 8004d28:	4602      	mov	r2, r0
 8004d2a:	693b      	ldr	r3, [r7, #16]
 8004d2c:	1ad3      	subs	r3, r2, r3
 8004d2e:	2b02      	cmp	r3, #2
 8004d30:	d901      	bls.n	8004d36 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8004d32:	2303      	movs	r3, #3
 8004d34:	e045      	b.n	8004dc2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d36:	4b03      	ldr	r3, [pc, #12]	@ (8004d44 <HAL_RCC_OscConfig+0x4d0>)
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d1f0      	bne.n	8004d24 <HAL_RCC_OscConfig+0x4b0>
 8004d42:	e03d      	b.n	8004dc0 <HAL_RCC_OscConfig+0x54c>
 8004d44:	40023800 	.word	0x40023800
 8004d48:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8004d4c:	4b1f      	ldr	r3, [pc, #124]	@ (8004dcc <HAL_RCC_OscConfig+0x558>)
 8004d4e:	685b      	ldr	r3, [r3, #4]
 8004d50:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	699b      	ldr	r3, [r3, #24]
 8004d56:	2b01      	cmp	r3, #1
 8004d58:	d030      	beq.n	8004dbc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004d64:	429a      	cmp	r2, r3
 8004d66:	d129      	bne.n	8004dbc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d72:	429a      	cmp	r2, r3
 8004d74:	d122      	bne.n	8004dbc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004d76:	68fa      	ldr	r2, [r7, #12]
 8004d78:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004d7c:	4013      	ands	r3, r2
 8004d7e:	687a      	ldr	r2, [r7, #4]
 8004d80:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004d82:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004d84:	4293      	cmp	r3, r2
 8004d86:	d119      	bne.n	8004dbc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d92:	085b      	lsrs	r3, r3, #1
 8004d94:	3b01      	subs	r3, #1
 8004d96:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004d98:	429a      	cmp	r2, r3
 8004d9a:	d10f      	bne.n	8004dbc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004da6:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004da8:	429a      	cmp	r2, r3
 8004daa:	d107      	bne.n	8004dbc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004db6:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004db8:	429a      	cmp	r2, r3
 8004dba:	d001      	beq.n	8004dc0 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8004dbc:	2301      	movs	r3, #1
 8004dbe:	e000      	b.n	8004dc2 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8004dc0:	2300      	movs	r3, #0
}
 8004dc2:	4618      	mov	r0, r3
 8004dc4:	3718      	adds	r7, #24
 8004dc6:	46bd      	mov	sp, r7
 8004dc8:	bd80      	pop	{r7, pc}
 8004dca:	bf00      	nop
 8004dcc:	40023800 	.word	0x40023800

08004dd0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004dd0:	b580      	push	{r7, lr}
 8004dd2:	b084      	sub	sp, #16
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	6078      	str	r0, [r7, #4]
 8004dd8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8004dda:	2300      	movs	r3, #0
 8004ddc:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d101      	bne.n	8004de8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004de4:	2301      	movs	r3, #1
 8004de6:	e0d0      	b.n	8004f8a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004de8:	4b6a      	ldr	r3, [pc, #424]	@ (8004f94 <HAL_RCC_ClockConfig+0x1c4>)
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	f003 030f 	and.w	r3, r3, #15
 8004df0:	683a      	ldr	r2, [r7, #0]
 8004df2:	429a      	cmp	r2, r3
 8004df4:	d910      	bls.n	8004e18 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004df6:	4b67      	ldr	r3, [pc, #412]	@ (8004f94 <HAL_RCC_ClockConfig+0x1c4>)
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	f023 020f 	bic.w	r2, r3, #15
 8004dfe:	4965      	ldr	r1, [pc, #404]	@ (8004f94 <HAL_RCC_ClockConfig+0x1c4>)
 8004e00:	683b      	ldr	r3, [r7, #0]
 8004e02:	4313      	orrs	r3, r2
 8004e04:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e06:	4b63      	ldr	r3, [pc, #396]	@ (8004f94 <HAL_RCC_ClockConfig+0x1c4>)
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	f003 030f 	and.w	r3, r3, #15
 8004e0e:	683a      	ldr	r2, [r7, #0]
 8004e10:	429a      	cmp	r2, r3
 8004e12:	d001      	beq.n	8004e18 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004e14:	2301      	movs	r3, #1
 8004e16:	e0b8      	b.n	8004f8a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f003 0302 	and.w	r3, r3, #2
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d020      	beq.n	8004e66 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	f003 0304 	and.w	r3, r3, #4
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d005      	beq.n	8004e3c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004e30:	4b59      	ldr	r3, [pc, #356]	@ (8004f98 <HAL_RCC_ClockConfig+0x1c8>)
 8004e32:	689b      	ldr	r3, [r3, #8]
 8004e34:	4a58      	ldr	r2, [pc, #352]	@ (8004f98 <HAL_RCC_ClockConfig+0x1c8>)
 8004e36:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004e3a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	f003 0308 	and.w	r3, r3, #8
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d005      	beq.n	8004e54 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004e48:	4b53      	ldr	r3, [pc, #332]	@ (8004f98 <HAL_RCC_ClockConfig+0x1c8>)
 8004e4a:	689b      	ldr	r3, [r3, #8]
 8004e4c:	4a52      	ldr	r2, [pc, #328]	@ (8004f98 <HAL_RCC_ClockConfig+0x1c8>)
 8004e4e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004e52:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004e54:	4b50      	ldr	r3, [pc, #320]	@ (8004f98 <HAL_RCC_ClockConfig+0x1c8>)
 8004e56:	689b      	ldr	r3, [r3, #8]
 8004e58:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	689b      	ldr	r3, [r3, #8]
 8004e60:	494d      	ldr	r1, [pc, #308]	@ (8004f98 <HAL_RCC_ClockConfig+0x1c8>)
 8004e62:	4313      	orrs	r3, r2
 8004e64:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f003 0301 	and.w	r3, r3, #1
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d040      	beq.n	8004ef4 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	685b      	ldr	r3, [r3, #4]
 8004e76:	2b01      	cmp	r3, #1
 8004e78:	d107      	bne.n	8004e8a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e7a:	4b47      	ldr	r3, [pc, #284]	@ (8004f98 <HAL_RCC_ClockConfig+0x1c8>)
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d115      	bne.n	8004eb2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004e86:	2301      	movs	r3, #1
 8004e88:	e07f      	b.n	8004f8a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	685b      	ldr	r3, [r3, #4]
 8004e8e:	2b02      	cmp	r3, #2
 8004e90:	d107      	bne.n	8004ea2 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e92:	4b41      	ldr	r3, [pc, #260]	@ (8004f98 <HAL_RCC_ClockConfig+0x1c8>)
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d109      	bne.n	8004eb2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004e9e:	2301      	movs	r3, #1
 8004ea0:	e073      	b.n	8004f8a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ea2:	4b3d      	ldr	r3, [pc, #244]	@ (8004f98 <HAL_RCC_ClockConfig+0x1c8>)
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	f003 0302 	and.w	r3, r3, #2
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d101      	bne.n	8004eb2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004eae:	2301      	movs	r3, #1
 8004eb0:	e06b      	b.n	8004f8a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004eb2:	4b39      	ldr	r3, [pc, #228]	@ (8004f98 <HAL_RCC_ClockConfig+0x1c8>)
 8004eb4:	689b      	ldr	r3, [r3, #8]
 8004eb6:	f023 0203 	bic.w	r2, r3, #3
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	685b      	ldr	r3, [r3, #4]
 8004ebe:	4936      	ldr	r1, [pc, #216]	@ (8004f98 <HAL_RCC_ClockConfig+0x1c8>)
 8004ec0:	4313      	orrs	r3, r2
 8004ec2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ec4:	f7fd ff5e 	bl	8002d84 <HAL_GetTick>
 8004ec8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004eca:	e00a      	b.n	8004ee2 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004ecc:	f7fd ff5a 	bl	8002d84 <HAL_GetTick>
 8004ed0:	4602      	mov	r2, r0
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	1ad3      	subs	r3, r2, r3
 8004ed6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004eda:	4293      	cmp	r3, r2
 8004edc:	d901      	bls.n	8004ee2 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8004ede:	2303      	movs	r3, #3
 8004ee0:	e053      	b.n	8004f8a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ee2:	4b2d      	ldr	r3, [pc, #180]	@ (8004f98 <HAL_RCC_ClockConfig+0x1c8>)
 8004ee4:	689b      	ldr	r3, [r3, #8]
 8004ee6:	f003 020c 	and.w	r2, r3, #12
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	685b      	ldr	r3, [r3, #4]
 8004eee:	009b      	lsls	r3, r3, #2
 8004ef0:	429a      	cmp	r2, r3
 8004ef2:	d1eb      	bne.n	8004ecc <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004ef4:	4b27      	ldr	r3, [pc, #156]	@ (8004f94 <HAL_RCC_ClockConfig+0x1c4>)
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	f003 030f 	and.w	r3, r3, #15
 8004efc:	683a      	ldr	r2, [r7, #0]
 8004efe:	429a      	cmp	r2, r3
 8004f00:	d210      	bcs.n	8004f24 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f02:	4b24      	ldr	r3, [pc, #144]	@ (8004f94 <HAL_RCC_ClockConfig+0x1c4>)
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	f023 020f 	bic.w	r2, r3, #15
 8004f0a:	4922      	ldr	r1, [pc, #136]	@ (8004f94 <HAL_RCC_ClockConfig+0x1c4>)
 8004f0c:	683b      	ldr	r3, [r7, #0]
 8004f0e:	4313      	orrs	r3, r2
 8004f10:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f12:	4b20      	ldr	r3, [pc, #128]	@ (8004f94 <HAL_RCC_ClockConfig+0x1c4>)
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	f003 030f 	and.w	r3, r3, #15
 8004f1a:	683a      	ldr	r2, [r7, #0]
 8004f1c:	429a      	cmp	r2, r3
 8004f1e:	d001      	beq.n	8004f24 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8004f20:	2301      	movs	r3, #1
 8004f22:	e032      	b.n	8004f8a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	f003 0304 	and.w	r3, r3, #4
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d008      	beq.n	8004f42 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004f30:	4b19      	ldr	r3, [pc, #100]	@ (8004f98 <HAL_RCC_ClockConfig+0x1c8>)
 8004f32:	689b      	ldr	r3, [r3, #8]
 8004f34:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	68db      	ldr	r3, [r3, #12]
 8004f3c:	4916      	ldr	r1, [pc, #88]	@ (8004f98 <HAL_RCC_ClockConfig+0x1c8>)
 8004f3e:	4313      	orrs	r3, r2
 8004f40:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f003 0308 	and.w	r3, r3, #8
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d009      	beq.n	8004f62 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004f4e:	4b12      	ldr	r3, [pc, #72]	@ (8004f98 <HAL_RCC_ClockConfig+0x1c8>)
 8004f50:	689b      	ldr	r3, [r3, #8]
 8004f52:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	691b      	ldr	r3, [r3, #16]
 8004f5a:	00db      	lsls	r3, r3, #3
 8004f5c:	490e      	ldr	r1, [pc, #56]	@ (8004f98 <HAL_RCC_ClockConfig+0x1c8>)
 8004f5e:	4313      	orrs	r3, r2
 8004f60:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004f62:	f000 f821 	bl	8004fa8 <HAL_RCC_GetSysClockFreq>
 8004f66:	4602      	mov	r2, r0
 8004f68:	4b0b      	ldr	r3, [pc, #44]	@ (8004f98 <HAL_RCC_ClockConfig+0x1c8>)
 8004f6a:	689b      	ldr	r3, [r3, #8]
 8004f6c:	091b      	lsrs	r3, r3, #4
 8004f6e:	f003 030f 	and.w	r3, r3, #15
 8004f72:	490a      	ldr	r1, [pc, #40]	@ (8004f9c <HAL_RCC_ClockConfig+0x1cc>)
 8004f74:	5ccb      	ldrb	r3, [r1, r3]
 8004f76:	fa22 f303 	lsr.w	r3, r2, r3
 8004f7a:	4a09      	ldr	r2, [pc, #36]	@ (8004fa0 <HAL_RCC_ClockConfig+0x1d0>)
 8004f7c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004f7e:	4b09      	ldr	r3, [pc, #36]	@ (8004fa4 <HAL_RCC_ClockConfig+0x1d4>)
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	4618      	mov	r0, r3
 8004f84:	f7fd fb14 	bl	80025b0 <HAL_InitTick>

  return HAL_OK;
 8004f88:	2300      	movs	r3, #0
}
 8004f8a:	4618      	mov	r0, r3
 8004f8c:	3710      	adds	r7, #16
 8004f8e:	46bd      	mov	sp, r7
 8004f90:	bd80      	pop	{r7, pc}
 8004f92:	bf00      	nop
 8004f94:	40023c00 	.word	0x40023c00
 8004f98:	40023800 	.word	0x40023800
 8004f9c:	08009920 	.word	0x08009920
 8004fa0:	2000001c 	.word	0x2000001c
 8004fa4:	20000020 	.word	0x20000020

08004fa8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004fa8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004fac:	b090      	sub	sp, #64	@ 0x40
 8004fae:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8004fb0:	2300      	movs	r3, #0
 8004fb2:	637b      	str	r3, [r7, #52]	@ 0x34
 8004fb4:	2300      	movs	r3, #0
 8004fb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004fb8:	2300      	movs	r3, #0
 8004fba:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 8004fbc:	2300      	movs	r3, #0
 8004fbe:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004fc0:	4b59      	ldr	r3, [pc, #356]	@ (8005128 <HAL_RCC_GetSysClockFreq+0x180>)
 8004fc2:	689b      	ldr	r3, [r3, #8]
 8004fc4:	f003 030c 	and.w	r3, r3, #12
 8004fc8:	2b08      	cmp	r3, #8
 8004fca:	d00d      	beq.n	8004fe8 <HAL_RCC_GetSysClockFreq+0x40>
 8004fcc:	2b08      	cmp	r3, #8
 8004fce:	f200 80a1 	bhi.w	8005114 <HAL_RCC_GetSysClockFreq+0x16c>
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d002      	beq.n	8004fdc <HAL_RCC_GetSysClockFreq+0x34>
 8004fd6:	2b04      	cmp	r3, #4
 8004fd8:	d003      	beq.n	8004fe2 <HAL_RCC_GetSysClockFreq+0x3a>
 8004fda:	e09b      	b.n	8005114 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004fdc:	4b53      	ldr	r3, [pc, #332]	@ (800512c <HAL_RCC_GetSysClockFreq+0x184>)
 8004fde:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004fe0:	e09b      	b.n	800511a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004fe2:	4b53      	ldr	r3, [pc, #332]	@ (8005130 <HAL_RCC_GetSysClockFreq+0x188>)
 8004fe4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004fe6:	e098      	b.n	800511a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004fe8:	4b4f      	ldr	r3, [pc, #316]	@ (8005128 <HAL_RCC_GetSysClockFreq+0x180>)
 8004fea:	685b      	ldr	r3, [r3, #4]
 8004fec:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004ff0:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8004ff2:	4b4d      	ldr	r3, [pc, #308]	@ (8005128 <HAL_RCC_GetSysClockFreq+0x180>)
 8004ff4:	685b      	ldr	r3, [r3, #4]
 8004ff6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d028      	beq.n	8005050 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004ffe:	4b4a      	ldr	r3, [pc, #296]	@ (8005128 <HAL_RCC_GetSysClockFreq+0x180>)
 8005000:	685b      	ldr	r3, [r3, #4]
 8005002:	099b      	lsrs	r3, r3, #6
 8005004:	2200      	movs	r2, #0
 8005006:	623b      	str	r3, [r7, #32]
 8005008:	627a      	str	r2, [r7, #36]	@ 0x24
 800500a:	6a3b      	ldr	r3, [r7, #32]
 800500c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8005010:	2100      	movs	r1, #0
 8005012:	4b47      	ldr	r3, [pc, #284]	@ (8005130 <HAL_RCC_GetSysClockFreq+0x188>)
 8005014:	fb03 f201 	mul.w	r2, r3, r1
 8005018:	2300      	movs	r3, #0
 800501a:	fb00 f303 	mul.w	r3, r0, r3
 800501e:	4413      	add	r3, r2
 8005020:	4a43      	ldr	r2, [pc, #268]	@ (8005130 <HAL_RCC_GetSysClockFreq+0x188>)
 8005022:	fba0 1202 	umull	r1, r2, r0, r2
 8005026:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005028:	460a      	mov	r2, r1
 800502a:	62ba      	str	r2, [r7, #40]	@ 0x28
 800502c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800502e:	4413      	add	r3, r2
 8005030:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005032:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005034:	2200      	movs	r2, #0
 8005036:	61bb      	str	r3, [r7, #24]
 8005038:	61fa      	str	r2, [r7, #28]
 800503a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800503e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8005042:	f7fb f8fd 	bl	8000240 <__aeabi_uldivmod>
 8005046:	4602      	mov	r2, r0
 8005048:	460b      	mov	r3, r1
 800504a:	4613      	mov	r3, r2
 800504c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800504e:	e053      	b.n	80050f8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005050:	4b35      	ldr	r3, [pc, #212]	@ (8005128 <HAL_RCC_GetSysClockFreq+0x180>)
 8005052:	685b      	ldr	r3, [r3, #4]
 8005054:	099b      	lsrs	r3, r3, #6
 8005056:	2200      	movs	r2, #0
 8005058:	613b      	str	r3, [r7, #16]
 800505a:	617a      	str	r2, [r7, #20]
 800505c:	693b      	ldr	r3, [r7, #16]
 800505e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8005062:	f04f 0b00 	mov.w	fp, #0
 8005066:	4652      	mov	r2, sl
 8005068:	465b      	mov	r3, fp
 800506a:	f04f 0000 	mov.w	r0, #0
 800506e:	f04f 0100 	mov.w	r1, #0
 8005072:	0159      	lsls	r1, r3, #5
 8005074:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005078:	0150      	lsls	r0, r2, #5
 800507a:	4602      	mov	r2, r0
 800507c:	460b      	mov	r3, r1
 800507e:	ebb2 080a 	subs.w	r8, r2, sl
 8005082:	eb63 090b 	sbc.w	r9, r3, fp
 8005086:	f04f 0200 	mov.w	r2, #0
 800508a:	f04f 0300 	mov.w	r3, #0
 800508e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8005092:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8005096:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800509a:	ebb2 0408 	subs.w	r4, r2, r8
 800509e:	eb63 0509 	sbc.w	r5, r3, r9
 80050a2:	f04f 0200 	mov.w	r2, #0
 80050a6:	f04f 0300 	mov.w	r3, #0
 80050aa:	00eb      	lsls	r3, r5, #3
 80050ac:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80050b0:	00e2      	lsls	r2, r4, #3
 80050b2:	4614      	mov	r4, r2
 80050b4:	461d      	mov	r5, r3
 80050b6:	eb14 030a 	adds.w	r3, r4, sl
 80050ba:	603b      	str	r3, [r7, #0]
 80050bc:	eb45 030b 	adc.w	r3, r5, fp
 80050c0:	607b      	str	r3, [r7, #4]
 80050c2:	f04f 0200 	mov.w	r2, #0
 80050c6:	f04f 0300 	mov.w	r3, #0
 80050ca:	e9d7 4500 	ldrd	r4, r5, [r7]
 80050ce:	4629      	mov	r1, r5
 80050d0:	028b      	lsls	r3, r1, #10
 80050d2:	4621      	mov	r1, r4
 80050d4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80050d8:	4621      	mov	r1, r4
 80050da:	028a      	lsls	r2, r1, #10
 80050dc:	4610      	mov	r0, r2
 80050de:	4619      	mov	r1, r3
 80050e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80050e2:	2200      	movs	r2, #0
 80050e4:	60bb      	str	r3, [r7, #8]
 80050e6:	60fa      	str	r2, [r7, #12]
 80050e8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80050ec:	f7fb f8a8 	bl	8000240 <__aeabi_uldivmod>
 80050f0:	4602      	mov	r2, r0
 80050f2:	460b      	mov	r3, r1
 80050f4:	4613      	mov	r3, r2
 80050f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80050f8:	4b0b      	ldr	r3, [pc, #44]	@ (8005128 <HAL_RCC_GetSysClockFreq+0x180>)
 80050fa:	685b      	ldr	r3, [r3, #4]
 80050fc:	0c1b      	lsrs	r3, r3, #16
 80050fe:	f003 0303 	and.w	r3, r3, #3
 8005102:	3301      	adds	r3, #1
 8005104:	005b      	lsls	r3, r3, #1
 8005106:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8005108:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800510a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800510c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005110:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8005112:	e002      	b.n	800511a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005114:	4b05      	ldr	r3, [pc, #20]	@ (800512c <HAL_RCC_GetSysClockFreq+0x184>)
 8005116:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8005118:	bf00      	nop
    }
  }
  return sysclockfreq;
 800511a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 800511c:	4618      	mov	r0, r3
 800511e:	3740      	adds	r7, #64	@ 0x40
 8005120:	46bd      	mov	sp, r7
 8005122:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005126:	bf00      	nop
 8005128:	40023800 	.word	0x40023800
 800512c:	00f42400 	.word	0x00f42400
 8005130:	017d7840 	.word	0x017d7840

08005134 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005134:	b480      	push	{r7}
 8005136:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005138:	4b03      	ldr	r3, [pc, #12]	@ (8005148 <HAL_RCC_GetHCLKFreq+0x14>)
 800513a:	681b      	ldr	r3, [r3, #0]
}
 800513c:	4618      	mov	r0, r3
 800513e:	46bd      	mov	sp, r7
 8005140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005144:	4770      	bx	lr
 8005146:	bf00      	nop
 8005148:	2000001c 	.word	0x2000001c

0800514c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800514c:	b580      	push	{r7, lr}
 800514e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005150:	f7ff fff0 	bl	8005134 <HAL_RCC_GetHCLKFreq>
 8005154:	4602      	mov	r2, r0
 8005156:	4b05      	ldr	r3, [pc, #20]	@ (800516c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005158:	689b      	ldr	r3, [r3, #8]
 800515a:	0a9b      	lsrs	r3, r3, #10
 800515c:	f003 0307 	and.w	r3, r3, #7
 8005160:	4903      	ldr	r1, [pc, #12]	@ (8005170 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005162:	5ccb      	ldrb	r3, [r1, r3]
 8005164:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005168:	4618      	mov	r0, r3
 800516a:	bd80      	pop	{r7, pc}
 800516c:	40023800 	.word	0x40023800
 8005170:	08009930 	.word	0x08009930

08005174 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005174:	b480      	push	{r7}
 8005176:	b083      	sub	sp, #12
 8005178:	af00      	add	r7, sp, #0
 800517a:	6078      	str	r0, [r7, #4]
 800517c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	220f      	movs	r2, #15
 8005182:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005184:	4b12      	ldr	r3, [pc, #72]	@ (80051d0 <HAL_RCC_GetClockConfig+0x5c>)
 8005186:	689b      	ldr	r3, [r3, #8]
 8005188:	f003 0203 	and.w	r2, r3, #3
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005190:	4b0f      	ldr	r3, [pc, #60]	@ (80051d0 <HAL_RCC_GetClockConfig+0x5c>)
 8005192:	689b      	ldr	r3, [r3, #8]
 8005194:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800519c:	4b0c      	ldr	r3, [pc, #48]	@ (80051d0 <HAL_RCC_GetClockConfig+0x5c>)
 800519e:	689b      	ldr	r3, [r3, #8]
 80051a0:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80051a8:	4b09      	ldr	r3, [pc, #36]	@ (80051d0 <HAL_RCC_GetClockConfig+0x5c>)
 80051aa:	689b      	ldr	r3, [r3, #8]
 80051ac:	08db      	lsrs	r3, r3, #3
 80051ae:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80051b6:	4b07      	ldr	r3, [pc, #28]	@ (80051d4 <HAL_RCC_GetClockConfig+0x60>)
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	f003 020f 	and.w	r2, r3, #15
 80051be:	683b      	ldr	r3, [r7, #0]
 80051c0:	601a      	str	r2, [r3, #0]
}
 80051c2:	bf00      	nop
 80051c4:	370c      	adds	r7, #12
 80051c6:	46bd      	mov	sp, r7
 80051c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051cc:	4770      	bx	lr
 80051ce:	bf00      	nop
 80051d0:	40023800 	.word	0x40023800
 80051d4:	40023c00 	.word	0x40023c00

080051d8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80051d8:	b580      	push	{r7, lr}
 80051da:	b082      	sub	sp, #8
 80051dc:	af00      	add	r7, sp, #0
 80051de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d101      	bne.n	80051ea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80051e6:	2301      	movs	r3, #1
 80051e8:	e049      	b.n	800527e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80051f0:	b2db      	uxtb	r3, r3
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d106      	bne.n	8005204 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	2200      	movs	r2, #0
 80051fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80051fe:	6878      	ldr	r0, [r7, #4]
 8005200:	f7fd f964 	bl	80024cc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	2202      	movs	r2, #2
 8005208:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681a      	ldr	r2, [r3, #0]
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	3304      	adds	r3, #4
 8005214:	4619      	mov	r1, r3
 8005216:	4610      	mov	r0, r2
 8005218:	f001 f818 	bl	800624c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2201      	movs	r2, #1
 8005220:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	2201      	movs	r2, #1
 8005228:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	2201      	movs	r2, #1
 8005230:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	2201      	movs	r2, #1
 8005238:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	2201      	movs	r2, #1
 8005240:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	2201      	movs	r2, #1
 8005248:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	2201      	movs	r2, #1
 8005250:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	2201      	movs	r2, #1
 8005258:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	2201      	movs	r2, #1
 8005260:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	2201      	movs	r2, #1
 8005268:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	2201      	movs	r2, #1
 8005270:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	2201      	movs	r2, #1
 8005278:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800527c:	2300      	movs	r3, #0
}
 800527e:	4618      	mov	r0, r3
 8005280:	3708      	adds	r7, #8
 8005282:	46bd      	mov	sp, r7
 8005284:	bd80      	pop	{r7, pc}
	...

08005288 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005288:	b480      	push	{r7}
 800528a:	b085      	sub	sp, #20
 800528c:	af00      	add	r7, sp, #0
 800528e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005296:	b2db      	uxtb	r3, r3
 8005298:	2b01      	cmp	r3, #1
 800529a:	d001      	beq.n	80052a0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800529c:	2301      	movs	r3, #1
 800529e:	e054      	b.n	800534a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	2202      	movs	r2, #2
 80052a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	68da      	ldr	r2, [r3, #12]
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	f042 0201 	orr.w	r2, r2, #1
 80052b6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	4a26      	ldr	r2, [pc, #152]	@ (8005358 <HAL_TIM_Base_Start_IT+0xd0>)
 80052be:	4293      	cmp	r3, r2
 80052c0:	d022      	beq.n	8005308 <HAL_TIM_Base_Start_IT+0x80>
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80052ca:	d01d      	beq.n	8005308 <HAL_TIM_Base_Start_IT+0x80>
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	4a22      	ldr	r2, [pc, #136]	@ (800535c <HAL_TIM_Base_Start_IT+0xd4>)
 80052d2:	4293      	cmp	r3, r2
 80052d4:	d018      	beq.n	8005308 <HAL_TIM_Base_Start_IT+0x80>
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	4a21      	ldr	r2, [pc, #132]	@ (8005360 <HAL_TIM_Base_Start_IT+0xd8>)
 80052dc:	4293      	cmp	r3, r2
 80052de:	d013      	beq.n	8005308 <HAL_TIM_Base_Start_IT+0x80>
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	4a1f      	ldr	r2, [pc, #124]	@ (8005364 <HAL_TIM_Base_Start_IT+0xdc>)
 80052e6:	4293      	cmp	r3, r2
 80052e8:	d00e      	beq.n	8005308 <HAL_TIM_Base_Start_IT+0x80>
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	4a1e      	ldr	r2, [pc, #120]	@ (8005368 <HAL_TIM_Base_Start_IT+0xe0>)
 80052f0:	4293      	cmp	r3, r2
 80052f2:	d009      	beq.n	8005308 <HAL_TIM_Base_Start_IT+0x80>
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	4a1c      	ldr	r2, [pc, #112]	@ (800536c <HAL_TIM_Base_Start_IT+0xe4>)
 80052fa:	4293      	cmp	r3, r2
 80052fc:	d004      	beq.n	8005308 <HAL_TIM_Base_Start_IT+0x80>
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	4a1b      	ldr	r2, [pc, #108]	@ (8005370 <HAL_TIM_Base_Start_IT+0xe8>)
 8005304:	4293      	cmp	r3, r2
 8005306:	d115      	bne.n	8005334 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	689a      	ldr	r2, [r3, #8]
 800530e:	4b19      	ldr	r3, [pc, #100]	@ (8005374 <HAL_TIM_Base_Start_IT+0xec>)
 8005310:	4013      	ands	r3, r2
 8005312:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	2b06      	cmp	r3, #6
 8005318:	d015      	beq.n	8005346 <HAL_TIM_Base_Start_IT+0xbe>
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005320:	d011      	beq.n	8005346 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	681a      	ldr	r2, [r3, #0]
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	f042 0201 	orr.w	r2, r2, #1
 8005330:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005332:	e008      	b.n	8005346 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	681a      	ldr	r2, [r3, #0]
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	f042 0201 	orr.w	r2, r2, #1
 8005342:	601a      	str	r2, [r3, #0]
 8005344:	e000      	b.n	8005348 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005346:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005348:	2300      	movs	r3, #0
}
 800534a:	4618      	mov	r0, r3
 800534c:	3714      	adds	r7, #20
 800534e:	46bd      	mov	sp, r7
 8005350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005354:	4770      	bx	lr
 8005356:	bf00      	nop
 8005358:	40010000 	.word	0x40010000
 800535c:	40000400 	.word	0x40000400
 8005360:	40000800 	.word	0x40000800
 8005364:	40000c00 	.word	0x40000c00
 8005368:	40010400 	.word	0x40010400
 800536c:	40014000 	.word	0x40014000
 8005370:	40001800 	.word	0x40001800
 8005374:	00010007 	.word	0x00010007

08005378 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8005378:	b580      	push	{r7, lr}
 800537a:	b082      	sub	sp, #8
 800537c:	af00      	add	r7, sp, #0
 800537e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	2b00      	cmp	r3, #0
 8005384:	d101      	bne.n	800538a <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8005386:	2301      	movs	r3, #1
 8005388:	e049      	b.n	800541e <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005390:	b2db      	uxtb	r3, r3
 8005392:	2b00      	cmp	r3, #0
 8005394:	d106      	bne.n	80053a4 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	2200      	movs	r2, #0
 800539a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800539e:	6878      	ldr	r0, [r7, #4]
 80053a0:	f000 f841 	bl	8005426 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	2202      	movs	r2, #2
 80053a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681a      	ldr	r2, [r3, #0]
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	3304      	adds	r3, #4
 80053b4:	4619      	mov	r1, r3
 80053b6:	4610      	mov	r0, r2
 80053b8:	f000 ff48 	bl	800624c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	2201      	movs	r2, #1
 80053c0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	2201      	movs	r2, #1
 80053c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	2201      	movs	r2, #1
 80053d0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	2201      	movs	r2, #1
 80053d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	2201      	movs	r2, #1
 80053e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	2201      	movs	r2, #1
 80053e8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	2201      	movs	r2, #1
 80053f0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	2201      	movs	r2, #1
 80053f8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	2201      	movs	r2, #1
 8005400:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	2201      	movs	r2, #1
 8005408:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	2201      	movs	r2, #1
 8005410:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	2201      	movs	r2, #1
 8005418:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800541c:	2300      	movs	r3, #0
}
 800541e:	4618      	mov	r0, r3
 8005420:	3708      	adds	r7, #8
 8005422:	46bd      	mov	sp, r7
 8005424:	bd80      	pop	{r7, pc}

08005426 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8005426:	b480      	push	{r7}
 8005428:	b083      	sub	sp, #12
 800542a:	af00      	add	r7, sp, #0
 800542c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 800542e:	bf00      	nop
 8005430:	370c      	adds	r7, #12
 8005432:	46bd      	mov	sp, r7
 8005434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005438:	4770      	bx	lr
	...

0800543c <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800543c:	b580      	push	{r7, lr}
 800543e:	b084      	sub	sp, #16
 8005440:	af00      	add	r7, sp, #0
 8005442:	6078      	str	r0, [r7, #4]
 8005444:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005446:	2300      	movs	r3, #0
 8005448:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800544a:	683b      	ldr	r3, [r7, #0]
 800544c:	2b00      	cmp	r3, #0
 800544e:	d109      	bne.n	8005464 <HAL_TIM_OC_Start_IT+0x28>
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005456:	b2db      	uxtb	r3, r3
 8005458:	2b01      	cmp	r3, #1
 800545a:	bf14      	ite	ne
 800545c:	2301      	movne	r3, #1
 800545e:	2300      	moveq	r3, #0
 8005460:	b2db      	uxtb	r3, r3
 8005462:	e03c      	b.n	80054de <HAL_TIM_OC_Start_IT+0xa2>
 8005464:	683b      	ldr	r3, [r7, #0]
 8005466:	2b04      	cmp	r3, #4
 8005468:	d109      	bne.n	800547e <HAL_TIM_OC_Start_IT+0x42>
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005470:	b2db      	uxtb	r3, r3
 8005472:	2b01      	cmp	r3, #1
 8005474:	bf14      	ite	ne
 8005476:	2301      	movne	r3, #1
 8005478:	2300      	moveq	r3, #0
 800547a:	b2db      	uxtb	r3, r3
 800547c:	e02f      	b.n	80054de <HAL_TIM_OC_Start_IT+0xa2>
 800547e:	683b      	ldr	r3, [r7, #0]
 8005480:	2b08      	cmp	r3, #8
 8005482:	d109      	bne.n	8005498 <HAL_TIM_OC_Start_IT+0x5c>
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800548a:	b2db      	uxtb	r3, r3
 800548c:	2b01      	cmp	r3, #1
 800548e:	bf14      	ite	ne
 8005490:	2301      	movne	r3, #1
 8005492:	2300      	moveq	r3, #0
 8005494:	b2db      	uxtb	r3, r3
 8005496:	e022      	b.n	80054de <HAL_TIM_OC_Start_IT+0xa2>
 8005498:	683b      	ldr	r3, [r7, #0]
 800549a:	2b0c      	cmp	r3, #12
 800549c:	d109      	bne.n	80054b2 <HAL_TIM_OC_Start_IT+0x76>
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80054a4:	b2db      	uxtb	r3, r3
 80054a6:	2b01      	cmp	r3, #1
 80054a8:	bf14      	ite	ne
 80054aa:	2301      	movne	r3, #1
 80054ac:	2300      	moveq	r3, #0
 80054ae:	b2db      	uxtb	r3, r3
 80054b0:	e015      	b.n	80054de <HAL_TIM_OC_Start_IT+0xa2>
 80054b2:	683b      	ldr	r3, [r7, #0]
 80054b4:	2b10      	cmp	r3, #16
 80054b6:	d109      	bne.n	80054cc <HAL_TIM_OC_Start_IT+0x90>
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80054be:	b2db      	uxtb	r3, r3
 80054c0:	2b01      	cmp	r3, #1
 80054c2:	bf14      	ite	ne
 80054c4:	2301      	movne	r3, #1
 80054c6:	2300      	moveq	r3, #0
 80054c8:	b2db      	uxtb	r3, r3
 80054ca:	e008      	b.n	80054de <HAL_TIM_OC_Start_IT+0xa2>
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80054d2:	b2db      	uxtb	r3, r3
 80054d4:	2b01      	cmp	r3, #1
 80054d6:	bf14      	ite	ne
 80054d8:	2301      	movne	r3, #1
 80054da:	2300      	moveq	r3, #0
 80054dc:	b2db      	uxtb	r3, r3
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d001      	beq.n	80054e6 <HAL_TIM_OC_Start_IT+0xaa>
  {
    return HAL_ERROR;
 80054e2:	2301      	movs	r3, #1
 80054e4:	e0dd      	b.n	80056a2 <HAL_TIM_OC_Start_IT+0x266>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80054e6:	683b      	ldr	r3, [r7, #0]
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d104      	bne.n	80054f6 <HAL_TIM_OC_Start_IT+0xba>
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	2202      	movs	r2, #2
 80054f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80054f4:	e023      	b.n	800553e <HAL_TIM_OC_Start_IT+0x102>
 80054f6:	683b      	ldr	r3, [r7, #0]
 80054f8:	2b04      	cmp	r3, #4
 80054fa:	d104      	bne.n	8005506 <HAL_TIM_OC_Start_IT+0xca>
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	2202      	movs	r2, #2
 8005500:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005504:	e01b      	b.n	800553e <HAL_TIM_OC_Start_IT+0x102>
 8005506:	683b      	ldr	r3, [r7, #0]
 8005508:	2b08      	cmp	r3, #8
 800550a:	d104      	bne.n	8005516 <HAL_TIM_OC_Start_IT+0xda>
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	2202      	movs	r2, #2
 8005510:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005514:	e013      	b.n	800553e <HAL_TIM_OC_Start_IT+0x102>
 8005516:	683b      	ldr	r3, [r7, #0]
 8005518:	2b0c      	cmp	r3, #12
 800551a:	d104      	bne.n	8005526 <HAL_TIM_OC_Start_IT+0xea>
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	2202      	movs	r2, #2
 8005520:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005524:	e00b      	b.n	800553e <HAL_TIM_OC_Start_IT+0x102>
 8005526:	683b      	ldr	r3, [r7, #0]
 8005528:	2b10      	cmp	r3, #16
 800552a:	d104      	bne.n	8005536 <HAL_TIM_OC_Start_IT+0xfa>
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	2202      	movs	r2, #2
 8005530:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005534:	e003      	b.n	800553e <HAL_TIM_OC_Start_IT+0x102>
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	2202      	movs	r2, #2
 800553a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  switch (Channel)
 800553e:	683b      	ldr	r3, [r7, #0]
 8005540:	2b0c      	cmp	r3, #12
 8005542:	d841      	bhi.n	80055c8 <HAL_TIM_OC_Start_IT+0x18c>
 8005544:	a201      	add	r2, pc, #4	@ (adr r2, 800554c <HAL_TIM_OC_Start_IT+0x110>)
 8005546:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800554a:	bf00      	nop
 800554c:	08005581 	.word	0x08005581
 8005550:	080055c9 	.word	0x080055c9
 8005554:	080055c9 	.word	0x080055c9
 8005558:	080055c9 	.word	0x080055c9
 800555c:	08005593 	.word	0x08005593
 8005560:	080055c9 	.word	0x080055c9
 8005564:	080055c9 	.word	0x080055c9
 8005568:	080055c9 	.word	0x080055c9
 800556c:	080055a5 	.word	0x080055a5
 8005570:	080055c9 	.word	0x080055c9
 8005574:	080055c9 	.word	0x080055c9
 8005578:	080055c9 	.word	0x080055c9
 800557c:	080055b7 	.word	0x080055b7
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	68da      	ldr	r2, [r3, #12]
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	f042 0202 	orr.w	r2, r2, #2
 800558e:	60da      	str	r2, [r3, #12]
      break;
 8005590:	e01d      	b.n	80055ce <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	68da      	ldr	r2, [r3, #12]
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	f042 0204 	orr.w	r2, r2, #4
 80055a0:	60da      	str	r2, [r3, #12]
      break;
 80055a2:	e014      	b.n	80055ce <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	68da      	ldr	r2, [r3, #12]
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	f042 0208 	orr.w	r2, r2, #8
 80055b2:	60da      	str	r2, [r3, #12]
      break;
 80055b4:	e00b      	b.n	80055ce <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	68da      	ldr	r2, [r3, #12]
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	f042 0210 	orr.w	r2, r2, #16
 80055c4:	60da      	str	r2, [r3, #12]
      break;
 80055c6:	e002      	b.n	80055ce <HAL_TIM_OC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 80055c8:	2301      	movs	r3, #1
 80055ca:	73fb      	strb	r3, [r7, #15]
      break;
 80055cc:	bf00      	nop
  }

  if (status == HAL_OK)
 80055ce:	7bfb      	ldrb	r3, [r7, #15]
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d165      	bne.n	80056a0 <HAL_TIM_OC_Start_IT+0x264>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	2201      	movs	r2, #1
 80055da:	6839      	ldr	r1, [r7, #0]
 80055dc:	4618      	mov	r0, r3
 80055de:	f001 f9cd 	bl	800697c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	4a31      	ldr	r2, [pc, #196]	@ (80056ac <HAL_TIM_OC_Start_IT+0x270>)
 80055e8:	4293      	cmp	r3, r2
 80055ea:	d004      	beq.n	80055f6 <HAL_TIM_OC_Start_IT+0x1ba>
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	4a2f      	ldr	r2, [pc, #188]	@ (80056b0 <HAL_TIM_OC_Start_IT+0x274>)
 80055f2:	4293      	cmp	r3, r2
 80055f4:	d101      	bne.n	80055fa <HAL_TIM_OC_Start_IT+0x1be>
 80055f6:	2301      	movs	r3, #1
 80055f8:	e000      	b.n	80055fc <HAL_TIM_OC_Start_IT+0x1c0>
 80055fa:	2300      	movs	r3, #0
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d007      	beq.n	8005610 <HAL_TIM_OC_Start_IT+0x1d4>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800560e:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	4a25      	ldr	r2, [pc, #148]	@ (80056ac <HAL_TIM_OC_Start_IT+0x270>)
 8005616:	4293      	cmp	r3, r2
 8005618:	d022      	beq.n	8005660 <HAL_TIM_OC_Start_IT+0x224>
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005622:	d01d      	beq.n	8005660 <HAL_TIM_OC_Start_IT+0x224>
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	4a22      	ldr	r2, [pc, #136]	@ (80056b4 <HAL_TIM_OC_Start_IT+0x278>)
 800562a:	4293      	cmp	r3, r2
 800562c:	d018      	beq.n	8005660 <HAL_TIM_OC_Start_IT+0x224>
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	4a21      	ldr	r2, [pc, #132]	@ (80056b8 <HAL_TIM_OC_Start_IT+0x27c>)
 8005634:	4293      	cmp	r3, r2
 8005636:	d013      	beq.n	8005660 <HAL_TIM_OC_Start_IT+0x224>
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	4a1f      	ldr	r2, [pc, #124]	@ (80056bc <HAL_TIM_OC_Start_IT+0x280>)
 800563e:	4293      	cmp	r3, r2
 8005640:	d00e      	beq.n	8005660 <HAL_TIM_OC_Start_IT+0x224>
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	4a1a      	ldr	r2, [pc, #104]	@ (80056b0 <HAL_TIM_OC_Start_IT+0x274>)
 8005648:	4293      	cmp	r3, r2
 800564a:	d009      	beq.n	8005660 <HAL_TIM_OC_Start_IT+0x224>
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	4a1b      	ldr	r2, [pc, #108]	@ (80056c0 <HAL_TIM_OC_Start_IT+0x284>)
 8005652:	4293      	cmp	r3, r2
 8005654:	d004      	beq.n	8005660 <HAL_TIM_OC_Start_IT+0x224>
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	4a1a      	ldr	r2, [pc, #104]	@ (80056c4 <HAL_TIM_OC_Start_IT+0x288>)
 800565c:	4293      	cmp	r3, r2
 800565e:	d115      	bne.n	800568c <HAL_TIM_OC_Start_IT+0x250>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	689a      	ldr	r2, [r3, #8]
 8005666:	4b18      	ldr	r3, [pc, #96]	@ (80056c8 <HAL_TIM_OC_Start_IT+0x28c>)
 8005668:	4013      	ands	r3, r2
 800566a:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800566c:	68bb      	ldr	r3, [r7, #8]
 800566e:	2b06      	cmp	r3, #6
 8005670:	d015      	beq.n	800569e <HAL_TIM_OC_Start_IT+0x262>
 8005672:	68bb      	ldr	r3, [r7, #8]
 8005674:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005678:	d011      	beq.n	800569e <HAL_TIM_OC_Start_IT+0x262>
      {
        __HAL_TIM_ENABLE(htim);
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	681a      	ldr	r2, [r3, #0]
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	f042 0201 	orr.w	r2, r2, #1
 8005688:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800568a:	e008      	b.n	800569e <HAL_TIM_OC_Start_IT+0x262>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	681a      	ldr	r2, [r3, #0]
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	f042 0201 	orr.w	r2, r2, #1
 800569a:	601a      	str	r2, [r3, #0]
 800569c:	e000      	b.n	80056a0 <HAL_TIM_OC_Start_IT+0x264>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800569e:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 80056a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80056a2:	4618      	mov	r0, r3
 80056a4:	3710      	adds	r7, #16
 80056a6:	46bd      	mov	sp, r7
 80056a8:	bd80      	pop	{r7, pc}
 80056aa:	bf00      	nop
 80056ac:	40010000 	.word	0x40010000
 80056b0:	40010400 	.word	0x40010400
 80056b4:	40000400 	.word	0x40000400
 80056b8:	40000800 	.word	0x40000800
 80056bc:	40000c00 	.word	0x40000c00
 80056c0:	40014000 	.word	0x40014000
 80056c4:	40001800 	.word	0x40001800
 80056c8:	00010007 	.word	0x00010007

080056cc <HAL_TIM_OC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80056cc:	b580      	push	{r7, lr}
 80056ce:	b084      	sub	sp, #16
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	6078      	str	r0, [r7, #4]
 80056d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80056d6:	2300      	movs	r3, #0
 80056d8:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 80056da:	683b      	ldr	r3, [r7, #0]
 80056dc:	2b0c      	cmp	r3, #12
 80056de:	d841      	bhi.n	8005764 <HAL_TIM_OC_Stop_IT+0x98>
 80056e0:	a201      	add	r2, pc, #4	@ (adr r2, 80056e8 <HAL_TIM_OC_Stop_IT+0x1c>)
 80056e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056e6:	bf00      	nop
 80056e8:	0800571d 	.word	0x0800571d
 80056ec:	08005765 	.word	0x08005765
 80056f0:	08005765 	.word	0x08005765
 80056f4:	08005765 	.word	0x08005765
 80056f8:	0800572f 	.word	0x0800572f
 80056fc:	08005765 	.word	0x08005765
 8005700:	08005765 	.word	0x08005765
 8005704:	08005765 	.word	0x08005765
 8005708:	08005741 	.word	0x08005741
 800570c:	08005765 	.word	0x08005765
 8005710:	08005765 	.word	0x08005765
 8005714:	08005765 	.word	0x08005765
 8005718:	08005753 	.word	0x08005753
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	68da      	ldr	r2, [r3, #12]
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	f022 0202 	bic.w	r2, r2, #2
 800572a:	60da      	str	r2, [r3, #12]
      break;
 800572c:	e01d      	b.n	800576a <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	68da      	ldr	r2, [r3, #12]
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	f022 0204 	bic.w	r2, r2, #4
 800573c:	60da      	str	r2, [r3, #12]
      break;
 800573e:	e014      	b.n	800576a <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	68da      	ldr	r2, [r3, #12]
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	f022 0208 	bic.w	r2, r2, #8
 800574e:	60da      	str	r2, [r3, #12]
      break;
 8005750:	e00b      	b.n	800576a <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	68da      	ldr	r2, [r3, #12]
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	f022 0210 	bic.w	r2, r2, #16
 8005760:	60da      	str	r2, [r3, #12]
      break;
 8005762:	e002      	b.n	800576a <HAL_TIM_OC_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 8005764:	2301      	movs	r3, #1
 8005766:	73fb      	strb	r3, [r7, #15]
      break;
 8005768:	bf00      	nop
  }

  if (status == HAL_OK)
 800576a:	7bfb      	ldrb	r3, [r7, #15]
 800576c:	2b00      	cmp	r3, #0
 800576e:	d171      	bne.n	8005854 <HAL_TIM_OC_Stop_IT+0x188>
  {
    /* Disable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	2200      	movs	r2, #0
 8005776:	6839      	ldr	r1, [r7, #0]
 8005778:	4618      	mov	r0, r3
 800577a:	f001 f8ff 	bl	800697c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	4a37      	ldr	r2, [pc, #220]	@ (8005860 <HAL_TIM_OC_Stop_IT+0x194>)
 8005784:	4293      	cmp	r3, r2
 8005786:	d004      	beq.n	8005792 <HAL_TIM_OC_Stop_IT+0xc6>
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	4a35      	ldr	r2, [pc, #212]	@ (8005864 <HAL_TIM_OC_Stop_IT+0x198>)
 800578e:	4293      	cmp	r3, r2
 8005790:	d101      	bne.n	8005796 <HAL_TIM_OC_Stop_IT+0xca>
 8005792:	2301      	movs	r3, #1
 8005794:	e000      	b.n	8005798 <HAL_TIM_OC_Stop_IT+0xcc>
 8005796:	2300      	movs	r3, #0
 8005798:	2b00      	cmp	r3, #0
 800579a:	d017      	beq.n	80057cc <HAL_TIM_OC_Stop_IT+0x100>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	6a1a      	ldr	r2, [r3, #32]
 80057a2:	f241 1311 	movw	r3, #4369	@ 0x1111
 80057a6:	4013      	ands	r3, r2
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d10f      	bne.n	80057cc <HAL_TIM_OC_Stop_IT+0x100>
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	6a1a      	ldr	r2, [r3, #32]
 80057b2:	f240 4344 	movw	r3, #1092	@ 0x444
 80057b6:	4013      	ands	r3, r2
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d107      	bne.n	80057cc <HAL_TIM_OC_Stop_IT+0x100>
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80057ca:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	6a1a      	ldr	r2, [r3, #32]
 80057d2:	f241 1311 	movw	r3, #4369	@ 0x1111
 80057d6:	4013      	ands	r3, r2
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d10f      	bne.n	80057fc <HAL_TIM_OC_Stop_IT+0x130>
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	6a1a      	ldr	r2, [r3, #32]
 80057e2:	f240 4344 	movw	r3, #1092	@ 0x444
 80057e6:	4013      	ands	r3, r2
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d107      	bne.n	80057fc <HAL_TIM_OC_Stop_IT+0x130>
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	681a      	ldr	r2, [r3, #0]
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	f022 0201 	bic.w	r2, r2, #1
 80057fa:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80057fc:	683b      	ldr	r3, [r7, #0]
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d104      	bne.n	800580c <HAL_TIM_OC_Stop_IT+0x140>
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	2201      	movs	r2, #1
 8005806:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800580a:	e023      	b.n	8005854 <HAL_TIM_OC_Stop_IT+0x188>
 800580c:	683b      	ldr	r3, [r7, #0]
 800580e:	2b04      	cmp	r3, #4
 8005810:	d104      	bne.n	800581c <HAL_TIM_OC_Stop_IT+0x150>
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	2201      	movs	r2, #1
 8005816:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800581a:	e01b      	b.n	8005854 <HAL_TIM_OC_Stop_IT+0x188>
 800581c:	683b      	ldr	r3, [r7, #0]
 800581e:	2b08      	cmp	r3, #8
 8005820:	d104      	bne.n	800582c <HAL_TIM_OC_Stop_IT+0x160>
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	2201      	movs	r2, #1
 8005826:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800582a:	e013      	b.n	8005854 <HAL_TIM_OC_Stop_IT+0x188>
 800582c:	683b      	ldr	r3, [r7, #0]
 800582e:	2b0c      	cmp	r3, #12
 8005830:	d104      	bne.n	800583c <HAL_TIM_OC_Stop_IT+0x170>
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	2201      	movs	r2, #1
 8005836:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800583a:	e00b      	b.n	8005854 <HAL_TIM_OC_Stop_IT+0x188>
 800583c:	683b      	ldr	r3, [r7, #0]
 800583e:	2b10      	cmp	r3, #16
 8005840:	d104      	bne.n	800584c <HAL_TIM_OC_Stop_IT+0x180>
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	2201      	movs	r2, #1
 8005846:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800584a:	e003      	b.n	8005854 <HAL_TIM_OC_Stop_IT+0x188>
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	2201      	movs	r2, #1
 8005850:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  }

  /* Return function status */
  return status;
 8005854:	7bfb      	ldrb	r3, [r7, #15]
}
 8005856:	4618      	mov	r0, r3
 8005858:	3710      	adds	r7, #16
 800585a:	46bd      	mov	sp, r7
 800585c:	bd80      	pop	{r7, pc}
 800585e:	bf00      	nop
 8005860:	40010000 	.word	0x40010000
 8005864:	40010400 	.word	0x40010400

08005868 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005868:	b580      	push	{r7, lr}
 800586a:	b082      	sub	sp, #8
 800586c:	af00      	add	r7, sp, #0
 800586e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	2b00      	cmp	r3, #0
 8005874:	d101      	bne.n	800587a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005876:	2301      	movs	r3, #1
 8005878:	e049      	b.n	800590e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005880:	b2db      	uxtb	r3, r3
 8005882:	2b00      	cmp	r3, #0
 8005884:	d106      	bne.n	8005894 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	2200      	movs	r2, #0
 800588a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800588e:	6878      	ldr	r0, [r7, #4]
 8005890:	f000 f841 	bl	8005916 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	2202      	movs	r2, #2
 8005898:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681a      	ldr	r2, [r3, #0]
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	3304      	adds	r3, #4
 80058a4:	4619      	mov	r1, r3
 80058a6:	4610      	mov	r0, r2
 80058a8:	f000 fcd0 	bl	800624c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	2201      	movs	r2, #1
 80058b0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	2201      	movs	r2, #1
 80058b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	2201      	movs	r2, #1
 80058c0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	2201      	movs	r2, #1
 80058c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	2201      	movs	r2, #1
 80058d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	2201      	movs	r2, #1
 80058d8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	2201      	movs	r2, #1
 80058e0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	2201      	movs	r2, #1
 80058e8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	2201      	movs	r2, #1
 80058f0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	2201      	movs	r2, #1
 80058f8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	2201      	movs	r2, #1
 8005900:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	2201      	movs	r2, #1
 8005908:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800590c:	2300      	movs	r3, #0
}
 800590e:	4618      	mov	r0, r3
 8005910:	3708      	adds	r7, #8
 8005912:	46bd      	mov	sp, r7
 8005914:	bd80      	pop	{r7, pc}

08005916 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005916:	b480      	push	{r7}
 8005918:	b083      	sub	sp, #12
 800591a:	af00      	add	r7, sp, #0
 800591c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800591e:	bf00      	nop
 8005920:	370c      	adds	r7, #12
 8005922:	46bd      	mov	sp, r7
 8005924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005928:	4770      	bx	lr
	...

0800592c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800592c:	b580      	push	{r7, lr}
 800592e:	b084      	sub	sp, #16
 8005930:	af00      	add	r7, sp, #0
 8005932:	6078      	str	r0, [r7, #4]
 8005934:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005936:	683b      	ldr	r3, [r7, #0]
 8005938:	2b00      	cmp	r3, #0
 800593a:	d109      	bne.n	8005950 <HAL_TIM_PWM_Start+0x24>
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005942:	b2db      	uxtb	r3, r3
 8005944:	2b01      	cmp	r3, #1
 8005946:	bf14      	ite	ne
 8005948:	2301      	movne	r3, #1
 800594a:	2300      	moveq	r3, #0
 800594c:	b2db      	uxtb	r3, r3
 800594e:	e03c      	b.n	80059ca <HAL_TIM_PWM_Start+0x9e>
 8005950:	683b      	ldr	r3, [r7, #0]
 8005952:	2b04      	cmp	r3, #4
 8005954:	d109      	bne.n	800596a <HAL_TIM_PWM_Start+0x3e>
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800595c:	b2db      	uxtb	r3, r3
 800595e:	2b01      	cmp	r3, #1
 8005960:	bf14      	ite	ne
 8005962:	2301      	movne	r3, #1
 8005964:	2300      	moveq	r3, #0
 8005966:	b2db      	uxtb	r3, r3
 8005968:	e02f      	b.n	80059ca <HAL_TIM_PWM_Start+0x9e>
 800596a:	683b      	ldr	r3, [r7, #0]
 800596c:	2b08      	cmp	r3, #8
 800596e:	d109      	bne.n	8005984 <HAL_TIM_PWM_Start+0x58>
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005976:	b2db      	uxtb	r3, r3
 8005978:	2b01      	cmp	r3, #1
 800597a:	bf14      	ite	ne
 800597c:	2301      	movne	r3, #1
 800597e:	2300      	moveq	r3, #0
 8005980:	b2db      	uxtb	r3, r3
 8005982:	e022      	b.n	80059ca <HAL_TIM_PWM_Start+0x9e>
 8005984:	683b      	ldr	r3, [r7, #0]
 8005986:	2b0c      	cmp	r3, #12
 8005988:	d109      	bne.n	800599e <HAL_TIM_PWM_Start+0x72>
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005990:	b2db      	uxtb	r3, r3
 8005992:	2b01      	cmp	r3, #1
 8005994:	bf14      	ite	ne
 8005996:	2301      	movne	r3, #1
 8005998:	2300      	moveq	r3, #0
 800599a:	b2db      	uxtb	r3, r3
 800599c:	e015      	b.n	80059ca <HAL_TIM_PWM_Start+0x9e>
 800599e:	683b      	ldr	r3, [r7, #0]
 80059a0:	2b10      	cmp	r3, #16
 80059a2:	d109      	bne.n	80059b8 <HAL_TIM_PWM_Start+0x8c>
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80059aa:	b2db      	uxtb	r3, r3
 80059ac:	2b01      	cmp	r3, #1
 80059ae:	bf14      	ite	ne
 80059b0:	2301      	movne	r3, #1
 80059b2:	2300      	moveq	r3, #0
 80059b4:	b2db      	uxtb	r3, r3
 80059b6:	e008      	b.n	80059ca <HAL_TIM_PWM_Start+0x9e>
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80059be:	b2db      	uxtb	r3, r3
 80059c0:	2b01      	cmp	r3, #1
 80059c2:	bf14      	ite	ne
 80059c4:	2301      	movne	r3, #1
 80059c6:	2300      	moveq	r3, #0
 80059c8:	b2db      	uxtb	r3, r3
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d001      	beq.n	80059d2 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80059ce:	2301      	movs	r3, #1
 80059d0:	e092      	b.n	8005af8 <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80059d2:	683b      	ldr	r3, [r7, #0]
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d104      	bne.n	80059e2 <HAL_TIM_PWM_Start+0xb6>
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	2202      	movs	r2, #2
 80059dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80059e0:	e023      	b.n	8005a2a <HAL_TIM_PWM_Start+0xfe>
 80059e2:	683b      	ldr	r3, [r7, #0]
 80059e4:	2b04      	cmp	r3, #4
 80059e6:	d104      	bne.n	80059f2 <HAL_TIM_PWM_Start+0xc6>
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	2202      	movs	r2, #2
 80059ec:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80059f0:	e01b      	b.n	8005a2a <HAL_TIM_PWM_Start+0xfe>
 80059f2:	683b      	ldr	r3, [r7, #0]
 80059f4:	2b08      	cmp	r3, #8
 80059f6:	d104      	bne.n	8005a02 <HAL_TIM_PWM_Start+0xd6>
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	2202      	movs	r2, #2
 80059fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005a00:	e013      	b.n	8005a2a <HAL_TIM_PWM_Start+0xfe>
 8005a02:	683b      	ldr	r3, [r7, #0]
 8005a04:	2b0c      	cmp	r3, #12
 8005a06:	d104      	bne.n	8005a12 <HAL_TIM_PWM_Start+0xe6>
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	2202      	movs	r2, #2
 8005a0c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005a10:	e00b      	b.n	8005a2a <HAL_TIM_PWM_Start+0xfe>
 8005a12:	683b      	ldr	r3, [r7, #0]
 8005a14:	2b10      	cmp	r3, #16
 8005a16:	d104      	bne.n	8005a22 <HAL_TIM_PWM_Start+0xf6>
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	2202      	movs	r2, #2
 8005a1c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005a20:	e003      	b.n	8005a2a <HAL_TIM_PWM_Start+0xfe>
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	2202      	movs	r2, #2
 8005a26:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	2201      	movs	r2, #1
 8005a30:	6839      	ldr	r1, [r7, #0]
 8005a32:	4618      	mov	r0, r3
 8005a34:	f000 ffa2 	bl	800697c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	4a30      	ldr	r2, [pc, #192]	@ (8005b00 <HAL_TIM_PWM_Start+0x1d4>)
 8005a3e:	4293      	cmp	r3, r2
 8005a40:	d004      	beq.n	8005a4c <HAL_TIM_PWM_Start+0x120>
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	4a2f      	ldr	r2, [pc, #188]	@ (8005b04 <HAL_TIM_PWM_Start+0x1d8>)
 8005a48:	4293      	cmp	r3, r2
 8005a4a:	d101      	bne.n	8005a50 <HAL_TIM_PWM_Start+0x124>
 8005a4c:	2301      	movs	r3, #1
 8005a4e:	e000      	b.n	8005a52 <HAL_TIM_PWM_Start+0x126>
 8005a50:	2300      	movs	r3, #0
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d007      	beq.n	8005a66 <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005a64:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	4a25      	ldr	r2, [pc, #148]	@ (8005b00 <HAL_TIM_PWM_Start+0x1d4>)
 8005a6c:	4293      	cmp	r3, r2
 8005a6e:	d022      	beq.n	8005ab6 <HAL_TIM_PWM_Start+0x18a>
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005a78:	d01d      	beq.n	8005ab6 <HAL_TIM_PWM_Start+0x18a>
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	4a22      	ldr	r2, [pc, #136]	@ (8005b08 <HAL_TIM_PWM_Start+0x1dc>)
 8005a80:	4293      	cmp	r3, r2
 8005a82:	d018      	beq.n	8005ab6 <HAL_TIM_PWM_Start+0x18a>
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	4a20      	ldr	r2, [pc, #128]	@ (8005b0c <HAL_TIM_PWM_Start+0x1e0>)
 8005a8a:	4293      	cmp	r3, r2
 8005a8c:	d013      	beq.n	8005ab6 <HAL_TIM_PWM_Start+0x18a>
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	4a1f      	ldr	r2, [pc, #124]	@ (8005b10 <HAL_TIM_PWM_Start+0x1e4>)
 8005a94:	4293      	cmp	r3, r2
 8005a96:	d00e      	beq.n	8005ab6 <HAL_TIM_PWM_Start+0x18a>
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	4a19      	ldr	r2, [pc, #100]	@ (8005b04 <HAL_TIM_PWM_Start+0x1d8>)
 8005a9e:	4293      	cmp	r3, r2
 8005aa0:	d009      	beq.n	8005ab6 <HAL_TIM_PWM_Start+0x18a>
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	4a1b      	ldr	r2, [pc, #108]	@ (8005b14 <HAL_TIM_PWM_Start+0x1e8>)
 8005aa8:	4293      	cmp	r3, r2
 8005aaa:	d004      	beq.n	8005ab6 <HAL_TIM_PWM_Start+0x18a>
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	4a19      	ldr	r2, [pc, #100]	@ (8005b18 <HAL_TIM_PWM_Start+0x1ec>)
 8005ab2:	4293      	cmp	r3, r2
 8005ab4:	d115      	bne.n	8005ae2 <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	689a      	ldr	r2, [r3, #8]
 8005abc:	4b17      	ldr	r3, [pc, #92]	@ (8005b1c <HAL_TIM_PWM_Start+0x1f0>)
 8005abe:	4013      	ands	r3, r2
 8005ac0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	2b06      	cmp	r3, #6
 8005ac6:	d015      	beq.n	8005af4 <HAL_TIM_PWM_Start+0x1c8>
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005ace:	d011      	beq.n	8005af4 <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	681a      	ldr	r2, [r3, #0]
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	f042 0201 	orr.w	r2, r2, #1
 8005ade:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ae0:	e008      	b.n	8005af4 <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	681a      	ldr	r2, [r3, #0]
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	f042 0201 	orr.w	r2, r2, #1
 8005af0:	601a      	str	r2, [r3, #0]
 8005af2:	e000      	b.n	8005af6 <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005af4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005af6:	2300      	movs	r3, #0
}
 8005af8:	4618      	mov	r0, r3
 8005afa:	3710      	adds	r7, #16
 8005afc:	46bd      	mov	sp, r7
 8005afe:	bd80      	pop	{r7, pc}
 8005b00:	40010000 	.word	0x40010000
 8005b04:	40010400 	.word	0x40010400
 8005b08:	40000400 	.word	0x40000400
 8005b0c:	40000800 	.word	0x40000800
 8005b10:	40000c00 	.word	0x40000c00
 8005b14:	40014000 	.word	0x40014000
 8005b18:	40001800 	.word	0x40001800
 8005b1c:	00010007 	.word	0x00010007

08005b20 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005b20:	b580      	push	{r7, lr}
 8005b22:	b082      	sub	sp, #8
 8005b24:	af00      	add	r7, sp, #0
 8005b26:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	691b      	ldr	r3, [r3, #16]
 8005b2e:	f003 0302 	and.w	r3, r3, #2
 8005b32:	2b02      	cmp	r3, #2
 8005b34:	d122      	bne.n	8005b7c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	68db      	ldr	r3, [r3, #12]
 8005b3c:	f003 0302 	and.w	r3, r3, #2
 8005b40:	2b02      	cmp	r3, #2
 8005b42:	d11b      	bne.n	8005b7c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	f06f 0202 	mvn.w	r2, #2
 8005b4c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	2201      	movs	r2, #1
 8005b52:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	699b      	ldr	r3, [r3, #24]
 8005b5a:	f003 0303 	and.w	r3, r3, #3
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d003      	beq.n	8005b6a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005b62:	6878      	ldr	r0, [r7, #4]
 8005b64:	f000 fb54 	bl	8006210 <HAL_TIM_IC_CaptureCallback>
 8005b68:	e005      	b.n	8005b76 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b6a:	6878      	ldr	r0, [r7, #4]
 8005b6c:	f7fb f9e0 	bl	8000f30 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b70:	6878      	ldr	r0, [r7, #4]
 8005b72:	f000 fb57 	bl	8006224 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	2200      	movs	r2, #0
 8005b7a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	691b      	ldr	r3, [r3, #16]
 8005b82:	f003 0304 	and.w	r3, r3, #4
 8005b86:	2b04      	cmp	r3, #4
 8005b88:	d122      	bne.n	8005bd0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	68db      	ldr	r3, [r3, #12]
 8005b90:	f003 0304 	and.w	r3, r3, #4
 8005b94:	2b04      	cmp	r3, #4
 8005b96:	d11b      	bne.n	8005bd0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	f06f 0204 	mvn.w	r2, #4
 8005ba0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	2202      	movs	r2, #2
 8005ba6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	699b      	ldr	r3, [r3, #24]
 8005bae:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d003      	beq.n	8005bbe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005bb6:	6878      	ldr	r0, [r7, #4]
 8005bb8:	f000 fb2a 	bl	8006210 <HAL_TIM_IC_CaptureCallback>
 8005bbc:	e005      	b.n	8005bca <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005bbe:	6878      	ldr	r0, [r7, #4]
 8005bc0:	f7fb f9b6 	bl	8000f30 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005bc4:	6878      	ldr	r0, [r7, #4]
 8005bc6:	f000 fb2d 	bl	8006224 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	2200      	movs	r2, #0
 8005bce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	691b      	ldr	r3, [r3, #16]
 8005bd6:	f003 0308 	and.w	r3, r3, #8
 8005bda:	2b08      	cmp	r3, #8
 8005bdc:	d122      	bne.n	8005c24 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	68db      	ldr	r3, [r3, #12]
 8005be4:	f003 0308 	and.w	r3, r3, #8
 8005be8:	2b08      	cmp	r3, #8
 8005bea:	d11b      	bne.n	8005c24 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	f06f 0208 	mvn.w	r2, #8
 8005bf4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	2204      	movs	r2, #4
 8005bfa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	69db      	ldr	r3, [r3, #28]
 8005c02:	f003 0303 	and.w	r3, r3, #3
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d003      	beq.n	8005c12 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005c0a:	6878      	ldr	r0, [r7, #4]
 8005c0c:	f000 fb00 	bl	8006210 <HAL_TIM_IC_CaptureCallback>
 8005c10:	e005      	b.n	8005c1e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c12:	6878      	ldr	r0, [r7, #4]
 8005c14:	f7fb f98c 	bl	8000f30 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c18:	6878      	ldr	r0, [r7, #4]
 8005c1a:	f000 fb03 	bl	8006224 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	2200      	movs	r2, #0
 8005c22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	691b      	ldr	r3, [r3, #16]
 8005c2a:	f003 0310 	and.w	r3, r3, #16
 8005c2e:	2b10      	cmp	r3, #16
 8005c30:	d122      	bne.n	8005c78 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	68db      	ldr	r3, [r3, #12]
 8005c38:	f003 0310 	and.w	r3, r3, #16
 8005c3c:	2b10      	cmp	r3, #16
 8005c3e:	d11b      	bne.n	8005c78 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	f06f 0210 	mvn.w	r2, #16
 8005c48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	2208      	movs	r2, #8
 8005c4e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	69db      	ldr	r3, [r3, #28]
 8005c56:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d003      	beq.n	8005c66 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005c5e:	6878      	ldr	r0, [r7, #4]
 8005c60:	f000 fad6 	bl	8006210 <HAL_TIM_IC_CaptureCallback>
 8005c64:	e005      	b.n	8005c72 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c66:	6878      	ldr	r0, [r7, #4]
 8005c68:	f7fb f962 	bl	8000f30 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c6c:	6878      	ldr	r0, [r7, #4]
 8005c6e:	f000 fad9 	bl	8006224 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	2200      	movs	r2, #0
 8005c76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	691b      	ldr	r3, [r3, #16]
 8005c7e:	f003 0301 	and.w	r3, r3, #1
 8005c82:	2b01      	cmp	r3, #1
 8005c84:	d10e      	bne.n	8005ca4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	68db      	ldr	r3, [r3, #12]
 8005c8c:	f003 0301 	and.w	r3, r3, #1
 8005c90:	2b01      	cmp	r3, #1
 8005c92:	d107      	bne.n	8005ca4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	f06f 0201 	mvn.w	r2, #1
 8005c9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005c9e:	6878      	ldr	r0, [r7, #4]
 8005ca0:	f7fc fada 	bl	8002258 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	691b      	ldr	r3, [r3, #16]
 8005caa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005cae:	2b80      	cmp	r3, #128	@ 0x80
 8005cb0:	d10e      	bne.n	8005cd0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	68db      	ldr	r3, [r3, #12]
 8005cb8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005cbc:	2b80      	cmp	r3, #128	@ 0x80
 8005cbe:	d107      	bne.n	8005cd0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005cc8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005cca:	6878      	ldr	r0, [r7, #4]
 8005ccc:	f000 ff92 	bl	8006bf4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	691b      	ldr	r3, [r3, #16]
 8005cd6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005cda:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005cde:	d10e      	bne.n	8005cfe <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	68db      	ldr	r3, [r3, #12]
 8005ce6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005cea:	2b80      	cmp	r3, #128	@ 0x80
 8005cec:	d107      	bne.n	8005cfe <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8005cf6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005cf8:	6878      	ldr	r0, [r7, #4]
 8005cfa:	f000 ff85 	bl	8006c08 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	691b      	ldr	r3, [r3, #16]
 8005d04:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d08:	2b40      	cmp	r3, #64	@ 0x40
 8005d0a:	d10e      	bne.n	8005d2a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	68db      	ldr	r3, [r3, #12]
 8005d12:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d16:	2b40      	cmp	r3, #64	@ 0x40
 8005d18:	d107      	bne.n	8005d2a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005d22:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005d24:	6878      	ldr	r0, [r7, #4]
 8005d26:	f000 fa87 	bl	8006238 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	691b      	ldr	r3, [r3, #16]
 8005d30:	f003 0320 	and.w	r3, r3, #32
 8005d34:	2b20      	cmp	r3, #32
 8005d36:	d10e      	bne.n	8005d56 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	68db      	ldr	r3, [r3, #12]
 8005d3e:	f003 0320 	and.w	r3, r3, #32
 8005d42:	2b20      	cmp	r3, #32
 8005d44:	d107      	bne.n	8005d56 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	f06f 0220 	mvn.w	r2, #32
 8005d4e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005d50:	6878      	ldr	r0, [r7, #4]
 8005d52:	f000 ff45 	bl	8006be0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005d56:	bf00      	nop
 8005d58:	3708      	adds	r7, #8
 8005d5a:	46bd      	mov	sp, r7
 8005d5c:	bd80      	pop	{r7, pc}
	...

08005d60 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8005d60:	b580      	push	{r7, lr}
 8005d62:	b086      	sub	sp, #24
 8005d64:	af00      	add	r7, sp, #0
 8005d66:	60f8      	str	r0, [r7, #12]
 8005d68:	60b9      	str	r1, [r7, #8]
 8005d6a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005d6c:	2300      	movs	r3, #0
 8005d6e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005d76:	2b01      	cmp	r3, #1
 8005d78:	d101      	bne.n	8005d7e <HAL_TIM_OC_ConfigChannel+0x1e>
 8005d7a:	2302      	movs	r3, #2
 8005d7c:	e066      	b.n	8005e4c <HAL_TIM_OC_ConfigChannel+0xec>
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	2201      	movs	r2, #1
 8005d82:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	2b14      	cmp	r3, #20
 8005d8a:	d857      	bhi.n	8005e3c <HAL_TIM_OC_ConfigChannel+0xdc>
 8005d8c:	a201      	add	r2, pc, #4	@ (adr r2, 8005d94 <HAL_TIM_OC_ConfigChannel+0x34>)
 8005d8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d92:	bf00      	nop
 8005d94:	08005de9 	.word	0x08005de9
 8005d98:	08005e3d 	.word	0x08005e3d
 8005d9c:	08005e3d 	.word	0x08005e3d
 8005da0:	08005e3d 	.word	0x08005e3d
 8005da4:	08005df7 	.word	0x08005df7
 8005da8:	08005e3d 	.word	0x08005e3d
 8005dac:	08005e3d 	.word	0x08005e3d
 8005db0:	08005e3d 	.word	0x08005e3d
 8005db4:	08005e05 	.word	0x08005e05
 8005db8:	08005e3d 	.word	0x08005e3d
 8005dbc:	08005e3d 	.word	0x08005e3d
 8005dc0:	08005e3d 	.word	0x08005e3d
 8005dc4:	08005e13 	.word	0x08005e13
 8005dc8:	08005e3d 	.word	0x08005e3d
 8005dcc:	08005e3d 	.word	0x08005e3d
 8005dd0:	08005e3d 	.word	0x08005e3d
 8005dd4:	08005e21 	.word	0x08005e21
 8005dd8:	08005e3d 	.word	0x08005e3d
 8005ddc:	08005e3d 	.word	0x08005e3d
 8005de0:	08005e3d 	.word	0x08005e3d
 8005de4:	08005e2f 	.word	0x08005e2f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	68b9      	ldr	r1, [r7, #8]
 8005dee:	4618      	mov	r0, r3
 8005df0:	f000 facc 	bl	800638c <TIM_OC1_SetConfig>
      break;
 8005df4:	e025      	b.n	8005e42 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	68b9      	ldr	r1, [r7, #8]
 8005dfc:	4618      	mov	r0, r3
 8005dfe:	f000 fb37 	bl	8006470 <TIM_OC2_SetConfig>
      break;
 8005e02:	e01e      	b.n	8005e42 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	68b9      	ldr	r1, [r7, #8]
 8005e0a:	4618      	mov	r0, r3
 8005e0c:	f000 fba8 	bl	8006560 <TIM_OC3_SetConfig>
      break;
 8005e10:	e017      	b.n	8005e42 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	68b9      	ldr	r1, [r7, #8]
 8005e18:	4618      	mov	r0, r3
 8005e1a:	f000 fc17 	bl	800664c <TIM_OC4_SetConfig>
      break;
 8005e1e:	e010      	b.n	8005e42 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	68b9      	ldr	r1, [r7, #8]
 8005e26:	4618      	mov	r0, r3
 8005e28:	f000 fc68 	bl	80066fc <TIM_OC5_SetConfig>
      break;
 8005e2c:	e009      	b.n	8005e42 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	68b9      	ldr	r1, [r7, #8]
 8005e34:	4618      	mov	r0, r3
 8005e36:	f000 fcb3 	bl	80067a0 <TIM_OC6_SetConfig>
      break;
 8005e3a:	e002      	b.n	8005e42 <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 8005e3c:	2301      	movs	r3, #1
 8005e3e:	75fb      	strb	r3, [r7, #23]
      break;
 8005e40:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	2200      	movs	r2, #0
 8005e46:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005e4a:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e4c:	4618      	mov	r0, r3
 8005e4e:	3718      	adds	r7, #24
 8005e50:	46bd      	mov	sp, r7
 8005e52:	bd80      	pop	{r7, pc}

08005e54 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005e54:	b580      	push	{r7, lr}
 8005e56:	b086      	sub	sp, #24
 8005e58:	af00      	add	r7, sp, #0
 8005e5a:	60f8      	str	r0, [r7, #12]
 8005e5c:	60b9      	str	r1, [r7, #8]
 8005e5e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005e60:	2300      	movs	r3, #0
 8005e62:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005e6a:	2b01      	cmp	r3, #1
 8005e6c:	d101      	bne.n	8005e72 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005e6e:	2302      	movs	r3, #2
 8005e70:	e0ff      	b.n	8006072 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	2201      	movs	r2, #1
 8005e76:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	2b14      	cmp	r3, #20
 8005e7e:	f200 80f0 	bhi.w	8006062 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005e82:	a201      	add	r2, pc, #4	@ (adr r2, 8005e88 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005e84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e88:	08005edd 	.word	0x08005edd
 8005e8c:	08006063 	.word	0x08006063
 8005e90:	08006063 	.word	0x08006063
 8005e94:	08006063 	.word	0x08006063
 8005e98:	08005f1d 	.word	0x08005f1d
 8005e9c:	08006063 	.word	0x08006063
 8005ea0:	08006063 	.word	0x08006063
 8005ea4:	08006063 	.word	0x08006063
 8005ea8:	08005f5f 	.word	0x08005f5f
 8005eac:	08006063 	.word	0x08006063
 8005eb0:	08006063 	.word	0x08006063
 8005eb4:	08006063 	.word	0x08006063
 8005eb8:	08005f9f 	.word	0x08005f9f
 8005ebc:	08006063 	.word	0x08006063
 8005ec0:	08006063 	.word	0x08006063
 8005ec4:	08006063 	.word	0x08006063
 8005ec8:	08005fe1 	.word	0x08005fe1
 8005ecc:	08006063 	.word	0x08006063
 8005ed0:	08006063 	.word	0x08006063
 8005ed4:	08006063 	.word	0x08006063
 8005ed8:	08006021 	.word	0x08006021
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	68b9      	ldr	r1, [r7, #8]
 8005ee2:	4618      	mov	r0, r3
 8005ee4:	f000 fa52 	bl	800638c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	699a      	ldr	r2, [r3, #24]
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	f042 0208 	orr.w	r2, r2, #8
 8005ef6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	699a      	ldr	r2, [r3, #24]
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	f022 0204 	bic.w	r2, r2, #4
 8005f06:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	6999      	ldr	r1, [r3, #24]
 8005f0e:	68bb      	ldr	r3, [r7, #8]
 8005f10:	691a      	ldr	r2, [r3, #16]
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	430a      	orrs	r2, r1
 8005f18:	619a      	str	r2, [r3, #24]
      break;
 8005f1a:	e0a5      	b.n	8006068 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	68b9      	ldr	r1, [r7, #8]
 8005f22:	4618      	mov	r0, r3
 8005f24:	f000 faa4 	bl	8006470 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	699a      	ldr	r2, [r3, #24]
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005f36:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	699a      	ldr	r2, [r3, #24]
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005f46:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	6999      	ldr	r1, [r3, #24]
 8005f4e:	68bb      	ldr	r3, [r7, #8]
 8005f50:	691b      	ldr	r3, [r3, #16]
 8005f52:	021a      	lsls	r2, r3, #8
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	430a      	orrs	r2, r1
 8005f5a:	619a      	str	r2, [r3, #24]
      break;
 8005f5c:	e084      	b.n	8006068 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	68b9      	ldr	r1, [r7, #8]
 8005f64:	4618      	mov	r0, r3
 8005f66:	f000 fafb 	bl	8006560 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	69da      	ldr	r2, [r3, #28]
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	f042 0208 	orr.w	r2, r2, #8
 8005f78:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	69da      	ldr	r2, [r3, #28]
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	f022 0204 	bic.w	r2, r2, #4
 8005f88:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	69d9      	ldr	r1, [r3, #28]
 8005f90:	68bb      	ldr	r3, [r7, #8]
 8005f92:	691a      	ldr	r2, [r3, #16]
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	430a      	orrs	r2, r1
 8005f9a:	61da      	str	r2, [r3, #28]
      break;
 8005f9c:	e064      	b.n	8006068 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	68b9      	ldr	r1, [r7, #8]
 8005fa4:	4618      	mov	r0, r3
 8005fa6:	f000 fb51 	bl	800664c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	69da      	ldr	r2, [r3, #28]
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005fb8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	69da      	ldr	r2, [r3, #28]
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005fc8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	69d9      	ldr	r1, [r3, #28]
 8005fd0:	68bb      	ldr	r3, [r7, #8]
 8005fd2:	691b      	ldr	r3, [r3, #16]
 8005fd4:	021a      	lsls	r2, r3, #8
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	430a      	orrs	r2, r1
 8005fdc:	61da      	str	r2, [r3, #28]
      break;
 8005fde:	e043      	b.n	8006068 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	68b9      	ldr	r1, [r7, #8]
 8005fe6:	4618      	mov	r0, r3
 8005fe8:	f000 fb88 	bl	80066fc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	f042 0208 	orr.w	r2, r2, #8
 8005ffa:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	f022 0204 	bic.w	r2, r2, #4
 800600a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8006012:	68bb      	ldr	r3, [r7, #8]
 8006014:	691a      	ldr	r2, [r3, #16]
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	430a      	orrs	r2, r1
 800601c:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800601e:	e023      	b.n	8006068 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	68b9      	ldr	r1, [r7, #8]
 8006026:	4618      	mov	r0, r3
 8006028:	f000 fbba 	bl	80067a0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800603a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800604a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8006052:	68bb      	ldr	r3, [r7, #8]
 8006054:	691b      	ldr	r3, [r3, #16]
 8006056:	021a      	lsls	r2, r3, #8
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	430a      	orrs	r2, r1
 800605e:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8006060:	e002      	b.n	8006068 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8006062:	2301      	movs	r3, #1
 8006064:	75fb      	strb	r3, [r7, #23]
      break;
 8006066:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	2200      	movs	r2, #0
 800606c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006070:	7dfb      	ldrb	r3, [r7, #23]
}
 8006072:	4618      	mov	r0, r3
 8006074:	3718      	adds	r7, #24
 8006076:	46bd      	mov	sp, r7
 8006078:	bd80      	pop	{r7, pc}
 800607a:	bf00      	nop

0800607c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800607c:	b580      	push	{r7, lr}
 800607e:	b084      	sub	sp, #16
 8006080:	af00      	add	r7, sp, #0
 8006082:	6078      	str	r0, [r7, #4]
 8006084:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006086:	2300      	movs	r3, #0
 8006088:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006090:	2b01      	cmp	r3, #1
 8006092:	d101      	bne.n	8006098 <HAL_TIM_ConfigClockSource+0x1c>
 8006094:	2302      	movs	r3, #2
 8006096:	e0b4      	b.n	8006202 <HAL_TIM_ConfigClockSource+0x186>
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	2201      	movs	r2, #1
 800609c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	2202      	movs	r2, #2
 80060a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	689b      	ldr	r3, [r3, #8]
 80060ae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80060b0:	68ba      	ldr	r2, [r7, #8]
 80060b2:	4b56      	ldr	r3, [pc, #344]	@ (800620c <HAL_TIM_ConfigClockSource+0x190>)
 80060b4:	4013      	ands	r3, r2
 80060b6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80060b8:	68bb      	ldr	r3, [r7, #8]
 80060ba:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80060be:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	68ba      	ldr	r2, [r7, #8]
 80060c6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80060c8:	683b      	ldr	r3, [r7, #0]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80060d0:	d03e      	beq.n	8006150 <HAL_TIM_ConfigClockSource+0xd4>
 80060d2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80060d6:	f200 8087 	bhi.w	80061e8 <HAL_TIM_ConfigClockSource+0x16c>
 80060da:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80060de:	f000 8086 	beq.w	80061ee <HAL_TIM_ConfigClockSource+0x172>
 80060e2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80060e6:	d87f      	bhi.n	80061e8 <HAL_TIM_ConfigClockSource+0x16c>
 80060e8:	2b70      	cmp	r3, #112	@ 0x70
 80060ea:	d01a      	beq.n	8006122 <HAL_TIM_ConfigClockSource+0xa6>
 80060ec:	2b70      	cmp	r3, #112	@ 0x70
 80060ee:	d87b      	bhi.n	80061e8 <HAL_TIM_ConfigClockSource+0x16c>
 80060f0:	2b60      	cmp	r3, #96	@ 0x60
 80060f2:	d050      	beq.n	8006196 <HAL_TIM_ConfigClockSource+0x11a>
 80060f4:	2b60      	cmp	r3, #96	@ 0x60
 80060f6:	d877      	bhi.n	80061e8 <HAL_TIM_ConfigClockSource+0x16c>
 80060f8:	2b50      	cmp	r3, #80	@ 0x50
 80060fa:	d03c      	beq.n	8006176 <HAL_TIM_ConfigClockSource+0xfa>
 80060fc:	2b50      	cmp	r3, #80	@ 0x50
 80060fe:	d873      	bhi.n	80061e8 <HAL_TIM_ConfigClockSource+0x16c>
 8006100:	2b40      	cmp	r3, #64	@ 0x40
 8006102:	d058      	beq.n	80061b6 <HAL_TIM_ConfigClockSource+0x13a>
 8006104:	2b40      	cmp	r3, #64	@ 0x40
 8006106:	d86f      	bhi.n	80061e8 <HAL_TIM_ConfigClockSource+0x16c>
 8006108:	2b30      	cmp	r3, #48	@ 0x30
 800610a:	d064      	beq.n	80061d6 <HAL_TIM_ConfigClockSource+0x15a>
 800610c:	2b30      	cmp	r3, #48	@ 0x30
 800610e:	d86b      	bhi.n	80061e8 <HAL_TIM_ConfigClockSource+0x16c>
 8006110:	2b20      	cmp	r3, #32
 8006112:	d060      	beq.n	80061d6 <HAL_TIM_ConfigClockSource+0x15a>
 8006114:	2b20      	cmp	r3, #32
 8006116:	d867      	bhi.n	80061e8 <HAL_TIM_ConfigClockSource+0x16c>
 8006118:	2b00      	cmp	r3, #0
 800611a:	d05c      	beq.n	80061d6 <HAL_TIM_ConfigClockSource+0x15a>
 800611c:	2b10      	cmp	r3, #16
 800611e:	d05a      	beq.n	80061d6 <HAL_TIM_ConfigClockSource+0x15a>
 8006120:	e062      	b.n	80061e8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006126:	683b      	ldr	r3, [r7, #0]
 8006128:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800612a:	683b      	ldr	r3, [r7, #0]
 800612c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800612e:	683b      	ldr	r3, [r7, #0]
 8006130:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006132:	f000 fc03 	bl	800693c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	689b      	ldr	r3, [r3, #8]
 800613c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800613e:	68bb      	ldr	r3, [r7, #8]
 8006140:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006144:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	68ba      	ldr	r2, [r7, #8]
 800614c:	609a      	str	r2, [r3, #8]
      break;
 800614e:	e04f      	b.n	80061f0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006154:	683b      	ldr	r3, [r7, #0]
 8006156:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006158:	683b      	ldr	r3, [r7, #0]
 800615a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800615c:	683b      	ldr	r3, [r7, #0]
 800615e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006160:	f000 fbec 	bl	800693c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	689a      	ldr	r2, [r3, #8]
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006172:	609a      	str	r2, [r3, #8]
      break;
 8006174:	e03c      	b.n	80061f0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800617a:	683b      	ldr	r3, [r7, #0]
 800617c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800617e:	683b      	ldr	r3, [r7, #0]
 8006180:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006182:	461a      	mov	r2, r3
 8006184:	f000 fb60 	bl	8006848 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	2150      	movs	r1, #80	@ 0x50
 800618e:	4618      	mov	r0, r3
 8006190:	f000 fbb9 	bl	8006906 <TIM_ITRx_SetConfig>
      break;
 8006194:	e02c      	b.n	80061f0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800619a:	683b      	ldr	r3, [r7, #0]
 800619c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800619e:	683b      	ldr	r3, [r7, #0]
 80061a0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80061a2:	461a      	mov	r2, r3
 80061a4:	f000 fb7f 	bl	80068a6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	2160      	movs	r1, #96	@ 0x60
 80061ae:	4618      	mov	r0, r3
 80061b0:	f000 fba9 	bl	8006906 <TIM_ITRx_SetConfig>
      break;
 80061b4:	e01c      	b.n	80061f0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80061ba:	683b      	ldr	r3, [r7, #0]
 80061bc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80061be:	683b      	ldr	r3, [r7, #0]
 80061c0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80061c2:	461a      	mov	r2, r3
 80061c4:	f000 fb40 	bl	8006848 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	2140      	movs	r1, #64	@ 0x40
 80061ce:	4618      	mov	r0, r3
 80061d0:	f000 fb99 	bl	8006906 <TIM_ITRx_SetConfig>
      break;
 80061d4:	e00c      	b.n	80061f0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681a      	ldr	r2, [r3, #0]
 80061da:	683b      	ldr	r3, [r7, #0]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	4619      	mov	r1, r3
 80061e0:	4610      	mov	r0, r2
 80061e2:	f000 fb90 	bl	8006906 <TIM_ITRx_SetConfig>
      break;
 80061e6:	e003      	b.n	80061f0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80061e8:	2301      	movs	r3, #1
 80061ea:	73fb      	strb	r3, [r7, #15]
      break;
 80061ec:	e000      	b.n	80061f0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80061ee:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	2201      	movs	r2, #1
 80061f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	2200      	movs	r2, #0
 80061fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006200:	7bfb      	ldrb	r3, [r7, #15]
}
 8006202:	4618      	mov	r0, r3
 8006204:	3710      	adds	r7, #16
 8006206:	46bd      	mov	sp, r7
 8006208:	bd80      	pop	{r7, pc}
 800620a:	bf00      	nop
 800620c:	fffeff88 	.word	0xfffeff88

08006210 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006210:	b480      	push	{r7}
 8006212:	b083      	sub	sp, #12
 8006214:	af00      	add	r7, sp, #0
 8006216:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006218:	bf00      	nop
 800621a:	370c      	adds	r7, #12
 800621c:	46bd      	mov	sp, r7
 800621e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006222:	4770      	bx	lr

08006224 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006224:	b480      	push	{r7}
 8006226:	b083      	sub	sp, #12
 8006228:	af00      	add	r7, sp, #0
 800622a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800622c:	bf00      	nop
 800622e:	370c      	adds	r7, #12
 8006230:	46bd      	mov	sp, r7
 8006232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006236:	4770      	bx	lr

08006238 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006238:	b480      	push	{r7}
 800623a:	b083      	sub	sp, #12
 800623c:	af00      	add	r7, sp, #0
 800623e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006240:	bf00      	nop
 8006242:	370c      	adds	r7, #12
 8006244:	46bd      	mov	sp, r7
 8006246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800624a:	4770      	bx	lr

0800624c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800624c:	b480      	push	{r7}
 800624e:	b085      	sub	sp, #20
 8006250:	af00      	add	r7, sp, #0
 8006252:	6078      	str	r0, [r7, #4]
 8006254:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	4a40      	ldr	r2, [pc, #256]	@ (8006360 <TIM_Base_SetConfig+0x114>)
 8006260:	4293      	cmp	r3, r2
 8006262:	d013      	beq.n	800628c <TIM_Base_SetConfig+0x40>
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800626a:	d00f      	beq.n	800628c <TIM_Base_SetConfig+0x40>
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	4a3d      	ldr	r2, [pc, #244]	@ (8006364 <TIM_Base_SetConfig+0x118>)
 8006270:	4293      	cmp	r3, r2
 8006272:	d00b      	beq.n	800628c <TIM_Base_SetConfig+0x40>
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	4a3c      	ldr	r2, [pc, #240]	@ (8006368 <TIM_Base_SetConfig+0x11c>)
 8006278:	4293      	cmp	r3, r2
 800627a:	d007      	beq.n	800628c <TIM_Base_SetConfig+0x40>
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	4a3b      	ldr	r2, [pc, #236]	@ (800636c <TIM_Base_SetConfig+0x120>)
 8006280:	4293      	cmp	r3, r2
 8006282:	d003      	beq.n	800628c <TIM_Base_SetConfig+0x40>
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	4a3a      	ldr	r2, [pc, #232]	@ (8006370 <TIM_Base_SetConfig+0x124>)
 8006288:	4293      	cmp	r3, r2
 800628a:	d108      	bne.n	800629e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006292:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006294:	683b      	ldr	r3, [r7, #0]
 8006296:	685b      	ldr	r3, [r3, #4]
 8006298:	68fa      	ldr	r2, [r7, #12]
 800629a:	4313      	orrs	r3, r2
 800629c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	4a2f      	ldr	r2, [pc, #188]	@ (8006360 <TIM_Base_SetConfig+0x114>)
 80062a2:	4293      	cmp	r3, r2
 80062a4:	d02b      	beq.n	80062fe <TIM_Base_SetConfig+0xb2>
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80062ac:	d027      	beq.n	80062fe <TIM_Base_SetConfig+0xb2>
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	4a2c      	ldr	r2, [pc, #176]	@ (8006364 <TIM_Base_SetConfig+0x118>)
 80062b2:	4293      	cmp	r3, r2
 80062b4:	d023      	beq.n	80062fe <TIM_Base_SetConfig+0xb2>
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	4a2b      	ldr	r2, [pc, #172]	@ (8006368 <TIM_Base_SetConfig+0x11c>)
 80062ba:	4293      	cmp	r3, r2
 80062bc:	d01f      	beq.n	80062fe <TIM_Base_SetConfig+0xb2>
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	4a2a      	ldr	r2, [pc, #168]	@ (800636c <TIM_Base_SetConfig+0x120>)
 80062c2:	4293      	cmp	r3, r2
 80062c4:	d01b      	beq.n	80062fe <TIM_Base_SetConfig+0xb2>
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	4a29      	ldr	r2, [pc, #164]	@ (8006370 <TIM_Base_SetConfig+0x124>)
 80062ca:	4293      	cmp	r3, r2
 80062cc:	d017      	beq.n	80062fe <TIM_Base_SetConfig+0xb2>
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	4a28      	ldr	r2, [pc, #160]	@ (8006374 <TIM_Base_SetConfig+0x128>)
 80062d2:	4293      	cmp	r3, r2
 80062d4:	d013      	beq.n	80062fe <TIM_Base_SetConfig+0xb2>
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	4a27      	ldr	r2, [pc, #156]	@ (8006378 <TIM_Base_SetConfig+0x12c>)
 80062da:	4293      	cmp	r3, r2
 80062dc:	d00f      	beq.n	80062fe <TIM_Base_SetConfig+0xb2>
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	4a26      	ldr	r2, [pc, #152]	@ (800637c <TIM_Base_SetConfig+0x130>)
 80062e2:	4293      	cmp	r3, r2
 80062e4:	d00b      	beq.n	80062fe <TIM_Base_SetConfig+0xb2>
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	4a25      	ldr	r2, [pc, #148]	@ (8006380 <TIM_Base_SetConfig+0x134>)
 80062ea:	4293      	cmp	r3, r2
 80062ec:	d007      	beq.n	80062fe <TIM_Base_SetConfig+0xb2>
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	4a24      	ldr	r2, [pc, #144]	@ (8006384 <TIM_Base_SetConfig+0x138>)
 80062f2:	4293      	cmp	r3, r2
 80062f4:	d003      	beq.n	80062fe <TIM_Base_SetConfig+0xb2>
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	4a23      	ldr	r2, [pc, #140]	@ (8006388 <TIM_Base_SetConfig+0x13c>)
 80062fa:	4293      	cmp	r3, r2
 80062fc:	d108      	bne.n	8006310 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006304:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006306:	683b      	ldr	r3, [r7, #0]
 8006308:	68db      	ldr	r3, [r3, #12]
 800630a:	68fa      	ldr	r2, [r7, #12]
 800630c:	4313      	orrs	r3, r2
 800630e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006316:	683b      	ldr	r3, [r7, #0]
 8006318:	695b      	ldr	r3, [r3, #20]
 800631a:	4313      	orrs	r3, r2
 800631c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	68fa      	ldr	r2, [r7, #12]
 8006322:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006324:	683b      	ldr	r3, [r7, #0]
 8006326:	689a      	ldr	r2, [r3, #8]
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800632c:	683b      	ldr	r3, [r7, #0]
 800632e:	681a      	ldr	r2, [r3, #0]
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	4a0a      	ldr	r2, [pc, #40]	@ (8006360 <TIM_Base_SetConfig+0x114>)
 8006338:	4293      	cmp	r3, r2
 800633a:	d003      	beq.n	8006344 <TIM_Base_SetConfig+0xf8>
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	4a0c      	ldr	r2, [pc, #48]	@ (8006370 <TIM_Base_SetConfig+0x124>)
 8006340:	4293      	cmp	r3, r2
 8006342:	d103      	bne.n	800634c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006344:	683b      	ldr	r3, [r7, #0]
 8006346:	691a      	ldr	r2, [r3, #16]
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	2201      	movs	r2, #1
 8006350:	615a      	str	r2, [r3, #20]
}
 8006352:	bf00      	nop
 8006354:	3714      	adds	r7, #20
 8006356:	46bd      	mov	sp, r7
 8006358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800635c:	4770      	bx	lr
 800635e:	bf00      	nop
 8006360:	40010000 	.word	0x40010000
 8006364:	40000400 	.word	0x40000400
 8006368:	40000800 	.word	0x40000800
 800636c:	40000c00 	.word	0x40000c00
 8006370:	40010400 	.word	0x40010400
 8006374:	40014000 	.word	0x40014000
 8006378:	40014400 	.word	0x40014400
 800637c:	40014800 	.word	0x40014800
 8006380:	40001800 	.word	0x40001800
 8006384:	40001c00 	.word	0x40001c00
 8006388:	40002000 	.word	0x40002000

0800638c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800638c:	b480      	push	{r7}
 800638e:	b087      	sub	sp, #28
 8006390:	af00      	add	r7, sp, #0
 8006392:	6078      	str	r0, [r7, #4]
 8006394:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	6a1b      	ldr	r3, [r3, #32]
 800639a:	f023 0201 	bic.w	r2, r3, #1
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	6a1b      	ldr	r3, [r3, #32]
 80063a6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	685b      	ldr	r3, [r3, #4]
 80063ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	699b      	ldr	r3, [r3, #24]
 80063b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80063b4:	68fa      	ldr	r2, [r7, #12]
 80063b6:	4b2b      	ldr	r3, [pc, #172]	@ (8006464 <TIM_OC1_SetConfig+0xd8>)
 80063b8:	4013      	ands	r3, r2
 80063ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	f023 0303 	bic.w	r3, r3, #3
 80063c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80063c4:	683b      	ldr	r3, [r7, #0]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	68fa      	ldr	r2, [r7, #12]
 80063ca:	4313      	orrs	r3, r2
 80063cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80063ce:	697b      	ldr	r3, [r7, #20]
 80063d0:	f023 0302 	bic.w	r3, r3, #2
 80063d4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80063d6:	683b      	ldr	r3, [r7, #0]
 80063d8:	689b      	ldr	r3, [r3, #8]
 80063da:	697a      	ldr	r2, [r7, #20]
 80063dc:	4313      	orrs	r3, r2
 80063de:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	4a21      	ldr	r2, [pc, #132]	@ (8006468 <TIM_OC1_SetConfig+0xdc>)
 80063e4:	4293      	cmp	r3, r2
 80063e6:	d003      	beq.n	80063f0 <TIM_OC1_SetConfig+0x64>
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	4a20      	ldr	r2, [pc, #128]	@ (800646c <TIM_OC1_SetConfig+0xe0>)
 80063ec:	4293      	cmp	r3, r2
 80063ee:	d10c      	bne.n	800640a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80063f0:	697b      	ldr	r3, [r7, #20]
 80063f2:	f023 0308 	bic.w	r3, r3, #8
 80063f6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80063f8:	683b      	ldr	r3, [r7, #0]
 80063fa:	68db      	ldr	r3, [r3, #12]
 80063fc:	697a      	ldr	r2, [r7, #20]
 80063fe:	4313      	orrs	r3, r2
 8006400:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006402:	697b      	ldr	r3, [r7, #20]
 8006404:	f023 0304 	bic.w	r3, r3, #4
 8006408:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	4a16      	ldr	r2, [pc, #88]	@ (8006468 <TIM_OC1_SetConfig+0xdc>)
 800640e:	4293      	cmp	r3, r2
 8006410:	d003      	beq.n	800641a <TIM_OC1_SetConfig+0x8e>
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	4a15      	ldr	r2, [pc, #84]	@ (800646c <TIM_OC1_SetConfig+0xe0>)
 8006416:	4293      	cmp	r3, r2
 8006418:	d111      	bne.n	800643e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800641a:	693b      	ldr	r3, [r7, #16]
 800641c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006420:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006422:	693b      	ldr	r3, [r7, #16]
 8006424:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006428:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800642a:	683b      	ldr	r3, [r7, #0]
 800642c:	695b      	ldr	r3, [r3, #20]
 800642e:	693a      	ldr	r2, [r7, #16]
 8006430:	4313      	orrs	r3, r2
 8006432:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006434:	683b      	ldr	r3, [r7, #0]
 8006436:	699b      	ldr	r3, [r3, #24]
 8006438:	693a      	ldr	r2, [r7, #16]
 800643a:	4313      	orrs	r3, r2
 800643c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	693a      	ldr	r2, [r7, #16]
 8006442:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	68fa      	ldr	r2, [r7, #12]
 8006448:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800644a:	683b      	ldr	r3, [r7, #0]
 800644c:	685a      	ldr	r2, [r3, #4]
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	697a      	ldr	r2, [r7, #20]
 8006456:	621a      	str	r2, [r3, #32]
}
 8006458:	bf00      	nop
 800645a:	371c      	adds	r7, #28
 800645c:	46bd      	mov	sp, r7
 800645e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006462:	4770      	bx	lr
 8006464:	fffeff8f 	.word	0xfffeff8f
 8006468:	40010000 	.word	0x40010000
 800646c:	40010400 	.word	0x40010400

08006470 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006470:	b480      	push	{r7}
 8006472:	b087      	sub	sp, #28
 8006474:	af00      	add	r7, sp, #0
 8006476:	6078      	str	r0, [r7, #4]
 8006478:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	6a1b      	ldr	r3, [r3, #32]
 800647e:	f023 0210 	bic.w	r2, r3, #16
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	6a1b      	ldr	r3, [r3, #32]
 800648a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	685b      	ldr	r3, [r3, #4]
 8006490:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	699b      	ldr	r3, [r3, #24]
 8006496:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006498:	68fa      	ldr	r2, [r7, #12]
 800649a:	4b2e      	ldr	r3, [pc, #184]	@ (8006554 <TIM_OC2_SetConfig+0xe4>)
 800649c:	4013      	ands	r3, r2
 800649e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80064a6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80064a8:	683b      	ldr	r3, [r7, #0]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	021b      	lsls	r3, r3, #8
 80064ae:	68fa      	ldr	r2, [r7, #12]
 80064b0:	4313      	orrs	r3, r2
 80064b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80064b4:	697b      	ldr	r3, [r7, #20]
 80064b6:	f023 0320 	bic.w	r3, r3, #32
 80064ba:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80064bc:	683b      	ldr	r3, [r7, #0]
 80064be:	689b      	ldr	r3, [r3, #8]
 80064c0:	011b      	lsls	r3, r3, #4
 80064c2:	697a      	ldr	r2, [r7, #20]
 80064c4:	4313      	orrs	r3, r2
 80064c6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	4a23      	ldr	r2, [pc, #140]	@ (8006558 <TIM_OC2_SetConfig+0xe8>)
 80064cc:	4293      	cmp	r3, r2
 80064ce:	d003      	beq.n	80064d8 <TIM_OC2_SetConfig+0x68>
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	4a22      	ldr	r2, [pc, #136]	@ (800655c <TIM_OC2_SetConfig+0xec>)
 80064d4:	4293      	cmp	r3, r2
 80064d6:	d10d      	bne.n	80064f4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80064d8:	697b      	ldr	r3, [r7, #20]
 80064da:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80064de:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80064e0:	683b      	ldr	r3, [r7, #0]
 80064e2:	68db      	ldr	r3, [r3, #12]
 80064e4:	011b      	lsls	r3, r3, #4
 80064e6:	697a      	ldr	r2, [r7, #20]
 80064e8:	4313      	orrs	r3, r2
 80064ea:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80064ec:	697b      	ldr	r3, [r7, #20]
 80064ee:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80064f2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	4a18      	ldr	r2, [pc, #96]	@ (8006558 <TIM_OC2_SetConfig+0xe8>)
 80064f8:	4293      	cmp	r3, r2
 80064fa:	d003      	beq.n	8006504 <TIM_OC2_SetConfig+0x94>
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	4a17      	ldr	r2, [pc, #92]	@ (800655c <TIM_OC2_SetConfig+0xec>)
 8006500:	4293      	cmp	r3, r2
 8006502:	d113      	bne.n	800652c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006504:	693b      	ldr	r3, [r7, #16]
 8006506:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800650a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800650c:	693b      	ldr	r3, [r7, #16]
 800650e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006512:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006514:	683b      	ldr	r3, [r7, #0]
 8006516:	695b      	ldr	r3, [r3, #20]
 8006518:	009b      	lsls	r3, r3, #2
 800651a:	693a      	ldr	r2, [r7, #16]
 800651c:	4313      	orrs	r3, r2
 800651e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006520:	683b      	ldr	r3, [r7, #0]
 8006522:	699b      	ldr	r3, [r3, #24]
 8006524:	009b      	lsls	r3, r3, #2
 8006526:	693a      	ldr	r2, [r7, #16]
 8006528:	4313      	orrs	r3, r2
 800652a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	693a      	ldr	r2, [r7, #16]
 8006530:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	68fa      	ldr	r2, [r7, #12]
 8006536:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006538:	683b      	ldr	r3, [r7, #0]
 800653a:	685a      	ldr	r2, [r3, #4]
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	697a      	ldr	r2, [r7, #20]
 8006544:	621a      	str	r2, [r3, #32]
}
 8006546:	bf00      	nop
 8006548:	371c      	adds	r7, #28
 800654a:	46bd      	mov	sp, r7
 800654c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006550:	4770      	bx	lr
 8006552:	bf00      	nop
 8006554:	feff8fff 	.word	0xfeff8fff
 8006558:	40010000 	.word	0x40010000
 800655c:	40010400 	.word	0x40010400

08006560 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006560:	b480      	push	{r7}
 8006562:	b087      	sub	sp, #28
 8006564:	af00      	add	r7, sp, #0
 8006566:	6078      	str	r0, [r7, #4]
 8006568:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	6a1b      	ldr	r3, [r3, #32]
 800656e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	6a1b      	ldr	r3, [r3, #32]
 800657a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	685b      	ldr	r3, [r3, #4]
 8006580:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	69db      	ldr	r3, [r3, #28]
 8006586:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006588:	68fa      	ldr	r2, [r7, #12]
 800658a:	4b2d      	ldr	r3, [pc, #180]	@ (8006640 <TIM_OC3_SetConfig+0xe0>)
 800658c:	4013      	ands	r3, r2
 800658e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	f023 0303 	bic.w	r3, r3, #3
 8006596:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006598:	683b      	ldr	r3, [r7, #0]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	68fa      	ldr	r2, [r7, #12]
 800659e:	4313      	orrs	r3, r2
 80065a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80065a2:	697b      	ldr	r3, [r7, #20]
 80065a4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80065a8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80065aa:	683b      	ldr	r3, [r7, #0]
 80065ac:	689b      	ldr	r3, [r3, #8]
 80065ae:	021b      	lsls	r3, r3, #8
 80065b0:	697a      	ldr	r2, [r7, #20]
 80065b2:	4313      	orrs	r3, r2
 80065b4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	4a22      	ldr	r2, [pc, #136]	@ (8006644 <TIM_OC3_SetConfig+0xe4>)
 80065ba:	4293      	cmp	r3, r2
 80065bc:	d003      	beq.n	80065c6 <TIM_OC3_SetConfig+0x66>
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	4a21      	ldr	r2, [pc, #132]	@ (8006648 <TIM_OC3_SetConfig+0xe8>)
 80065c2:	4293      	cmp	r3, r2
 80065c4:	d10d      	bne.n	80065e2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80065c6:	697b      	ldr	r3, [r7, #20]
 80065c8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80065cc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80065ce:	683b      	ldr	r3, [r7, #0]
 80065d0:	68db      	ldr	r3, [r3, #12]
 80065d2:	021b      	lsls	r3, r3, #8
 80065d4:	697a      	ldr	r2, [r7, #20]
 80065d6:	4313      	orrs	r3, r2
 80065d8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80065da:	697b      	ldr	r3, [r7, #20]
 80065dc:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80065e0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	4a17      	ldr	r2, [pc, #92]	@ (8006644 <TIM_OC3_SetConfig+0xe4>)
 80065e6:	4293      	cmp	r3, r2
 80065e8:	d003      	beq.n	80065f2 <TIM_OC3_SetConfig+0x92>
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	4a16      	ldr	r2, [pc, #88]	@ (8006648 <TIM_OC3_SetConfig+0xe8>)
 80065ee:	4293      	cmp	r3, r2
 80065f0:	d113      	bne.n	800661a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80065f2:	693b      	ldr	r3, [r7, #16]
 80065f4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80065f8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80065fa:	693b      	ldr	r3, [r7, #16]
 80065fc:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006600:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006602:	683b      	ldr	r3, [r7, #0]
 8006604:	695b      	ldr	r3, [r3, #20]
 8006606:	011b      	lsls	r3, r3, #4
 8006608:	693a      	ldr	r2, [r7, #16]
 800660a:	4313      	orrs	r3, r2
 800660c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800660e:	683b      	ldr	r3, [r7, #0]
 8006610:	699b      	ldr	r3, [r3, #24]
 8006612:	011b      	lsls	r3, r3, #4
 8006614:	693a      	ldr	r2, [r7, #16]
 8006616:	4313      	orrs	r3, r2
 8006618:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	693a      	ldr	r2, [r7, #16]
 800661e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	68fa      	ldr	r2, [r7, #12]
 8006624:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006626:	683b      	ldr	r3, [r7, #0]
 8006628:	685a      	ldr	r2, [r3, #4]
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	697a      	ldr	r2, [r7, #20]
 8006632:	621a      	str	r2, [r3, #32]
}
 8006634:	bf00      	nop
 8006636:	371c      	adds	r7, #28
 8006638:	46bd      	mov	sp, r7
 800663a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800663e:	4770      	bx	lr
 8006640:	fffeff8f 	.word	0xfffeff8f
 8006644:	40010000 	.word	0x40010000
 8006648:	40010400 	.word	0x40010400

0800664c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800664c:	b480      	push	{r7}
 800664e:	b087      	sub	sp, #28
 8006650:	af00      	add	r7, sp, #0
 8006652:	6078      	str	r0, [r7, #4]
 8006654:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	6a1b      	ldr	r3, [r3, #32]
 800665a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	6a1b      	ldr	r3, [r3, #32]
 8006666:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	685b      	ldr	r3, [r3, #4]
 800666c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	69db      	ldr	r3, [r3, #28]
 8006672:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006674:	68fa      	ldr	r2, [r7, #12]
 8006676:	4b1e      	ldr	r3, [pc, #120]	@ (80066f0 <TIM_OC4_SetConfig+0xa4>)
 8006678:	4013      	ands	r3, r2
 800667a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006682:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006684:	683b      	ldr	r3, [r7, #0]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	021b      	lsls	r3, r3, #8
 800668a:	68fa      	ldr	r2, [r7, #12]
 800668c:	4313      	orrs	r3, r2
 800668e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006690:	693b      	ldr	r3, [r7, #16]
 8006692:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006696:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006698:	683b      	ldr	r3, [r7, #0]
 800669a:	689b      	ldr	r3, [r3, #8]
 800669c:	031b      	lsls	r3, r3, #12
 800669e:	693a      	ldr	r2, [r7, #16]
 80066a0:	4313      	orrs	r3, r2
 80066a2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	4a13      	ldr	r2, [pc, #76]	@ (80066f4 <TIM_OC4_SetConfig+0xa8>)
 80066a8:	4293      	cmp	r3, r2
 80066aa:	d003      	beq.n	80066b4 <TIM_OC4_SetConfig+0x68>
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	4a12      	ldr	r2, [pc, #72]	@ (80066f8 <TIM_OC4_SetConfig+0xac>)
 80066b0:	4293      	cmp	r3, r2
 80066b2:	d109      	bne.n	80066c8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80066b4:	697b      	ldr	r3, [r7, #20]
 80066b6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80066ba:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80066bc:	683b      	ldr	r3, [r7, #0]
 80066be:	695b      	ldr	r3, [r3, #20]
 80066c0:	019b      	lsls	r3, r3, #6
 80066c2:	697a      	ldr	r2, [r7, #20]
 80066c4:	4313      	orrs	r3, r2
 80066c6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	697a      	ldr	r2, [r7, #20]
 80066cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	68fa      	ldr	r2, [r7, #12]
 80066d2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80066d4:	683b      	ldr	r3, [r7, #0]
 80066d6:	685a      	ldr	r2, [r3, #4]
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	693a      	ldr	r2, [r7, #16]
 80066e0:	621a      	str	r2, [r3, #32]
}
 80066e2:	bf00      	nop
 80066e4:	371c      	adds	r7, #28
 80066e6:	46bd      	mov	sp, r7
 80066e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ec:	4770      	bx	lr
 80066ee:	bf00      	nop
 80066f0:	feff8fff 	.word	0xfeff8fff
 80066f4:	40010000 	.word	0x40010000
 80066f8:	40010400 	.word	0x40010400

080066fc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80066fc:	b480      	push	{r7}
 80066fe:	b087      	sub	sp, #28
 8006700:	af00      	add	r7, sp, #0
 8006702:	6078      	str	r0, [r7, #4]
 8006704:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	6a1b      	ldr	r3, [r3, #32]
 800670a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	6a1b      	ldr	r3, [r3, #32]
 8006716:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	685b      	ldr	r3, [r3, #4]
 800671c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006722:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006724:	68fa      	ldr	r2, [r7, #12]
 8006726:	4b1b      	ldr	r3, [pc, #108]	@ (8006794 <TIM_OC5_SetConfig+0x98>)
 8006728:	4013      	ands	r3, r2
 800672a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800672c:	683b      	ldr	r3, [r7, #0]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	68fa      	ldr	r2, [r7, #12]
 8006732:	4313      	orrs	r3, r2
 8006734:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006736:	693b      	ldr	r3, [r7, #16]
 8006738:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800673c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800673e:	683b      	ldr	r3, [r7, #0]
 8006740:	689b      	ldr	r3, [r3, #8]
 8006742:	041b      	lsls	r3, r3, #16
 8006744:	693a      	ldr	r2, [r7, #16]
 8006746:	4313      	orrs	r3, r2
 8006748:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	4a12      	ldr	r2, [pc, #72]	@ (8006798 <TIM_OC5_SetConfig+0x9c>)
 800674e:	4293      	cmp	r3, r2
 8006750:	d003      	beq.n	800675a <TIM_OC5_SetConfig+0x5e>
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	4a11      	ldr	r2, [pc, #68]	@ (800679c <TIM_OC5_SetConfig+0xa0>)
 8006756:	4293      	cmp	r3, r2
 8006758:	d109      	bne.n	800676e <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800675a:	697b      	ldr	r3, [r7, #20]
 800675c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006760:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006762:	683b      	ldr	r3, [r7, #0]
 8006764:	695b      	ldr	r3, [r3, #20]
 8006766:	021b      	lsls	r3, r3, #8
 8006768:	697a      	ldr	r2, [r7, #20]
 800676a:	4313      	orrs	r3, r2
 800676c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	697a      	ldr	r2, [r7, #20]
 8006772:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	68fa      	ldr	r2, [r7, #12]
 8006778:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800677a:	683b      	ldr	r3, [r7, #0]
 800677c:	685a      	ldr	r2, [r3, #4]
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	693a      	ldr	r2, [r7, #16]
 8006786:	621a      	str	r2, [r3, #32]
}
 8006788:	bf00      	nop
 800678a:	371c      	adds	r7, #28
 800678c:	46bd      	mov	sp, r7
 800678e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006792:	4770      	bx	lr
 8006794:	fffeff8f 	.word	0xfffeff8f
 8006798:	40010000 	.word	0x40010000
 800679c:	40010400 	.word	0x40010400

080067a0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80067a0:	b480      	push	{r7}
 80067a2:	b087      	sub	sp, #28
 80067a4:	af00      	add	r7, sp, #0
 80067a6:	6078      	str	r0, [r7, #4]
 80067a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	6a1b      	ldr	r3, [r3, #32]
 80067ae:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	6a1b      	ldr	r3, [r3, #32]
 80067ba:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	685b      	ldr	r3, [r3, #4]
 80067c0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80067c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80067c8:	68fa      	ldr	r2, [r7, #12]
 80067ca:	4b1c      	ldr	r3, [pc, #112]	@ (800683c <TIM_OC6_SetConfig+0x9c>)
 80067cc:	4013      	ands	r3, r2
 80067ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80067d0:	683b      	ldr	r3, [r7, #0]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	021b      	lsls	r3, r3, #8
 80067d6:	68fa      	ldr	r2, [r7, #12]
 80067d8:	4313      	orrs	r3, r2
 80067da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80067dc:	693b      	ldr	r3, [r7, #16]
 80067de:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80067e2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80067e4:	683b      	ldr	r3, [r7, #0]
 80067e6:	689b      	ldr	r3, [r3, #8]
 80067e8:	051b      	lsls	r3, r3, #20
 80067ea:	693a      	ldr	r2, [r7, #16]
 80067ec:	4313      	orrs	r3, r2
 80067ee:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	4a13      	ldr	r2, [pc, #76]	@ (8006840 <TIM_OC6_SetConfig+0xa0>)
 80067f4:	4293      	cmp	r3, r2
 80067f6:	d003      	beq.n	8006800 <TIM_OC6_SetConfig+0x60>
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	4a12      	ldr	r2, [pc, #72]	@ (8006844 <TIM_OC6_SetConfig+0xa4>)
 80067fc:	4293      	cmp	r3, r2
 80067fe:	d109      	bne.n	8006814 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006800:	697b      	ldr	r3, [r7, #20]
 8006802:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006806:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006808:	683b      	ldr	r3, [r7, #0]
 800680a:	695b      	ldr	r3, [r3, #20]
 800680c:	029b      	lsls	r3, r3, #10
 800680e:	697a      	ldr	r2, [r7, #20]
 8006810:	4313      	orrs	r3, r2
 8006812:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	697a      	ldr	r2, [r7, #20]
 8006818:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	68fa      	ldr	r2, [r7, #12]
 800681e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006820:	683b      	ldr	r3, [r7, #0]
 8006822:	685a      	ldr	r2, [r3, #4]
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	693a      	ldr	r2, [r7, #16]
 800682c:	621a      	str	r2, [r3, #32]
}
 800682e:	bf00      	nop
 8006830:	371c      	adds	r7, #28
 8006832:	46bd      	mov	sp, r7
 8006834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006838:	4770      	bx	lr
 800683a:	bf00      	nop
 800683c:	feff8fff 	.word	0xfeff8fff
 8006840:	40010000 	.word	0x40010000
 8006844:	40010400 	.word	0x40010400

08006848 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006848:	b480      	push	{r7}
 800684a:	b087      	sub	sp, #28
 800684c:	af00      	add	r7, sp, #0
 800684e:	60f8      	str	r0, [r7, #12]
 8006850:	60b9      	str	r1, [r7, #8]
 8006852:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	6a1b      	ldr	r3, [r3, #32]
 8006858:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	6a1b      	ldr	r3, [r3, #32]
 800685e:	f023 0201 	bic.w	r2, r3, #1
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	699b      	ldr	r3, [r3, #24]
 800686a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800686c:	693b      	ldr	r3, [r7, #16]
 800686e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006872:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	011b      	lsls	r3, r3, #4
 8006878:	693a      	ldr	r2, [r7, #16]
 800687a:	4313      	orrs	r3, r2
 800687c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800687e:	697b      	ldr	r3, [r7, #20]
 8006880:	f023 030a 	bic.w	r3, r3, #10
 8006884:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006886:	697a      	ldr	r2, [r7, #20]
 8006888:	68bb      	ldr	r3, [r7, #8]
 800688a:	4313      	orrs	r3, r2
 800688c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	693a      	ldr	r2, [r7, #16]
 8006892:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	697a      	ldr	r2, [r7, #20]
 8006898:	621a      	str	r2, [r3, #32]
}
 800689a:	bf00      	nop
 800689c:	371c      	adds	r7, #28
 800689e:	46bd      	mov	sp, r7
 80068a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a4:	4770      	bx	lr

080068a6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80068a6:	b480      	push	{r7}
 80068a8:	b087      	sub	sp, #28
 80068aa:	af00      	add	r7, sp, #0
 80068ac:	60f8      	str	r0, [r7, #12]
 80068ae:	60b9      	str	r1, [r7, #8]
 80068b0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	6a1b      	ldr	r3, [r3, #32]
 80068b6:	f023 0210 	bic.w	r2, r3, #16
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	699b      	ldr	r3, [r3, #24]
 80068c2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	6a1b      	ldr	r3, [r3, #32]
 80068c8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80068ca:	697b      	ldr	r3, [r7, #20]
 80068cc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80068d0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	031b      	lsls	r3, r3, #12
 80068d6:	697a      	ldr	r2, [r7, #20]
 80068d8:	4313      	orrs	r3, r2
 80068da:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80068dc:	693b      	ldr	r3, [r7, #16]
 80068de:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80068e2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80068e4:	68bb      	ldr	r3, [r7, #8]
 80068e6:	011b      	lsls	r3, r3, #4
 80068e8:	693a      	ldr	r2, [r7, #16]
 80068ea:	4313      	orrs	r3, r2
 80068ec:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	697a      	ldr	r2, [r7, #20]
 80068f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	693a      	ldr	r2, [r7, #16]
 80068f8:	621a      	str	r2, [r3, #32]
}
 80068fa:	bf00      	nop
 80068fc:	371c      	adds	r7, #28
 80068fe:	46bd      	mov	sp, r7
 8006900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006904:	4770      	bx	lr

08006906 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006906:	b480      	push	{r7}
 8006908:	b085      	sub	sp, #20
 800690a:	af00      	add	r7, sp, #0
 800690c:	6078      	str	r0, [r7, #4]
 800690e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	689b      	ldr	r3, [r3, #8]
 8006914:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800691c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800691e:	683a      	ldr	r2, [r7, #0]
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	4313      	orrs	r3, r2
 8006924:	f043 0307 	orr.w	r3, r3, #7
 8006928:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	68fa      	ldr	r2, [r7, #12]
 800692e:	609a      	str	r2, [r3, #8]
}
 8006930:	bf00      	nop
 8006932:	3714      	adds	r7, #20
 8006934:	46bd      	mov	sp, r7
 8006936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800693a:	4770      	bx	lr

0800693c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800693c:	b480      	push	{r7}
 800693e:	b087      	sub	sp, #28
 8006940:	af00      	add	r7, sp, #0
 8006942:	60f8      	str	r0, [r7, #12]
 8006944:	60b9      	str	r1, [r7, #8]
 8006946:	607a      	str	r2, [r7, #4]
 8006948:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	689b      	ldr	r3, [r3, #8]
 800694e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006950:	697b      	ldr	r3, [r7, #20]
 8006952:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006956:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006958:	683b      	ldr	r3, [r7, #0]
 800695a:	021a      	lsls	r2, r3, #8
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	431a      	orrs	r2, r3
 8006960:	68bb      	ldr	r3, [r7, #8]
 8006962:	4313      	orrs	r3, r2
 8006964:	697a      	ldr	r2, [r7, #20]
 8006966:	4313      	orrs	r3, r2
 8006968:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	697a      	ldr	r2, [r7, #20]
 800696e:	609a      	str	r2, [r3, #8]
}
 8006970:	bf00      	nop
 8006972:	371c      	adds	r7, #28
 8006974:	46bd      	mov	sp, r7
 8006976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800697a:	4770      	bx	lr

0800697c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800697c:	b480      	push	{r7}
 800697e:	b087      	sub	sp, #28
 8006980:	af00      	add	r7, sp, #0
 8006982:	60f8      	str	r0, [r7, #12]
 8006984:	60b9      	str	r1, [r7, #8]
 8006986:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006988:	68bb      	ldr	r3, [r7, #8]
 800698a:	f003 031f 	and.w	r3, r3, #31
 800698e:	2201      	movs	r2, #1
 8006990:	fa02 f303 	lsl.w	r3, r2, r3
 8006994:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	6a1a      	ldr	r2, [r3, #32]
 800699a:	697b      	ldr	r3, [r7, #20]
 800699c:	43db      	mvns	r3, r3
 800699e:	401a      	ands	r2, r3
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	6a1a      	ldr	r2, [r3, #32]
 80069a8:	68bb      	ldr	r3, [r7, #8]
 80069aa:	f003 031f 	and.w	r3, r3, #31
 80069ae:	6879      	ldr	r1, [r7, #4]
 80069b0:	fa01 f303 	lsl.w	r3, r1, r3
 80069b4:	431a      	orrs	r2, r3
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	621a      	str	r2, [r3, #32]
}
 80069ba:	bf00      	nop
 80069bc:	371c      	adds	r7, #28
 80069be:	46bd      	mov	sp, r7
 80069c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c4:	4770      	bx	lr
	...

080069c8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80069c8:	b480      	push	{r7}
 80069ca:	b085      	sub	sp, #20
 80069cc:	af00      	add	r7, sp, #0
 80069ce:	6078      	str	r0, [r7, #4]
 80069d0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80069d8:	2b01      	cmp	r3, #1
 80069da:	d101      	bne.n	80069e0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80069dc:	2302      	movs	r3, #2
 80069de:	e06d      	b.n	8006abc <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	2201      	movs	r2, #1
 80069e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	2202      	movs	r2, #2
 80069ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	685b      	ldr	r3, [r3, #4]
 80069f6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	689b      	ldr	r3, [r3, #8]
 80069fe:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	4a30      	ldr	r2, [pc, #192]	@ (8006ac8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006a06:	4293      	cmp	r3, r2
 8006a08:	d004      	beq.n	8006a14 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	4a2f      	ldr	r2, [pc, #188]	@ (8006acc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006a10:	4293      	cmp	r3, r2
 8006a12:	d108      	bne.n	8006a26 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8006a1a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006a1c:	683b      	ldr	r3, [r7, #0]
 8006a1e:	685b      	ldr	r3, [r3, #4]
 8006a20:	68fa      	ldr	r2, [r7, #12]
 8006a22:	4313      	orrs	r3, r2
 8006a24:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006a2c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006a2e:	683b      	ldr	r3, [r7, #0]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	68fa      	ldr	r2, [r7, #12]
 8006a34:	4313      	orrs	r3, r2
 8006a36:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	68fa      	ldr	r2, [r7, #12]
 8006a3e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	4a20      	ldr	r2, [pc, #128]	@ (8006ac8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006a46:	4293      	cmp	r3, r2
 8006a48:	d022      	beq.n	8006a90 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006a52:	d01d      	beq.n	8006a90 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	4a1d      	ldr	r2, [pc, #116]	@ (8006ad0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006a5a:	4293      	cmp	r3, r2
 8006a5c:	d018      	beq.n	8006a90 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	4a1c      	ldr	r2, [pc, #112]	@ (8006ad4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006a64:	4293      	cmp	r3, r2
 8006a66:	d013      	beq.n	8006a90 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	4a1a      	ldr	r2, [pc, #104]	@ (8006ad8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006a6e:	4293      	cmp	r3, r2
 8006a70:	d00e      	beq.n	8006a90 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	4a15      	ldr	r2, [pc, #84]	@ (8006acc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006a78:	4293      	cmp	r3, r2
 8006a7a:	d009      	beq.n	8006a90 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	4a16      	ldr	r2, [pc, #88]	@ (8006adc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006a82:	4293      	cmp	r3, r2
 8006a84:	d004      	beq.n	8006a90 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	4a15      	ldr	r2, [pc, #84]	@ (8006ae0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006a8c:	4293      	cmp	r3, r2
 8006a8e:	d10c      	bne.n	8006aaa <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006a90:	68bb      	ldr	r3, [r7, #8]
 8006a92:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006a96:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006a98:	683b      	ldr	r3, [r7, #0]
 8006a9a:	689b      	ldr	r3, [r3, #8]
 8006a9c:	68ba      	ldr	r2, [r7, #8]
 8006a9e:	4313      	orrs	r3, r2
 8006aa0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	68ba      	ldr	r2, [r7, #8]
 8006aa8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	2201      	movs	r2, #1
 8006aae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	2200      	movs	r2, #0
 8006ab6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006aba:	2300      	movs	r3, #0
}
 8006abc:	4618      	mov	r0, r3
 8006abe:	3714      	adds	r7, #20
 8006ac0:	46bd      	mov	sp, r7
 8006ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac6:	4770      	bx	lr
 8006ac8:	40010000 	.word	0x40010000
 8006acc:	40010400 	.word	0x40010400
 8006ad0:	40000400 	.word	0x40000400
 8006ad4:	40000800 	.word	0x40000800
 8006ad8:	40000c00 	.word	0x40000c00
 8006adc:	40014000 	.word	0x40014000
 8006ae0:	40001800 	.word	0x40001800

08006ae4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006ae4:	b480      	push	{r7}
 8006ae6:	b085      	sub	sp, #20
 8006ae8:	af00      	add	r7, sp, #0
 8006aea:	6078      	str	r0, [r7, #4]
 8006aec:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006aee:	2300      	movs	r3, #0
 8006af0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006af8:	2b01      	cmp	r3, #1
 8006afa:	d101      	bne.n	8006b00 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006afc:	2302      	movs	r3, #2
 8006afe:	e065      	b.n	8006bcc <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	2201      	movs	r2, #1
 8006b04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8006b0e:	683b      	ldr	r3, [r7, #0]
 8006b10:	68db      	ldr	r3, [r3, #12]
 8006b12:	4313      	orrs	r3, r2
 8006b14:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006b1c:	683b      	ldr	r3, [r7, #0]
 8006b1e:	689b      	ldr	r3, [r3, #8]
 8006b20:	4313      	orrs	r3, r2
 8006b22:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8006b2a:	683b      	ldr	r3, [r7, #0]
 8006b2c:	685b      	ldr	r3, [r3, #4]
 8006b2e:	4313      	orrs	r3, r2
 8006b30:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8006b38:	683b      	ldr	r3, [r7, #0]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	4313      	orrs	r3, r2
 8006b3e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006b46:	683b      	ldr	r3, [r7, #0]
 8006b48:	691b      	ldr	r3, [r3, #16]
 8006b4a:	4313      	orrs	r3, r2
 8006b4c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8006b54:	683b      	ldr	r3, [r7, #0]
 8006b56:	695b      	ldr	r3, [r3, #20]
 8006b58:	4313      	orrs	r3, r2
 8006b5a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8006b62:	683b      	ldr	r3, [r7, #0]
 8006b64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b66:	4313      	orrs	r3, r2
 8006b68:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8006b70:	683b      	ldr	r3, [r7, #0]
 8006b72:	699b      	ldr	r3, [r3, #24]
 8006b74:	041b      	lsls	r3, r3, #16
 8006b76:	4313      	orrs	r3, r2
 8006b78:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	4a16      	ldr	r2, [pc, #88]	@ (8006bd8 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8006b80:	4293      	cmp	r3, r2
 8006b82:	d004      	beq.n	8006b8e <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	4a14      	ldr	r2, [pc, #80]	@ (8006bdc <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8006b8a:	4293      	cmp	r3, r2
 8006b8c:	d115      	bne.n	8006bba <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8006b94:	683b      	ldr	r3, [r7, #0]
 8006b96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b98:	051b      	lsls	r3, r3, #20
 8006b9a:	4313      	orrs	r3, r2
 8006b9c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8006ba4:	683b      	ldr	r3, [r7, #0]
 8006ba6:	69db      	ldr	r3, [r3, #28]
 8006ba8:	4313      	orrs	r3, r2
 8006baa:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8006bb2:	683b      	ldr	r3, [r7, #0]
 8006bb4:	6a1b      	ldr	r3, [r3, #32]
 8006bb6:	4313      	orrs	r3, r2
 8006bb8:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	68fa      	ldr	r2, [r7, #12]
 8006bc0:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	2200      	movs	r2, #0
 8006bc6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006bca:	2300      	movs	r3, #0
}
 8006bcc:	4618      	mov	r0, r3
 8006bce:	3714      	adds	r7, #20
 8006bd0:	46bd      	mov	sp, r7
 8006bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd6:	4770      	bx	lr
 8006bd8:	40010000 	.word	0x40010000
 8006bdc:	40010400 	.word	0x40010400

08006be0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006be0:	b480      	push	{r7}
 8006be2:	b083      	sub	sp, #12
 8006be4:	af00      	add	r7, sp, #0
 8006be6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006be8:	bf00      	nop
 8006bea:	370c      	adds	r7, #12
 8006bec:	46bd      	mov	sp, r7
 8006bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf2:	4770      	bx	lr

08006bf4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006bf4:	b480      	push	{r7}
 8006bf6:	b083      	sub	sp, #12
 8006bf8:	af00      	add	r7, sp, #0
 8006bfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006bfc:	bf00      	nop
 8006bfe:	370c      	adds	r7, #12
 8006c00:	46bd      	mov	sp, r7
 8006c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c06:	4770      	bx	lr

08006c08 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006c08:	b480      	push	{r7}
 8006c0a:	b083      	sub	sp, #12
 8006c0c:	af00      	add	r7, sp, #0
 8006c0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006c10:	bf00      	nop
 8006c12:	370c      	adds	r7, #12
 8006c14:	46bd      	mov	sp, r7
 8006c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c1a:	4770      	bx	lr

08006c1c <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006c1c:	b480      	push	{r7}
 8006c1e:	b083      	sub	sp, #12
 8006c20:	af00      	add	r7, sp, #0
 8006c22:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	f103 0208 	add.w	r2, r3, #8
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	f04f 32ff 	mov.w	r2, #4294967295
 8006c34:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	f103 0208 	add.w	r2, r3, #8
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	f103 0208 	add.w	r2, r3, #8
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	2200      	movs	r2, #0
 8006c4e:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006c50:	bf00      	nop
 8006c52:	370c      	adds	r7, #12
 8006c54:	46bd      	mov	sp, r7
 8006c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c5a:	4770      	bx	lr

08006c5c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006c5c:	b480      	push	{r7}
 8006c5e:	b083      	sub	sp, #12
 8006c60:	af00      	add	r7, sp, #0
 8006c62:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	2200      	movs	r2, #0
 8006c68:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006c6a:	bf00      	nop
 8006c6c:	370c      	adds	r7, #12
 8006c6e:	46bd      	mov	sp, r7
 8006c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c74:	4770      	bx	lr

08006c76 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8006c76:	b480      	push	{r7}
 8006c78:	b085      	sub	sp, #20
 8006c7a:	af00      	add	r7, sp, #0
 8006c7c:	6078      	str	r0, [r7, #4]
 8006c7e:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006c80:	683b      	ldr	r3, [r7, #0]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8006c86:	68bb      	ldr	r3, [r7, #8]
 8006c88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c8c:	d103      	bne.n	8006c96 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	691b      	ldr	r3, [r3, #16]
 8006c92:	60fb      	str	r3, [r7, #12]
 8006c94:	e00c      	b.n	8006cb0 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	3308      	adds	r3, #8
 8006c9a:	60fb      	str	r3, [r7, #12]
 8006c9c:	e002      	b.n	8006ca4 <vListInsert+0x2e>
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	685b      	ldr	r3, [r3, #4]
 8006ca2:	60fb      	str	r3, [r7, #12]
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	685b      	ldr	r3, [r3, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	68ba      	ldr	r2, [r7, #8]
 8006cac:	429a      	cmp	r2, r3
 8006cae:	d2f6      	bcs.n	8006c9e <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	685a      	ldr	r2, [r3, #4]
 8006cb4:	683b      	ldr	r3, [r7, #0]
 8006cb6:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006cb8:	683b      	ldr	r3, [r7, #0]
 8006cba:	685b      	ldr	r3, [r3, #4]
 8006cbc:	683a      	ldr	r2, [r7, #0]
 8006cbe:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8006cc0:	683b      	ldr	r3, [r7, #0]
 8006cc2:	68fa      	ldr	r2, [r7, #12]
 8006cc4:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	683a      	ldr	r2, [r7, #0]
 8006cca:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8006ccc:	683b      	ldr	r3, [r7, #0]
 8006cce:	687a      	ldr	r2, [r7, #4]
 8006cd0:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	1c5a      	adds	r2, r3, #1
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	601a      	str	r2, [r3, #0]
}
 8006cdc:	bf00      	nop
 8006cde:	3714      	adds	r7, #20
 8006ce0:	46bd      	mov	sp, r7
 8006ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce6:	4770      	bx	lr

08006ce8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006ce8:	b480      	push	{r7}
 8006cea:	b085      	sub	sp, #20
 8006cec:	af00      	add	r7, sp, #0
 8006cee:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	691b      	ldr	r3, [r3, #16]
 8006cf4:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	685b      	ldr	r3, [r3, #4]
 8006cfa:	687a      	ldr	r2, [r7, #4]
 8006cfc:	6892      	ldr	r2, [r2, #8]
 8006cfe:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	689b      	ldr	r3, [r3, #8]
 8006d04:	687a      	ldr	r2, [r7, #4]
 8006d06:	6852      	ldr	r2, [r2, #4]
 8006d08:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	685b      	ldr	r3, [r3, #4]
 8006d0e:	687a      	ldr	r2, [r7, #4]
 8006d10:	429a      	cmp	r2, r3
 8006d12:	d103      	bne.n	8006d1c <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	689a      	ldr	r2, [r3, #8]
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	2200      	movs	r2, #0
 8006d20:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	1e5a      	subs	r2, r3, #1
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	681b      	ldr	r3, [r3, #0]
}
 8006d30:	4618      	mov	r0, r3
 8006d32:	3714      	adds	r7, #20
 8006d34:	46bd      	mov	sp, r7
 8006d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d3a:	4770      	bx	lr

08006d3c <xQueueGenericReset>:
    }
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8006d3c:	b580      	push	{r7, lr}
 8006d3e:	b086      	sub	sp, #24
 8006d40:	af00      	add	r7, sp, #0
 8006d42:	6078      	str	r0, [r7, #4]
 8006d44:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 8006d46:	2301      	movs	r3, #1
 8006d48:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 8006d4e:	693b      	ldr	r3, [r7, #16]
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d10d      	bne.n	8006d70 <xQueueGenericReset+0x34>
        __asm volatile
 8006d54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d58:	b672      	cpsid	i
 8006d5a:	f383 8811 	msr	BASEPRI, r3
 8006d5e:	f3bf 8f6f 	isb	sy
 8006d62:	f3bf 8f4f 	dsb	sy
 8006d66:	b662      	cpsie	i
 8006d68:	60fb      	str	r3, [r7, #12]
    }
 8006d6a:	bf00      	nop
 8006d6c:	bf00      	nop
 8006d6e:	e7fd      	b.n	8006d6c <xQueueGenericReset+0x30>

    if( ( pxQueue != NULL ) &&
 8006d70:	693b      	ldr	r3, [r7, #16]
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d05d      	beq.n	8006e32 <xQueueGenericReset+0xf6>
        ( pxQueue->uxLength >= 1U ) &&
 8006d76:	693b      	ldr	r3, [r7, #16]
 8006d78:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    if( ( pxQueue != NULL ) &&
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d059      	beq.n	8006e32 <xQueueGenericReset+0xf6>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 8006d7e:	693b      	ldr	r3, [r7, #16]
 8006d80:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006d82:	693b      	ldr	r3, [r7, #16]
 8006d84:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006d86:	2100      	movs	r1, #0
 8006d88:	fba3 2302 	umull	r2, r3, r3, r2
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d000      	beq.n	8006d92 <xQueueGenericReset+0x56>
 8006d90:	2101      	movs	r1, #1
 8006d92:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d14c      	bne.n	8006e32 <xQueueGenericReset+0xf6>
    {
        taskENTER_CRITICAL();
 8006d98:	f002 fa22 	bl	80091e0 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006d9c:	693b      	ldr	r3, [r7, #16]
 8006d9e:	681a      	ldr	r2, [r3, #0]
 8006da0:	693b      	ldr	r3, [r7, #16]
 8006da2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006da4:	6939      	ldr	r1, [r7, #16]
 8006da6:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8006da8:	fb01 f303 	mul.w	r3, r1, r3
 8006dac:	441a      	add	r2, r3
 8006dae:	693b      	ldr	r3, [r7, #16]
 8006db0:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006db2:	693b      	ldr	r3, [r7, #16]
 8006db4:	2200      	movs	r2, #0
 8006db6:	639a      	str	r2, [r3, #56]	@ 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8006db8:	693b      	ldr	r3, [r7, #16]
 8006dba:	681a      	ldr	r2, [r3, #0]
 8006dbc:	693b      	ldr	r3, [r7, #16]
 8006dbe:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006dc0:	693b      	ldr	r3, [r7, #16]
 8006dc2:	681a      	ldr	r2, [r3, #0]
 8006dc4:	693b      	ldr	r3, [r7, #16]
 8006dc6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006dc8:	3b01      	subs	r3, #1
 8006dca:	6939      	ldr	r1, [r7, #16]
 8006dcc:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8006dce:	fb01 f303 	mul.w	r3, r1, r3
 8006dd2:	441a      	add	r2, r3
 8006dd4:	693b      	ldr	r3, [r7, #16]
 8006dd6:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 8006dd8:	693b      	ldr	r3, [r7, #16]
 8006dda:	22ff      	movs	r2, #255	@ 0xff
 8006ddc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 8006de0:	693b      	ldr	r3, [r7, #16]
 8006de2:	22ff      	movs	r2, #255	@ 0xff
 8006de4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

            if( xNewQueue == pdFALSE )
 8006de8:	683b      	ldr	r3, [r7, #0]
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d114      	bne.n	8006e18 <xQueueGenericReset+0xdc>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006dee:	693b      	ldr	r3, [r7, #16]
 8006df0:	691b      	ldr	r3, [r3, #16]
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d01a      	beq.n	8006e2c <xQueueGenericReset+0xf0>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006df6:	693b      	ldr	r3, [r7, #16]
 8006df8:	3310      	adds	r3, #16
 8006dfa:	4618      	mov	r0, r3
 8006dfc:	f001 fa3e 	bl	800827c <xTaskRemoveFromEventList>
 8006e00:	4603      	mov	r3, r0
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d012      	beq.n	8006e2c <xQueueGenericReset+0xf0>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8006e06:	4b17      	ldr	r3, [pc, #92]	@ (8006e64 <xQueueGenericReset+0x128>)
 8006e08:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006e0c:	601a      	str	r2, [r3, #0]
 8006e0e:	f3bf 8f4f 	dsb	sy
 8006e12:	f3bf 8f6f 	isb	sy
 8006e16:	e009      	b.n	8006e2c <xQueueGenericReset+0xf0>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006e18:	693b      	ldr	r3, [r7, #16]
 8006e1a:	3310      	adds	r3, #16
 8006e1c:	4618      	mov	r0, r3
 8006e1e:	f7ff fefd 	bl	8006c1c <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006e22:	693b      	ldr	r3, [r7, #16]
 8006e24:	3324      	adds	r3, #36	@ 0x24
 8006e26:	4618      	mov	r0, r3
 8006e28:	f7ff fef8 	bl	8006c1c <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 8006e2c:	f002 fa0e 	bl	800924c <vPortExitCritical>
 8006e30:	e001      	b.n	8006e36 <xQueueGenericReset+0xfa>
    }
    else
    {
        xReturn = pdFAIL;
 8006e32:	2300      	movs	r3, #0
 8006e34:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 8006e36:	697b      	ldr	r3, [r7, #20]
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d10d      	bne.n	8006e58 <xQueueGenericReset+0x11c>
        __asm volatile
 8006e3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e40:	b672      	cpsid	i
 8006e42:	f383 8811 	msr	BASEPRI, r3
 8006e46:	f3bf 8f6f 	isb	sy
 8006e4a:	f3bf 8f4f 	dsb	sy
 8006e4e:	b662      	cpsie	i
 8006e50:	60bb      	str	r3, [r7, #8]
    }
 8006e52:	bf00      	nop
 8006e54:	bf00      	nop
 8006e56:	e7fd      	b.n	8006e54 <xQueueGenericReset+0x118>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 8006e58:	697b      	ldr	r3, [r7, #20]
}
 8006e5a:	4618      	mov	r0, r3
 8006e5c:	3718      	adds	r7, #24
 8006e5e:	46bd      	mov	sp, r7
 8006e60:	bd80      	pop	{r7, pc}
 8006e62:	bf00      	nop
 8006e64:	e000ed04 	.word	0xe000ed04

08006e68 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8006e68:	b580      	push	{r7, lr}
 8006e6a:	b08a      	sub	sp, #40	@ 0x28
 8006e6c:	af02      	add	r7, sp, #8
 8006e6e:	60f8      	str	r0, [r7, #12]
 8006e70:	60b9      	str	r1, [r7, #8]
 8006e72:	4613      	mov	r3, r2
 8006e74:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 8006e76:	2300      	movs	r3, #0
 8006e78:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d02e      	beq.n	8006ede <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8006e80:	2100      	movs	r1, #0
 8006e82:	68ba      	ldr	r2, [r7, #8]
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	fba3 2302 	umull	r2, r3, r3, r2
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d000      	beq.n	8006e90 <xQueueGenericCreate+0x28>
 8006e8e:	2101      	movs	r1, #1
 8006e90:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d123      	bne.n	8006ede <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	68ba      	ldr	r2, [r7, #8]
 8006e9a:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8006e9e:	f113 0f49 	cmn.w	r3, #73	@ 0x49
 8006ea2:	d81c      	bhi.n	8006ede <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	68ba      	ldr	r2, [r7, #8]
 8006ea8:	fb02 f303 	mul.w	r3, r2, r3
 8006eac:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8006eae:	69bb      	ldr	r3, [r7, #24]
 8006eb0:	3348      	adds	r3, #72	@ 0x48
 8006eb2:	4618      	mov	r0, r3
 8006eb4:	f002 faca 	bl	800944c <pvPortMalloc>
 8006eb8:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 8006eba:	69fb      	ldr	r3, [r7, #28]
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d01f      	beq.n	8006f00 <xQueueGenericCreate+0x98>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8006ec0:	69fb      	ldr	r3, [r7, #28]
 8006ec2:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006ec4:	697b      	ldr	r3, [r7, #20]
 8006ec6:	3348      	adds	r3, #72	@ 0x48
 8006ec8:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006eca:	79fa      	ldrb	r2, [r7, #7]
 8006ecc:	69fb      	ldr	r3, [r7, #28]
 8006ece:	9300      	str	r3, [sp, #0]
 8006ed0:	4613      	mov	r3, r2
 8006ed2:	697a      	ldr	r2, [r7, #20]
 8006ed4:	68b9      	ldr	r1, [r7, #8]
 8006ed6:	68f8      	ldr	r0, [r7, #12]
 8006ed8:	f000 f817 	bl	8006f0a <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 8006edc:	e010      	b.n	8006f00 <xQueueGenericCreate+0x98>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 8006ede:	69fb      	ldr	r3, [r7, #28]
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d10d      	bne.n	8006f00 <xQueueGenericCreate+0x98>
        __asm volatile
 8006ee4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ee8:	b672      	cpsid	i
 8006eea:	f383 8811 	msr	BASEPRI, r3
 8006eee:	f3bf 8f6f 	isb	sy
 8006ef2:	f3bf 8f4f 	dsb	sy
 8006ef6:	b662      	cpsie	i
 8006ef8:	613b      	str	r3, [r7, #16]
    }
 8006efa:	bf00      	nop
 8006efc:	bf00      	nop
 8006efe:	e7fd      	b.n	8006efc <xQueueGenericCreate+0x94>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8006f00:	69fb      	ldr	r3, [r7, #28]
    }
 8006f02:	4618      	mov	r0, r3
 8006f04:	3720      	adds	r7, #32
 8006f06:	46bd      	mov	sp, r7
 8006f08:	bd80      	pop	{r7, pc}

08006f0a <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8006f0a:	b580      	push	{r7, lr}
 8006f0c:	b084      	sub	sp, #16
 8006f0e:	af00      	add	r7, sp, #0
 8006f10:	60f8      	str	r0, [r7, #12]
 8006f12:	60b9      	str	r1, [r7, #8]
 8006f14:	607a      	str	r2, [r7, #4]
 8006f16:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8006f18:	68bb      	ldr	r3, [r7, #8]
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d103      	bne.n	8006f26 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006f1e:	69bb      	ldr	r3, [r7, #24]
 8006f20:	69ba      	ldr	r2, [r7, #24]
 8006f22:	601a      	str	r2, [r3, #0]
 8006f24:	e002      	b.n	8006f2c <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006f26:	69bb      	ldr	r3, [r7, #24]
 8006f28:	687a      	ldr	r2, [r7, #4]
 8006f2a:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8006f2c:	69bb      	ldr	r3, [r7, #24]
 8006f2e:	68fa      	ldr	r2, [r7, #12]
 8006f30:	63da      	str	r2, [r3, #60]	@ 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8006f32:	69bb      	ldr	r3, [r7, #24]
 8006f34:	68ba      	ldr	r2, [r7, #8]
 8006f36:	641a      	str	r2, [r3, #64]	@ 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006f38:	2101      	movs	r1, #1
 8006f3a:	69b8      	ldr	r0, [r7, #24]
 8006f3c:	f7ff fefe 	bl	8006d3c <xQueueGenericReset>
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 8006f40:	bf00      	nop
 8006f42:	3710      	adds	r7, #16
 8006f44:	46bd      	mov	sp, r7
 8006f46:	bd80      	pop	{r7, pc}

08006f48 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 8006f48:	b580      	push	{r7, lr}
 8006f4a:	b08e      	sub	sp, #56	@ 0x38
 8006f4c:	af00      	add	r7, sp, #0
 8006f4e:	60f8      	str	r0, [r7, #12]
 8006f50:	60b9      	str	r1, [r7, #8]
 8006f52:	607a      	str	r2, [r7, #4]
 8006f54:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006f56:	2300      	movs	r3, #0
 8006f58:	637b      	str	r3, [r7, #52]	@ 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	633b      	str	r3, [r7, #48]	@ 0x30

    configASSERT( pxQueue );
 8006f5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d10d      	bne.n	8006f80 <xQueueGenericSend+0x38>
        __asm volatile
 8006f64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f68:	b672      	cpsid	i
 8006f6a:	f383 8811 	msr	BASEPRI, r3
 8006f6e:	f3bf 8f6f 	isb	sy
 8006f72:	f3bf 8f4f 	dsb	sy
 8006f76:	b662      	cpsie	i
 8006f78:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
 8006f7a:	bf00      	nop
 8006f7c:	bf00      	nop
 8006f7e:	e7fd      	b.n	8006f7c <xQueueGenericSend+0x34>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006f80:	68bb      	ldr	r3, [r7, #8]
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d103      	bne.n	8006f8e <xQueueGenericSend+0x46>
 8006f86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d101      	bne.n	8006f92 <xQueueGenericSend+0x4a>
 8006f8e:	2301      	movs	r3, #1
 8006f90:	e000      	b.n	8006f94 <xQueueGenericSend+0x4c>
 8006f92:	2300      	movs	r3, #0
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d10d      	bne.n	8006fb4 <xQueueGenericSend+0x6c>
        __asm volatile
 8006f98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f9c:	b672      	cpsid	i
 8006f9e:	f383 8811 	msr	BASEPRI, r3
 8006fa2:	f3bf 8f6f 	isb	sy
 8006fa6:	f3bf 8f4f 	dsb	sy
 8006faa:	b662      	cpsie	i
 8006fac:	627b      	str	r3, [r7, #36]	@ 0x24
    }
 8006fae:	bf00      	nop
 8006fb0:	bf00      	nop
 8006fb2:	e7fd      	b.n	8006fb0 <xQueueGenericSend+0x68>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006fb4:	683b      	ldr	r3, [r7, #0]
 8006fb6:	2b02      	cmp	r3, #2
 8006fb8:	d103      	bne.n	8006fc2 <xQueueGenericSend+0x7a>
 8006fba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006fbc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006fbe:	2b01      	cmp	r3, #1
 8006fc0:	d101      	bne.n	8006fc6 <xQueueGenericSend+0x7e>
 8006fc2:	2301      	movs	r3, #1
 8006fc4:	e000      	b.n	8006fc8 <xQueueGenericSend+0x80>
 8006fc6:	2300      	movs	r3, #0
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d10d      	bne.n	8006fe8 <xQueueGenericSend+0xa0>
        __asm volatile
 8006fcc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006fd0:	b672      	cpsid	i
 8006fd2:	f383 8811 	msr	BASEPRI, r3
 8006fd6:	f3bf 8f6f 	isb	sy
 8006fda:	f3bf 8f4f 	dsb	sy
 8006fde:	b662      	cpsie	i
 8006fe0:	623b      	str	r3, [r7, #32]
    }
 8006fe2:	bf00      	nop
 8006fe4:	bf00      	nop
 8006fe6:	e7fd      	b.n	8006fe4 <xQueueGenericSend+0x9c>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006fe8:	f001 fb64 	bl	80086b4 <xTaskGetSchedulerState>
 8006fec:	4603      	mov	r3, r0
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d102      	bne.n	8006ff8 <xQueueGenericSend+0xb0>
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d101      	bne.n	8006ffc <xQueueGenericSend+0xb4>
 8006ff8:	2301      	movs	r3, #1
 8006ffa:	e000      	b.n	8006ffe <xQueueGenericSend+0xb6>
 8006ffc:	2300      	movs	r3, #0
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d10d      	bne.n	800701e <xQueueGenericSend+0xd6>
        __asm volatile
 8007002:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007006:	b672      	cpsid	i
 8007008:	f383 8811 	msr	BASEPRI, r3
 800700c:	f3bf 8f6f 	isb	sy
 8007010:	f3bf 8f4f 	dsb	sy
 8007014:	b662      	cpsie	i
 8007016:	61fb      	str	r3, [r7, #28]
    }
 8007018:	bf00      	nop
 800701a:	bf00      	nop
 800701c:	e7fd      	b.n	800701a <xQueueGenericSend+0xd2>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 800701e:	f002 f8df 	bl	80091e0 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007022:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007024:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007026:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007028:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800702a:	429a      	cmp	r2, r3
 800702c:	d302      	bcc.n	8007034 <xQueueGenericSend+0xec>
 800702e:	683b      	ldr	r3, [r7, #0]
 8007030:	2b02      	cmp	r3, #2
 8007032:	d129      	bne.n	8007088 <xQueueGenericSend+0x140>
                        }
                    }
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007034:	683a      	ldr	r2, [r7, #0]
 8007036:	68b9      	ldr	r1, [r7, #8]
 8007038:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800703a:	f000 fa37 	bl	80074ac <prvCopyDataToQueue>
 800703e:	62f8      	str	r0, [r7, #44]	@ 0x2c

                    /* If there was a task waiting for data to arrive on the
                     * queue then unblock it now. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007040:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007042:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007044:	2b00      	cmp	r3, #0
 8007046:	d010      	beq.n	800706a <xQueueGenericSend+0x122>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007048:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800704a:	3324      	adds	r3, #36	@ 0x24
 800704c:	4618      	mov	r0, r3
 800704e:	f001 f915 	bl	800827c <xTaskRemoveFromEventList>
 8007052:	4603      	mov	r3, r0
 8007054:	2b00      	cmp	r3, #0
 8007056:	d013      	beq.n	8007080 <xQueueGenericSend+0x138>
                        {
                            /* The unblocked task has a priority higher than
                             * our own so yield immediately.  Yes it is ok to do
                             * this from within the critical section - the kernel
                             * takes care of that. */
                            queueYIELD_IF_USING_PREEMPTION();
 8007058:	4b3f      	ldr	r3, [pc, #252]	@ (8007158 <xQueueGenericSend+0x210>)
 800705a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800705e:	601a      	str	r2, [r3, #0]
 8007060:	f3bf 8f4f 	dsb	sy
 8007064:	f3bf 8f6f 	isb	sy
 8007068:	e00a      	b.n	8007080 <xQueueGenericSend+0x138>
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                    else if( xYieldRequired != pdFALSE )
 800706a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800706c:	2b00      	cmp	r3, #0
 800706e:	d007      	beq.n	8007080 <xQueueGenericSend+0x138>
                    {
                        /* This path is a special case that will only get
                         * executed if the task was holding multiple mutexes and
                         * the mutexes were given back in an order that is
                         * different to that in which they were taken. */
                        queueYIELD_IF_USING_PREEMPTION();
 8007070:	4b39      	ldr	r3, [pc, #228]	@ (8007158 <xQueueGenericSend+0x210>)
 8007072:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007076:	601a      	str	r2, [r3, #0]
 8007078:	f3bf 8f4f 	dsb	sy
 800707c:	f3bf 8f6f 	isb	sy
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8007080:	f002 f8e4 	bl	800924c <vPortExitCritical>
                return pdPASS;
 8007084:	2301      	movs	r3, #1
 8007086:	e063      	b.n	8007150 <xQueueGenericSend+0x208>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	2b00      	cmp	r3, #0
 800708c:	d103      	bne.n	8007096 <xQueueGenericSend+0x14e>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 800708e:	f002 f8dd 	bl	800924c <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    return errQUEUE_FULL;
 8007092:	2300      	movs	r3, #0
 8007094:	e05c      	b.n	8007150 <xQueueGenericSend+0x208>
                }
                else if( xEntryTimeSet == pdFALSE )
 8007096:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007098:	2b00      	cmp	r3, #0
 800709a:	d106      	bne.n	80070aa <xQueueGenericSend+0x162>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 800709c:	f107 0314 	add.w	r3, r7, #20
 80070a0:	4618      	mov	r0, r3
 80070a2:	f001 f9c5 	bl	8008430 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80070a6:	2301      	movs	r3, #1
 80070a8:	637b      	str	r3, [r7, #52]	@ 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80070aa:	f002 f8cf 	bl	800924c <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80070ae:	f000 fdd5 	bl	8007c5c <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80070b2:	f002 f895 	bl	80091e0 <vPortEnterCritical>
 80070b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070b8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80070bc:	b25b      	sxtb	r3, r3
 80070be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070c2:	d103      	bne.n	80070cc <xQueueGenericSend+0x184>
 80070c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070c6:	2200      	movs	r2, #0
 80070c8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80070cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070ce:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80070d2:	b25b      	sxtb	r3, r3
 80070d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070d8:	d103      	bne.n	80070e2 <xQueueGenericSend+0x19a>
 80070da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070dc:	2200      	movs	r2, #0
 80070de:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80070e2:	f002 f8b3 	bl	800924c <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80070e6:	1d3a      	adds	r2, r7, #4
 80070e8:	f107 0314 	add.w	r3, r7, #20
 80070ec:	4611      	mov	r1, r2
 80070ee:	4618      	mov	r0, r3
 80070f0:	f001 f9b4 	bl	800845c <xTaskCheckForTimeOut>
 80070f4:	4603      	mov	r3, r0
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d124      	bne.n	8007144 <xQueueGenericSend+0x1fc>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80070fa:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80070fc:	f000 face 	bl	800769c <prvIsQueueFull>
 8007100:	4603      	mov	r3, r0
 8007102:	2b00      	cmp	r3, #0
 8007104:	d018      	beq.n	8007138 <xQueueGenericSend+0x1f0>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007106:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007108:	3310      	adds	r3, #16
 800710a:	687a      	ldr	r2, [r7, #4]
 800710c:	4611      	mov	r1, r2
 800710e:	4618      	mov	r0, r3
 8007110:	f001 f844 	bl	800819c <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list. It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready list instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8007114:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007116:	f000 fa59 	bl	80075cc <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in the ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 800711a:	f000 fdad 	bl	8007c78 <xTaskResumeAll>
 800711e:	4603      	mov	r3, r0
 8007120:	2b00      	cmp	r3, #0
 8007122:	f47f af7c 	bne.w	800701e <xQueueGenericSend+0xd6>
                {
                    portYIELD_WITHIN_API();
 8007126:	4b0c      	ldr	r3, [pc, #48]	@ (8007158 <xQueueGenericSend+0x210>)
 8007128:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800712c:	601a      	str	r2, [r3, #0]
 800712e:	f3bf 8f4f 	dsb	sy
 8007132:	f3bf 8f6f 	isb	sy
 8007136:	e772      	b.n	800701e <xQueueGenericSend+0xd6>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8007138:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800713a:	f000 fa47 	bl	80075cc <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800713e:	f000 fd9b 	bl	8007c78 <xTaskResumeAll>
 8007142:	e76c      	b.n	800701e <xQueueGenericSend+0xd6>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8007144:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007146:	f000 fa41 	bl	80075cc <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 800714a:	f000 fd95 	bl	8007c78 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            return errQUEUE_FULL;
 800714e:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 8007150:	4618      	mov	r0, r3
 8007152:	3738      	adds	r7, #56	@ 0x38
 8007154:	46bd      	mov	sp, r7
 8007156:	bd80      	pop	{r7, pc}
 8007158:	e000ed04 	.word	0xe000ed04

0800715c <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 800715c:	b580      	push	{r7, lr}
 800715e:	b092      	sub	sp, #72	@ 0x48
 8007160:	af00      	add	r7, sp, #0
 8007162:	60f8      	str	r0, [r7, #12]
 8007164:	60b9      	str	r1, [r7, #8]
 8007166:	607a      	str	r2, [r7, #4]
 8007168:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	643b      	str	r3, [r7, #64]	@ 0x40

    configASSERT( pxQueue );
 800716e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007170:	2b00      	cmp	r3, #0
 8007172:	d10d      	bne.n	8007190 <xQueueGenericSendFromISR+0x34>
        __asm volatile
 8007174:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007178:	b672      	cpsid	i
 800717a:	f383 8811 	msr	BASEPRI, r3
 800717e:	f3bf 8f6f 	isb	sy
 8007182:	f3bf 8f4f 	dsb	sy
 8007186:	b662      	cpsie	i
 8007188:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
 800718a:	bf00      	nop
 800718c:	bf00      	nop
 800718e:	e7fd      	b.n	800718c <xQueueGenericSendFromISR+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007190:	68bb      	ldr	r3, [r7, #8]
 8007192:	2b00      	cmp	r3, #0
 8007194:	d103      	bne.n	800719e <xQueueGenericSendFromISR+0x42>
 8007196:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007198:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800719a:	2b00      	cmp	r3, #0
 800719c:	d101      	bne.n	80071a2 <xQueueGenericSendFromISR+0x46>
 800719e:	2301      	movs	r3, #1
 80071a0:	e000      	b.n	80071a4 <xQueueGenericSendFromISR+0x48>
 80071a2:	2300      	movs	r3, #0
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d10d      	bne.n	80071c4 <xQueueGenericSendFromISR+0x68>
        __asm volatile
 80071a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071ac:	b672      	cpsid	i
 80071ae:	f383 8811 	msr	BASEPRI, r3
 80071b2:	f3bf 8f6f 	isb	sy
 80071b6:	f3bf 8f4f 	dsb	sy
 80071ba:	b662      	cpsie	i
 80071bc:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
 80071be:	bf00      	nop
 80071c0:	bf00      	nop
 80071c2:	e7fd      	b.n	80071c0 <xQueueGenericSendFromISR+0x64>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80071c4:	683b      	ldr	r3, [r7, #0]
 80071c6:	2b02      	cmp	r3, #2
 80071c8:	d103      	bne.n	80071d2 <xQueueGenericSendFromISR+0x76>
 80071ca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80071cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80071ce:	2b01      	cmp	r3, #1
 80071d0:	d101      	bne.n	80071d6 <xQueueGenericSendFromISR+0x7a>
 80071d2:	2301      	movs	r3, #1
 80071d4:	e000      	b.n	80071d8 <xQueueGenericSendFromISR+0x7c>
 80071d6:	2300      	movs	r3, #0
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d10d      	bne.n	80071f8 <xQueueGenericSendFromISR+0x9c>
        __asm volatile
 80071dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071e0:	b672      	cpsid	i
 80071e2:	f383 8811 	msr	BASEPRI, r3
 80071e6:	f3bf 8f6f 	isb	sy
 80071ea:	f3bf 8f4f 	dsb	sy
 80071ee:	b662      	cpsie	i
 80071f0:	627b      	str	r3, [r7, #36]	@ 0x24
    }
 80071f2:	bf00      	nop
 80071f4:	bf00      	nop
 80071f6:	e7fd      	b.n	80071f4 <xQueueGenericSendFromISR+0x98>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80071f8:	f002 f8e2 	bl	80093c0 <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 80071fc:	f3ef 8211 	mrs	r2, BASEPRI
 8007200:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007204:	b672      	cpsid	i
 8007206:	f383 8811 	msr	BASEPRI, r3
 800720a:	f3bf 8f6f 	isb	sy
 800720e:	f3bf 8f4f 	dsb	sy
 8007212:	b662      	cpsie	i
 8007214:	623a      	str	r2, [r7, #32]
 8007216:	61fb      	str	r3, [r7, #28]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 8007218:	6a3b      	ldr	r3, [r7, #32]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800721a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800721c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800721e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007220:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007222:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007224:	429a      	cmp	r2, r3
 8007226:	d302      	bcc.n	800722e <xQueueGenericSendFromISR+0xd2>
 8007228:	683b      	ldr	r3, [r7, #0]
 800722a:	2b02      	cmp	r3, #2
 800722c:	d149      	bne.n	80072c2 <xQueueGenericSendFromISR+0x166>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 800722e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007230:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007234:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007238:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800723a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800723c:	637b      	str	r3, [r7, #52]	@ 0x34
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800723e:	683a      	ldr	r2, [r7, #0]
 8007240:	68b9      	ldr	r1, [r7, #8]
 8007242:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8007244:	f000 f932 	bl	80074ac <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 8007248:	f997 303b 	ldrsb.w	r3, [r7, #59]	@ 0x3b
 800724c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007250:	d112      	bne.n	8007278 <xQueueGenericSendFromISR+0x11c>
                        }
                    }
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007252:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007254:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007256:	2b00      	cmp	r3, #0
 8007258:	d030      	beq.n	80072bc <xQueueGenericSendFromISR+0x160>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800725a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800725c:	3324      	adds	r3, #36	@ 0x24
 800725e:	4618      	mov	r0, r3
 8007260:	f001 f80c 	bl	800827c <xTaskRemoveFromEventList>
 8007264:	4603      	mov	r3, r0
 8007266:	2b00      	cmp	r3, #0
 8007268:	d028      	beq.n	80072bc <xQueueGenericSendFromISR+0x160>
                        {
                            /* The task waiting has a higher priority so record that a
                             * context switch is required. */
                            if( pxHigherPriorityTaskWoken != NULL )
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	2b00      	cmp	r3, #0
 800726e:	d025      	beq.n	80072bc <xQueueGenericSendFromISR+0x160>
                            {
                                *pxHigherPriorityTaskWoken = pdTRUE;
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	2201      	movs	r2, #1
 8007274:	601a      	str	r2, [r3, #0]
 8007276:	e021      	b.n	80072bc <xQueueGenericSendFromISR+0x160>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                prvIncrementQueueTxLock( pxQueue, cTxLock );
 8007278:	f000 fe0c 	bl	8007e94 <uxTaskGetNumberOfTasks>
 800727c:	6338      	str	r0, [r7, #48]	@ 0x30
 800727e:	f997 303b 	ldrsb.w	r3, [r7, #59]	@ 0x3b
 8007282:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007284:	429a      	cmp	r2, r3
 8007286:	d919      	bls.n	80072bc <xQueueGenericSendFromISR+0x160>
 8007288:	f997 303b 	ldrsb.w	r3, [r7, #59]	@ 0x3b
 800728c:	2b7f      	cmp	r3, #127	@ 0x7f
 800728e:	d10d      	bne.n	80072ac <xQueueGenericSendFromISR+0x150>
        __asm volatile
 8007290:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007294:	b672      	cpsid	i
 8007296:	f383 8811 	msr	BASEPRI, r3
 800729a:	f3bf 8f6f 	isb	sy
 800729e:	f3bf 8f4f 	dsb	sy
 80072a2:	b662      	cpsie	i
 80072a4:	61bb      	str	r3, [r7, #24]
    }
 80072a6:	bf00      	nop
 80072a8:	bf00      	nop
 80072aa:	e7fd      	b.n	80072a8 <xQueueGenericSendFromISR+0x14c>
 80072ac:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 80072b0:	3301      	adds	r3, #1
 80072b2:	b2db      	uxtb	r3, r3
 80072b4:	b25a      	sxtb	r2, r3
 80072b6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80072b8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
            }

            xReturn = pdPASS;
 80072bc:	2301      	movs	r3, #1
 80072be:	647b      	str	r3, [r7, #68]	@ 0x44
        {
 80072c0:	e001      	b.n	80072c6 <xQueueGenericSendFromISR+0x16a>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
            xReturn = errQUEUE_FULL;
 80072c2:	2300      	movs	r3, #0
 80072c4:	647b      	str	r3, [r7, #68]	@ 0x44
 80072c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80072c8:	617b      	str	r3, [r7, #20]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 80072ca:	697b      	ldr	r3, [r7, #20]
 80072cc:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 80072d0:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 80072d2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
}
 80072d4:	4618      	mov	r0, r3
 80072d6:	3748      	adds	r7, #72	@ 0x48
 80072d8:	46bd      	mov	sp, r7
 80072da:	bd80      	pop	{r7, pc}

080072dc <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 80072dc:	b580      	push	{r7, lr}
 80072de:	b08c      	sub	sp, #48	@ 0x30
 80072e0:	af00      	add	r7, sp, #0
 80072e2:	60f8      	str	r0, [r7, #12]
 80072e4:	60b9      	str	r1, [r7, #8]
 80072e6:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 80072e8:	2300      	movs	r3, #0
 80072ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	62bb      	str	r3, [r7, #40]	@ 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 80072f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d10d      	bne.n	8007312 <xQueueReceive+0x36>
        __asm volatile
 80072f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80072fa:	b672      	cpsid	i
 80072fc:	f383 8811 	msr	BASEPRI, r3
 8007300:	f3bf 8f6f 	isb	sy
 8007304:	f3bf 8f4f 	dsb	sy
 8007308:	b662      	cpsie	i
 800730a:	623b      	str	r3, [r7, #32]
    }
 800730c:	bf00      	nop
 800730e:	bf00      	nop
 8007310:	e7fd      	b.n	800730e <xQueueReceive+0x32>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007312:	68bb      	ldr	r3, [r7, #8]
 8007314:	2b00      	cmp	r3, #0
 8007316:	d103      	bne.n	8007320 <xQueueReceive+0x44>
 8007318:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800731a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800731c:	2b00      	cmp	r3, #0
 800731e:	d101      	bne.n	8007324 <xQueueReceive+0x48>
 8007320:	2301      	movs	r3, #1
 8007322:	e000      	b.n	8007326 <xQueueReceive+0x4a>
 8007324:	2300      	movs	r3, #0
 8007326:	2b00      	cmp	r3, #0
 8007328:	d10d      	bne.n	8007346 <xQueueReceive+0x6a>
        __asm volatile
 800732a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800732e:	b672      	cpsid	i
 8007330:	f383 8811 	msr	BASEPRI, r3
 8007334:	f3bf 8f6f 	isb	sy
 8007338:	f3bf 8f4f 	dsb	sy
 800733c:	b662      	cpsie	i
 800733e:	61fb      	str	r3, [r7, #28]
    }
 8007340:	bf00      	nop
 8007342:	bf00      	nop
 8007344:	e7fd      	b.n	8007342 <xQueueReceive+0x66>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007346:	f001 f9b5 	bl	80086b4 <xTaskGetSchedulerState>
 800734a:	4603      	mov	r3, r0
 800734c:	2b00      	cmp	r3, #0
 800734e:	d102      	bne.n	8007356 <xQueueReceive+0x7a>
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	2b00      	cmp	r3, #0
 8007354:	d101      	bne.n	800735a <xQueueReceive+0x7e>
 8007356:	2301      	movs	r3, #1
 8007358:	e000      	b.n	800735c <xQueueReceive+0x80>
 800735a:	2300      	movs	r3, #0
 800735c:	2b00      	cmp	r3, #0
 800735e:	d10d      	bne.n	800737c <xQueueReceive+0xa0>
        __asm volatile
 8007360:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007364:	b672      	cpsid	i
 8007366:	f383 8811 	msr	BASEPRI, r3
 800736a:	f3bf 8f6f 	isb	sy
 800736e:	f3bf 8f4f 	dsb	sy
 8007372:	b662      	cpsie	i
 8007374:	61bb      	str	r3, [r7, #24]
    }
 8007376:	bf00      	nop
 8007378:	bf00      	nop
 800737a:	e7fd      	b.n	8007378 <xQueueReceive+0x9c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 800737c:	f001 ff30 	bl	80091e0 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007380:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007382:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007384:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007386:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007388:	2b00      	cmp	r3, #0
 800738a:	d01f      	beq.n	80073cc <xQueueReceive+0xf0>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 800738c:	68b9      	ldr	r1, [r7, #8]
 800738e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007390:	f000 f8f6 	bl	8007580 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007394:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007396:	1e5a      	subs	r2, r3, #1
 8007398:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800739a:	639a      	str	r2, [r3, #56]	@ 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800739c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800739e:	691b      	ldr	r3, [r3, #16]
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d00f      	beq.n	80073c4 <xQueueReceive+0xe8>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80073a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80073a6:	3310      	adds	r3, #16
 80073a8:	4618      	mov	r0, r3
 80073aa:	f000 ff67 	bl	800827c <xTaskRemoveFromEventList>
 80073ae:	4603      	mov	r3, r0
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d007      	beq.n	80073c4 <xQueueReceive+0xe8>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 80073b4:	4b3c      	ldr	r3, [pc, #240]	@ (80074a8 <xQueueReceive+0x1cc>)
 80073b6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80073ba:	601a      	str	r2, [r3, #0]
 80073bc:	f3bf 8f4f 	dsb	sy
 80073c0:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 80073c4:	f001 ff42 	bl	800924c <vPortExitCritical>
                return pdPASS;
 80073c8:	2301      	movs	r3, #1
 80073ca:	e069      	b.n	80074a0 <xQueueReceive+0x1c4>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d103      	bne.n	80073da <xQueueReceive+0xfe>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 80073d2:	f001 ff3b 	bl	800924c <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 80073d6:	2300      	movs	r3, #0
 80073d8:	e062      	b.n	80074a0 <xQueueReceive+0x1c4>
                }
                else if( xEntryTimeSet == pdFALSE )
 80073da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d106      	bne.n	80073ee <xQueueReceive+0x112>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80073e0:	f107 0310 	add.w	r3, r7, #16
 80073e4:	4618      	mov	r0, r3
 80073e6:	f001 f823 	bl	8008430 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80073ea:	2301      	movs	r3, #1
 80073ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80073ee:	f001 ff2d 	bl	800924c <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80073f2:	f000 fc33 	bl	8007c5c <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80073f6:	f001 fef3 	bl	80091e0 <vPortEnterCritical>
 80073fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80073fc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007400:	b25b      	sxtb	r3, r3
 8007402:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007406:	d103      	bne.n	8007410 <xQueueReceive+0x134>
 8007408:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800740a:	2200      	movs	r2, #0
 800740c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007410:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007412:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007416:	b25b      	sxtb	r3, r3
 8007418:	f1b3 3fff 	cmp.w	r3, #4294967295
 800741c:	d103      	bne.n	8007426 <xQueueReceive+0x14a>
 800741e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007420:	2200      	movs	r2, #0
 8007422:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007426:	f001 ff11 	bl	800924c <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800742a:	1d3a      	adds	r2, r7, #4
 800742c:	f107 0310 	add.w	r3, r7, #16
 8007430:	4611      	mov	r1, r2
 8007432:	4618      	mov	r0, r3
 8007434:	f001 f812 	bl	800845c <xTaskCheckForTimeOut>
 8007438:	4603      	mov	r3, r0
 800743a:	2b00      	cmp	r3, #0
 800743c:	d123      	bne.n	8007486 <xQueueReceive+0x1aa>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800743e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007440:	f000 f916 	bl	8007670 <prvIsQueueEmpty>
 8007444:	4603      	mov	r3, r0
 8007446:	2b00      	cmp	r3, #0
 8007448:	d017      	beq.n	800747a <xQueueReceive+0x19e>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800744a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800744c:	3324      	adds	r3, #36	@ 0x24
 800744e:	687a      	ldr	r2, [r7, #4]
 8007450:	4611      	mov	r1, r2
 8007452:	4618      	mov	r0, r3
 8007454:	f000 fea2 	bl	800819c <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8007458:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800745a:	f000 f8b7 	bl	80075cc <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 800745e:	f000 fc0b 	bl	8007c78 <xTaskResumeAll>
 8007462:	4603      	mov	r3, r0
 8007464:	2b00      	cmp	r3, #0
 8007466:	d189      	bne.n	800737c <xQueueReceive+0xa0>
                {
                    portYIELD_WITHIN_API();
 8007468:	4b0f      	ldr	r3, [pc, #60]	@ (80074a8 <xQueueReceive+0x1cc>)
 800746a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800746e:	601a      	str	r2, [r3, #0]
 8007470:	f3bf 8f4f 	dsb	sy
 8007474:	f3bf 8f6f 	isb	sy
 8007478:	e780      	b.n	800737c <xQueueReceive+0xa0>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 800747a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800747c:	f000 f8a6 	bl	80075cc <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8007480:	f000 fbfa 	bl	8007c78 <xTaskResumeAll>
 8007484:	e77a      	b.n	800737c <xQueueReceive+0xa0>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8007486:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007488:	f000 f8a0 	bl	80075cc <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 800748c:	f000 fbf4 	bl	8007c78 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007490:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007492:	f000 f8ed 	bl	8007670 <prvIsQueueEmpty>
 8007496:	4603      	mov	r3, r0
 8007498:	2b00      	cmp	r3, #0
 800749a:	f43f af6f 	beq.w	800737c <xQueueReceive+0xa0>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 800749e:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 80074a0:	4618      	mov	r0, r3
 80074a2:	3730      	adds	r7, #48	@ 0x30
 80074a4:	46bd      	mov	sp, r7
 80074a6:	bd80      	pop	{r7, pc}
 80074a8:	e000ed04 	.word	0xe000ed04

080074ac <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 80074ac:	b580      	push	{r7, lr}
 80074ae:	b086      	sub	sp, #24
 80074b0:	af00      	add	r7, sp, #0
 80074b2:	60f8      	str	r0, [r7, #12]
 80074b4:	60b9      	str	r1, [r7, #8]
 80074b6:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 80074b8:	2300      	movs	r3, #0
 80074ba:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80074c0:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d10d      	bne.n	80074e6 <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
        {
            if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d14d      	bne.n	800756e <prvCopyDataToQueue+0xc2>
            {
                /* The mutex is no longer being held. */
                xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	689b      	ldr	r3, [r3, #8]
 80074d6:	4618      	mov	r0, r3
 80074d8:	f001 f90a 	bl	80086f0 <xTaskPriorityDisinherit>
 80074dc:	6178      	str	r0, [r7, #20]
                pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	2200      	movs	r2, #0
 80074e2:	609a      	str	r2, [r3, #8]
 80074e4:	e043      	b.n	800756e <prvCopyDataToQueue+0xc2>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d119      	bne.n	8007520 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	6858      	ldr	r0, [r3, #4]
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80074f4:	461a      	mov	r2, r3
 80074f6:	68b9      	ldr	r1, [r7, #8]
 80074f8:	f002 f9ac 	bl	8009854 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	685a      	ldr	r2, [r3, #4]
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007504:	441a      	add	r2, r3
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	685a      	ldr	r2, [r3, #4]
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	689b      	ldr	r3, [r3, #8]
 8007512:	429a      	cmp	r2, r3
 8007514:	d32b      	bcc.n	800756e <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	681a      	ldr	r2, [r3, #0]
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	605a      	str	r2, [r3, #4]
 800751e:	e026      	b.n	800756e <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	68d8      	ldr	r0, [r3, #12]
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007528:	461a      	mov	r2, r3
 800752a:	68b9      	ldr	r1, [r7, #8]
 800752c:	f002 f992 	bl	8009854 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	68da      	ldr	r2, [r3, #12]
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007538:	425b      	negs	r3, r3
 800753a:	441a      	add	r2, r3
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	68da      	ldr	r2, [r3, #12]
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	429a      	cmp	r2, r3
 800754a:	d207      	bcs.n	800755c <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	689a      	ldr	r2, [r3, #8]
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007554:	425b      	negs	r3, r3
 8007556:	441a      	add	r2, r3
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	2b02      	cmp	r3, #2
 8007560:	d105      	bne.n	800756e <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007562:	693b      	ldr	r3, [r7, #16]
 8007564:	2b00      	cmp	r3, #0
 8007566:	d002      	beq.n	800756e <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8007568:	693b      	ldr	r3, [r7, #16]
 800756a:	3b01      	subs	r3, #1
 800756c:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800756e:	693b      	ldr	r3, [r7, #16]
 8007570:	1c5a      	adds	r2, r3, #1
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	639a      	str	r2, [r3, #56]	@ 0x38

    return xReturn;
 8007576:	697b      	ldr	r3, [r7, #20]
}
 8007578:	4618      	mov	r0, r3
 800757a:	3718      	adds	r7, #24
 800757c:	46bd      	mov	sp, r7
 800757e:	bd80      	pop	{r7, pc}

08007580 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8007580:	b580      	push	{r7, lr}
 8007582:	b082      	sub	sp, #8
 8007584:	af00      	add	r7, sp, #0
 8007586:	6078      	str	r0, [r7, #4]
 8007588:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800758e:	2b00      	cmp	r3, #0
 8007590:	d018      	beq.n	80075c4 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	68da      	ldr	r2, [r3, #12]
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800759a:	441a      	add	r2, r3
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	68da      	ldr	r2, [r3, #12]
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	689b      	ldr	r3, [r3, #8]
 80075a8:	429a      	cmp	r2, r3
 80075aa:	d303      	bcc.n	80075b4 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	681a      	ldr	r2, [r3, #0]
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	68d9      	ldr	r1, [r3, #12]
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80075bc:	461a      	mov	r2, r3
 80075be:	6838      	ldr	r0, [r7, #0]
 80075c0:	f002 f948 	bl	8009854 <memcpy>
    }
}
 80075c4:	bf00      	nop
 80075c6:	3708      	adds	r7, #8
 80075c8:	46bd      	mov	sp, r7
 80075ca:	bd80      	pop	{r7, pc}

080075cc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80075cc:	b580      	push	{r7, lr}
 80075ce:	b084      	sub	sp, #16
 80075d0:	af00      	add	r7, sp, #0
 80075d2:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 80075d4:	f001 fe04 	bl	80091e0 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80075de:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80075e0:	e011      	b.n	8007606 <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d012      	beq.n	8007610 <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	3324      	adds	r3, #36	@ 0x24
 80075ee:	4618      	mov	r0, r3
 80075f0:	f000 fe44 	bl	800827c <xTaskRemoveFromEventList>
 80075f4:	4603      	mov	r3, r0
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d001      	beq.n	80075fe <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 80075fa:	f000 ff9b 	bl	8008534 <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 80075fe:	7bfb      	ldrb	r3, [r7, #15]
 8007600:	3b01      	subs	r3, #1
 8007602:	b2db      	uxtb	r3, r3
 8007604:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8007606:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800760a:	2b00      	cmp	r3, #0
 800760c:	dce9      	bgt.n	80075e2 <prvUnlockQueue+0x16>
 800760e:	e000      	b.n	8007612 <prvUnlockQueue+0x46>
                    break;
 8007610:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	22ff      	movs	r2, #255	@ 0xff
 8007616:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
    taskEXIT_CRITICAL();
 800761a:	f001 fe17 	bl	800924c <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 800761e:	f001 fddf 	bl	80091e0 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007628:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 800762a:	e011      	b.n	8007650 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	691b      	ldr	r3, [r3, #16]
 8007630:	2b00      	cmp	r3, #0
 8007632:	d012      	beq.n	800765a <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	3310      	adds	r3, #16
 8007638:	4618      	mov	r0, r3
 800763a:	f000 fe1f 	bl	800827c <xTaskRemoveFromEventList>
 800763e:	4603      	mov	r3, r0
 8007640:	2b00      	cmp	r3, #0
 8007642:	d001      	beq.n	8007648 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8007644:	f000 ff76 	bl	8008534 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8007648:	7bbb      	ldrb	r3, [r7, #14]
 800764a:	3b01      	subs	r3, #1
 800764c:	b2db      	uxtb	r3, r3
 800764e:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8007650:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007654:	2b00      	cmp	r3, #0
 8007656:	dce9      	bgt.n	800762c <prvUnlockQueue+0x60>
 8007658:	e000      	b.n	800765c <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 800765a:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	22ff      	movs	r2, #255	@ 0xff
 8007660:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    }
    taskEXIT_CRITICAL();
 8007664:	f001 fdf2 	bl	800924c <vPortExitCritical>
}
 8007668:	bf00      	nop
 800766a:	3710      	adds	r7, #16
 800766c:	46bd      	mov	sp, r7
 800766e:	bd80      	pop	{r7, pc}

08007670 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8007670:	b580      	push	{r7, lr}
 8007672:	b084      	sub	sp, #16
 8007674:	af00      	add	r7, sp, #0
 8007676:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8007678:	f001 fdb2 	bl	80091e0 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007680:	2b00      	cmp	r3, #0
 8007682:	d102      	bne.n	800768a <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8007684:	2301      	movs	r3, #1
 8007686:	60fb      	str	r3, [r7, #12]
 8007688:	e001      	b.n	800768e <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 800768a:	2300      	movs	r3, #0
 800768c:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 800768e:	f001 fddd 	bl	800924c <vPortExitCritical>

    return xReturn;
 8007692:	68fb      	ldr	r3, [r7, #12]
}
 8007694:	4618      	mov	r0, r3
 8007696:	3710      	adds	r7, #16
 8007698:	46bd      	mov	sp, r7
 800769a:	bd80      	pop	{r7, pc}

0800769c <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 800769c:	b580      	push	{r7, lr}
 800769e:	b084      	sub	sp, #16
 80076a0:	af00      	add	r7, sp, #0
 80076a2:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 80076a4:	f001 fd9c 	bl	80091e0 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80076b0:	429a      	cmp	r2, r3
 80076b2:	d102      	bne.n	80076ba <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 80076b4:	2301      	movs	r3, #1
 80076b6:	60fb      	str	r3, [r7, #12]
 80076b8:	e001      	b.n	80076be <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 80076ba:	2300      	movs	r3, #0
 80076bc:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 80076be:	f001 fdc5 	bl	800924c <vPortExitCritical>

    return xReturn;
 80076c2:	68fb      	ldr	r3, [r7, #12]
}
 80076c4:	4618      	mov	r0, r3
 80076c6:	3710      	adds	r7, #16
 80076c8:	46bd      	mov	sp, r7
 80076ca:	bd80      	pop	{r7, pc}

080076cc <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 80076cc:	b480      	push	{r7}
 80076ce:	b087      	sub	sp, #28
 80076d0:	af00      	add	r7, sp, #0
 80076d2:	6078      	str	r0, [r7, #4]
 80076d4:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 80076d6:	2300      	movs	r3, #0
 80076d8:	613b      	str	r3, [r7, #16]

        configASSERT( xQueue );
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d10d      	bne.n	80076fc <vQueueAddToRegistry+0x30>
        __asm volatile
 80076e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076e4:	b672      	cpsid	i
 80076e6:	f383 8811 	msr	BASEPRI, r3
 80076ea:	f3bf 8f6f 	isb	sy
 80076ee:	f3bf 8f4f 	dsb	sy
 80076f2:	b662      	cpsie	i
 80076f4:	60fb      	str	r3, [r7, #12]
    }
 80076f6:	bf00      	nop
 80076f8:	bf00      	nop
 80076fa:	e7fd      	b.n	80076f8 <vQueueAddToRegistry+0x2c>

        if( pcQueueName != NULL )
 80076fc:	683b      	ldr	r3, [r7, #0]
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d024      	beq.n	800774c <vQueueAddToRegistry+0x80>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007702:	2300      	movs	r3, #0
 8007704:	617b      	str	r3, [r7, #20]
 8007706:	e01e      	b.n	8007746 <vQueueAddToRegistry+0x7a>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 8007708:	4a18      	ldr	r2, [pc, #96]	@ (800776c <vQueueAddToRegistry+0xa0>)
 800770a:	697b      	ldr	r3, [r7, #20]
 800770c:	00db      	lsls	r3, r3, #3
 800770e:	4413      	add	r3, r2
 8007710:	685b      	ldr	r3, [r3, #4]
 8007712:	687a      	ldr	r2, [r7, #4]
 8007714:	429a      	cmp	r2, r3
 8007716:	d105      	bne.n	8007724 <vQueueAddToRegistry+0x58>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8007718:	697b      	ldr	r3, [r7, #20]
 800771a:	00db      	lsls	r3, r3, #3
 800771c:	4a13      	ldr	r2, [pc, #76]	@ (800776c <vQueueAddToRegistry+0xa0>)
 800771e:	4413      	add	r3, r2
 8007720:	613b      	str	r3, [r7, #16]
                    break;
 8007722:	e013      	b.n	800774c <vQueueAddToRegistry+0x80>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 8007724:	693b      	ldr	r3, [r7, #16]
 8007726:	2b00      	cmp	r3, #0
 8007728:	d10a      	bne.n	8007740 <vQueueAddToRegistry+0x74>
 800772a:	4a10      	ldr	r2, [pc, #64]	@ (800776c <vQueueAddToRegistry+0xa0>)
 800772c:	697b      	ldr	r3, [r7, #20]
 800772e:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007732:	2b00      	cmp	r3, #0
 8007734:	d104      	bne.n	8007740 <vQueueAddToRegistry+0x74>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8007736:	697b      	ldr	r3, [r7, #20]
 8007738:	00db      	lsls	r3, r3, #3
 800773a:	4a0c      	ldr	r2, [pc, #48]	@ (800776c <vQueueAddToRegistry+0xa0>)
 800773c:	4413      	add	r3, r2
 800773e:	613b      	str	r3, [r7, #16]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007740:	697b      	ldr	r3, [r7, #20]
 8007742:	3301      	adds	r3, #1
 8007744:	617b      	str	r3, [r7, #20]
 8007746:	697b      	ldr	r3, [r7, #20]
 8007748:	2b07      	cmp	r3, #7
 800774a:	d9dd      	bls.n	8007708 <vQueueAddToRegistry+0x3c>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 800774c:	693b      	ldr	r3, [r7, #16]
 800774e:	2b00      	cmp	r3, #0
 8007750:	d005      	beq.n	800775e <vQueueAddToRegistry+0x92>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 8007752:	693b      	ldr	r3, [r7, #16]
 8007754:	683a      	ldr	r2, [r7, #0]
 8007756:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 8007758:	693b      	ldr	r3, [r7, #16]
 800775a:	687a      	ldr	r2, [r7, #4]
 800775c:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
        }
    }
 800775e:	bf00      	nop
 8007760:	371c      	adds	r7, #28
 8007762:	46bd      	mov	sp, r7
 8007764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007768:	4770      	bx	lr
 800776a:	bf00      	nop
 800776c:	2000030c 	.word	0x2000030c

08007770 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8007770:	b580      	push	{r7, lr}
 8007772:	b086      	sub	sp, #24
 8007774:	af00      	add	r7, sp, #0
 8007776:	60f8      	str	r0, [r7, #12]
 8007778:	60b9      	str	r1, [r7, #8]
 800777a:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8007780:	f001 fd2e 	bl	80091e0 <vPortEnterCritical>
 8007784:	697b      	ldr	r3, [r7, #20]
 8007786:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800778a:	b25b      	sxtb	r3, r3
 800778c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007790:	d103      	bne.n	800779a <vQueueWaitForMessageRestricted+0x2a>
 8007792:	697b      	ldr	r3, [r7, #20]
 8007794:	2200      	movs	r2, #0
 8007796:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800779a:	697b      	ldr	r3, [r7, #20]
 800779c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80077a0:	b25b      	sxtb	r3, r3
 80077a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077a6:	d103      	bne.n	80077b0 <vQueueWaitForMessageRestricted+0x40>
 80077a8:	697b      	ldr	r3, [r7, #20]
 80077aa:	2200      	movs	r2, #0
 80077ac:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80077b0:	f001 fd4c 	bl	800924c <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80077b4:	697b      	ldr	r3, [r7, #20]
 80077b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d106      	bne.n	80077ca <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80077bc:	697b      	ldr	r3, [r7, #20]
 80077be:	3324      	adds	r3, #36	@ 0x24
 80077c0:	687a      	ldr	r2, [r7, #4]
 80077c2:	68b9      	ldr	r1, [r7, #8]
 80077c4:	4618      	mov	r0, r3
 80077c6:	f000 fd11 	bl	80081ec <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 80077ca:	6978      	ldr	r0, [r7, #20]
 80077cc:	f7ff fefe 	bl	80075cc <prvUnlockQueue>
    }
 80077d0:	bf00      	nop
 80077d2:	3718      	adds	r7, #24
 80077d4:	46bd      	mov	sp, r7
 80077d6:	bd80      	pop	{r7, pc}

080077d8 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 80077d8:	b580      	push	{r7, lr}
 80077da:	b08c      	sub	sp, #48	@ 0x30
 80077dc:	af04      	add	r7, sp, #16
 80077de:	60f8      	str	r0, [r7, #12]
 80077e0:	60b9      	str	r1, [r7, #8]
 80077e2:	603b      	str	r3, [r7, #0]
 80077e4:	4613      	mov	r3, r2
 80077e6:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80077e8:	88fb      	ldrh	r3, [r7, #6]
 80077ea:	009b      	lsls	r3, r3, #2
 80077ec:	4618      	mov	r0, r3
 80077ee:	f001 fe2d 	bl	800944c <pvPortMalloc>
 80077f2:	6178      	str	r0, [r7, #20]

            if( pxStack != NULL )
 80077f4:	697b      	ldr	r3, [r7, #20]
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d013      	beq.n	8007822 <xTaskCreate+0x4a>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80077fa:	2054      	movs	r0, #84	@ 0x54
 80077fc:	f001 fe26 	bl	800944c <pvPortMalloc>
 8007800:	61f8      	str	r0, [r7, #28]

                if( pxNewTCB != NULL )
 8007802:	69fb      	ldr	r3, [r7, #28]
 8007804:	2b00      	cmp	r3, #0
 8007806:	d008      	beq.n	800781a <xTaskCreate+0x42>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8007808:	2254      	movs	r2, #84	@ 0x54
 800780a:	2100      	movs	r1, #0
 800780c:	69f8      	ldr	r0, [r7, #28]
 800780e:	f001 fff5 	bl	80097fc <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 8007812:	69fb      	ldr	r3, [r7, #28]
 8007814:	697a      	ldr	r2, [r7, #20]
 8007816:	631a      	str	r2, [r3, #48]	@ 0x30
 8007818:	e005      	b.n	8007826 <xTaskCreate+0x4e>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 800781a:	6978      	ldr	r0, [r7, #20]
 800781c:	f001 fed6 	bl	80095cc <vPortFree>
 8007820:	e001      	b.n	8007826 <xTaskCreate+0x4e>
                }
            }
            else
            {
                pxNewTCB = NULL;
 8007822:	2300      	movs	r3, #0
 8007824:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8007826:	69fb      	ldr	r3, [r7, #28]
 8007828:	2b00      	cmp	r3, #0
 800782a:	d013      	beq.n	8007854 <xTaskCreate+0x7c>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800782c:	88fa      	ldrh	r2, [r7, #6]
 800782e:	2300      	movs	r3, #0
 8007830:	9303      	str	r3, [sp, #12]
 8007832:	69fb      	ldr	r3, [r7, #28]
 8007834:	9302      	str	r3, [sp, #8]
 8007836:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007838:	9301      	str	r3, [sp, #4]
 800783a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800783c:	9300      	str	r3, [sp, #0]
 800783e:	683b      	ldr	r3, [r7, #0]
 8007840:	68b9      	ldr	r1, [r7, #8]
 8007842:	68f8      	ldr	r0, [r7, #12]
 8007844:	f000 f80e 	bl	8007864 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8007848:	69f8      	ldr	r0, [r7, #28]
 800784a:	f000 f897 	bl	800797c <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 800784e:	2301      	movs	r3, #1
 8007850:	61bb      	str	r3, [r7, #24]
 8007852:	e002      	b.n	800785a <xTaskCreate+0x82>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007854:	f04f 33ff 	mov.w	r3, #4294967295
 8007858:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 800785a:	69bb      	ldr	r3, [r7, #24]
    }
 800785c:	4618      	mov	r0, r3
 800785e:	3720      	adds	r7, #32
 8007860:	46bd      	mov	sp, r7
 8007862:	bd80      	pop	{r7, pc}

08007864 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8007864:	b580      	push	{r7, lr}
 8007866:	b088      	sub	sp, #32
 8007868:	af00      	add	r7, sp, #0
 800786a:	60f8      	str	r0, [r7, #12]
 800786c:	60b9      	str	r1, [r7, #8]
 800786e:	607a      	str	r2, [r7, #4]
 8007870:	603b      	str	r3, [r7, #0]
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007872:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007874:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007876:	6879      	ldr	r1, [r7, #4]
 8007878:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800787c:	440b      	add	r3, r1
 800787e:	009b      	lsls	r3, r3, #2
 8007880:	4413      	add	r3, r2
 8007882:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007884:	69bb      	ldr	r3, [r7, #24]
 8007886:	f023 0307 	bic.w	r3, r3, #7
 800788a:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800788c:	69bb      	ldr	r3, [r7, #24]
 800788e:	f003 0307 	and.w	r3, r3, #7
 8007892:	2b00      	cmp	r3, #0
 8007894:	d00d      	beq.n	80078b2 <prvInitialiseNewTask+0x4e>
        __asm volatile
 8007896:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800789a:	b672      	cpsid	i
 800789c:	f383 8811 	msr	BASEPRI, r3
 80078a0:	f3bf 8f6f 	isb	sy
 80078a4:	f3bf 8f4f 	dsb	sy
 80078a8:	b662      	cpsie	i
 80078aa:	617b      	str	r3, [r7, #20]
    }
 80078ac:	bf00      	nop
 80078ae:	bf00      	nop
 80078b0:	e7fd      	b.n	80078ae <prvInitialiseNewTask+0x4a>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 80078b2:	68bb      	ldr	r3, [r7, #8]
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d01e      	beq.n	80078f6 <prvInitialiseNewTask+0x92>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80078b8:	2300      	movs	r3, #0
 80078ba:	61fb      	str	r3, [r7, #28]
 80078bc:	e012      	b.n	80078e4 <prvInitialiseNewTask+0x80>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80078be:	68ba      	ldr	r2, [r7, #8]
 80078c0:	69fb      	ldr	r3, [r7, #28]
 80078c2:	4413      	add	r3, r2
 80078c4:	7819      	ldrb	r1, [r3, #0]
 80078c6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80078c8:	69fb      	ldr	r3, [r7, #28]
 80078ca:	4413      	add	r3, r2
 80078cc:	3334      	adds	r3, #52	@ 0x34
 80078ce:	460a      	mov	r2, r1
 80078d0:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 80078d2:	68ba      	ldr	r2, [r7, #8]
 80078d4:	69fb      	ldr	r3, [r7, #28]
 80078d6:	4413      	add	r3, r2
 80078d8:	781b      	ldrb	r3, [r3, #0]
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d006      	beq.n	80078ec <prvInitialiseNewTask+0x88>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80078de:	69fb      	ldr	r3, [r7, #28]
 80078e0:	3301      	adds	r3, #1
 80078e2:	61fb      	str	r3, [r7, #28]
 80078e4:	69fb      	ldr	r3, [r7, #28]
 80078e6:	2b0f      	cmp	r3, #15
 80078e8:	d9e9      	bls.n	80078be <prvInitialiseNewTask+0x5a>
 80078ea:	e000      	b.n	80078ee <prvInitialiseNewTask+0x8a>
            {
                break;
 80078ec:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80078ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078f0:	2200      	movs	r2, #0
 80078f2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 80078f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80078f8:	2b04      	cmp	r3, #4
 80078fa:	d90d      	bls.n	8007918 <prvInitialiseNewTask+0xb4>
        __asm volatile
 80078fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007900:	b672      	cpsid	i
 8007902:	f383 8811 	msr	BASEPRI, r3
 8007906:	f3bf 8f6f 	isb	sy
 800790a:	f3bf 8f4f 	dsb	sy
 800790e:	b662      	cpsie	i
 8007910:	613b      	str	r3, [r7, #16]
    }
 8007912:	bf00      	nop
 8007914:	bf00      	nop
 8007916:	e7fd      	b.n	8007914 <prvInitialiseNewTask+0xb0>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007918:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800791a:	2b04      	cmp	r3, #4
 800791c:	d901      	bls.n	8007922 <prvInitialiseNewTask+0xbe>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800791e:	2304      	movs	r3, #4
 8007920:	62bb      	str	r3, [r7, #40]	@ 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8007922:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007924:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007926:	62da      	str	r2, [r3, #44]	@ 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 8007928:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800792a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800792c:	645a      	str	r2, [r3, #68]	@ 0x44
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800792e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007930:	3304      	adds	r3, #4
 8007932:	4618      	mov	r0, r3
 8007934:	f7ff f992 	bl	8006c5c <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007938:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800793a:	3318      	adds	r3, #24
 800793c:	4618      	mov	r0, r3
 800793e:	f7ff f98d 	bl	8006c5c <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007942:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007944:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007946:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007948:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800794a:	f1c3 0205 	rsb	r2, r3, #5
 800794e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007950:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007952:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007954:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007956:	625a      	str	r2, [r3, #36]	@ 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007958:	683a      	ldr	r2, [r7, #0]
 800795a:	68f9      	ldr	r1, [r7, #12]
 800795c:	69b8      	ldr	r0, [r7, #24]
 800795e:	f001 fb2d 	bl	8008fbc <pxPortInitialiseStack>
 8007962:	4602      	mov	r2, r0
 8007964:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007966:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8007968:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800796a:	2b00      	cmp	r3, #0
 800796c:	d002      	beq.n	8007974 <prvInitialiseNewTask+0x110>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800796e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007970:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007972:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8007974:	bf00      	nop
 8007976:	3720      	adds	r7, #32
 8007978:	46bd      	mov	sp, r7
 800797a:	bd80      	pop	{r7, pc}

0800797c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 800797c:	b580      	push	{r7, lr}
 800797e:	b084      	sub	sp, #16
 8007980:	af00      	add	r7, sp, #0
 8007982:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8007984:	f001 fc2c 	bl	80091e0 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8007988:	4b3e      	ldr	r3, [pc, #248]	@ (8007a84 <prvAddNewTaskToReadyList+0x108>)
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	3301      	adds	r3, #1
 800798e:	4a3d      	ldr	r2, [pc, #244]	@ (8007a84 <prvAddNewTaskToReadyList+0x108>)
 8007990:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8007992:	4b3d      	ldr	r3, [pc, #244]	@ (8007a88 <prvAddNewTaskToReadyList+0x10c>)
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	2b00      	cmp	r3, #0
 8007998:	d109      	bne.n	80079ae <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 800799a:	4a3b      	ldr	r2, [pc, #236]	@ (8007a88 <prvAddNewTaskToReadyList+0x10c>)
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80079a0:	4b38      	ldr	r3, [pc, #224]	@ (8007a84 <prvAddNewTaskToReadyList+0x108>)
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	2b01      	cmp	r3, #1
 80079a6:	d110      	bne.n	80079ca <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 80079a8:	f000 fdea 	bl	8008580 <prvInitialiseTaskLists>
 80079ac:	e00d      	b.n	80079ca <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 80079ae:	4b37      	ldr	r3, [pc, #220]	@ (8007a8c <prvAddNewTaskToReadyList+0x110>)
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d109      	bne.n	80079ca <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80079b6:	4b34      	ldr	r3, [pc, #208]	@ (8007a88 <prvAddNewTaskToReadyList+0x10c>)
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80079c0:	429a      	cmp	r2, r3
 80079c2:	d802      	bhi.n	80079ca <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 80079c4:	4a30      	ldr	r2, [pc, #192]	@ (8007a88 <prvAddNewTaskToReadyList+0x10c>)
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 80079ca:	4b31      	ldr	r3, [pc, #196]	@ (8007a90 <prvAddNewTaskToReadyList+0x114>)
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	3301      	adds	r3, #1
 80079d0:	4a2f      	ldr	r2, [pc, #188]	@ (8007a90 <prvAddNewTaskToReadyList+0x114>)
 80079d2:	6013      	str	r3, [r2, #0]
            pxNewTCB->uxTCBNumber = uxTaskNumber;
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80079d8:	2201      	movs	r2, #1
 80079da:	409a      	lsls	r2, r3
 80079dc:	4b2d      	ldr	r3, [pc, #180]	@ (8007a94 <prvAddNewTaskToReadyList+0x118>)
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	4313      	orrs	r3, r2
 80079e2:	4a2c      	ldr	r2, [pc, #176]	@ (8007a94 <prvAddNewTaskToReadyList+0x118>)
 80079e4:	6013      	str	r3, [r2, #0]
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80079ea:	492b      	ldr	r1, [pc, #172]	@ (8007a98 <prvAddNewTaskToReadyList+0x11c>)
 80079ec:	4613      	mov	r3, r2
 80079ee:	009b      	lsls	r3, r3, #2
 80079f0:	4413      	add	r3, r2
 80079f2:	009b      	lsls	r3, r3, #2
 80079f4:	440b      	add	r3, r1
 80079f6:	3304      	adds	r3, #4
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	60fb      	str	r3, [r7, #12]
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	68fa      	ldr	r2, [r7, #12]
 8007a00:	609a      	str	r2, [r3, #8]
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	689a      	ldr	r2, [r3, #8]
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	60da      	str	r2, [r3, #12]
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	689b      	ldr	r3, [r3, #8]
 8007a0e:	687a      	ldr	r2, [r7, #4]
 8007a10:	3204      	adds	r2, #4
 8007a12:	605a      	str	r2, [r3, #4]
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	1d1a      	adds	r2, r3, #4
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	609a      	str	r2, [r3, #8]
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007a20:	4613      	mov	r3, r2
 8007a22:	009b      	lsls	r3, r3, #2
 8007a24:	4413      	add	r3, r2
 8007a26:	009b      	lsls	r3, r3, #2
 8007a28:	4a1b      	ldr	r2, [pc, #108]	@ (8007a98 <prvAddNewTaskToReadyList+0x11c>)
 8007a2a:	441a      	add	r2, r3
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	615a      	str	r2, [r3, #20]
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007a34:	4918      	ldr	r1, [pc, #96]	@ (8007a98 <prvAddNewTaskToReadyList+0x11c>)
 8007a36:	4613      	mov	r3, r2
 8007a38:	009b      	lsls	r3, r3, #2
 8007a3a:	4413      	add	r3, r2
 8007a3c:	009b      	lsls	r3, r3, #2
 8007a3e:	440b      	add	r3, r1
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	1c59      	adds	r1, r3, #1
 8007a44:	4814      	ldr	r0, [pc, #80]	@ (8007a98 <prvAddNewTaskToReadyList+0x11c>)
 8007a46:	4613      	mov	r3, r2
 8007a48:	009b      	lsls	r3, r3, #2
 8007a4a:	4413      	add	r3, r2
 8007a4c:	009b      	lsls	r3, r3, #2
 8007a4e:	4403      	add	r3, r0
 8007a50:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8007a52:	f001 fbfb 	bl	800924c <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8007a56:	4b0d      	ldr	r3, [pc, #52]	@ (8007a8c <prvAddNewTaskToReadyList+0x110>)
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d00e      	beq.n	8007a7c <prvAddNewTaskToReadyList+0x100>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007a5e:	4b0a      	ldr	r3, [pc, #40]	@ (8007a88 <prvAddNewTaskToReadyList+0x10c>)
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a68:	429a      	cmp	r2, r3
 8007a6a:	d207      	bcs.n	8007a7c <prvAddNewTaskToReadyList+0x100>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8007a6c:	4b0b      	ldr	r3, [pc, #44]	@ (8007a9c <prvAddNewTaskToReadyList+0x120>)
 8007a6e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007a72:	601a      	str	r2, [r3, #0]
 8007a74:	f3bf 8f4f 	dsb	sy
 8007a78:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8007a7c:	bf00      	nop
 8007a7e:	3710      	adds	r7, #16
 8007a80:	46bd      	mov	sp, r7
 8007a82:	bd80      	pop	{r7, pc}
 8007a84:	20000424 	.word	0x20000424
 8007a88:	2000034c 	.word	0x2000034c
 8007a8c:	20000430 	.word	0x20000430
 8007a90:	20000440 	.word	0x20000440
 8007a94:	2000042c 	.word	0x2000042c
 8007a98:	20000350 	.word	0x20000350
 8007a9c:	e000ed04 	.word	0xe000ed04

08007aa0 <xTaskDelayUntil>:

#if ( INCLUDE_xTaskDelayUntil == 1 )

    BaseType_t xTaskDelayUntil( TickType_t * const pxPreviousWakeTime,
                                const TickType_t xTimeIncrement )
    {
 8007aa0:	b580      	push	{r7, lr}
 8007aa2:	b08a      	sub	sp, #40	@ 0x28
 8007aa4:	af00      	add	r7, sp, #0
 8007aa6:	6078      	str	r0, [r7, #4]
 8007aa8:	6039      	str	r1, [r7, #0]
        TickType_t xTimeToWake;
        BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8007aaa:	2300      	movs	r3, #0
 8007aac:	627b      	str	r3, [r7, #36]	@ 0x24

        configASSERT( pxPreviousWakeTime );
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d10d      	bne.n	8007ad0 <xTaskDelayUntil+0x30>
        __asm volatile
 8007ab4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ab8:	b672      	cpsid	i
 8007aba:	f383 8811 	msr	BASEPRI, r3
 8007abe:	f3bf 8f6f 	isb	sy
 8007ac2:	f3bf 8f4f 	dsb	sy
 8007ac6:	b662      	cpsie	i
 8007ac8:	617b      	str	r3, [r7, #20]
    }
 8007aca:	bf00      	nop
 8007acc:	bf00      	nop
 8007ace:	e7fd      	b.n	8007acc <xTaskDelayUntil+0x2c>
        configASSERT( ( xTimeIncrement > 0U ) );
 8007ad0:	683b      	ldr	r3, [r7, #0]
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d10d      	bne.n	8007af2 <xTaskDelayUntil+0x52>
        __asm volatile
 8007ad6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ada:	b672      	cpsid	i
 8007adc:	f383 8811 	msr	BASEPRI, r3
 8007ae0:	f3bf 8f6f 	isb	sy
 8007ae4:	f3bf 8f4f 	dsb	sy
 8007ae8:	b662      	cpsie	i
 8007aea:	613b      	str	r3, [r7, #16]
    }
 8007aec:	bf00      	nop
 8007aee:	bf00      	nop
 8007af0:	e7fd      	b.n	8007aee <xTaskDelayUntil+0x4e>
        configASSERT( uxSchedulerSuspended == 0 );
 8007af2:	4b2c      	ldr	r3, [pc, #176]	@ (8007ba4 <xTaskDelayUntil+0x104>)
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d00d      	beq.n	8007b16 <xTaskDelayUntil+0x76>
        __asm volatile
 8007afa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007afe:	b672      	cpsid	i
 8007b00:	f383 8811 	msr	BASEPRI, r3
 8007b04:	f3bf 8f6f 	isb	sy
 8007b08:	f3bf 8f4f 	dsb	sy
 8007b0c:	b662      	cpsie	i
 8007b0e:	60fb      	str	r3, [r7, #12]
    }
 8007b10:	bf00      	nop
 8007b12:	bf00      	nop
 8007b14:	e7fd      	b.n	8007b12 <xTaskDelayUntil+0x72>

        vTaskSuspendAll();
 8007b16:	f000 f8a1 	bl	8007c5c <vTaskSuspendAll>
        {
            /* Minor optimisation.  The tick count cannot change in this
             * block. */
            const TickType_t xConstTickCount = xTickCount;
 8007b1a:	4b23      	ldr	r3, [pc, #140]	@ (8007ba8 <xTaskDelayUntil+0x108>)
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	623b      	str	r3, [r7, #32]

            /* Generate the tick time at which the task wants to wake. */
            xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	683a      	ldr	r2, [r7, #0]
 8007b26:	4413      	add	r3, r2
 8007b28:	61fb      	str	r3, [r7, #28]

            if( xConstTickCount < *pxPreviousWakeTime )
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	6a3a      	ldr	r2, [r7, #32]
 8007b30:	429a      	cmp	r2, r3
 8007b32:	d20b      	bcs.n	8007b4c <xTaskDelayUntil+0xac>
                /* The tick count has overflowed since this function was
                 * lasted called.  In this case the only time we should ever
                 * actually delay is if the wake time has also  overflowed,
                 * and the wake time is greater than the tick time.  When this
                 * is the case it is as if neither time had overflowed. */
                if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	69fa      	ldr	r2, [r7, #28]
 8007b3a:	429a      	cmp	r2, r3
 8007b3c:	d211      	bcs.n	8007b62 <xTaskDelayUntil+0xc2>
 8007b3e:	69fa      	ldr	r2, [r7, #28]
 8007b40:	6a3b      	ldr	r3, [r7, #32]
 8007b42:	429a      	cmp	r2, r3
 8007b44:	d90d      	bls.n	8007b62 <xTaskDelayUntil+0xc2>
                {
                    xShouldDelay = pdTRUE;
 8007b46:	2301      	movs	r3, #1
 8007b48:	627b      	str	r3, [r7, #36]	@ 0x24
 8007b4a:	e00a      	b.n	8007b62 <xTaskDelayUntil+0xc2>
            else
            {
                /* The tick time has not overflowed.  In this case we will
                 * delay if either the wake time has overflowed, and/or the
                 * tick time is less than the wake time. */
                if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	69fa      	ldr	r2, [r7, #28]
 8007b52:	429a      	cmp	r2, r3
 8007b54:	d303      	bcc.n	8007b5e <xTaskDelayUntil+0xbe>
 8007b56:	69fa      	ldr	r2, [r7, #28]
 8007b58:	6a3b      	ldr	r3, [r7, #32]
 8007b5a:	429a      	cmp	r2, r3
 8007b5c:	d901      	bls.n	8007b62 <xTaskDelayUntil+0xc2>
                {
                    xShouldDelay = pdTRUE;
 8007b5e:	2301      	movs	r3, #1
 8007b60:	627b      	str	r3, [r7, #36]	@ 0x24
                    mtCOVERAGE_TEST_MARKER();
                }
            }

            /* Update the wake time ready for the next call. */
            *pxPreviousWakeTime = xTimeToWake;
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	69fa      	ldr	r2, [r7, #28]
 8007b66:	601a      	str	r2, [r3, #0]

            if( xShouldDelay != pdFALSE )
 8007b68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d006      	beq.n	8007b7c <xTaskDelayUntil+0xdc>
            {
                traceTASK_DELAY_UNTIL( xTimeToWake );

                /* prvAddCurrentTaskToDelayedList() needs the block time, not
                 * the time to wake, so subtract the current tick count. */
                prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8007b6e:	69fa      	ldr	r2, [r7, #28]
 8007b70:	6a3b      	ldr	r3, [r7, #32]
 8007b72:	1ad3      	subs	r3, r2, r3
 8007b74:	2100      	movs	r1, #0
 8007b76:	4618      	mov	r0, r3
 8007b78:	f000 fe64 	bl	8008844 <prvAddCurrentTaskToDelayedList>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        xAlreadyYielded = xTaskResumeAll();
 8007b7c:	f000 f87c 	bl	8007c78 <xTaskResumeAll>
 8007b80:	61b8      	str	r0, [r7, #24]

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8007b82:	69bb      	ldr	r3, [r7, #24]
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d107      	bne.n	8007b98 <xTaskDelayUntil+0xf8>
        {
            portYIELD_WITHIN_API();
 8007b88:	4b08      	ldr	r3, [pc, #32]	@ (8007bac <xTaskDelayUntil+0x10c>)
 8007b8a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007b8e:	601a      	str	r2, [r3, #0]
 8007b90:	f3bf 8f4f 	dsb	sy
 8007b94:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xShouldDelay;
 8007b98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
 8007b9a:	4618      	mov	r0, r3
 8007b9c:	3728      	adds	r7, #40	@ 0x28
 8007b9e:	46bd      	mov	sp, r7
 8007ba0:	bd80      	pop	{r7, pc}
 8007ba2:	bf00      	nop
 8007ba4:	2000044c 	.word	0x2000044c
 8007ba8:	20000428 	.word	0x20000428
 8007bac:	e000ed04 	.word	0xe000ed04

08007bb0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007bb0:	b580      	push	{r7, lr}
 8007bb2:	b086      	sub	sp, #24
 8007bb4:	af02      	add	r7, sp, #8
        }
    }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
    {
        /* The Idle task is being created using dynamically allocated RAM. */
        xReturn = xTaskCreate( prvIdleTask,
 8007bb6:	4b22      	ldr	r3, [pc, #136]	@ (8007c40 <vTaskStartScheduler+0x90>)
 8007bb8:	9301      	str	r3, [sp, #4]
 8007bba:	2300      	movs	r3, #0
 8007bbc:	9300      	str	r3, [sp, #0]
 8007bbe:	2300      	movs	r3, #0
 8007bc0:	2280      	movs	r2, #128	@ 0x80
 8007bc2:	4920      	ldr	r1, [pc, #128]	@ (8007c44 <vTaskStartScheduler+0x94>)
 8007bc4:	4820      	ldr	r0, [pc, #128]	@ (8007c48 <vTaskStartScheduler+0x98>)
 8007bc6:	f7ff fe07 	bl	80077d8 <xTaskCreate>
 8007bca:	60f8      	str	r0, [r7, #12]
    }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	2b01      	cmp	r3, #1
 8007bd0:	d102      	bne.n	8007bd8 <vTaskStartScheduler+0x28>
        {
            xReturn = xTimerCreateTimerTask();
 8007bd2:	f000 feb7 	bl	8008944 <xTimerCreateTimerTask>
 8007bd6:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	2b01      	cmp	r3, #1
 8007bdc:	d118      	bne.n	8007c10 <vTaskStartScheduler+0x60>
        __asm volatile
 8007bde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007be2:	b672      	cpsid	i
 8007be4:	f383 8811 	msr	BASEPRI, r3
 8007be8:	f3bf 8f6f 	isb	sy
 8007bec:	f3bf 8f4f 	dsb	sy
 8007bf0:	b662      	cpsie	i
 8007bf2:	60bb      	str	r3, [r7, #8]
    }
 8007bf4:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 8007bf6:	4b15      	ldr	r3, [pc, #84]	@ (8007c4c <vTaskStartScheduler+0x9c>)
 8007bf8:	f04f 32ff 	mov.w	r2, #4294967295
 8007bfc:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8007bfe:	4b14      	ldr	r3, [pc, #80]	@ (8007c50 <vTaskStartScheduler+0xa0>)
 8007c00:	2201      	movs	r2, #1
 8007c02:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007c04:	4b13      	ldr	r3, [pc, #76]	@ (8007c54 <vTaskStartScheduler+0xa4>)
 8007c06:	2200      	movs	r2, #0
 8007c08:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 8007c0a:	f001 fa6b 	bl	80090e4 <xPortStartScheduler>
 8007c0e:	e011      	b.n	8007c34 <vTaskStartScheduler+0x84>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c16:	d10d      	bne.n	8007c34 <vTaskStartScheduler+0x84>
        __asm volatile
 8007c18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c1c:	b672      	cpsid	i
 8007c1e:	f383 8811 	msr	BASEPRI, r3
 8007c22:	f3bf 8f6f 	isb	sy
 8007c26:	f3bf 8f4f 	dsb	sy
 8007c2a:	b662      	cpsie	i
 8007c2c:	607b      	str	r3, [r7, #4]
    }
 8007c2e:	bf00      	nop
 8007c30:	bf00      	nop
 8007c32:	e7fd      	b.n	8007c30 <vTaskStartScheduler+0x80>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8007c34:	4b08      	ldr	r3, [pc, #32]	@ (8007c58 <vTaskStartScheduler+0xa8>)
 8007c36:	681b      	ldr	r3, [r3, #0]
}
 8007c38:	bf00      	nop
 8007c3a:	3710      	adds	r7, #16
 8007c3c:	46bd      	mov	sp, r7
 8007c3e:	bd80      	pop	{r7, pc}
 8007c40:	20000448 	.word	0x20000448
 8007c44:	08009908 	.word	0x08009908
 8007c48:	0800854d 	.word	0x0800854d
 8007c4c:	20000444 	.word	0x20000444
 8007c50:	20000430 	.word	0x20000430
 8007c54:	20000428 	.word	0x20000428
 8007c58:	20000028 	.word	0x20000028

08007c5c <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007c5c:	b480      	push	{r7}
 8007c5e:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8007c60:	4b04      	ldr	r3, [pc, #16]	@ (8007c74 <vTaskSuspendAll+0x18>)
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	3301      	adds	r3, #1
 8007c66:	4a03      	ldr	r2, [pc, #12]	@ (8007c74 <vTaskSuspendAll+0x18>)
 8007c68:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8007c6a:	bf00      	nop
 8007c6c:	46bd      	mov	sp, r7
 8007c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c72:	4770      	bx	lr
 8007c74:	2000044c 	.word	0x2000044c

08007c78 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007c78:	b580      	push	{r7, lr}
 8007c7a:	b088      	sub	sp, #32
 8007c7c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8007c7e:	2300      	movs	r3, #0
 8007c80:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 8007c82:	2300      	movs	r3, #0
 8007c84:	61bb      	str	r3, [r7, #24]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8007c86:	4b72      	ldr	r3, [pc, #456]	@ (8007e50 <xTaskResumeAll+0x1d8>)
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d10d      	bne.n	8007caa <xTaskResumeAll+0x32>
        __asm volatile
 8007c8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c92:	b672      	cpsid	i
 8007c94:	f383 8811 	msr	BASEPRI, r3
 8007c98:	f3bf 8f6f 	isb	sy
 8007c9c:	f3bf 8f4f 	dsb	sy
 8007ca0:	b662      	cpsie	i
 8007ca2:	607b      	str	r3, [r7, #4]
    }
 8007ca4:	bf00      	nop
 8007ca6:	bf00      	nop
 8007ca8:	e7fd      	b.n	8007ca6 <xTaskResumeAll+0x2e>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8007caa:	f001 fa99 	bl	80091e0 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8007cae:	4b68      	ldr	r3, [pc, #416]	@ (8007e50 <xTaskResumeAll+0x1d8>)
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	3b01      	subs	r3, #1
 8007cb4:	4a66      	ldr	r2, [pc, #408]	@ (8007e50 <xTaskResumeAll+0x1d8>)
 8007cb6:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007cb8:	4b65      	ldr	r3, [pc, #404]	@ (8007e50 <xTaskResumeAll+0x1d8>)
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	f040 80c0 	bne.w	8007e42 <xTaskResumeAll+0x1ca>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007cc2:	4b64      	ldr	r3, [pc, #400]	@ (8007e54 <xTaskResumeAll+0x1dc>)
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	f000 80bb 	beq.w	8007e42 <xTaskResumeAll+0x1ca>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007ccc:	e08a      	b.n	8007de4 <xTaskResumeAll+0x16c>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007cce:	4b62      	ldr	r3, [pc, #392]	@ (8007e58 <xTaskResumeAll+0x1e0>)
 8007cd0:	68db      	ldr	r3, [r3, #12]
 8007cd2:	68db      	ldr	r3, [r3, #12]
 8007cd4:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8007cd6:	69fb      	ldr	r3, [r7, #28]
 8007cd8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007cda:	613b      	str	r3, [r7, #16]
 8007cdc:	69fb      	ldr	r3, [r7, #28]
 8007cde:	69db      	ldr	r3, [r3, #28]
 8007ce0:	69fa      	ldr	r2, [r7, #28]
 8007ce2:	6a12      	ldr	r2, [r2, #32]
 8007ce4:	609a      	str	r2, [r3, #8]
 8007ce6:	69fb      	ldr	r3, [r7, #28]
 8007ce8:	6a1b      	ldr	r3, [r3, #32]
 8007cea:	69fa      	ldr	r2, [r7, #28]
 8007cec:	69d2      	ldr	r2, [r2, #28]
 8007cee:	605a      	str	r2, [r3, #4]
 8007cf0:	693b      	ldr	r3, [r7, #16]
 8007cf2:	685a      	ldr	r2, [r3, #4]
 8007cf4:	69fb      	ldr	r3, [r7, #28]
 8007cf6:	3318      	adds	r3, #24
 8007cf8:	429a      	cmp	r2, r3
 8007cfa:	d103      	bne.n	8007d04 <xTaskResumeAll+0x8c>
 8007cfc:	69fb      	ldr	r3, [r7, #28]
 8007cfe:	6a1a      	ldr	r2, [r3, #32]
 8007d00:	693b      	ldr	r3, [r7, #16]
 8007d02:	605a      	str	r2, [r3, #4]
 8007d04:	69fb      	ldr	r3, [r7, #28]
 8007d06:	2200      	movs	r2, #0
 8007d08:	629a      	str	r2, [r3, #40]	@ 0x28
 8007d0a:	693b      	ldr	r3, [r7, #16]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	1e5a      	subs	r2, r3, #1
 8007d10:	693b      	ldr	r3, [r7, #16]
 8007d12:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8007d14:	69fb      	ldr	r3, [r7, #28]
 8007d16:	695b      	ldr	r3, [r3, #20]
 8007d18:	60fb      	str	r3, [r7, #12]
 8007d1a:	69fb      	ldr	r3, [r7, #28]
 8007d1c:	689b      	ldr	r3, [r3, #8]
 8007d1e:	69fa      	ldr	r2, [r7, #28]
 8007d20:	68d2      	ldr	r2, [r2, #12]
 8007d22:	609a      	str	r2, [r3, #8]
 8007d24:	69fb      	ldr	r3, [r7, #28]
 8007d26:	68db      	ldr	r3, [r3, #12]
 8007d28:	69fa      	ldr	r2, [r7, #28]
 8007d2a:	6892      	ldr	r2, [r2, #8]
 8007d2c:	605a      	str	r2, [r3, #4]
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	685a      	ldr	r2, [r3, #4]
 8007d32:	69fb      	ldr	r3, [r7, #28]
 8007d34:	3304      	adds	r3, #4
 8007d36:	429a      	cmp	r2, r3
 8007d38:	d103      	bne.n	8007d42 <xTaskResumeAll+0xca>
 8007d3a:	69fb      	ldr	r3, [r7, #28]
 8007d3c:	68da      	ldr	r2, [r3, #12]
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	605a      	str	r2, [r3, #4]
 8007d42:	69fb      	ldr	r3, [r7, #28]
 8007d44:	2200      	movs	r2, #0
 8007d46:	615a      	str	r2, [r3, #20]
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	1e5a      	subs	r2, r3, #1
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8007d52:	69fb      	ldr	r3, [r7, #28]
 8007d54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d56:	2201      	movs	r2, #1
 8007d58:	409a      	lsls	r2, r3
 8007d5a:	4b40      	ldr	r3, [pc, #256]	@ (8007e5c <xTaskResumeAll+0x1e4>)
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	4313      	orrs	r3, r2
 8007d60:	4a3e      	ldr	r2, [pc, #248]	@ (8007e5c <xTaskResumeAll+0x1e4>)
 8007d62:	6013      	str	r3, [r2, #0]
 8007d64:	69fb      	ldr	r3, [r7, #28]
 8007d66:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007d68:	493d      	ldr	r1, [pc, #244]	@ (8007e60 <xTaskResumeAll+0x1e8>)
 8007d6a:	4613      	mov	r3, r2
 8007d6c:	009b      	lsls	r3, r3, #2
 8007d6e:	4413      	add	r3, r2
 8007d70:	009b      	lsls	r3, r3, #2
 8007d72:	440b      	add	r3, r1
 8007d74:	3304      	adds	r3, #4
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	60bb      	str	r3, [r7, #8]
 8007d7a:	69fb      	ldr	r3, [r7, #28]
 8007d7c:	68ba      	ldr	r2, [r7, #8]
 8007d7e:	609a      	str	r2, [r3, #8]
 8007d80:	68bb      	ldr	r3, [r7, #8]
 8007d82:	689a      	ldr	r2, [r3, #8]
 8007d84:	69fb      	ldr	r3, [r7, #28]
 8007d86:	60da      	str	r2, [r3, #12]
 8007d88:	68bb      	ldr	r3, [r7, #8]
 8007d8a:	689b      	ldr	r3, [r3, #8]
 8007d8c:	69fa      	ldr	r2, [r7, #28]
 8007d8e:	3204      	adds	r2, #4
 8007d90:	605a      	str	r2, [r3, #4]
 8007d92:	69fb      	ldr	r3, [r7, #28]
 8007d94:	1d1a      	adds	r2, r3, #4
 8007d96:	68bb      	ldr	r3, [r7, #8]
 8007d98:	609a      	str	r2, [r3, #8]
 8007d9a:	69fb      	ldr	r3, [r7, #28]
 8007d9c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007d9e:	4613      	mov	r3, r2
 8007da0:	009b      	lsls	r3, r3, #2
 8007da2:	4413      	add	r3, r2
 8007da4:	009b      	lsls	r3, r3, #2
 8007da6:	4a2e      	ldr	r2, [pc, #184]	@ (8007e60 <xTaskResumeAll+0x1e8>)
 8007da8:	441a      	add	r2, r3
 8007daa:	69fb      	ldr	r3, [r7, #28]
 8007dac:	615a      	str	r2, [r3, #20]
 8007dae:	69fb      	ldr	r3, [r7, #28]
 8007db0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007db2:	492b      	ldr	r1, [pc, #172]	@ (8007e60 <xTaskResumeAll+0x1e8>)
 8007db4:	4613      	mov	r3, r2
 8007db6:	009b      	lsls	r3, r3, #2
 8007db8:	4413      	add	r3, r2
 8007dba:	009b      	lsls	r3, r3, #2
 8007dbc:	440b      	add	r3, r1
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	1c59      	adds	r1, r3, #1
 8007dc2:	4827      	ldr	r0, [pc, #156]	@ (8007e60 <xTaskResumeAll+0x1e8>)
 8007dc4:	4613      	mov	r3, r2
 8007dc6:	009b      	lsls	r3, r3, #2
 8007dc8:	4413      	add	r3, r2
 8007dca:	009b      	lsls	r3, r3, #2
 8007dcc:	4403      	add	r3, r0
 8007dce:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007dd0:	69fb      	ldr	r3, [r7, #28]
 8007dd2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007dd4:	4b23      	ldr	r3, [pc, #140]	@ (8007e64 <xTaskResumeAll+0x1ec>)
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007dda:	429a      	cmp	r2, r3
 8007ddc:	d302      	bcc.n	8007de4 <xTaskResumeAll+0x16c>
                    {
                        xYieldPending = pdTRUE;
 8007dde:	4b22      	ldr	r3, [pc, #136]	@ (8007e68 <xTaskResumeAll+0x1f0>)
 8007de0:	2201      	movs	r2, #1
 8007de2:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007de4:	4b1c      	ldr	r3, [pc, #112]	@ (8007e58 <xTaskResumeAll+0x1e0>)
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	f47f af70 	bne.w	8007cce <xTaskResumeAll+0x56>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8007dee:	69fb      	ldr	r3, [r7, #28]
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d001      	beq.n	8007df8 <xTaskResumeAll+0x180>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8007df4:	f000 fc42 	bl	800867c <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8007df8:	4b1c      	ldr	r3, [pc, #112]	@ (8007e6c <xTaskResumeAll+0x1f4>)
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	617b      	str	r3, [r7, #20]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8007dfe:	697b      	ldr	r3, [r7, #20]
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d010      	beq.n	8007e26 <xTaskResumeAll+0x1ae>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8007e04:	f000 f852 	bl	8007eac <xTaskIncrementTick>
 8007e08:	4603      	mov	r3, r0
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d002      	beq.n	8007e14 <xTaskResumeAll+0x19c>
                            {
                                xYieldPending = pdTRUE;
 8007e0e:	4b16      	ldr	r3, [pc, #88]	@ (8007e68 <xTaskResumeAll+0x1f0>)
 8007e10:	2201      	movs	r2, #1
 8007e12:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8007e14:	697b      	ldr	r3, [r7, #20]
 8007e16:	3b01      	subs	r3, #1
 8007e18:	617b      	str	r3, [r7, #20]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8007e1a:	697b      	ldr	r3, [r7, #20]
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d1f1      	bne.n	8007e04 <xTaskResumeAll+0x18c>

                        xPendedTicks = 0;
 8007e20:	4b12      	ldr	r3, [pc, #72]	@ (8007e6c <xTaskResumeAll+0x1f4>)
 8007e22:	2200      	movs	r2, #0
 8007e24:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8007e26:	4b10      	ldr	r3, [pc, #64]	@ (8007e68 <xTaskResumeAll+0x1f0>)
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d009      	beq.n	8007e42 <xTaskResumeAll+0x1ca>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                    {
                        xAlreadyYielded = pdTRUE;
 8007e2e:	2301      	movs	r3, #1
 8007e30:	61bb      	str	r3, [r7, #24]
                    }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8007e32:	4b0f      	ldr	r3, [pc, #60]	@ (8007e70 <xTaskResumeAll+0x1f8>)
 8007e34:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007e38:	601a      	str	r2, [r3, #0]
 8007e3a:	f3bf 8f4f 	dsb	sy
 8007e3e:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8007e42:	f001 fa03 	bl	800924c <vPortExitCritical>

    return xAlreadyYielded;
 8007e46:	69bb      	ldr	r3, [r7, #24]
}
 8007e48:	4618      	mov	r0, r3
 8007e4a:	3720      	adds	r7, #32
 8007e4c:	46bd      	mov	sp, r7
 8007e4e:	bd80      	pop	{r7, pc}
 8007e50:	2000044c 	.word	0x2000044c
 8007e54:	20000424 	.word	0x20000424
 8007e58:	200003e4 	.word	0x200003e4
 8007e5c:	2000042c 	.word	0x2000042c
 8007e60:	20000350 	.word	0x20000350
 8007e64:	2000034c 	.word	0x2000034c
 8007e68:	20000438 	.word	0x20000438
 8007e6c:	20000434 	.word	0x20000434
 8007e70:	e000ed04 	.word	0xe000ed04

08007e74 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007e74:	b480      	push	{r7}
 8007e76:	b083      	sub	sp, #12
 8007e78:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8007e7a:	4b05      	ldr	r3, [pc, #20]	@ (8007e90 <xTaskGetTickCount+0x1c>)
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8007e80:	687b      	ldr	r3, [r7, #4]
}
 8007e82:	4618      	mov	r0, r3
 8007e84:	370c      	adds	r7, #12
 8007e86:	46bd      	mov	sp, r7
 8007e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e8c:	4770      	bx	lr
 8007e8e:	bf00      	nop
 8007e90:	20000428 	.word	0x20000428

08007e94 <uxTaskGetNumberOfTasks>:
    return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxTaskGetNumberOfTasks( void )
{
 8007e94:	b480      	push	{r7}
 8007e96:	af00      	add	r7, sp, #0
    /* A critical section is not required because the variables are of type
     * BaseType_t. */
    return uxCurrentNumberOfTasks;
 8007e98:	4b03      	ldr	r3, [pc, #12]	@ (8007ea8 <uxTaskGetNumberOfTasks+0x14>)
 8007e9a:	681b      	ldr	r3, [r3, #0]
}
 8007e9c:	4618      	mov	r0, r3
 8007e9e:	46bd      	mov	sp, r7
 8007ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ea4:	4770      	bx	lr
 8007ea6:	bf00      	nop
 8007ea8:	20000424 	.word	0x20000424

08007eac <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007eac:	b580      	push	{r7, lr}
 8007eae:	b08a      	sub	sp, #40	@ 0x28
 8007eb0:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8007eb2:	2300      	movs	r3, #0
 8007eb4:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007eb6:	4b7f      	ldr	r3, [pc, #508]	@ (80080b4 <xTaskIncrementTick+0x208>)
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	f040 80ef 	bne.w	800809e <xTaskIncrementTick+0x1f2>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007ec0:	4b7d      	ldr	r3, [pc, #500]	@ (80080b8 <xTaskIncrementTick+0x20c>)
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	3301      	adds	r3, #1
 8007ec6:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8007ec8:	4a7b      	ldr	r2, [pc, #492]	@ (80080b8 <xTaskIncrementTick+0x20c>)
 8007eca:	6a3b      	ldr	r3, [r7, #32]
 8007ecc:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007ece:	6a3b      	ldr	r3, [r7, #32]
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d123      	bne.n	8007f1c <xTaskIncrementTick+0x70>
        {
            taskSWITCH_DELAYED_LISTS();
 8007ed4:	4b79      	ldr	r3, [pc, #484]	@ (80080bc <xTaskIncrementTick+0x210>)
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d00d      	beq.n	8007efa <xTaskIncrementTick+0x4e>
        __asm volatile
 8007ede:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ee2:	b672      	cpsid	i
 8007ee4:	f383 8811 	msr	BASEPRI, r3
 8007ee8:	f3bf 8f6f 	isb	sy
 8007eec:	f3bf 8f4f 	dsb	sy
 8007ef0:	b662      	cpsie	i
 8007ef2:	607b      	str	r3, [r7, #4]
    }
 8007ef4:	bf00      	nop
 8007ef6:	bf00      	nop
 8007ef8:	e7fd      	b.n	8007ef6 <xTaskIncrementTick+0x4a>
 8007efa:	4b70      	ldr	r3, [pc, #448]	@ (80080bc <xTaskIncrementTick+0x210>)
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	61fb      	str	r3, [r7, #28]
 8007f00:	4b6f      	ldr	r3, [pc, #444]	@ (80080c0 <xTaskIncrementTick+0x214>)
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	4a6d      	ldr	r2, [pc, #436]	@ (80080bc <xTaskIncrementTick+0x210>)
 8007f06:	6013      	str	r3, [r2, #0]
 8007f08:	4a6d      	ldr	r2, [pc, #436]	@ (80080c0 <xTaskIncrementTick+0x214>)
 8007f0a:	69fb      	ldr	r3, [r7, #28]
 8007f0c:	6013      	str	r3, [r2, #0]
 8007f0e:	4b6d      	ldr	r3, [pc, #436]	@ (80080c4 <xTaskIncrementTick+0x218>)
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	3301      	adds	r3, #1
 8007f14:	4a6b      	ldr	r2, [pc, #428]	@ (80080c4 <xTaskIncrementTick+0x218>)
 8007f16:	6013      	str	r3, [r2, #0]
 8007f18:	f000 fbb0 	bl	800867c <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8007f1c:	4b6a      	ldr	r3, [pc, #424]	@ (80080c8 <xTaskIncrementTick+0x21c>)
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	6a3a      	ldr	r2, [r7, #32]
 8007f22:	429a      	cmp	r2, r3
 8007f24:	f0c0 80a6 	bcc.w	8008074 <xTaskIncrementTick+0x1c8>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007f28:	4b64      	ldr	r3, [pc, #400]	@ (80080bc <xTaskIncrementTick+0x210>)
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d104      	bne.n	8007f3c <xTaskIncrementTick+0x90>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007f32:	4b65      	ldr	r3, [pc, #404]	@ (80080c8 <xTaskIncrementTick+0x21c>)
 8007f34:	f04f 32ff 	mov.w	r2, #4294967295
 8007f38:	601a      	str	r2, [r3, #0]
                    break;
 8007f3a:	e09b      	b.n	8008074 <xTaskIncrementTick+0x1c8>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007f3c:	4b5f      	ldr	r3, [pc, #380]	@ (80080bc <xTaskIncrementTick+0x210>)
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	68db      	ldr	r3, [r3, #12]
 8007f42:	68db      	ldr	r3, [r3, #12]
 8007f44:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007f46:	69bb      	ldr	r3, [r7, #24]
 8007f48:	685b      	ldr	r3, [r3, #4]
 8007f4a:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 8007f4c:	6a3a      	ldr	r2, [r7, #32]
 8007f4e:	697b      	ldr	r3, [r7, #20]
 8007f50:	429a      	cmp	r2, r3
 8007f52:	d203      	bcs.n	8007f5c <xTaskIncrementTick+0xb0>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8007f54:	4a5c      	ldr	r2, [pc, #368]	@ (80080c8 <xTaskIncrementTick+0x21c>)
 8007f56:	697b      	ldr	r3, [r7, #20]
 8007f58:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 8007f5a:	e08b      	b.n	8008074 <xTaskIncrementTick+0x1c8>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8007f5c:	69bb      	ldr	r3, [r7, #24]
 8007f5e:	695b      	ldr	r3, [r3, #20]
 8007f60:	613b      	str	r3, [r7, #16]
 8007f62:	69bb      	ldr	r3, [r7, #24]
 8007f64:	689b      	ldr	r3, [r3, #8]
 8007f66:	69ba      	ldr	r2, [r7, #24]
 8007f68:	68d2      	ldr	r2, [r2, #12]
 8007f6a:	609a      	str	r2, [r3, #8]
 8007f6c:	69bb      	ldr	r3, [r7, #24]
 8007f6e:	68db      	ldr	r3, [r3, #12]
 8007f70:	69ba      	ldr	r2, [r7, #24]
 8007f72:	6892      	ldr	r2, [r2, #8]
 8007f74:	605a      	str	r2, [r3, #4]
 8007f76:	693b      	ldr	r3, [r7, #16]
 8007f78:	685a      	ldr	r2, [r3, #4]
 8007f7a:	69bb      	ldr	r3, [r7, #24]
 8007f7c:	3304      	adds	r3, #4
 8007f7e:	429a      	cmp	r2, r3
 8007f80:	d103      	bne.n	8007f8a <xTaskIncrementTick+0xde>
 8007f82:	69bb      	ldr	r3, [r7, #24]
 8007f84:	68da      	ldr	r2, [r3, #12]
 8007f86:	693b      	ldr	r3, [r7, #16]
 8007f88:	605a      	str	r2, [r3, #4]
 8007f8a:	69bb      	ldr	r3, [r7, #24]
 8007f8c:	2200      	movs	r2, #0
 8007f8e:	615a      	str	r2, [r3, #20]
 8007f90:	693b      	ldr	r3, [r7, #16]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	1e5a      	subs	r2, r3, #1
 8007f96:	693b      	ldr	r3, [r7, #16]
 8007f98:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007f9a:	69bb      	ldr	r3, [r7, #24]
 8007f9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d01e      	beq.n	8007fe0 <xTaskIncrementTick+0x134>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8007fa2:	69bb      	ldr	r3, [r7, #24]
 8007fa4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007fa6:	60fb      	str	r3, [r7, #12]
 8007fa8:	69bb      	ldr	r3, [r7, #24]
 8007faa:	69db      	ldr	r3, [r3, #28]
 8007fac:	69ba      	ldr	r2, [r7, #24]
 8007fae:	6a12      	ldr	r2, [r2, #32]
 8007fb0:	609a      	str	r2, [r3, #8]
 8007fb2:	69bb      	ldr	r3, [r7, #24]
 8007fb4:	6a1b      	ldr	r3, [r3, #32]
 8007fb6:	69ba      	ldr	r2, [r7, #24]
 8007fb8:	69d2      	ldr	r2, [r2, #28]
 8007fba:	605a      	str	r2, [r3, #4]
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	685a      	ldr	r2, [r3, #4]
 8007fc0:	69bb      	ldr	r3, [r7, #24]
 8007fc2:	3318      	adds	r3, #24
 8007fc4:	429a      	cmp	r2, r3
 8007fc6:	d103      	bne.n	8007fd0 <xTaskIncrementTick+0x124>
 8007fc8:	69bb      	ldr	r3, [r7, #24]
 8007fca:	6a1a      	ldr	r2, [r3, #32]
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	605a      	str	r2, [r3, #4]
 8007fd0:	69bb      	ldr	r3, [r7, #24]
 8007fd2:	2200      	movs	r2, #0
 8007fd4:	629a      	str	r2, [r3, #40]	@ 0x28
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	1e5a      	subs	r2, r3, #1
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8007fe0:	69bb      	ldr	r3, [r7, #24]
 8007fe2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007fe4:	2201      	movs	r2, #1
 8007fe6:	409a      	lsls	r2, r3
 8007fe8:	4b38      	ldr	r3, [pc, #224]	@ (80080cc <xTaskIncrementTick+0x220>)
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	4313      	orrs	r3, r2
 8007fee:	4a37      	ldr	r2, [pc, #220]	@ (80080cc <xTaskIncrementTick+0x220>)
 8007ff0:	6013      	str	r3, [r2, #0]
 8007ff2:	69bb      	ldr	r3, [r7, #24]
 8007ff4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007ff6:	4936      	ldr	r1, [pc, #216]	@ (80080d0 <xTaskIncrementTick+0x224>)
 8007ff8:	4613      	mov	r3, r2
 8007ffa:	009b      	lsls	r3, r3, #2
 8007ffc:	4413      	add	r3, r2
 8007ffe:	009b      	lsls	r3, r3, #2
 8008000:	440b      	add	r3, r1
 8008002:	3304      	adds	r3, #4
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	60bb      	str	r3, [r7, #8]
 8008008:	69bb      	ldr	r3, [r7, #24]
 800800a:	68ba      	ldr	r2, [r7, #8]
 800800c:	609a      	str	r2, [r3, #8]
 800800e:	68bb      	ldr	r3, [r7, #8]
 8008010:	689a      	ldr	r2, [r3, #8]
 8008012:	69bb      	ldr	r3, [r7, #24]
 8008014:	60da      	str	r2, [r3, #12]
 8008016:	68bb      	ldr	r3, [r7, #8]
 8008018:	689b      	ldr	r3, [r3, #8]
 800801a:	69ba      	ldr	r2, [r7, #24]
 800801c:	3204      	adds	r2, #4
 800801e:	605a      	str	r2, [r3, #4]
 8008020:	69bb      	ldr	r3, [r7, #24]
 8008022:	1d1a      	adds	r2, r3, #4
 8008024:	68bb      	ldr	r3, [r7, #8]
 8008026:	609a      	str	r2, [r3, #8]
 8008028:	69bb      	ldr	r3, [r7, #24]
 800802a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800802c:	4613      	mov	r3, r2
 800802e:	009b      	lsls	r3, r3, #2
 8008030:	4413      	add	r3, r2
 8008032:	009b      	lsls	r3, r3, #2
 8008034:	4a26      	ldr	r2, [pc, #152]	@ (80080d0 <xTaskIncrementTick+0x224>)
 8008036:	441a      	add	r2, r3
 8008038:	69bb      	ldr	r3, [r7, #24]
 800803a:	615a      	str	r2, [r3, #20]
 800803c:	69bb      	ldr	r3, [r7, #24]
 800803e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008040:	4923      	ldr	r1, [pc, #140]	@ (80080d0 <xTaskIncrementTick+0x224>)
 8008042:	4613      	mov	r3, r2
 8008044:	009b      	lsls	r3, r3, #2
 8008046:	4413      	add	r3, r2
 8008048:	009b      	lsls	r3, r3, #2
 800804a:	440b      	add	r3, r1
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	1c59      	adds	r1, r3, #1
 8008050:	481f      	ldr	r0, [pc, #124]	@ (80080d0 <xTaskIncrementTick+0x224>)
 8008052:	4613      	mov	r3, r2
 8008054:	009b      	lsls	r3, r3, #2
 8008056:	4413      	add	r3, r2
 8008058:	009b      	lsls	r3, r3, #2
 800805a:	4403      	add	r3, r0
 800805c:	6019      	str	r1, [r3, #0]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800805e:	69bb      	ldr	r3, [r7, #24]
 8008060:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008062:	4b1c      	ldr	r3, [pc, #112]	@ (80080d4 <xTaskIncrementTick+0x228>)
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008068:	429a      	cmp	r2, r3
 800806a:	f67f af5d 	bls.w	8007f28 <xTaskIncrementTick+0x7c>
                        {
                            xSwitchRequired = pdTRUE;
 800806e:	2301      	movs	r3, #1
 8008070:	627b      	str	r3, [r7, #36]	@ 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008072:	e759      	b.n	8007f28 <xTaskIncrementTick+0x7c>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008074:	4b17      	ldr	r3, [pc, #92]	@ (80080d4 <xTaskIncrementTick+0x228>)
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800807a:	4915      	ldr	r1, [pc, #84]	@ (80080d0 <xTaskIncrementTick+0x224>)
 800807c:	4613      	mov	r3, r2
 800807e:	009b      	lsls	r3, r3, #2
 8008080:	4413      	add	r3, r2
 8008082:	009b      	lsls	r3, r3, #2
 8008084:	440b      	add	r3, r1
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	2b01      	cmp	r3, #1
 800808a:	d901      	bls.n	8008090 <xTaskIncrementTick+0x1e4>
            {
                xSwitchRequired = pdTRUE;
 800808c:	2301      	movs	r3, #1
 800808e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 8008090:	4b11      	ldr	r3, [pc, #68]	@ (80080d8 <xTaskIncrementTick+0x22c>)
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	2b00      	cmp	r3, #0
 8008096:	d007      	beq.n	80080a8 <xTaskIncrementTick+0x1fc>
            {
                xSwitchRequired = pdTRUE;
 8008098:	2301      	movs	r3, #1
 800809a:	627b      	str	r3, [r7, #36]	@ 0x24
 800809c:	e004      	b.n	80080a8 <xTaskIncrementTick+0x1fc>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 800809e:	4b0f      	ldr	r3, [pc, #60]	@ (80080dc <xTaskIncrementTick+0x230>)
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	3301      	adds	r3, #1
 80080a4:	4a0d      	ldr	r2, [pc, #52]	@ (80080dc <xTaskIncrementTick+0x230>)
 80080a6:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 80080a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80080aa:	4618      	mov	r0, r3
 80080ac:	3728      	adds	r7, #40	@ 0x28
 80080ae:	46bd      	mov	sp, r7
 80080b0:	bd80      	pop	{r7, pc}
 80080b2:	bf00      	nop
 80080b4:	2000044c 	.word	0x2000044c
 80080b8:	20000428 	.word	0x20000428
 80080bc:	200003dc 	.word	0x200003dc
 80080c0:	200003e0 	.word	0x200003e0
 80080c4:	2000043c 	.word	0x2000043c
 80080c8:	20000444 	.word	0x20000444
 80080cc:	2000042c 	.word	0x2000042c
 80080d0:	20000350 	.word	0x20000350
 80080d4:	2000034c 	.word	0x2000034c
 80080d8:	20000438 	.word	0x20000438
 80080dc:	20000434 	.word	0x20000434

080080e0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80080e0:	b480      	push	{r7}
 80080e2:	b087      	sub	sp, #28
 80080e4:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80080e6:	4b28      	ldr	r3, [pc, #160]	@ (8008188 <vTaskSwitchContext+0xa8>)
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d003      	beq.n	80080f6 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 80080ee:	4b27      	ldr	r3, [pc, #156]	@ (800818c <vTaskSwitchContext+0xac>)
 80080f0:	2201      	movs	r2, #1
 80080f2:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 80080f4:	e042      	b.n	800817c <vTaskSwitchContext+0x9c>
        xYieldPending = pdFALSE;
 80080f6:	4b25      	ldr	r3, [pc, #148]	@ (800818c <vTaskSwitchContext+0xac>)
 80080f8:	2200      	movs	r2, #0
 80080fa:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80080fc:	4b24      	ldr	r3, [pc, #144]	@ (8008190 <vTaskSwitchContext+0xb0>)
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	fab3 f383 	clz	r3, r3
 8008108:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 800810a:	7afb      	ldrb	r3, [r7, #11]
 800810c:	f1c3 031f 	rsb	r3, r3, #31
 8008110:	617b      	str	r3, [r7, #20]
 8008112:	4920      	ldr	r1, [pc, #128]	@ (8008194 <vTaskSwitchContext+0xb4>)
 8008114:	697a      	ldr	r2, [r7, #20]
 8008116:	4613      	mov	r3, r2
 8008118:	009b      	lsls	r3, r3, #2
 800811a:	4413      	add	r3, r2
 800811c:	009b      	lsls	r3, r3, #2
 800811e:	440b      	add	r3, r1
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	2b00      	cmp	r3, #0
 8008124:	d10d      	bne.n	8008142 <vTaskSwitchContext+0x62>
        __asm volatile
 8008126:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800812a:	b672      	cpsid	i
 800812c:	f383 8811 	msr	BASEPRI, r3
 8008130:	f3bf 8f6f 	isb	sy
 8008134:	f3bf 8f4f 	dsb	sy
 8008138:	b662      	cpsie	i
 800813a:	607b      	str	r3, [r7, #4]
    }
 800813c:	bf00      	nop
 800813e:	bf00      	nop
 8008140:	e7fd      	b.n	800813e <vTaskSwitchContext+0x5e>
 8008142:	697a      	ldr	r2, [r7, #20]
 8008144:	4613      	mov	r3, r2
 8008146:	009b      	lsls	r3, r3, #2
 8008148:	4413      	add	r3, r2
 800814a:	009b      	lsls	r3, r3, #2
 800814c:	4a11      	ldr	r2, [pc, #68]	@ (8008194 <vTaskSwitchContext+0xb4>)
 800814e:	4413      	add	r3, r2
 8008150:	613b      	str	r3, [r7, #16]
 8008152:	693b      	ldr	r3, [r7, #16]
 8008154:	685b      	ldr	r3, [r3, #4]
 8008156:	685a      	ldr	r2, [r3, #4]
 8008158:	693b      	ldr	r3, [r7, #16]
 800815a:	605a      	str	r2, [r3, #4]
 800815c:	693b      	ldr	r3, [r7, #16]
 800815e:	685a      	ldr	r2, [r3, #4]
 8008160:	693b      	ldr	r3, [r7, #16]
 8008162:	3308      	adds	r3, #8
 8008164:	429a      	cmp	r2, r3
 8008166:	d104      	bne.n	8008172 <vTaskSwitchContext+0x92>
 8008168:	693b      	ldr	r3, [r7, #16]
 800816a:	685b      	ldr	r3, [r3, #4]
 800816c:	685a      	ldr	r2, [r3, #4]
 800816e:	693b      	ldr	r3, [r7, #16]
 8008170:	605a      	str	r2, [r3, #4]
 8008172:	693b      	ldr	r3, [r7, #16]
 8008174:	685b      	ldr	r3, [r3, #4]
 8008176:	68db      	ldr	r3, [r3, #12]
 8008178:	4a07      	ldr	r2, [pc, #28]	@ (8008198 <vTaskSwitchContext+0xb8>)
 800817a:	6013      	str	r3, [r2, #0]
}
 800817c:	bf00      	nop
 800817e:	371c      	adds	r7, #28
 8008180:	46bd      	mov	sp, r7
 8008182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008186:	4770      	bx	lr
 8008188:	2000044c 	.word	0x2000044c
 800818c:	20000438 	.word	0x20000438
 8008190:	2000042c 	.word	0x2000042c
 8008194:	20000350 	.word	0x20000350
 8008198:	2000034c 	.word	0x2000034c

0800819c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 800819c:	b580      	push	{r7, lr}
 800819e:	b084      	sub	sp, #16
 80081a0:	af00      	add	r7, sp, #0
 80081a2:	6078      	str	r0, [r7, #4]
 80081a4:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d10d      	bne.n	80081c8 <vTaskPlaceOnEventList+0x2c>
        __asm volatile
 80081ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80081b0:	b672      	cpsid	i
 80081b2:	f383 8811 	msr	BASEPRI, r3
 80081b6:	f3bf 8f6f 	isb	sy
 80081ba:	f3bf 8f4f 	dsb	sy
 80081be:	b662      	cpsie	i
 80081c0:	60fb      	str	r3, [r7, #12]
    }
 80081c2:	bf00      	nop
 80081c4:	bf00      	nop
 80081c6:	e7fd      	b.n	80081c4 <vTaskPlaceOnEventList+0x28>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80081c8:	4b07      	ldr	r3, [pc, #28]	@ (80081e8 <vTaskPlaceOnEventList+0x4c>)
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	3318      	adds	r3, #24
 80081ce:	4619      	mov	r1, r3
 80081d0:	6878      	ldr	r0, [r7, #4]
 80081d2:	f7fe fd50 	bl	8006c76 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80081d6:	2101      	movs	r1, #1
 80081d8:	6838      	ldr	r0, [r7, #0]
 80081da:	f000 fb33 	bl	8008844 <prvAddCurrentTaskToDelayedList>
}
 80081de:	bf00      	nop
 80081e0:	3710      	adds	r7, #16
 80081e2:	46bd      	mov	sp, r7
 80081e4:	bd80      	pop	{r7, pc}
 80081e6:	bf00      	nop
 80081e8:	2000034c 	.word	0x2000034c

080081ec <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 80081ec:	b580      	push	{r7, lr}
 80081ee:	b086      	sub	sp, #24
 80081f0:	af00      	add	r7, sp, #0
 80081f2:	60f8      	str	r0, [r7, #12]
 80081f4:	60b9      	str	r1, [r7, #8]
 80081f6:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d10d      	bne.n	800821a <vTaskPlaceOnEventListRestricted+0x2e>
        __asm volatile
 80081fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008202:	b672      	cpsid	i
 8008204:	f383 8811 	msr	BASEPRI, r3
 8008208:	f3bf 8f6f 	isb	sy
 800820c:	f3bf 8f4f 	dsb	sy
 8008210:	b662      	cpsie	i
 8008212:	613b      	str	r3, [r7, #16]
    }
 8008214:	bf00      	nop
 8008216:	bf00      	nop
 8008218:	e7fd      	b.n	8008216 <vTaskPlaceOnEventListRestricted+0x2a>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	685b      	ldr	r3, [r3, #4]
 800821e:	617b      	str	r3, [r7, #20]
 8008220:	4b15      	ldr	r3, [pc, #84]	@ (8008278 <vTaskPlaceOnEventListRestricted+0x8c>)
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	697a      	ldr	r2, [r7, #20]
 8008226:	61da      	str	r2, [r3, #28]
 8008228:	4b13      	ldr	r3, [pc, #76]	@ (8008278 <vTaskPlaceOnEventListRestricted+0x8c>)
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	697a      	ldr	r2, [r7, #20]
 800822e:	6892      	ldr	r2, [r2, #8]
 8008230:	621a      	str	r2, [r3, #32]
 8008232:	4b11      	ldr	r3, [pc, #68]	@ (8008278 <vTaskPlaceOnEventListRestricted+0x8c>)
 8008234:	681a      	ldr	r2, [r3, #0]
 8008236:	697b      	ldr	r3, [r7, #20]
 8008238:	689b      	ldr	r3, [r3, #8]
 800823a:	3218      	adds	r2, #24
 800823c:	605a      	str	r2, [r3, #4]
 800823e:	4b0e      	ldr	r3, [pc, #56]	@ (8008278 <vTaskPlaceOnEventListRestricted+0x8c>)
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	f103 0218 	add.w	r2, r3, #24
 8008246:	697b      	ldr	r3, [r7, #20]
 8008248:	609a      	str	r2, [r3, #8]
 800824a:	4b0b      	ldr	r3, [pc, #44]	@ (8008278 <vTaskPlaceOnEventListRestricted+0x8c>)
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	68fa      	ldr	r2, [r7, #12]
 8008250:	629a      	str	r2, [r3, #40]	@ 0x28
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	1c5a      	adds	r2, r3, #1
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	2b00      	cmp	r3, #0
 8008260:	d002      	beq.n	8008268 <vTaskPlaceOnEventListRestricted+0x7c>
        {
            xTicksToWait = portMAX_DELAY;
 8008262:	f04f 33ff 	mov.w	r3, #4294967295
 8008266:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8008268:	6879      	ldr	r1, [r7, #4]
 800826a:	68b8      	ldr	r0, [r7, #8]
 800826c:	f000 faea 	bl	8008844 <prvAddCurrentTaskToDelayedList>
    }
 8008270:	bf00      	nop
 8008272:	3718      	adds	r7, #24
 8008274:	46bd      	mov	sp, r7
 8008276:	bd80      	pop	{r7, pc}
 8008278:	2000034c 	.word	0x2000034c

0800827c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800827c:	b480      	push	{r7}
 800827e:	b08b      	sub	sp, #44	@ 0x2c
 8008280:	af00      	add	r7, sp, #0
 8008282:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	68db      	ldr	r3, [r3, #12]
 8008288:	68db      	ldr	r3, [r3, #12]
 800828a:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 800828c:	6a3b      	ldr	r3, [r7, #32]
 800828e:	2b00      	cmp	r3, #0
 8008290:	d10d      	bne.n	80082ae <xTaskRemoveFromEventList+0x32>
        __asm volatile
 8008292:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008296:	b672      	cpsid	i
 8008298:	f383 8811 	msr	BASEPRI, r3
 800829c:	f3bf 8f6f 	isb	sy
 80082a0:	f3bf 8f4f 	dsb	sy
 80082a4:	b662      	cpsie	i
 80082a6:	60fb      	str	r3, [r7, #12]
    }
 80082a8:	bf00      	nop
 80082aa:	bf00      	nop
 80082ac:	e7fd      	b.n	80082aa <xTaskRemoveFromEventList+0x2e>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 80082ae:	6a3b      	ldr	r3, [r7, #32]
 80082b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80082b2:	61fb      	str	r3, [r7, #28]
 80082b4:	6a3b      	ldr	r3, [r7, #32]
 80082b6:	69db      	ldr	r3, [r3, #28]
 80082b8:	6a3a      	ldr	r2, [r7, #32]
 80082ba:	6a12      	ldr	r2, [r2, #32]
 80082bc:	609a      	str	r2, [r3, #8]
 80082be:	6a3b      	ldr	r3, [r7, #32]
 80082c0:	6a1b      	ldr	r3, [r3, #32]
 80082c2:	6a3a      	ldr	r2, [r7, #32]
 80082c4:	69d2      	ldr	r2, [r2, #28]
 80082c6:	605a      	str	r2, [r3, #4]
 80082c8:	69fb      	ldr	r3, [r7, #28]
 80082ca:	685a      	ldr	r2, [r3, #4]
 80082cc:	6a3b      	ldr	r3, [r7, #32]
 80082ce:	3318      	adds	r3, #24
 80082d0:	429a      	cmp	r2, r3
 80082d2:	d103      	bne.n	80082dc <xTaskRemoveFromEventList+0x60>
 80082d4:	6a3b      	ldr	r3, [r7, #32]
 80082d6:	6a1a      	ldr	r2, [r3, #32]
 80082d8:	69fb      	ldr	r3, [r7, #28]
 80082da:	605a      	str	r2, [r3, #4]
 80082dc:	6a3b      	ldr	r3, [r7, #32]
 80082de:	2200      	movs	r2, #0
 80082e0:	629a      	str	r2, [r3, #40]	@ 0x28
 80082e2:	69fb      	ldr	r3, [r7, #28]
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	1e5a      	subs	r2, r3, #1
 80082e8:	69fb      	ldr	r3, [r7, #28]
 80082ea:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80082ec:	4b4a      	ldr	r3, [pc, #296]	@ (8008418 <xTaskRemoveFromEventList+0x19c>)
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d15e      	bne.n	80083b2 <xTaskRemoveFromEventList+0x136>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 80082f4:	6a3b      	ldr	r3, [r7, #32]
 80082f6:	695b      	ldr	r3, [r3, #20]
 80082f8:	617b      	str	r3, [r7, #20]
 80082fa:	6a3b      	ldr	r3, [r7, #32]
 80082fc:	689b      	ldr	r3, [r3, #8]
 80082fe:	6a3a      	ldr	r2, [r7, #32]
 8008300:	68d2      	ldr	r2, [r2, #12]
 8008302:	609a      	str	r2, [r3, #8]
 8008304:	6a3b      	ldr	r3, [r7, #32]
 8008306:	68db      	ldr	r3, [r3, #12]
 8008308:	6a3a      	ldr	r2, [r7, #32]
 800830a:	6892      	ldr	r2, [r2, #8]
 800830c:	605a      	str	r2, [r3, #4]
 800830e:	697b      	ldr	r3, [r7, #20]
 8008310:	685a      	ldr	r2, [r3, #4]
 8008312:	6a3b      	ldr	r3, [r7, #32]
 8008314:	3304      	adds	r3, #4
 8008316:	429a      	cmp	r2, r3
 8008318:	d103      	bne.n	8008322 <xTaskRemoveFromEventList+0xa6>
 800831a:	6a3b      	ldr	r3, [r7, #32]
 800831c:	68da      	ldr	r2, [r3, #12]
 800831e:	697b      	ldr	r3, [r7, #20]
 8008320:	605a      	str	r2, [r3, #4]
 8008322:	6a3b      	ldr	r3, [r7, #32]
 8008324:	2200      	movs	r2, #0
 8008326:	615a      	str	r2, [r3, #20]
 8008328:	697b      	ldr	r3, [r7, #20]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	1e5a      	subs	r2, r3, #1
 800832e:	697b      	ldr	r3, [r7, #20]
 8008330:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 8008332:	6a3b      	ldr	r3, [r7, #32]
 8008334:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008336:	2201      	movs	r2, #1
 8008338:	409a      	lsls	r2, r3
 800833a:	4b38      	ldr	r3, [pc, #224]	@ (800841c <xTaskRemoveFromEventList+0x1a0>)
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	4313      	orrs	r3, r2
 8008340:	4a36      	ldr	r2, [pc, #216]	@ (800841c <xTaskRemoveFromEventList+0x1a0>)
 8008342:	6013      	str	r3, [r2, #0]
 8008344:	6a3b      	ldr	r3, [r7, #32]
 8008346:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008348:	4935      	ldr	r1, [pc, #212]	@ (8008420 <xTaskRemoveFromEventList+0x1a4>)
 800834a:	4613      	mov	r3, r2
 800834c:	009b      	lsls	r3, r3, #2
 800834e:	4413      	add	r3, r2
 8008350:	009b      	lsls	r3, r3, #2
 8008352:	440b      	add	r3, r1
 8008354:	3304      	adds	r3, #4
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	613b      	str	r3, [r7, #16]
 800835a:	6a3b      	ldr	r3, [r7, #32]
 800835c:	693a      	ldr	r2, [r7, #16]
 800835e:	609a      	str	r2, [r3, #8]
 8008360:	693b      	ldr	r3, [r7, #16]
 8008362:	689a      	ldr	r2, [r3, #8]
 8008364:	6a3b      	ldr	r3, [r7, #32]
 8008366:	60da      	str	r2, [r3, #12]
 8008368:	693b      	ldr	r3, [r7, #16]
 800836a:	689b      	ldr	r3, [r3, #8]
 800836c:	6a3a      	ldr	r2, [r7, #32]
 800836e:	3204      	adds	r2, #4
 8008370:	605a      	str	r2, [r3, #4]
 8008372:	6a3b      	ldr	r3, [r7, #32]
 8008374:	1d1a      	adds	r2, r3, #4
 8008376:	693b      	ldr	r3, [r7, #16]
 8008378:	609a      	str	r2, [r3, #8]
 800837a:	6a3b      	ldr	r3, [r7, #32]
 800837c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800837e:	4613      	mov	r3, r2
 8008380:	009b      	lsls	r3, r3, #2
 8008382:	4413      	add	r3, r2
 8008384:	009b      	lsls	r3, r3, #2
 8008386:	4a26      	ldr	r2, [pc, #152]	@ (8008420 <xTaskRemoveFromEventList+0x1a4>)
 8008388:	441a      	add	r2, r3
 800838a:	6a3b      	ldr	r3, [r7, #32]
 800838c:	615a      	str	r2, [r3, #20]
 800838e:	6a3b      	ldr	r3, [r7, #32]
 8008390:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008392:	4923      	ldr	r1, [pc, #140]	@ (8008420 <xTaskRemoveFromEventList+0x1a4>)
 8008394:	4613      	mov	r3, r2
 8008396:	009b      	lsls	r3, r3, #2
 8008398:	4413      	add	r3, r2
 800839a:	009b      	lsls	r3, r3, #2
 800839c:	440b      	add	r3, r1
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	1c59      	adds	r1, r3, #1
 80083a2:	481f      	ldr	r0, [pc, #124]	@ (8008420 <xTaskRemoveFromEventList+0x1a4>)
 80083a4:	4613      	mov	r3, r2
 80083a6:	009b      	lsls	r3, r3, #2
 80083a8:	4413      	add	r3, r2
 80083aa:	009b      	lsls	r3, r3, #2
 80083ac:	4403      	add	r3, r0
 80083ae:	6019      	str	r1, [r3, #0]
 80083b0:	e01b      	b.n	80083ea <xTaskRemoveFromEventList+0x16e>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80083b2:	4b1c      	ldr	r3, [pc, #112]	@ (8008424 <xTaskRemoveFromEventList+0x1a8>)
 80083b4:	685b      	ldr	r3, [r3, #4]
 80083b6:	61bb      	str	r3, [r7, #24]
 80083b8:	6a3b      	ldr	r3, [r7, #32]
 80083ba:	69ba      	ldr	r2, [r7, #24]
 80083bc:	61da      	str	r2, [r3, #28]
 80083be:	69bb      	ldr	r3, [r7, #24]
 80083c0:	689a      	ldr	r2, [r3, #8]
 80083c2:	6a3b      	ldr	r3, [r7, #32]
 80083c4:	621a      	str	r2, [r3, #32]
 80083c6:	69bb      	ldr	r3, [r7, #24]
 80083c8:	689b      	ldr	r3, [r3, #8]
 80083ca:	6a3a      	ldr	r2, [r7, #32]
 80083cc:	3218      	adds	r2, #24
 80083ce:	605a      	str	r2, [r3, #4]
 80083d0:	6a3b      	ldr	r3, [r7, #32]
 80083d2:	f103 0218 	add.w	r2, r3, #24
 80083d6:	69bb      	ldr	r3, [r7, #24]
 80083d8:	609a      	str	r2, [r3, #8]
 80083da:	6a3b      	ldr	r3, [r7, #32]
 80083dc:	4a11      	ldr	r2, [pc, #68]	@ (8008424 <xTaskRemoveFromEventList+0x1a8>)
 80083de:	629a      	str	r2, [r3, #40]	@ 0x28
 80083e0:	4b10      	ldr	r3, [pc, #64]	@ (8008424 <xTaskRemoveFromEventList+0x1a8>)
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	3301      	adds	r3, #1
 80083e6:	4a0f      	ldr	r2, [pc, #60]	@ (8008424 <xTaskRemoveFromEventList+0x1a8>)
 80083e8:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80083ea:	6a3b      	ldr	r3, [r7, #32]
 80083ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80083ee:	4b0e      	ldr	r3, [pc, #56]	@ (8008428 <xTaskRemoveFromEventList+0x1ac>)
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80083f4:	429a      	cmp	r2, r3
 80083f6:	d905      	bls.n	8008404 <xTaskRemoveFromEventList+0x188>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 80083f8:	2301      	movs	r3, #1
 80083fa:	627b      	str	r3, [r7, #36]	@ 0x24

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 80083fc:	4b0b      	ldr	r3, [pc, #44]	@ (800842c <xTaskRemoveFromEventList+0x1b0>)
 80083fe:	2201      	movs	r2, #1
 8008400:	601a      	str	r2, [r3, #0]
 8008402:	e001      	b.n	8008408 <xTaskRemoveFromEventList+0x18c>
    }
    else
    {
        xReturn = pdFALSE;
 8008404:	2300      	movs	r3, #0
 8008406:	627b      	str	r3, [r7, #36]	@ 0x24
    }

    return xReturn;
 8008408:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800840a:	4618      	mov	r0, r3
 800840c:	372c      	adds	r7, #44	@ 0x2c
 800840e:	46bd      	mov	sp, r7
 8008410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008414:	4770      	bx	lr
 8008416:	bf00      	nop
 8008418:	2000044c 	.word	0x2000044c
 800841c:	2000042c 	.word	0x2000042c
 8008420:	20000350 	.word	0x20000350
 8008424:	200003e4 	.word	0x200003e4
 8008428:	2000034c 	.word	0x2000034c
 800842c:	20000438 	.word	0x20000438

08008430 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008430:	b480      	push	{r7}
 8008432:	b083      	sub	sp, #12
 8008434:	af00      	add	r7, sp, #0
 8008436:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008438:	4b06      	ldr	r3, [pc, #24]	@ (8008454 <vTaskInternalSetTimeOutState+0x24>)
 800843a:	681a      	ldr	r2, [r3, #0]
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8008440:	4b05      	ldr	r3, [pc, #20]	@ (8008458 <vTaskInternalSetTimeOutState+0x28>)
 8008442:	681a      	ldr	r2, [r3, #0]
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	605a      	str	r2, [r3, #4]
}
 8008448:	bf00      	nop
 800844a:	370c      	adds	r7, #12
 800844c:	46bd      	mov	sp, r7
 800844e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008452:	4770      	bx	lr
 8008454:	2000043c 	.word	0x2000043c
 8008458:	20000428 	.word	0x20000428

0800845c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 800845c:	b580      	push	{r7, lr}
 800845e:	b088      	sub	sp, #32
 8008460:	af00      	add	r7, sp, #0
 8008462:	6078      	str	r0, [r7, #4]
 8008464:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	2b00      	cmp	r3, #0
 800846a:	d10d      	bne.n	8008488 <xTaskCheckForTimeOut+0x2c>
        __asm volatile
 800846c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008470:	b672      	cpsid	i
 8008472:	f383 8811 	msr	BASEPRI, r3
 8008476:	f3bf 8f6f 	isb	sy
 800847a:	f3bf 8f4f 	dsb	sy
 800847e:	b662      	cpsie	i
 8008480:	613b      	str	r3, [r7, #16]
    }
 8008482:	bf00      	nop
 8008484:	bf00      	nop
 8008486:	e7fd      	b.n	8008484 <xTaskCheckForTimeOut+0x28>
    configASSERT( pxTicksToWait );
 8008488:	683b      	ldr	r3, [r7, #0]
 800848a:	2b00      	cmp	r3, #0
 800848c:	d10d      	bne.n	80084aa <xTaskCheckForTimeOut+0x4e>
        __asm volatile
 800848e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008492:	b672      	cpsid	i
 8008494:	f383 8811 	msr	BASEPRI, r3
 8008498:	f3bf 8f6f 	isb	sy
 800849c:	f3bf 8f4f 	dsb	sy
 80084a0:	b662      	cpsie	i
 80084a2:	60fb      	str	r3, [r7, #12]
    }
 80084a4:	bf00      	nop
 80084a6:	bf00      	nop
 80084a8:	e7fd      	b.n	80084a6 <xTaskCheckForTimeOut+0x4a>

    taskENTER_CRITICAL();
 80084aa:	f000 fe99 	bl	80091e0 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 80084ae:	4b1f      	ldr	r3, [pc, #124]	@ (800852c <xTaskCheckForTimeOut+0xd0>)
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	685b      	ldr	r3, [r3, #4]
 80084b8:	69ba      	ldr	r2, [r7, #24]
 80084ba:	1ad3      	subs	r3, r2, r3
 80084bc:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 80084be:	683b      	ldr	r3, [r7, #0]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80084c6:	d102      	bne.n	80084ce <xTaskCheckForTimeOut+0x72>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 80084c8:	2300      	movs	r3, #0
 80084ca:	61fb      	str	r3, [r7, #28]
 80084cc:	e026      	b.n	800851c <xTaskCheckForTimeOut+0xc0>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	681a      	ldr	r2, [r3, #0]
 80084d2:	4b17      	ldr	r3, [pc, #92]	@ (8008530 <xTaskCheckForTimeOut+0xd4>)
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	429a      	cmp	r2, r3
 80084d8:	d00a      	beq.n	80084f0 <xTaskCheckForTimeOut+0x94>
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	685b      	ldr	r3, [r3, #4]
 80084de:	69ba      	ldr	r2, [r7, #24]
 80084e0:	429a      	cmp	r2, r3
 80084e2:	d305      	bcc.n	80084f0 <xTaskCheckForTimeOut+0x94>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 80084e4:	2301      	movs	r3, #1
 80084e6:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 80084e8:	683b      	ldr	r3, [r7, #0]
 80084ea:	2200      	movs	r2, #0
 80084ec:	601a      	str	r2, [r3, #0]
 80084ee:	e015      	b.n	800851c <xTaskCheckForTimeOut+0xc0>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80084f0:	683b      	ldr	r3, [r7, #0]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	697a      	ldr	r2, [r7, #20]
 80084f6:	429a      	cmp	r2, r3
 80084f8:	d20b      	bcs.n	8008512 <xTaskCheckForTimeOut+0xb6>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 80084fa:	683b      	ldr	r3, [r7, #0]
 80084fc:	681a      	ldr	r2, [r3, #0]
 80084fe:	697b      	ldr	r3, [r7, #20]
 8008500:	1ad2      	subs	r2, r2, r3
 8008502:	683b      	ldr	r3, [r7, #0]
 8008504:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8008506:	6878      	ldr	r0, [r7, #4]
 8008508:	f7ff ff92 	bl	8008430 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 800850c:	2300      	movs	r3, #0
 800850e:	61fb      	str	r3, [r7, #28]
 8008510:	e004      	b.n	800851c <xTaskCheckForTimeOut+0xc0>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8008512:	683b      	ldr	r3, [r7, #0]
 8008514:	2200      	movs	r2, #0
 8008516:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8008518:	2301      	movs	r3, #1
 800851a:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 800851c:	f000 fe96 	bl	800924c <vPortExitCritical>

    return xReturn;
 8008520:	69fb      	ldr	r3, [r7, #28]
}
 8008522:	4618      	mov	r0, r3
 8008524:	3720      	adds	r7, #32
 8008526:	46bd      	mov	sp, r7
 8008528:	bd80      	pop	{r7, pc}
 800852a:	bf00      	nop
 800852c:	20000428 	.word	0x20000428
 8008530:	2000043c 	.word	0x2000043c

08008534 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008534:	b480      	push	{r7}
 8008536:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8008538:	4b03      	ldr	r3, [pc, #12]	@ (8008548 <vTaskMissedYield+0x14>)
 800853a:	2201      	movs	r2, #1
 800853c:	601a      	str	r2, [r3, #0]
}
 800853e:	bf00      	nop
 8008540:	46bd      	mov	sp, r7
 8008542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008546:	4770      	bx	lr
 8008548:	20000438 	.word	0x20000438

0800854c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800854c:	b580      	push	{r7, lr}
 800854e:	b082      	sub	sp, #8
 8008550:	af00      	add	r7, sp, #0
 8008552:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8008554:	f000 f854 	bl	8008600 <prvCheckTasksWaitingTermination>
             *
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains more than one task
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008558:	4b07      	ldr	r3, [pc, #28]	@ (8008578 <prvIdleTask+0x2c>)
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	2b01      	cmp	r3, #1
 800855e:	d907      	bls.n	8008570 <prvIdleTask+0x24>
            {
                taskYIELD();
 8008560:	4b06      	ldr	r3, [pc, #24]	@ (800857c <prvIdleTask+0x30>)
 8008562:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008566:	601a      	str	r2, [r3, #0]
 8008568:	f3bf 8f4f 	dsb	sy
 800856c:	f3bf 8f6f 	isb	sy
            /* Call the user defined function from within the idle task.  This
             * allows the application designer to add background functionality
             * without the overhead of a separate task.
             * NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
             * CALL A FUNCTION THAT MIGHT BLOCK. */
            vApplicationIdleHook();
 8008570:	f7f9 fa4e 	bl	8001a10 <vApplicationIdleHook>
        prvCheckTasksWaitingTermination();
 8008574:	e7ee      	b.n	8008554 <prvIdleTask+0x8>
 8008576:	bf00      	nop
 8008578:	20000350 	.word	0x20000350
 800857c:	e000ed04 	.word	0xe000ed04

08008580 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008580:	b580      	push	{r7, lr}
 8008582:	b082      	sub	sp, #8
 8008584:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008586:	2300      	movs	r3, #0
 8008588:	607b      	str	r3, [r7, #4]
 800858a:	e00c      	b.n	80085a6 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800858c:	687a      	ldr	r2, [r7, #4]
 800858e:	4613      	mov	r3, r2
 8008590:	009b      	lsls	r3, r3, #2
 8008592:	4413      	add	r3, r2
 8008594:	009b      	lsls	r3, r3, #2
 8008596:	4a12      	ldr	r2, [pc, #72]	@ (80085e0 <prvInitialiseTaskLists+0x60>)
 8008598:	4413      	add	r3, r2
 800859a:	4618      	mov	r0, r3
 800859c:	f7fe fb3e 	bl	8006c1c <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	3301      	adds	r3, #1
 80085a4:	607b      	str	r3, [r7, #4]
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	2b04      	cmp	r3, #4
 80085aa:	d9ef      	bls.n	800858c <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 80085ac:	480d      	ldr	r0, [pc, #52]	@ (80085e4 <prvInitialiseTaskLists+0x64>)
 80085ae:	f7fe fb35 	bl	8006c1c <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 80085b2:	480d      	ldr	r0, [pc, #52]	@ (80085e8 <prvInitialiseTaskLists+0x68>)
 80085b4:	f7fe fb32 	bl	8006c1c <vListInitialise>
    vListInitialise( &xPendingReadyList );
 80085b8:	480c      	ldr	r0, [pc, #48]	@ (80085ec <prvInitialiseTaskLists+0x6c>)
 80085ba:	f7fe fb2f 	bl	8006c1c <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 80085be:	480c      	ldr	r0, [pc, #48]	@ (80085f0 <prvInitialiseTaskLists+0x70>)
 80085c0:	f7fe fb2c 	bl	8006c1c <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 80085c4:	480b      	ldr	r0, [pc, #44]	@ (80085f4 <prvInitialiseTaskLists+0x74>)
 80085c6:	f7fe fb29 	bl	8006c1c <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 80085ca:	4b0b      	ldr	r3, [pc, #44]	@ (80085f8 <prvInitialiseTaskLists+0x78>)
 80085cc:	4a05      	ldr	r2, [pc, #20]	@ (80085e4 <prvInitialiseTaskLists+0x64>)
 80085ce:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80085d0:	4b0a      	ldr	r3, [pc, #40]	@ (80085fc <prvInitialiseTaskLists+0x7c>)
 80085d2:	4a05      	ldr	r2, [pc, #20]	@ (80085e8 <prvInitialiseTaskLists+0x68>)
 80085d4:	601a      	str	r2, [r3, #0]
}
 80085d6:	bf00      	nop
 80085d8:	3708      	adds	r7, #8
 80085da:	46bd      	mov	sp, r7
 80085dc:	bd80      	pop	{r7, pc}
 80085de:	bf00      	nop
 80085e0:	20000350 	.word	0x20000350
 80085e4:	200003b4 	.word	0x200003b4
 80085e8:	200003c8 	.word	0x200003c8
 80085ec:	200003e4 	.word	0x200003e4
 80085f0:	200003f8 	.word	0x200003f8
 80085f4:	20000410 	.word	0x20000410
 80085f8:	200003dc 	.word	0x200003dc
 80085fc:	200003e0 	.word	0x200003e0

08008600 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008600:	b580      	push	{r7, lr}
 8008602:	b082      	sub	sp, #8
 8008604:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008606:	e019      	b.n	800863c <prvCheckTasksWaitingTermination+0x3c>
        {
            taskENTER_CRITICAL();
 8008608:	f000 fdea 	bl	80091e0 <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800860c:	4b10      	ldr	r3, [pc, #64]	@ (8008650 <prvCheckTasksWaitingTermination+0x50>)
 800860e:	68db      	ldr	r3, [r3, #12]
 8008610:	68db      	ldr	r3, [r3, #12]
 8008612:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	3304      	adds	r3, #4
 8008618:	4618      	mov	r0, r3
 800861a:	f7fe fb65 	bl	8006ce8 <uxListRemove>
                --uxCurrentNumberOfTasks;
 800861e:	4b0d      	ldr	r3, [pc, #52]	@ (8008654 <prvCheckTasksWaitingTermination+0x54>)
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	3b01      	subs	r3, #1
 8008624:	4a0b      	ldr	r2, [pc, #44]	@ (8008654 <prvCheckTasksWaitingTermination+0x54>)
 8008626:	6013      	str	r3, [r2, #0]
                --uxDeletedTasksWaitingCleanUp;
 8008628:	4b0b      	ldr	r3, [pc, #44]	@ (8008658 <prvCheckTasksWaitingTermination+0x58>)
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	3b01      	subs	r3, #1
 800862e:	4a0a      	ldr	r2, [pc, #40]	@ (8008658 <prvCheckTasksWaitingTermination+0x58>)
 8008630:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
 8008632:	f000 fe0b 	bl	800924c <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 8008636:	6878      	ldr	r0, [r7, #4]
 8008638:	f000 f810 	bl	800865c <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800863c:	4b06      	ldr	r3, [pc, #24]	@ (8008658 <prvCheckTasksWaitingTermination+0x58>)
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	2b00      	cmp	r3, #0
 8008642:	d1e1      	bne.n	8008608 <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 8008644:	bf00      	nop
 8008646:	bf00      	nop
 8008648:	3708      	adds	r7, #8
 800864a:	46bd      	mov	sp, r7
 800864c:	bd80      	pop	{r7, pc}
 800864e:	bf00      	nop
 8008650:	200003f8 	.word	0x200003f8
 8008654:	20000424 	.word	0x20000424
 8008658:	2000040c 	.word	0x2000040c

0800865c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 800865c:	b580      	push	{r7, lr}
 800865e:	b082      	sub	sp, #8
 8008660:	af00      	add	r7, sp, #0
 8008662:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008668:	4618      	mov	r0, r3
 800866a:	f000 ffaf 	bl	80095cc <vPortFree>
            vPortFree( pxTCB );
 800866e:	6878      	ldr	r0, [r7, #4]
 8008670:	f000 ffac 	bl	80095cc <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8008674:	bf00      	nop
 8008676:	3708      	adds	r7, #8
 8008678:	46bd      	mov	sp, r7
 800867a:	bd80      	pop	{r7, pc}

0800867c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800867c:	b480      	push	{r7}
 800867e:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008680:	4b0a      	ldr	r3, [pc, #40]	@ (80086ac <prvResetNextTaskUnblockTime+0x30>)
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	2b00      	cmp	r3, #0
 8008688:	d104      	bne.n	8008694 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 800868a:	4b09      	ldr	r3, [pc, #36]	@ (80086b0 <prvResetNextTaskUnblockTime+0x34>)
 800868c:	f04f 32ff 	mov.w	r2, #4294967295
 8008690:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8008692:	e005      	b.n	80086a0 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8008694:	4b05      	ldr	r3, [pc, #20]	@ (80086ac <prvResetNextTaskUnblockTime+0x30>)
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	68db      	ldr	r3, [r3, #12]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	4a04      	ldr	r2, [pc, #16]	@ (80086b0 <prvResetNextTaskUnblockTime+0x34>)
 800869e:	6013      	str	r3, [r2, #0]
}
 80086a0:	bf00      	nop
 80086a2:	46bd      	mov	sp, r7
 80086a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086a8:	4770      	bx	lr
 80086aa:	bf00      	nop
 80086ac:	200003dc 	.word	0x200003dc
 80086b0:	20000444 	.word	0x20000444

080086b4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 80086b4:	b480      	push	{r7}
 80086b6:	b083      	sub	sp, #12
 80086b8:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 80086ba:	4b0b      	ldr	r3, [pc, #44]	@ (80086e8 <xTaskGetSchedulerState+0x34>)
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d102      	bne.n	80086c8 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 80086c2:	2301      	movs	r3, #1
 80086c4:	607b      	str	r3, [r7, #4]
 80086c6:	e008      	b.n	80086da <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80086c8:	4b08      	ldr	r3, [pc, #32]	@ (80086ec <xTaskGetSchedulerState+0x38>)
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d102      	bne.n	80086d6 <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 80086d0:	2302      	movs	r3, #2
 80086d2:	607b      	str	r3, [r7, #4]
 80086d4:	e001      	b.n	80086da <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 80086d6:	2300      	movs	r3, #0
 80086d8:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 80086da:	687b      	ldr	r3, [r7, #4]
    }
 80086dc:	4618      	mov	r0, r3
 80086de:	370c      	adds	r7, #12
 80086e0:	46bd      	mov	sp, r7
 80086e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086e6:	4770      	bx	lr
 80086e8:	20000430 	.word	0x20000430
 80086ec:	2000044c 	.word	0x2000044c

080086f0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 80086f0:	b580      	push	{r7, lr}
 80086f2:	b088      	sub	sp, #32
 80086f4:	af00      	add	r7, sp, #0
 80086f6:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	61bb      	str	r3, [r7, #24]
        BaseType_t xReturn = pdFALSE;
 80086fc:	2300      	movs	r3, #0
 80086fe:	61fb      	str	r3, [r7, #28]

        if( pxMutexHolder != NULL )
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	2b00      	cmp	r3, #0
 8008704:	f000 8092 	beq.w	800882c <xTaskPriorityDisinherit+0x13c>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 8008708:	4b4b      	ldr	r3, [pc, #300]	@ (8008838 <xTaskPriorityDisinherit+0x148>)
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	69ba      	ldr	r2, [r7, #24]
 800870e:	429a      	cmp	r2, r3
 8008710:	d00d      	beq.n	800872e <xTaskPriorityDisinherit+0x3e>
        __asm volatile
 8008712:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008716:	b672      	cpsid	i
 8008718:	f383 8811 	msr	BASEPRI, r3
 800871c:	f3bf 8f6f 	isb	sy
 8008720:	f3bf 8f4f 	dsb	sy
 8008724:	b662      	cpsie	i
 8008726:	613b      	str	r3, [r7, #16]
    }
 8008728:	bf00      	nop
 800872a:	bf00      	nop
 800872c:	e7fd      	b.n	800872a <xTaskPriorityDisinherit+0x3a>
            configASSERT( pxTCB->uxMutexesHeld );
 800872e:	69bb      	ldr	r3, [r7, #24]
 8008730:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008732:	2b00      	cmp	r3, #0
 8008734:	d10d      	bne.n	8008752 <xTaskPriorityDisinherit+0x62>
        __asm volatile
 8008736:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800873a:	b672      	cpsid	i
 800873c:	f383 8811 	msr	BASEPRI, r3
 8008740:	f3bf 8f6f 	isb	sy
 8008744:	f3bf 8f4f 	dsb	sy
 8008748:	b662      	cpsie	i
 800874a:	60fb      	str	r3, [r7, #12]
    }
 800874c:	bf00      	nop
 800874e:	bf00      	nop
 8008750:	e7fd      	b.n	800874e <xTaskPriorityDisinherit+0x5e>
            ( pxTCB->uxMutexesHeld )--;
 8008752:	69bb      	ldr	r3, [r7, #24]
 8008754:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008756:	1e5a      	subs	r2, r3, #1
 8008758:	69bb      	ldr	r3, [r7, #24]
 800875a:	649a      	str	r2, [r3, #72]	@ 0x48

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800875c:	69bb      	ldr	r3, [r7, #24]
 800875e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008760:	69bb      	ldr	r3, [r7, #24]
 8008762:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008764:	429a      	cmp	r2, r3
 8008766:	d061      	beq.n	800882c <xTaskPriorityDisinherit+0x13c>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008768:	69bb      	ldr	r3, [r7, #24]
 800876a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800876c:	2b00      	cmp	r3, #0
 800876e:	d15d      	bne.n	800882c <xTaskPriorityDisinherit+0x13c>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008770:	69bb      	ldr	r3, [r7, #24]
 8008772:	3304      	adds	r3, #4
 8008774:	4618      	mov	r0, r3
 8008776:	f7fe fab7 	bl	8006ce8 <uxListRemove>
 800877a:	4603      	mov	r3, r0
 800877c:	2b00      	cmp	r3, #0
 800877e:	d10a      	bne.n	8008796 <xTaskPriorityDisinherit+0xa6>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8008780:	69bb      	ldr	r3, [r7, #24]
 8008782:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008784:	2201      	movs	r2, #1
 8008786:	fa02 f303 	lsl.w	r3, r2, r3
 800878a:	43da      	mvns	r2, r3
 800878c:	4b2b      	ldr	r3, [pc, #172]	@ (800883c <xTaskPriorityDisinherit+0x14c>)
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	4013      	ands	r3, r2
 8008792:	4a2a      	ldr	r2, [pc, #168]	@ (800883c <xTaskPriorityDisinherit+0x14c>)
 8008794:	6013      	str	r3, [r2, #0]
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008796:	69bb      	ldr	r3, [r7, #24]
 8008798:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800879a:	69bb      	ldr	r3, [r7, #24]
 800879c:	62da      	str	r2, [r3, #44]	@ 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800879e:	69bb      	ldr	r3, [r7, #24]
 80087a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80087a2:	f1c3 0205 	rsb	r2, r3, #5
 80087a6:	69bb      	ldr	r3, [r7, #24]
 80087a8:	619a      	str	r2, [r3, #24]
                    prvAddTaskToReadyList( pxTCB );
 80087aa:	69bb      	ldr	r3, [r7, #24]
 80087ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80087ae:	2201      	movs	r2, #1
 80087b0:	409a      	lsls	r2, r3
 80087b2:	4b22      	ldr	r3, [pc, #136]	@ (800883c <xTaskPriorityDisinherit+0x14c>)
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	4313      	orrs	r3, r2
 80087b8:	4a20      	ldr	r2, [pc, #128]	@ (800883c <xTaskPriorityDisinherit+0x14c>)
 80087ba:	6013      	str	r3, [r2, #0]
 80087bc:	69bb      	ldr	r3, [r7, #24]
 80087be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80087c0:	491f      	ldr	r1, [pc, #124]	@ (8008840 <xTaskPriorityDisinherit+0x150>)
 80087c2:	4613      	mov	r3, r2
 80087c4:	009b      	lsls	r3, r3, #2
 80087c6:	4413      	add	r3, r2
 80087c8:	009b      	lsls	r3, r3, #2
 80087ca:	440b      	add	r3, r1
 80087cc:	3304      	adds	r3, #4
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	617b      	str	r3, [r7, #20]
 80087d2:	69bb      	ldr	r3, [r7, #24]
 80087d4:	697a      	ldr	r2, [r7, #20]
 80087d6:	609a      	str	r2, [r3, #8]
 80087d8:	697b      	ldr	r3, [r7, #20]
 80087da:	689a      	ldr	r2, [r3, #8]
 80087dc:	69bb      	ldr	r3, [r7, #24]
 80087de:	60da      	str	r2, [r3, #12]
 80087e0:	697b      	ldr	r3, [r7, #20]
 80087e2:	689b      	ldr	r3, [r3, #8]
 80087e4:	69ba      	ldr	r2, [r7, #24]
 80087e6:	3204      	adds	r2, #4
 80087e8:	605a      	str	r2, [r3, #4]
 80087ea:	69bb      	ldr	r3, [r7, #24]
 80087ec:	1d1a      	adds	r2, r3, #4
 80087ee:	697b      	ldr	r3, [r7, #20]
 80087f0:	609a      	str	r2, [r3, #8]
 80087f2:	69bb      	ldr	r3, [r7, #24]
 80087f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80087f6:	4613      	mov	r3, r2
 80087f8:	009b      	lsls	r3, r3, #2
 80087fa:	4413      	add	r3, r2
 80087fc:	009b      	lsls	r3, r3, #2
 80087fe:	4a10      	ldr	r2, [pc, #64]	@ (8008840 <xTaskPriorityDisinherit+0x150>)
 8008800:	441a      	add	r2, r3
 8008802:	69bb      	ldr	r3, [r7, #24]
 8008804:	615a      	str	r2, [r3, #20]
 8008806:	69bb      	ldr	r3, [r7, #24]
 8008808:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800880a:	490d      	ldr	r1, [pc, #52]	@ (8008840 <xTaskPriorityDisinherit+0x150>)
 800880c:	4613      	mov	r3, r2
 800880e:	009b      	lsls	r3, r3, #2
 8008810:	4413      	add	r3, r2
 8008812:	009b      	lsls	r3, r3, #2
 8008814:	440b      	add	r3, r1
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	1c59      	adds	r1, r3, #1
 800881a:	4809      	ldr	r0, [pc, #36]	@ (8008840 <xTaskPriorityDisinherit+0x150>)
 800881c:	4613      	mov	r3, r2
 800881e:	009b      	lsls	r3, r3, #2
 8008820:	4413      	add	r3, r2
 8008822:	009b      	lsls	r3, r3, #2
 8008824:	4403      	add	r3, r0
 8008826:	6019      	str	r1, [r3, #0]
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 8008828:	2301      	movs	r3, #1
 800882a:	61fb      	str	r3, [r7, #28]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 800882c:	69fb      	ldr	r3, [r7, #28]
    }
 800882e:	4618      	mov	r0, r3
 8008830:	3720      	adds	r7, #32
 8008832:	46bd      	mov	sp, r7
 8008834:	bd80      	pop	{r7, pc}
 8008836:	bf00      	nop
 8008838:	2000034c 	.word	0x2000034c
 800883c:	2000042c 	.word	0x2000042c
 8008840:	20000350 	.word	0x20000350

08008844 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8008844:	b580      	push	{r7, lr}
 8008846:	b086      	sub	sp, #24
 8008848:	af00      	add	r7, sp, #0
 800884a:	6078      	str	r0, [r7, #4]
 800884c:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 800884e:	4b36      	ldr	r3, [pc, #216]	@ (8008928 <prvAddCurrentTaskToDelayedList+0xe4>)
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008854:	4b35      	ldr	r3, [pc, #212]	@ (800892c <prvAddCurrentTaskToDelayedList+0xe8>)
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	3304      	adds	r3, #4
 800885a:	4618      	mov	r0, r3
 800885c:	f7fe fa44 	bl	8006ce8 <uxListRemove>
 8008860:	4603      	mov	r3, r0
 8008862:	2b00      	cmp	r3, #0
 8008864:	d10b      	bne.n	800887e <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8008866:	4b31      	ldr	r3, [pc, #196]	@ (800892c <prvAddCurrentTaskToDelayedList+0xe8>)
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800886c:	2201      	movs	r2, #1
 800886e:	fa02 f303 	lsl.w	r3, r2, r3
 8008872:	43da      	mvns	r2, r3
 8008874:	4b2e      	ldr	r3, [pc, #184]	@ (8008930 <prvAddCurrentTaskToDelayedList+0xec>)
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	4013      	ands	r3, r2
 800887a:	4a2d      	ldr	r2, [pc, #180]	@ (8008930 <prvAddCurrentTaskToDelayedList+0xec>)
 800887c:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008884:	d124      	bne.n	80088d0 <prvAddCurrentTaskToDelayedList+0x8c>
 8008886:	683b      	ldr	r3, [r7, #0]
 8008888:	2b00      	cmp	r3, #0
 800888a:	d021      	beq.n	80088d0 <prvAddCurrentTaskToDelayedList+0x8c>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800888c:	4b29      	ldr	r3, [pc, #164]	@ (8008934 <prvAddCurrentTaskToDelayedList+0xf0>)
 800888e:	685b      	ldr	r3, [r3, #4]
 8008890:	613b      	str	r3, [r7, #16]
 8008892:	4b26      	ldr	r3, [pc, #152]	@ (800892c <prvAddCurrentTaskToDelayedList+0xe8>)
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	693a      	ldr	r2, [r7, #16]
 8008898:	609a      	str	r2, [r3, #8]
 800889a:	4b24      	ldr	r3, [pc, #144]	@ (800892c <prvAddCurrentTaskToDelayedList+0xe8>)
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	693a      	ldr	r2, [r7, #16]
 80088a0:	6892      	ldr	r2, [r2, #8]
 80088a2:	60da      	str	r2, [r3, #12]
 80088a4:	4b21      	ldr	r3, [pc, #132]	@ (800892c <prvAddCurrentTaskToDelayedList+0xe8>)
 80088a6:	681a      	ldr	r2, [r3, #0]
 80088a8:	693b      	ldr	r3, [r7, #16]
 80088aa:	689b      	ldr	r3, [r3, #8]
 80088ac:	3204      	adds	r2, #4
 80088ae:	605a      	str	r2, [r3, #4]
 80088b0:	4b1e      	ldr	r3, [pc, #120]	@ (800892c <prvAddCurrentTaskToDelayedList+0xe8>)
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	1d1a      	adds	r2, r3, #4
 80088b6:	693b      	ldr	r3, [r7, #16]
 80088b8:	609a      	str	r2, [r3, #8]
 80088ba:	4b1c      	ldr	r3, [pc, #112]	@ (800892c <prvAddCurrentTaskToDelayedList+0xe8>)
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	4a1d      	ldr	r2, [pc, #116]	@ (8008934 <prvAddCurrentTaskToDelayedList+0xf0>)
 80088c0:	615a      	str	r2, [r3, #20]
 80088c2:	4b1c      	ldr	r3, [pc, #112]	@ (8008934 <prvAddCurrentTaskToDelayedList+0xf0>)
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	3301      	adds	r3, #1
 80088c8:	4a1a      	ldr	r2, [pc, #104]	@ (8008934 <prvAddCurrentTaskToDelayedList+0xf0>)
 80088ca:	6013      	str	r3, [r2, #0]
 80088cc:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 80088ce:	e026      	b.n	800891e <prvAddCurrentTaskToDelayedList+0xda>
            xTimeToWake = xConstTickCount + xTicksToWait;
 80088d0:	697a      	ldr	r2, [r7, #20]
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	4413      	add	r3, r2
 80088d6:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80088d8:	4b14      	ldr	r3, [pc, #80]	@ (800892c <prvAddCurrentTaskToDelayedList+0xe8>)
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	68fa      	ldr	r2, [r7, #12]
 80088de:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 80088e0:	68fa      	ldr	r2, [r7, #12]
 80088e2:	697b      	ldr	r3, [r7, #20]
 80088e4:	429a      	cmp	r2, r3
 80088e6:	d209      	bcs.n	80088fc <prvAddCurrentTaskToDelayedList+0xb8>
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80088e8:	4b13      	ldr	r3, [pc, #76]	@ (8008938 <prvAddCurrentTaskToDelayedList+0xf4>)
 80088ea:	681a      	ldr	r2, [r3, #0]
 80088ec:	4b0f      	ldr	r3, [pc, #60]	@ (800892c <prvAddCurrentTaskToDelayedList+0xe8>)
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	3304      	adds	r3, #4
 80088f2:	4619      	mov	r1, r3
 80088f4:	4610      	mov	r0, r2
 80088f6:	f7fe f9be 	bl	8006c76 <vListInsert>
}
 80088fa:	e010      	b.n	800891e <prvAddCurrentTaskToDelayedList+0xda>
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80088fc:	4b0f      	ldr	r3, [pc, #60]	@ (800893c <prvAddCurrentTaskToDelayedList+0xf8>)
 80088fe:	681a      	ldr	r2, [r3, #0]
 8008900:	4b0a      	ldr	r3, [pc, #40]	@ (800892c <prvAddCurrentTaskToDelayedList+0xe8>)
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	3304      	adds	r3, #4
 8008906:	4619      	mov	r1, r3
 8008908:	4610      	mov	r0, r2
 800890a:	f7fe f9b4 	bl	8006c76 <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 800890e:	4b0c      	ldr	r3, [pc, #48]	@ (8008940 <prvAddCurrentTaskToDelayedList+0xfc>)
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	68fa      	ldr	r2, [r7, #12]
 8008914:	429a      	cmp	r2, r3
 8008916:	d202      	bcs.n	800891e <prvAddCurrentTaskToDelayedList+0xda>
                    xNextTaskUnblockTime = xTimeToWake;
 8008918:	4a09      	ldr	r2, [pc, #36]	@ (8008940 <prvAddCurrentTaskToDelayedList+0xfc>)
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	6013      	str	r3, [r2, #0]
}
 800891e:	bf00      	nop
 8008920:	3718      	adds	r7, #24
 8008922:	46bd      	mov	sp, r7
 8008924:	bd80      	pop	{r7, pc}
 8008926:	bf00      	nop
 8008928:	20000428 	.word	0x20000428
 800892c:	2000034c 	.word	0x2000034c
 8008930:	2000042c 	.word	0x2000042c
 8008934:	20000410 	.word	0x20000410
 8008938:	200003e0 	.word	0x200003e0
 800893c:	200003dc 	.word	0x200003dc
 8008940:	20000444 	.word	0x20000444

08008944 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8008944:	b580      	push	{r7, lr}
 8008946:	b084      	sub	sp, #16
 8008948:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 800894a:	2300      	movs	r3, #0
 800894c:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 800894e:	f000 faff 	bl	8008f50 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8008952:	4b13      	ldr	r3, [pc, #76]	@ (80089a0 <xTimerCreateTimerTask+0x5c>)
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	2b00      	cmp	r3, #0
 8008958:	d00b      	beq.n	8008972 <xTimerCreateTimerTask+0x2e>
                    xReturn = pdPASS;
                }
            }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
            {
                xReturn = xTaskCreate( prvTimerTask,
 800895a:	4b12      	ldr	r3, [pc, #72]	@ (80089a4 <xTimerCreateTimerTask+0x60>)
 800895c:	9301      	str	r3, [sp, #4]
 800895e:	2302      	movs	r3, #2
 8008960:	9300      	str	r3, [sp, #0]
 8008962:	2300      	movs	r3, #0
 8008964:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008968:	490f      	ldr	r1, [pc, #60]	@ (80089a8 <xTimerCreateTimerTask+0x64>)
 800896a:	4810      	ldr	r0, [pc, #64]	@ (80089ac <xTimerCreateTimerTask+0x68>)
 800896c:	f7fe ff34 	bl	80077d8 <xTaskCreate>
 8008970:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	2b00      	cmp	r3, #0
 8008976:	d10d      	bne.n	8008994 <xTimerCreateTimerTask+0x50>
        __asm volatile
 8008978:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800897c:	b672      	cpsid	i
 800897e:	f383 8811 	msr	BASEPRI, r3
 8008982:	f3bf 8f6f 	isb	sy
 8008986:	f3bf 8f4f 	dsb	sy
 800898a:	b662      	cpsie	i
 800898c:	603b      	str	r3, [r7, #0]
    }
 800898e:	bf00      	nop
 8008990:	bf00      	nop
 8008992:	e7fd      	b.n	8008990 <xTimerCreateTimerTask+0x4c>
        return xReturn;
 8008994:	687b      	ldr	r3, [r7, #4]
    }
 8008996:	4618      	mov	r0, r3
 8008998:	3708      	adds	r7, #8
 800899a:	46bd      	mov	sp, r7
 800899c:	bd80      	pop	{r7, pc}
 800899e:	bf00      	nop
 80089a0:	20000480 	.word	0x20000480
 80089a4:	20000484 	.word	0x20000484
 80089a8:	08009910 	.word	0x08009910
 80089ac:	08008bad 	.word	0x08008bad

080089b0 <xTimerCreate>:
        TimerHandle_t xTimerCreate( const char * const pcTimerName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                                    const TickType_t xTimerPeriodInTicks,
                                    const BaseType_t xAutoReload,
                                    void * const pvTimerID,
                                    TimerCallbackFunction_t pxCallbackFunction )
        {
 80089b0:	b580      	push	{r7, lr}
 80089b2:	b088      	sub	sp, #32
 80089b4:	af02      	add	r7, sp, #8
 80089b6:	60f8      	str	r0, [r7, #12]
 80089b8:	60b9      	str	r1, [r7, #8]
 80089ba:	607a      	str	r2, [r7, #4]
 80089bc:	603b      	str	r3, [r7, #0]
            Timer_t * pxNewTimer;

            pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 80089be:	2028      	movs	r0, #40	@ 0x28
 80089c0:	f000 fd44 	bl	800944c <pvPortMalloc>
 80089c4:	6178      	str	r0, [r7, #20]

            if( pxNewTimer != NULL )
 80089c6:	697b      	ldr	r3, [r7, #20]
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d00d      	beq.n	80089e8 <xTimerCreate+0x38>
            {
                /* Status is thus far zero as the timer is not created statically
                 * and has not been started.  The auto-reload bit may get set in
                 * prvInitialiseNewTimer. */
                pxNewTimer->ucStatus = 0x00;
 80089cc:	697b      	ldr	r3, [r7, #20]
 80089ce:	2200      	movs	r2, #0
 80089d0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
                prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, xAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 80089d4:	697b      	ldr	r3, [r7, #20]
 80089d6:	9301      	str	r3, [sp, #4]
 80089d8:	6a3b      	ldr	r3, [r7, #32]
 80089da:	9300      	str	r3, [sp, #0]
 80089dc:	683b      	ldr	r3, [r7, #0]
 80089de:	687a      	ldr	r2, [r7, #4]
 80089e0:	68b9      	ldr	r1, [r7, #8]
 80089e2:	68f8      	ldr	r0, [r7, #12]
 80089e4:	f000 f805 	bl	80089f2 <prvInitialiseNewTimer>
            }

            return pxNewTimer;
 80089e8:	697b      	ldr	r3, [r7, #20]
        }
 80089ea:	4618      	mov	r0, r3
 80089ec:	3718      	adds	r7, #24
 80089ee:	46bd      	mov	sp, r7
 80089f0:	bd80      	pop	{r7, pc}

080089f2 <prvInitialiseNewTimer>:
                                       const TickType_t xTimerPeriodInTicks,
                                       const BaseType_t xAutoReload,
                                       void * const pvTimerID,
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer )
    {
 80089f2:	b580      	push	{r7, lr}
 80089f4:	b086      	sub	sp, #24
 80089f6:	af00      	add	r7, sp, #0
 80089f8:	60f8      	str	r0, [r7, #12]
 80089fa:	60b9      	str	r1, [r7, #8]
 80089fc:	607a      	str	r2, [r7, #4]
 80089fe:	603b      	str	r3, [r7, #0]
        /* 0 is not a valid value for xTimerPeriodInTicks. */
        configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8008a00:	68bb      	ldr	r3, [r7, #8]
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	d10d      	bne.n	8008a22 <prvInitialiseNewTimer+0x30>
        __asm volatile
 8008a06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a0a:	b672      	cpsid	i
 8008a0c:	f383 8811 	msr	BASEPRI, r3
 8008a10:	f3bf 8f6f 	isb	sy
 8008a14:	f3bf 8f4f 	dsb	sy
 8008a18:	b662      	cpsie	i
 8008a1a:	617b      	str	r3, [r7, #20]
    }
 8008a1c:	bf00      	nop
 8008a1e:	bf00      	nop
 8008a20:	e7fd      	b.n	8008a1e <prvInitialiseNewTimer+0x2c>

        /* Ensure the infrastructure used by the timer service task has been
         * created/initialised. */
        prvCheckForValidListAndQueue();
 8008a22:	f000 fa95 	bl	8008f50 <prvCheckForValidListAndQueue>

        /* Initialise the timer structure members using the function
         * parameters. */
        pxNewTimer->pcTimerName = pcTimerName;
 8008a26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a28:	68fa      	ldr	r2, [r7, #12]
 8008a2a:	601a      	str	r2, [r3, #0]
        pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8008a2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a2e:	68ba      	ldr	r2, [r7, #8]
 8008a30:	619a      	str	r2, [r3, #24]
        pxNewTimer->pvTimerID = pvTimerID;
 8008a32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a34:	683a      	ldr	r2, [r7, #0]
 8008a36:	61da      	str	r2, [r3, #28]
        pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8008a38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a3a:	6a3a      	ldr	r2, [r7, #32]
 8008a3c:	621a      	str	r2, [r3, #32]
        vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8008a3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a40:	3304      	adds	r3, #4
 8008a42:	4618      	mov	r0, r3
 8008a44:	f7fe f90a 	bl	8006c5c <vListInitialiseItem>

        if( xAutoReload != pdFALSE )
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	d008      	beq.n	8008a60 <prvInitialiseNewTimer+0x6e>
        {
            pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 8008a4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a50:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8008a54:	f043 0304 	orr.w	r3, r3, #4
 8008a58:	b2da      	uxtb	r2, r3
 8008a5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a5c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        traceTIMER_CREATE( pxNewTimer );
    }
 8008a60:	bf00      	nop
 8008a62:	3718      	adds	r7, #24
 8008a64:	46bd      	mov	sp, r7
 8008a66:	bd80      	pop	{r7, pc}

08008a68 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 8008a68:	b580      	push	{r7, lr}
 8008a6a:	b08a      	sub	sp, #40	@ 0x28
 8008a6c:	af00      	add	r7, sp, #0
 8008a6e:	60f8      	str	r0, [r7, #12]
 8008a70:	60b9      	str	r1, [r7, #8]
 8008a72:	607a      	str	r2, [r7, #4]
 8008a74:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 8008a76:	2300      	movs	r3, #0
 8008a78:	627b      	str	r3, [r7, #36]	@ 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	d10d      	bne.n	8008a9c <xTimerGenericCommand+0x34>
        __asm volatile
 8008a80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a84:	b672      	cpsid	i
 8008a86:	f383 8811 	msr	BASEPRI, r3
 8008a8a:	f3bf 8f6f 	isb	sy
 8008a8e:	f3bf 8f4f 	dsb	sy
 8008a92:	b662      	cpsie	i
 8008a94:	623b      	str	r3, [r7, #32]
    }
 8008a96:	bf00      	nop
 8008a98:	bf00      	nop
 8008a9a:	e7fd      	b.n	8008a98 <xTimerGenericCommand+0x30>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 8008a9c:	4b19      	ldr	r3, [pc, #100]	@ (8008b04 <xTimerGenericCommand+0x9c>)
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d02a      	beq.n	8008afa <xTimerGenericCommand+0x92>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 8008aa4:	68bb      	ldr	r3, [r7, #8]
 8008aa6:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8008ab0:	68bb      	ldr	r3, [r7, #8]
 8008ab2:	2b05      	cmp	r3, #5
 8008ab4:	dc18      	bgt.n	8008ae8 <xTimerGenericCommand+0x80>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8008ab6:	f7ff fdfd 	bl	80086b4 <xTaskGetSchedulerState>
 8008aba:	4603      	mov	r3, r0
 8008abc:	2b02      	cmp	r3, #2
 8008abe:	d109      	bne.n	8008ad4 <xTimerGenericCommand+0x6c>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8008ac0:	4b10      	ldr	r3, [pc, #64]	@ (8008b04 <xTimerGenericCommand+0x9c>)
 8008ac2:	6818      	ldr	r0, [r3, #0]
 8008ac4:	f107 0114 	add.w	r1, r7, #20
 8008ac8:	2300      	movs	r3, #0
 8008aca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008acc:	f7fe fa3c 	bl	8006f48 <xQueueGenericSend>
 8008ad0:	6278      	str	r0, [r7, #36]	@ 0x24
 8008ad2:	e012      	b.n	8008afa <xTimerGenericCommand+0x92>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8008ad4:	4b0b      	ldr	r3, [pc, #44]	@ (8008b04 <xTimerGenericCommand+0x9c>)
 8008ad6:	6818      	ldr	r0, [r3, #0]
 8008ad8:	f107 0114 	add.w	r1, r7, #20
 8008adc:	2300      	movs	r3, #0
 8008ade:	2200      	movs	r2, #0
 8008ae0:	f7fe fa32 	bl	8006f48 <xQueueGenericSend>
 8008ae4:	6278      	str	r0, [r7, #36]	@ 0x24
 8008ae6:	e008      	b.n	8008afa <xTimerGenericCommand+0x92>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8008ae8:	4b06      	ldr	r3, [pc, #24]	@ (8008b04 <xTimerGenericCommand+0x9c>)
 8008aea:	6818      	ldr	r0, [r3, #0]
 8008aec:	f107 0114 	add.w	r1, r7, #20
 8008af0:	2300      	movs	r3, #0
 8008af2:	683a      	ldr	r2, [r7, #0]
 8008af4:	f7fe fb32 	bl	800715c <xQueueGenericSendFromISR>
 8008af8:	6278      	str	r0, [r7, #36]	@ 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8008afa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
 8008afc:	4618      	mov	r0, r3
 8008afe:	3728      	adds	r7, #40	@ 0x28
 8008b00:	46bd      	mov	sp, r7
 8008b02:	bd80      	pop	{r7, pc}
 8008b04:	20000480 	.word	0x20000480

08008b08 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 8008b08:	b580      	push	{r7, lr}
 8008b0a:	b084      	sub	sp, #16
 8008b0c:	af00      	add	r7, sp, #0
 8008b0e:	60f8      	str	r0, [r7, #12]
 8008b10:	60b9      	str	r1, [r7, #8]
 8008b12:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8008b14:	e008      	b.n	8008b28 <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	699b      	ldr	r3, [r3, #24]
 8008b1a:	68ba      	ldr	r2, [r7, #8]
 8008b1c:	4413      	add	r3, r2
 8008b1e:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	6a1b      	ldr	r3, [r3, #32]
 8008b24:	68f8      	ldr	r0, [r7, #12]
 8008b26:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	699a      	ldr	r2, [r3, #24]
 8008b2c:	68bb      	ldr	r3, [r7, #8]
 8008b2e:	18d1      	adds	r1, r2, r3
 8008b30:	68bb      	ldr	r3, [r7, #8]
 8008b32:	687a      	ldr	r2, [r7, #4]
 8008b34:	68f8      	ldr	r0, [r7, #12]
 8008b36:	f000 f8df 	bl	8008cf8 <prvInsertTimerInActiveList>
 8008b3a:	4603      	mov	r3, r0
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	d1ea      	bne.n	8008b16 <prvReloadTimer+0xe>
        }
    }
 8008b40:	bf00      	nop
 8008b42:	bf00      	nop
 8008b44:	3710      	adds	r7, #16
 8008b46:	46bd      	mov	sp, r7
 8008b48:	bd80      	pop	{r7, pc}
	...

08008b4c <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8008b4c:	b580      	push	{r7, lr}
 8008b4e:	b084      	sub	sp, #16
 8008b50:	af00      	add	r7, sp, #0
 8008b52:	6078      	str	r0, [r7, #4]
 8008b54:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008b56:	4b14      	ldr	r3, [pc, #80]	@ (8008ba8 <prvProcessExpiredTimer+0x5c>)
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	68db      	ldr	r3, [r3, #12]
 8008b5c:	68db      	ldr	r3, [r3, #12]
 8008b5e:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	3304      	adds	r3, #4
 8008b64:	4618      	mov	r0, r3
 8008b66:	f7fe f8bf 	bl	8006ce8 <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8008b70:	f003 0304 	and.w	r3, r3, #4
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d005      	beq.n	8008b84 <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 8008b78:	683a      	ldr	r2, [r7, #0]
 8008b7a:	6879      	ldr	r1, [r7, #4]
 8008b7c:	68f8      	ldr	r0, [r7, #12]
 8008b7e:	f7ff ffc3 	bl	8008b08 <prvReloadTimer>
 8008b82:	e008      	b.n	8008b96 <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8008b8a:	f023 0301 	bic.w	r3, r3, #1
 8008b8e:	b2da      	uxtb	r2, r3
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	6a1b      	ldr	r3, [r3, #32]
 8008b9a:	68f8      	ldr	r0, [r7, #12]
 8008b9c:	4798      	blx	r3
    }
 8008b9e:	bf00      	nop
 8008ba0:	3710      	adds	r7, #16
 8008ba2:	46bd      	mov	sp, r7
 8008ba4:	bd80      	pop	{r7, pc}
 8008ba6:	bf00      	nop
 8008ba8:	20000478 	.word	0x20000478

08008bac <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8008bac:	b580      	push	{r7, lr}
 8008bae:	b084      	sub	sp, #16
 8008bb0:	af00      	add	r7, sp, #0
 8008bb2:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008bb4:	f107 0308 	add.w	r3, r7, #8
 8008bb8:	4618      	mov	r0, r3
 8008bba:	f000 f859 	bl	8008c70 <prvGetNextExpireTime>
 8008bbe:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8008bc0:	68bb      	ldr	r3, [r7, #8]
 8008bc2:	4619      	mov	r1, r3
 8008bc4:	68f8      	ldr	r0, [r7, #12]
 8008bc6:	f000 f805 	bl	8008bd4 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8008bca:	f000 f8d7 	bl	8008d7c <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008bce:	bf00      	nop
 8008bd0:	e7f0      	b.n	8008bb4 <prvTimerTask+0x8>
	...

08008bd4 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8008bd4:	b580      	push	{r7, lr}
 8008bd6:	b084      	sub	sp, #16
 8008bd8:	af00      	add	r7, sp, #0
 8008bda:	6078      	str	r0, [r7, #4]
 8008bdc:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8008bde:	f7ff f83d 	bl	8007c5c <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008be2:	f107 0308 	add.w	r3, r7, #8
 8008be6:	4618      	mov	r0, r3
 8008be8:	f000 f866 	bl	8008cb8 <prvSampleTimeNow>
 8008bec:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8008bee:	68bb      	ldr	r3, [r7, #8]
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d130      	bne.n	8008c56 <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008bf4:	683b      	ldr	r3, [r7, #0]
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d10a      	bne.n	8008c10 <prvProcessTimerOrBlockTask+0x3c>
 8008bfa:	687a      	ldr	r2, [r7, #4]
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	429a      	cmp	r2, r3
 8008c00:	d806      	bhi.n	8008c10 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8008c02:	f7ff f839 	bl	8007c78 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8008c06:	68f9      	ldr	r1, [r7, #12]
 8008c08:	6878      	ldr	r0, [r7, #4]
 8008c0a:	f7ff ff9f 	bl	8008b4c <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8008c0e:	e024      	b.n	8008c5a <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8008c10:	683b      	ldr	r3, [r7, #0]
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d008      	beq.n	8008c28 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8008c16:	4b13      	ldr	r3, [pc, #76]	@ (8008c64 <prvProcessTimerOrBlockTask+0x90>)
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d101      	bne.n	8008c24 <prvProcessTimerOrBlockTask+0x50>
 8008c20:	2301      	movs	r3, #1
 8008c22:	e000      	b.n	8008c26 <prvProcessTimerOrBlockTask+0x52>
 8008c24:	2300      	movs	r3, #0
 8008c26:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008c28:	4b0f      	ldr	r3, [pc, #60]	@ (8008c68 <prvProcessTimerOrBlockTask+0x94>)
 8008c2a:	6818      	ldr	r0, [r3, #0]
 8008c2c:	687a      	ldr	r2, [r7, #4]
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	1ad3      	subs	r3, r2, r3
 8008c32:	683a      	ldr	r2, [r7, #0]
 8008c34:	4619      	mov	r1, r3
 8008c36:	f7fe fd9b 	bl	8007770 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8008c3a:	f7ff f81d 	bl	8007c78 <xTaskResumeAll>
 8008c3e:	4603      	mov	r3, r0
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	d10a      	bne.n	8008c5a <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8008c44:	4b09      	ldr	r3, [pc, #36]	@ (8008c6c <prvProcessTimerOrBlockTask+0x98>)
 8008c46:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008c4a:	601a      	str	r2, [r3, #0]
 8008c4c:	f3bf 8f4f 	dsb	sy
 8008c50:	f3bf 8f6f 	isb	sy
    }
 8008c54:	e001      	b.n	8008c5a <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8008c56:	f7ff f80f 	bl	8007c78 <xTaskResumeAll>
    }
 8008c5a:	bf00      	nop
 8008c5c:	3710      	adds	r7, #16
 8008c5e:	46bd      	mov	sp, r7
 8008c60:	bd80      	pop	{r7, pc}
 8008c62:	bf00      	nop
 8008c64:	2000047c 	.word	0x2000047c
 8008c68:	20000480 	.word	0x20000480
 8008c6c:	e000ed04 	.word	0xe000ed04

08008c70 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8008c70:	b480      	push	{r7}
 8008c72:	b085      	sub	sp, #20
 8008c74:	af00      	add	r7, sp, #0
 8008c76:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008c78:	4b0e      	ldr	r3, [pc, #56]	@ (8008cb4 <prvGetNextExpireTime+0x44>)
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d101      	bne.n	8008c86 <prvGetNextExpireTime+0x16>
 8008c82:	2201      	movs	r2, #1
 8008c84:	e000      	b.n	8008c88 <prvGetNextExpireTime+0x18>
 8008c86:	2200      	movs	r2, #0
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	d105      	bne.n	8008ca0 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008c94:	4b07      	ldr	r3, [pc, #28]	@ (8008cb4 <prvGetNextExpireTime+0x44>)
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	68db      	ldr	r3, [r3, #12]
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	60fb      	str	r3, [r7, #12]
 8008c9e:	e001      	b.n	8008ca4 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8008ca0:	2300      	movs	r3, #0
 8008ca2:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8008ca4:	68fb      	ldr	r3, [r7, #12]
    }
 8008ca6:	4618      	mov	r0, r3
 8008ca8:	3714      	adds	r7, #20
 8008caa:	46bd      	mov	sp, r7
 8008cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cb0:	4770      	bx	lr
 8008cb2:	bf00      	nop
 8008cb4:	20000478 	.word	0x20000478

08008cb8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8008cb8:	b580      	push	{r7, lr}
 8008cba:	b084      	sub	sp, #16
 8008cbc:	af00      	add	r7, sp, #0
 8008cbe:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8008cc0:	f7ff f8d8 	bl	8007e74 <xTaskGetTickCount>
 8008cc4:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8008cc6:	4b0b      	ldr	r3, [pc, #44]	@ (8008cf4 <prvSampleTimeNow+0x3c>)
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	68fa      	ldr	r2, [r7, #12]
 8008ccc:	429a      	cmp	r2, r3
 8008cce:	d205      	bcs.n	8008cdc <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8008cd0:	f000 f918 	bl	8008f04 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	2201      	movs	r2, #1
 8008cd8:	601a      	str	r2, [r3, #0]
 8008cda:	e002      	b.n	8008ce2 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	2200      	movs	r2, #0
 8008ce0:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8008ce2:	4a04      	ldr	r2, [pc, #16]	@ (8008cf4 <prvSampleTimeNow+0x3c>)
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8008ce8:	68fb      	ldr	r3, [r7, #12]
    }
 8008cea:	4618      	mov	r0, r3
 8008cec:	3710      	adds	r7, #16
 8008cee:	46bd      	mov	sp, r7
 8008cf0:	bd80      	pop	{r7, pc}
 8008cf2:	bf00      	nop
 8008cf4:	20000488 	.word	0x20000488

08008cf8 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8008cf8:	b580      	push	{r7, lr}
 8008cfa:	b086      	sub	sp, #24
 8008cfc:	af00      	add	r7, sp, #0
 8008cfe:	60f8      	str	r0, [r7, #12]
 8008d00:	60b9      	str	r1, [r7, #8]
 8008d02:	607a      	str	r2, [r7, #4]
 8008d04:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8008d06:	2300      	movs	r3, #0
 8008d08:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8008d0a:	68fb      	ldr	r3, [r7, #12]
 8008d0c:	68ba      	ldr	r2, [r7, #8]
 8008d0e:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	68fa      	ldr	r2, [r7, #12]
 8008d14:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8008d16:	68ba      	ldr	r2, [r7, #8]
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	429a      	cmp	r2, r3
 8008d1c:	d812      	bhi.n	8008d44 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008d1e:	687a      	ldr	r2, [r7, #4]
 8008d20:	683b      	ldr	r3, [r7, #0]
 8008d22:	1ad2      	subs	r2, r2, r3
 8008d24:	68fb      	ldr	r3, [r7, #12]
 8008d26:	699b      	ldr	r3, [r3, #24]
 8008d28:	429a      	cmp	r2, r3
 8008d2a:	d302      	bcc.n	8008d32 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8008d2c:	2301      	movs	r3, #1
 8008d2e:	617b      	str	r3, [r7, #20]
 8008d30:	e01b      	b.n	8008d6a <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8008d32:	4b10      	ldr	r3, [pc, #64]	@ (8008d74 <prvInsertTimerInActiveList+0x7c>)
 8008d34:	681a      	ldr	r2, [r3, #0]
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	3304      	adds	r3, #4
 8008d3a:	4619      	mov	r1, r3
 8008d3c:	4610      	mov	r0, r2
 8008d3e:	f7fd ff9a 	bl	8006c76 <vListInsert>
 8008d42:	e012      	b.n	8008d6a <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008d44:	687a      	ldr	r2, [r7, #4]
 8008d46:	683b      	ldr	r3, [r7, #0]
 8008d48:	429a      	cmp	r2, r3
 8008d4a:	d206      	bcs.n	8008d5a <prvInsertTimerInActiveList+0x62>
 8008d4c:	68ba      	ldr	r2, [r7, #8]
 8008d4e:	683b      	ldr	r3, [r7, #0]
 8008d50:	429a      	cmp	r2, r3
 8008d52:	d302      	bcc.n	8008d5a <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8008d54:	2301      	movs	r3, #1
 8008d56:	617b      	str	r3, [r7, #20]
 8008d58:	e007      	b.n	8008d6a <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008d5a:	4b07      	ldr	r3, [pc, #28]	@ (8008d78 <prvInsertTimerInActiveList+0x80>)
 8008d5c:	681a      	ldr	r2, [r3, #0]
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	3304      	adds	r3, #4
 8008d62:	4619      	mov	r1, r3
 8008d64:	4610      	mov	r0, r2
 8008d66:	f7fd ff86 	bl	8006c76 <vListInsert>
            }
        }

        return xProcessTimerNow;
 8008d6a:	697b      	ldr	r3, [r7, #20]
    }
 8008d6c:	4618      	mov	r0, r3
 8008d6e:	3718      	adds	r7, #24
 8008d70:	46bd      	mov	sp, r7
 8008d72:	bd80      	pop	{r7, pc}
 8008d74:	2000047c 	.word	0x2000047c
 8008d78:	20000478 	.word	0x20000478

08008d7c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8008d7c:	b580      	push	{r7, lr}
 8008d7e:	b088      	sub	sp, #32
 8008d80:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008d82:	e0ab      	b.n	8008edc <prvProcessReceivedCommands+0x160>
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008d84:	68bb      	ldr	r3, [r7, #8]
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	f2c0 80a8 	blt.w	8008edc <prvProcessReceivedCommands+0x160>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8008d8c:	693b      	ldr	r3, [r7, #16]
 8008d8e:	61fb      	str	r3, [r7, #28]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8008d90:	69fb      	ldr	r3, [r7, #28]
 8008d92:	695b      	ldr	r3, [r3, #20]
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d004      	beq.n	8008da2 <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008d98:	69fb      	ldr	r3, [r7, #28]
 8008d9a:	3304      	adds	r3, #4
 8008d9c:	4618      	mov	r0, r3
 8008d9e:	f7fd ffa3 	bl	8006ce8 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008da2:	1d3b      	adds	r3, r7, #4
 8008da4:	4618      	mov	r0, r3
 8008da6:	f7ff ff87 	bl	8008cb8 <prvSampleTimeNow>
 8008daa:	61b8      	str	r0, [r7, #24]

                switch( xMessage.xMessageID )
 8008dac:	68bb      	ldr	r3, [r7, #8]
 8008dae:	3b01      	subs	r3, #1
 8008db0:	2b08      	cmp	r3, #8
 8008db2:	f200 8090 	bhi.w	8008ed6 <prvProcessReceivedCommands+0x15a>
 8008db6:	a201      	add	r2, pc, #4	@ (adr r2, 8008dbc <prvProcessReceivedCommands+0x40>)
 8008db8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008dbc:	08008de1 	.word	0x08008de1
 8008dc0:	08008de1 	.word	0x08008de1
 8008dc4:	08008e49 	.word	0x08008e49
 8008dc8:	08008e5d 	.word	0x08008e5d
 8008dcc:	08008ead 	.word	0x08008ead
 8008dd0:	08008de1 	.word	0x08008de1
 8008dd4:	08008de1 	.word	0x08008de1
 8008dd8:	08008e49 	.word	0x08008e49
 8008ddc:	08008e5d 	.word	0x08008e5d
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008de0:	69fb      	ldr	r3, [r7, #28]
 8008de2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8008de6:	f043 0301 	orr.w	r3, r3, #1
 8008dea:	b2da      	uxtb	r2, r3
 8008dec:	69fb      	ldr	r3, [r7, #28]
 8008dee:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8008df2:	68fa      	ldr	r2, [r7, #12]
 8008df4:	69fb      	ldr	r3, [r7, #28]
 8008df6:	699b      	ldr	r3, [r3, #24]
 8008df8:	18d1      	adds	r1, r2, r3
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	69ba      	ldr	r2, [r7, #24]
 8008dfe:	69f8      	ldr	r0, [r7, #28]
 8008e00:	f7ff ff7a 	bl	8008cf8 <prvInsertTimerInActiveList>
 8008e04:	4603      	mov	r3, r0
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d067      	beq.n	8008eda <prvProcessReceivedCommands+0x15e>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008e0a:	69fb      	ldr	r3, [r7, #28]
 8008e0c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8008e10:	f003 0304 	and.w	r3, r3, #4
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d009      	beq.n	8008e2c <prvProcessReceivedCommands+0xb0>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 8008e18:	68fa      	ldr	r2, [r7, #12]
 8008e1a:	69fb      	ldr	r3, [r7, #28]
 8008e1c:	699b      	ldr	r3, [r3, #24]
 8008e1e:	4413      	add	r3, r2
 8008e20:	69ba      	ldr	r2, [r7, #24]
 8008e22:	4619      	mov	r1, r3
 8008e24:	69f8      	ldr	r0, [r7, #28]
 8008e26:	f7ff fe6f 	bl	8008b08 <prvReloadTimer>
 8008e2a:	e008      	b.n	8008e3e <prvProcessReceivedCommands+0xc2>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8008e2c:	69fb      	ldr	r3, [r7, #28]
 8008e2e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8008e32:	f023 0301 	bic.w	r3, r3, #1
 8008e36:	b2da      	uxtb	r2, r3
 8008e38:	69fb      	ldr	r3, [r7, #28]
 8008e3a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008e3e:	69fb      	ldr	r3, [r7, #28]
 8008e40:	6a1b      	ldr	r3, [r3, #32]
 8008e42:	69f8      	ldr	r0, [r7, #28]
 8008e44:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 8008e46:	e048      	b.n	8008eda <prvProcessReceivedCommands+0x15e>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8008e48:	69fb      	ldr	r3, [r7, #28]
 8008e4a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8008e4e:	f023 0301 	bic.w	r3, r3, #1
 8008e52:	b2da      	uxtb	r2, r3
 8008e54:	69fb      	ldr	r3, [r7, #28]
 8008e56:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
                        break;
 8008e5a:	e03f      	b.n	8008edc <prvProcessReceivedCommands+0x160>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008e5c:	69fb      	ldr	r3, [r7, #28]
 8008e5e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8008e62:	f043 0301 	orr.w	r3, r3, #1
 8008e66:	b2da      	uxtb	r2, r3
 8008e68:	69fb      	ldr	r3, [r7, #28]
 8008e6a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8008e6e:	68fa      	ldr	r2, [r7, #12]
 8008e70:	69fb      	ldr	r3, [r7, #28]
 8008e72:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8008e74:	69fb      	ldr	r3, [r7, #28]
 8008e76:	699b      	ldr	r3, [r3, #24]
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	d10d      	bne.n	8008e98 <prvProcessReceivedCommands+0x11c>
        __asm volatile
 8008e7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e80:	b672      	cpsid	i
 8008e82:	f383 8811 	msr	BASEPRI, r3
 8008e86:	f3bf 8f6f 	isb	sy
 8008e8a:	f3bf 8f4f 	dsb	sy
 8008e8e:	b662      	cpsie	i
 8008e90:	617b      	str	r3, [r7, #20]
    }
 8008e92:	bf00      	nop
 8008e94:	bf00      	nop
 8008e96:	e7fd      	b.n	8008e94 <prvProcessReceivedCommands+0x118>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8008e98:	69fb      	ldr	r3, [r7, #28]
 8008e9a:	699a      	ldr	r2, [r3, #24]
 8008e9c:	69bb      	ldr	r3, [r7, #24]
 8008e9e:	18d1      	adds	r1, r2, r3
 8008ea0:	69bb      	ldr	r3, [r7, #24]
 8008ea2:	69ba      	ldr	r2, [r7, #24]
 8008ea4:	69f8      	ldr	r0, [r7, #28]
 8008ea6:	f7ff ff27 	bl	8008cf8 <prvInsertTimerInActiveList>
                        break;
 8008eaa:	e017      	b.n	8008edc <prvProcessReceivedCommands+0x160>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8008eac:	69fb      	ldr	r3, [r7, #28]
 8008eae:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8008eb2:	f003 0302 	and.w	r3, r3, #2
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	d103      	bne.n	8008ec2 <prvProcessReceivedCommands+0x146>
                            {
                                vPortFree( pxTimer );
 8008eba:	69f8      	ldr	r0, [r7, #28]
 8008ebc:	f000 fb86 	bl	80095cc <vPortFree>
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8008ec0:	e00c      	b.n	8008edc <prvProcessReceivedCommands+0x160>
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8008ec2:	69fb      	ldr	r3, [r7, #28]
 8008ec4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8008ec8:	f023 0301 	bic.w	r3, r3, #1
 8008ecc:	b2da      	uxtb	r2, r3
 8008ece:	69fb      	ldr	r3, [r7, #28]
 8008ed0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
                        break;
 8008ed4:	e002      	b.n	8008edc <prvProcessReceivedCommands+0x160>

                    default:
                        /* Don't expect to get here. */
                        break;
 8008ed6:	bf00      	nop
 8008ed8:	e000      	b.n	8008edc <prvProcessReceivedCommands+0x160>
                        break;
 8008eda:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008edc:	4b08      	ldr	r3, [pc, #32]	@ (8008f00 <prvProcessReceivedCommands+0x184>)
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	f107 0108 	add.w	r1, r7, #8
 8008ee4:	2200      	movs	r2, #0
 8008ee6:	4618      	mov	r0, r3
 8008ee8:	f7fe f9f8 	bl	80072dc <xQueueReceive>
 8008eec:	4603      	mov	r3, r0
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	f47f af48 	bne.w	8008d84 <prvProcessReceivedCommands+0x8>
                }
            }
        }
    }
 8008ef4:	bf00      	nop
 8008ef6:	bf00      	nop
 8008ef8:	3720      	adds	r7, #32
 8008efa:	46bd      	mov	sp, r7
 8008efc:	bd80      	pop	{r7, pc}
 8008efe:	bf00      	nop
 8008f00:	20000480 	.word	0x20000480

08008f04 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8008f04:	b580      	push	{r7, lr}
 8008f06:	b082      	sub	sp, #8
 8008f08:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008f0a:	e009      	b.n	8008f20 <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008f0c:	4b0e      	ldr	r3, [pc, #56]	@ (8008f48 <prvSwitchTimerLists+0x44>)
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	68db      	ldr	r3, [r3, #12]
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 8008f16:	f04f 31ff 	mov.w	r1, #4294967295
 8008f1a:	6838      	ldr	r0, [r7, #0]
 8008f1c:	f7ff fe16 	bl	8008b4c <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008f20:	4b09      	ldr	r3, [pc, #36]	@ (8008f48 <prvSwitchTimerLists+0x44>)
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d1f0      	bne.n	8008f0c <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 8008f2a:	4b07      	ldr	r3, [pc, #28]	@ (8008f48 <prvSwitchTimerLists+0x44>)
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 8008f30:	4b06      	ldr	r3, [pc, #24]	@ (8008f4c <prvSwitchTimerLists+0x48>)
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	4a04      	ldr	r2, [pc, #16]	@ (8008f48 <prvSwitchTimerLists+0x44>)
 8008f36:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8008f38:	4a04      	ldr	r2, [pc, #16]	@ (8008f4c <prvSwitchTimerLists+0x48>)
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	6013      	str	r3, [r2, #0]
    }
 8008f3e:	bf00      	nop
 8008f40:	3708      	adds	r7, #8
 8008f42:	46bd      	mov	sp, r7
 8008f44:	bd80      	pop	{r7, pc}
 8008f46:	bf00      	nop
 8008f48:	20000478 	.word	0x20000478
 8008f4c:	2000047c 	.word	0x2000047c

08008f50 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8008f50:	b580      	push	{r7, lr}
 8008f52:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8008f54:	f000 f944 	bl	80091e0 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8008f58:	4b12      	ldr	r3, [pc, #72]	@ (8008fa4 <prvCheckForValidListAndQueue+0x54>)
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	d11d      	bne.n	8008f9c <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8008f60:	4811      	ldr	r0, [pc, #68]	@ (8008fa8 <prvCheckForValidListAndQueue+0x58>)
 8008f62:	f7fd fe5b 	bl	8006c1c <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8008f66:	4811      	ldr	r0, [pc, #68]	@ (8008fac <prvCheckForValidListAndQueue+0x5c>)
 8008f68:	f7fd fe58 	bl	8006c1c <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8008f6c:	4b10      	ldr	r3, [pc, #64]	@ (8008fb0 <prvCheckForValidListAndQueue+0x60>)
 8008f6e:	4a0e      	ldr	r2, [pc, #56]	@ (8008fa8 <prvCheckForValidListAndQueue+0x58>)
 8008f70:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8008f72:	4b10      	ldr	r3, [pc, #64]	@ (8008fb4 <prvCheckForValidListAndQueue+0x64>)
 8008f74:	4a0d      	ldr	r2, [pc, #52]	@ (8008fac <prvCheckForValidListAndQueue+0x5c>)
 8008f76:	601a      	str	r2, [r3, #0]

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                }
                #else
                {
                    xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8008f78:	2200      	movs	r2, #0
 8008f7a:	210c      	movs	r1, #12
 8008f7c:	200a      	movs	r0, #10
 8008f7e:	f7fd ff73 	bl	8006e68 <xQueueGenericCreate>
 8008f82:	4603      	mov	r3, r0
 8008f84:	4a07      	ldr	r2, [pc, #28]	@ (8008fa4 <prvCheckForValidListAndQueue+0x54>)
 8008f86:	6013      	str	r3, [r2, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 8008f88:	4b06      	ldr	r3, [pc, #24]	@ (8008fa4 <prvCheckForValidListAndQueue+0x54>)
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	d005      	beq.n	8008f9c <prvCheckForValidListAndQueue+0x4c>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008f90:	4b04      	ldr	r3, [pc, #16]	@ (8008fa4 <prvCheckForValidListAndQueue+0x54>)
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	4908      	ldr	r1, [pc, #32]	@ (8008fb8 <prvCheckForValidListAndQueue+0x68>)
 8008f96:	4618      	mov	r0, r3
 8008f98:	f7fe fb98 	bl	80076cc <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8008f9c:	f000 f956 	bl	800924c <vPortExitCritical>
    }
 8008fa0:	bf00      	nop
 8008fa2:	bd80      	pop	{r7, pc}
 8008fa4:	20000480 	.word	0x20000480
 8008fa8:	20000450 	.word	0x20000450
 8008fac:	20000464 	.word	0x20000464
 8008fb0:	20000478 	.word	0x20000478
 8008fb4:	2000047c 	.word	0x2000047c
 8008fb8:	08009918 	.word	0x08009918

08008fbc <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8008fbc:	b480      	push	{r7}
 8008fbe:	b085      	sub	sp, #20
 8008fc0:	af00      	add	r7, sp, #0
 8008fc2:	60f8      	str	r0, [r7, #12]
 8008fc4:	60b9      	str	r1, [r7, #8]
 8008fc6:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	3b04      	subs	r3, #4
 8008fcc:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8008fce:	68fb      	ldr	r3, [r7, #12]
 8008fd0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8008fd4:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	3b04      	subs	r3, #4
 8008fda:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8008fdc:	68bb      	ldr	r3, [r7, #8]
 8008fde:	f023 0201 	bic.w	r2, r3, #1
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8008fe6:	68fb      	ldr	r3, [r7, #12]
 8008fe8:	3b04      	subs	r3, #4
 8008fea:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8008fec:	4a0c      	ldr	r2, [pc, #48]	@ (8009020 <pxPortInitialiseStack+0x64>)
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	3b14      	subs	r3, #20
 8008ff6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8008ff8:	687a      	ldr	r2, [r7, #4]
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	3b04      	subs	r3, #4
 8009002:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8009004:	68fb      	ldr	r3, [r7, #12]
 8009006:	f06f 0202 	mvn.w	r2, #2
 800900a:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	3b20      	subs	r3, #32
 8009010:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8009012:	68fb      	ldr	r3, [r7, #12]
}
 8009014:	4618      	mov	r0, r3
 8009016:	3714      	adds	r7, #20
 8009018:	46bd      	mov	sp, r7
 800901a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800901e:	4770      	bx	lr
 8009020:	08009025 	.word	0x08009025

08009024 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009024:	b480      	push	{r7}
 8009026:	b085      	sub	sp, #20
 8009028:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 800902a:	2300      	movs	r3, #0
 800902c:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 800902e:	4b15      	ldr	r3, [pc, #84]	@ (8009084 <prvTaskExitError+0x60>)
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009036:	d00d      	beq.n	8009054 <prvTaskExitError+0x30>
        __asm volatile
 8009038:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800903c:	b672      	cpsid	i
 800903e:	f383 8811 	msr	BASEPRI, r3
 8009042:	f3bf 8f6f 	isb	sy
 8009046:	f3bf 8f4f 	dsb	sy
 800904a:	b662      	cpsie	i
 800904c:	60fb      	str	r3, [r7, #12]
    }
 800904e:	bf00      	nop
 8009050:	bf00      	nop
 8009052:	e7fd      	b.n	8009050 <prvTaskExitError+0x2c>
        __asm volatile
 8009054:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009058:	b672      	cpsid	i
 800905a:	f383 8811 	msr	BASEPRI, r3
 800905e:	f3bf 8f6f 	isb	sy
 8009062:	f3bf 8f4f 	dsb	sy
 8009066:	b662      	cpsie	i
 8009068:	60bb      	str	r3, [r7, #8]
    }
 800906a:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 800906c:	bf00      	nop
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	2b00      	cmp	r3, #0
 8009072:	d0fc      	beq.n	800906e <prvTaskExitError+0x4a>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8009074:	bf00      	nop
 8009076:	bf00      	nop
 8009078:	3714      	adds	r7, #20
 800907a:	46bd      	mov	sp, r7
 800907c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009080:	4770      	bx	lr
 8009082:	bf00      	nop
 8009084:	2000002c 	.word	0x2000002c
	...

08009090 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8009090:	4b07      	ldr	r3, [pc, #28]	@ (80090b0 <pxCurrentTCBConst2>)
 8009092:	6819      	ldr	r1, [r3, #0]
 8009094:	6808      	ldr	r0, [r1, #0]
 8009096:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800909a:	f380 8809 	msr	PSP, r0
 800909e:	f3bf 8f6f 	isb	sy
 80090a2:	f04f 0000 	mov.w	r0, #0
 80090a6:	f380 8811 	msr	BASEPRI, r0
 80090aa:	4770      	bx	lr
 80090ac:	f3af 8000 	nop.w

080090b0 <pxCurrentTCBConst2>:
 80090b0:	2000034c 	.word	0x2000034c
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 80090b4:	bf00      	nop
 80090b6:	bf00      	nop

080090b8 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 80090b8:	4808      	ldr	r0, [pc, #32]	@ (80090dc <prvPortStartFirstTask+0x24>)
 80090ba:	6800      	ldr	r0, [r0, #0]
 80090bc:	6800      	ldr	r0, [r0, #0]
 80090be:	f380 8808 	msr	MSP, r0
 80090c2:	f04f 0000 	mov.w	r0, #0
 80090c6:	f380 8814 	msr	CONTROL, r0
 80090ca:	b662      	cpsie	i
 80090cc:	b661      	cpsie	f
 80090ce:	f3bf 8f4f 	dsb	sy
 80090d2:	f3bf 8f6f 	isb	sy
 80090d6:	df00      	svc	0
 80090d8:	bf00      	nop
 80090da:	0000      	.short	0x0000
 80090dc:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 80090e0:	bf00      	nop
 80090e2:	bf00      	nop

080090e4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80090e4:	b580      	push	{r7, lr}
 80090e6:	b084      	sub	sp, #16
 80090e8:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint32_t ulOriginalPriority;
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80090ea:	4b37      	ldr	r3, [pc, #220]	@ (80091c8 <xPortStartScheduler+0xe4>)
 80090ec:	60fb      	str	r3, [r7, #12]
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ulOriginalPriority = *pucFirstUserPriorityRegister;
 80090ee:	68fb      	ldr	r3, [r7, #12]
 80090f0:	781b      	ldrb	r3, [r3, #0]
 80090f2:	b2db      	uxtb	r3, r3
 80090f4:	607b      	str	r3, [r7, #4]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	22ff      	movs	r2, #255	@ 0xff
 80090fa:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	781b      	ldrb	r3, [r3, #0]
 8009100:	b2db      	uxtb	r3, r3
 8009102:	70fb      	strb	r3, [r7, #3]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009104:	78fb      	ldrb	r3, [r7, #3]
 8009106:	b2db      	uxtb	r3, r3
 8009108:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800910c:	b2da      	uxtb	r2, r3
 800910e:	4b2f      	ldr	r3, [pc, #188]	@ (80091cc <xPortStartScheduler+0xe8>)
 8009110:	701a      	strb	r2, [r3, #0]

        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */
        ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009112:	4b2f      	ldr	r3, [pc, #188]	@ (80091d0 <xPortStartScheduler+0xec>)
 8009114:	2207      	movs	r2, #7
 8009116:	601a      	str	r2, [r3, #0]

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009118:	e009      	b.n	800912e <xPortStartScheduler+0x4a>
        {
            ulMaxPRIGROUPValue--;
 800911a:	4b2d      	ldr	r3, [pc, #180]	@ (80091d0 <xPortStartScheduler+0xec>)
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	3b01      	subs	r3, #1
 8009120:	4a2b      	ldr	r2, [pc, #172]	@ (80091d0 <xPortStartScheduler+0xec>)
 8009122:	6013      	str	r3, [r2, #0]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009124:	78fb      	ldrb	r3, [r7, #3]
 8009126:	b2db      	uxtb	r3, r3
 8009128:	005b      	lsls	r3, r3, #1
 800912a:	b2db      	uxtb	r3, r3
 800912c:	70fb      	strb	r3, [r7, #3]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800912e:	78fb      	ldrb	r3, [r7, #3]
 8009130:	b2db      	uxtb	r3, r3
 8009132:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009136:	2b80      	cmp	r3, #128	@ 0x80
 8009138:	d0ef      	beq.n	800911a <xPortStartScheduler+0x36>
        #ifdef configPRIO_BITS
        {
            /* Check the FreeRTOS configuration that defines the number of
             * priority bits matches the number of priority bits actually queried
             * from the hardware. */
            configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800913a:	4b25      	ldr	r3, [pc, #148]	@ (80091d0 <xPortStartScheduler+0xec>)
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	f1c3 0307 	rsb	r3, r3, #7
 8009142:	2b04      	cmp	r3, #4
 8009144:	d00d      	beq.n	8009162 <xPortStartScheduler+0x7e>
        __asm volatile
 8009146:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800914a:	b672      	cpsid	i
 800914c:	f383 8811 	msr	BASEPRI, r3
 8009150:	f3bf 8f6f 	isb	sy
 8009154:	f3bf 8f4f 	dsb	sy
 8009158:	b662      	cpsie	i
 800915a:	60bb      	str	r3, [r7, #8]
    }
 800915c:	bf00      	nop
 800915e:	bf00      	nop
 8009160:	e7fd      	b.n	800915e <xPortStartScheduler+0x7a>
        }
        #endif

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009162:	4b1b      	ldr	r3, [pc, #108]	@ (80091d0 <xPortStartScheduler+0xec>)
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	021b      	lsls	r3, r3, #8
 8009168:	4a19      	ldr	r2, [pc, #100]	@ (80091d0 <xPortStartScheduler+0xec>)
 800916a:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800916c:	4b18      	ldr	r3, [pc, #96]	@ (80091d0 <xPortStartScheduler+0xec>)
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8009174:	4a16      	ldr	r2, [pc, #88]	@ (80091d0 <xPortStartScheduler+0xec>)
 8009176:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ulOriginalPriority;
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	b2da      	uxtb	r2, r3
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8009180:	4b14      	ldr	r3, [pc, #80]	@ (80091d4 <xPortStartScheduler+0xf0>)
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	4a13      	ldr	r2, [pc, #76]	@ (80091d4 <xPortStartScheduler+0xf0>)
 8009186:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800918a:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 800918c:	4b11      	ldr	r3, [pc, #68]	@ (80091d4 <xPortStartScheduler+0xf0>)
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	4a10      	ldr	r2, [pc, #64]	@ (80091d4 <xPortStartScheduler+0xf0>)
 8009192:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8009196:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8009198:	f000 f8e2 	bl	8009360 <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 800919c:	4b0e      	ldr	r3, [pc, #56]	@ (80091d8 <xPortStartScheduler+0xf4>)
 800919e:	2200      	movs	r2, #0
 80091a0:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 80091a2:	f000 f901 	bl	80093a8 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80091a6:	4b0d      	ldr	r3, [pc, #52]	@ (80091dc <xPortStartScheduler+0xf8>)
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	4a0c      	ldr	r2, [pc, #48]	@ (80091dc <xPortStartScheduler+0xf8>)
 80091ac:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80091b0:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 80091b2:	f7ff ff81 	bl	80090b8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 80091b6:	f7fe ff93 	bl	80080e0 <vTaskSwitchContext>
    prvTaskExitError();
 80091ba:	f7ff ff33 	bl	8009024 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 80091be:	2300      	movs	r3, #0
}
 80091c0:	4618      	mov	r0, r3
 80091c2:	3710      	adds	r7, #16
 80091c4:	46bd      	mov	sp, r7
 80091c6:	bd80      	pop	{r7, pc}
 80091c8:	e000e400 	.word	0xe000e400
 80091cc:	2000048c 	.word	0x2000048c
 80091d0:	20000490 	.word	0x20000490
 80091d4:	e000ed20 	.word	0xe000ed20
 80091d8:	2000002c 	.word	0x2000002c
 80091dc:	e000ef34 	.word	0xe000ef34

080091e0 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80091e0:	b480      	push	{r7}
 80091e2:	b083      	sub	sp, #12
 80091e4:	af00      	add	r7, sp, #0
        __asm volatile
 80091e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80091ea:	b672      	cpsid	i
 80091ec:	f383 8811 	msr	BASEPRI, r3
 80091f0:	f3bf 8f6f 	isb	sy
 80091f4:	f3bf 8f4f 	dsb	sy
 80091f8:	b662      	cpsie	i
 80091fa:	607b      	str	r3, [r7, #4]
    }
 80091fc:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 80091fe:	4b11      	ldr	r3, [pc, #68]	@ (8009244 <vPortEnterCritical+0x64>)
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	3301      	adds	r3, #1
 8009204:	4a0f      	ldr	r2, [pc, #60]	@ (8009244 <vPortEnterCritical+0x64>)
 8009206:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8009208:	4b0e      	ldr	r3, [pc, #56]	@ (8009244 <vPortEnterCritical+0x64>)
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	2b01      	cmp	r3, #1
 800920e:	d112      	bne.n	8009236 <vPortEnterCritical+0x56>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009210:	4b0d      	ldr	r3, [pc, #52]	@ (8009248 <vPortEnterCritical+0x68>)
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	b2db      	uxtb	r3, r3
 8009216:	2b00      	cmp	r3, #0
 8009218:	d00d      	beq.n	8009236 <vPortEnterCritical+0x56>
        __asm volatile
 800921a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800921e:	b672      	cpsid	i
 8009220:	f383 8811 	msr	BASEPRI, r3
 8009224:	f3bf 8f6f 	isb	sy
 8009228:	f3bf 8f4f 	dsb	sy
 800922c:	b662      	cpsie	i
 800922e:	603b      	str	r3, [r7, #0]
    }
 8009230:	bf00      	nop
 8009232:	bf00      	nop
 8009234:	e7fd      	b.n	8009232 <vPortEnterCritical+0x52>
    }
}
 8009236:	bf00      	nop
 8009238:	370c      	adds	r7, #12
 800923a:	46bd      	mov	sp, r7
 800923c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009240:	4770      	bx	lr
 8009242:	bf00      	nop
 8009244:	2000002c 	.word	0x2000002c
 8009248:	e000ed04 	.word	0xe000ed04

0800924c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800924c:	b480      	push	{r7}
 800924e:	b083      	sub	sp, #12
 8009250:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8009252:	4b13      	ldr	r3, [pc, #76]	@ (80092a0 <vPortExitCritical+0x54>)
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	2b00      	cmp	r3, #0
 8009258:	d10d      	bne.n	8009276 <vPortExitCritical+0x2a>
        __asm volatile
 800925a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800925e:	b672      	cpsid	i
 8009260:	f383 8811 	msr	BASEPRI, r3
 8009264:	f3bf 8f6f 	isb	sy
 8009268:	f3bf 8f4f 	dsb	sy
 800926c:	b662      	cpsie	i
 800926e:	607b      	str	r3, [r7, #4]
    }
 8009270:	bf00      	nop
 8009272:	bf00      	nop
 8009274:	e7fd      	b.n	8009272 <vPortExitCritical+0x26>
    uxCriticalNesting--;
 8009276:	4b0a      	ldr	r3, [pc, #40]	@ (80092a0 <vPortExitCritical+0x54>)
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	3b01      	subs	r3, #1
 800927c:	4a08      	ldr	r2, [pc, #32]	@ (80092a0 <vPortExitCritical+0x54>)
 800927e:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8009280:	4b07      	ldr	r3, [pc, #28]	@ (80092a0 <vPortExitCritical+0x54>)
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	2b00      	cmp	r3, #0
 8009286:	d105      	bne.n	8009294 <vPortExitCritical+0x48>
 8009288:	2300      	movs	r3, #0
 800928a:	603b      	str	r3, [r7, #0]
        __asm volatile
 800928c:	683b      	ldr	r3, [r7, #0]
 800928e:	f383 8811 	msr	BASEPRI, r3
    }
 8009292:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8009294:	bf00      	nop
 8009296:	370c      	adds	r7, #12
 8009298:	46bd      	mov	sp, r7
 800929a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800929e:	4770      	bx	lr
 80092a0:	2000002c 	.word	0x2000002c
	...

080092b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 80092b0:	f3ef 8009 	mrs	r0, PSP
 80092b4:	f3bf 8f6f 	isb	sy
 80092b8:	4b15      	ldr	r3, [pc, #84]	@ (8009310 <pxCurrentTCBConst>)
 80092ba:	681a      	ldr	r2, [r3, #0]
 80092bc:	f01e 0f10 	tst.w	lr, #16
 80092c0:	bf08      	it	eq
 80092c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80092c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092ca:	6010      	str	r0, [r2, #0]
 80092cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80092d0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80092d4:	b672      	cpsid	i
 80092d6:	f380 8811 	msr	BASEPRI, r0
 80092da:	f3bf 8f4f 	dsb	sy
 80092de:	f3bf 8f6f 	isb	sy
 80092e2:	b662      	cpsie	i
 80092e4:	f7fe fefc 	bl	80080e0 <vTaskSwitchContext>
 80092e8:	f04f 0000 	mov.w	r0, #0
 80092ec:	f380 8811 	msr	BASEPRI, r0
 80092f0:	bc09      	pop	{r0, r3}
 80092f2:	6819      	ldr	r1, [r3, #0]
 80092f4:	6808      	ldr	r0, [r1, #0]
 80092f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092fa:	f01e 0f10 	tst.w	lr, #16
 80092fe:	bf08      	it	eq
 8009300:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009304:	f380 8809 	msr	PSP, r0
 8009308:	f3bf 8f6f 	isb	sy
 800930c:	4770      	bx	lr
 800930e:	bf00      	nop

08009310 <pxCurrentTCBConst>:
 8009310:	2000034c 	.word	0x2000034c
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8009314:	bf00      	nop
 8009316:	bf00      	nop

08009318 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009318:	b580      	push	{r7, lr}
 800931a:	b082      	sub	sp, #8
 800931c:	af00      	add	r7, sp, #0
        __asm volatile
 800931e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009322:	b672      	cpsid	i
 8009324:	f383 8811 	msr	BASEPRI, r3
 8009328:	f3bf 8f6f 	isb	sy
 800932c:	f3bf 8f4f 	dsb	sy
 8009330:	b662      	cpsie	i
 8009332:	607b      	str	r3, [r7, #4]
    }
 8009334:	bf00      	nop
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8009336:	f7fe fdb9 	bl	8007eac <xTaskIncrementTick>
 800933a:	4603      	mov	r3, r0
 800933c:	2b00      	cmp	r3, #0
 800933e:	d003      	beq.n	8009348 <SysTick_Handler+0x30>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8009340:	4b06      	ldr	r3, [pc, #24]	@ (800935c <SysTick_Handler+0x44>)
 8009342:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009346:	601a      	str	r2, [r3, #0]
 8009348:	2300      	movs	r3, #0
 800934a:	603b      	str	r3, [r7, #0]
        __asm volatile
 800934c:	683b      	ldr	r3, [r7, #0]
 800934e:	f383 8811 	msr	BASEPRI, r3
    }
 8009352:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 8009354:	bf00      	nop
 8009356:	3708      	adds	r7, #8
 8009358:	46bd      	mov	sp, r7
 800935a:	bd80      	pop	{r7, pc}
 800935c:	e000ed04 	.word	0xe000ed04

08009360 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8009360:	b480      	push	{r7}
 8009362:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009364:	4b0b      	ldr	r3, [pc, #44]	@ (8009394 <vPortSetupTimerInterrupt+0x34>)
 8009366:	2200      	movs	r2, #0
 8009368:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800936a:	4b0b      	ldr	r3, [pc, #44]	@ (8009398 <vPortSetupTimerInterrupt+0x38>)
 800936c:	2200      	movs	r2, #0
 800936e:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009370:	4b0a      	ldr	r3, [pc, #40]	@ (800939c <vPortSetupTimerInterrupt+0x3c>)
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	4a0a      	ldr	r2, [pc, #40]	@ (80093a0 <vPortSetupTimerInterrupt+0x40>)
 8009376:	fba2 2303 	umull	r2, r3, r2, r3
 800937a:	099b      	lsrs	r3, r3, #6
 800937c:	4a09      	ldr	r2, [pc, #36]	@ (80093a4 <vPortSetupTimerInterrupt+0x44>)
 800937e:	3b01      	subs	r3, #1
 8009380:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8009382:	4b04      	ldr	r3, [pc, #16]	@ (8009394 <vPortSetupTimerInterrupt+0x34>)
 8009384:	2207      	movs	r2, #7
 8009386:	601a      	str	r2, [r3, #0]
}
 8009388:	bf00      	nop
 800938a:	46bd      	mov	sp, r7
 800938c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009390:	4770      	bx	lr
 8009392:	bf00      	nop
 8009394:	e000e010 	.word	0xe000e010
 8009398:	e000e018 	.word	0xe000e018
 800939c:	2000001c 	.word	0x2000001c
 80093a0:	10624dd3 	.word	0x10624dd3
 80093a4:	e000e014 	.word	0xe000e014

080093a8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 80093a8:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80093b8 <vPortEnableVFP+0x10>
 80093ac:	6801      	ldr	r1, [r0, #0]
 80093ae:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80093b2:	6001      	str	r1, [r0, #0]
 80093b4:	4770      	bx	lr
 80093b6:	0000      	.short	0x0000
 80093b8:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 80093bc:	bf00      	nop
 80093be:	bf00      	nop

080093c0 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 80093c0:	b480      	push	{r7}
 80093c2:	b085      	sub	sp, #20
 80093c4:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 80093c6:	f3ef 8305 	mrs	r3, IPSR
 80093ca:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80093cc:	68fb      	ldr	r3, [r7, #12]
 80093ce:	2b0f      	cmp	r3, #15
 80093d0:	d917      	bls.n	8009402 <vPortValidateInterruptPriority+0x42>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80093d2:	4a1a      	ldr	r2, [pc, #104]	@ (800943c <vPortValidateInterruptPriority+0x7c>)
 80093d4:	68fb      	ldr	r3, [r7, #12]
 80093d6:	4413      	add	r3, r2
 80093d8:	781b      	ldrb	r3, [r3, #0]
 80093da:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80093dc:	4b18      	ldr	r3, [pc, #96]	@ (8009440 <vPortValidateInterruptPriority+0x80>)
 80093de:	781b      	ldrb	r3, [r3, #0]
 80093e0:	7afa      	ldrb	r2, [r7, #11]
 80093e2:	429a      	cmp	r2, r3
 80093e4:	d20d      	bcs.n	8009402 <vPortValidateInterruptPriority+0x42>
        __asm volatile
 80093e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80093ea:	b672      	cpsid	i
 80093ec:	f383 8811 	msr	BASEPRI, r3
 80093f0:	f3bf 8f6f 	isb	sy
 80093f4:	f3bf 8f4f 	dsb	sy
 80093f8:	b662      	cpsie	i
 80093fa:	607b      	str	r3, [r7, #4]
    }
 80093fc:	bf00      	nop
 80093fe:	bf00      	nop
 8009400:	e7fd      	b.n	80093fe <vPortValidateInterruptPriority+0x3e>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009402:	4b10      	ldr	r3, [pc, #64]	@ (8009444 <vPortValidateInterruptPriority+0x84>)
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800940a:	4b0f      	ldr	r3, [pc, #60]	@ (8009448 <vPortValidateInterruptPriority+0x88>)
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	429a      	cmp	r2, r3
 8009410:	d90d      	bls.n	800942e <vPortValidateInterruptPriority+0x6e>
        __asm volatile
 8009412:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009416:	b672      	cpsid	i
 8009418:	f383 8811 	msr	BASEPRI, r3
 800941c:	f3bf 8f6f 	isb	sy
 8009420:	f3bf 8f4f 	dsb	sy
 8009424:	b662      	cpsie	i
 8009426:	603b      	str	r3, [r7, #0]
    }
 8009428:	bf00      	nop
 800942a:	bf00      	nop
 800942c:	e7fd      	b.n	800942a <vPortValidateInterruptPriority+0x6a>
    }
 800942e:	bf00      	nop
 8009430:	3714      	adds	r7, #20
 8009432:	46bd      	mov	sp, r7
 8009434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009438:	4770      	bx	lr
 800943a:	bf00      	nop
 800943c:	e000e3f0 	.word	0xe000e3f0
 8009440:	2000048c 	.word	0x2000048c
 8009444:	e000ed0c 	.word	0xe000ed0c
 8009448:	20000490 	.word	0x20000490

0800944c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 800944c:	b580      	push	{r7, lr}
 800944e:	b08a      	sub	sp, #40	@ 0x28
 8009450:	af00      	add	r7, sp, #0
 8009452:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 8009454:	2300      	movs	r3, #0
 8009456:	61fb      	str	r3, [r7, #28]
    size_t xAdditionalRequiredSize;

    vTaskSuspendAll();
 8009458:	f7fe fc00 	bl	8007c5c <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 800945c:	4b56      	ldr	r3, [pc, #344]	@ (80095b8 <pvPortMalloc+0x16c>)
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	2b00      	cmp	r3, #0
 8009462:	d101      	bne.n	8009468 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8009464:	f000 f914 	bl	8009690 <prvHeapInit>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xWantedSize > 0 )
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	2b00      	cmp	r3, #0
 800946c:	d012      	beq.n	8009494 <pvPortMalloc+0x48>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. Some
             * additional increment may also be needed for alignment. */
            xAdditionalRequiredSize = xHeapStructSize + portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 800946e:	2208      	movs	r2, #8
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	f003 0307 	and.w	r3, r3, #7
 8009476:	1ad3      	subs	r3, r2, r3
 8009478:	3308      	adds	r3, #8
 800947a:	61bb      	str	r3, [r7, #24]

            if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 800947c:	69bb      	ldr	r3, [r7, #24]
 800947e:	43db      	mvns	r3, r3
 8009480:	687a      	ldr	r2, [r7, #4]
 8009482:	429a      	cmp	r2, r3
 8009484:	d804      	bhi.n	8009490 <pvPortMalloc+0x44>
            {
                xWantedSize += xAdditionalRequiredSize;
 8009486:	687a      	ldr	r2, [r7, #4]
 8009488:	69bb      	ldr	r3, [r7, #24]
 800948a:	4413      	add	r3, r2
 800948c:	607b      	str	r3, [r7, #4]
 800948e:	e001      	b.n	8009494 <pvPortMalloc+0x48>
            }
            else
            {
                xWantedSize = 0;
 8009490:	2300      	movs	r3, #0
 8009492:	607b      	str	r3, [r7, #4]

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	2b00      	cmp	r3, #0
 8009498:	db73      	blt.n	8009582 <pvPortMalloc+0x136>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	2b00      	cmp	r3, #0
 800949e:	d070      	beq.n	8009582 <pvPortMalloc+0x136>
 80094a0:	4b46      	ldr	r3, [pc, #280]	@ (80095bc <pvPortMalloc+0x170>)
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	687a      	ldr	r2, [r7, #4]
 80094a6:	429a      	cmp	r2, r3
 80094a8:	d86b      	bhi.n	8009582 <pvPortMalloc+0x136>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 80094aa:	4b45      	ldr	r3, [pc, #276]	@ (80095c0 <pvPortMalloc+0x174>)
 80094ac:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 80094ae:	4b44      	ldr	r3, [pc, #272]	@ (80095c0 <pvPortMalloc+0x174>)
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	627b      	str	r3, [r7, #36]	@ 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80094b4:	e004      	b.n	80094c0 <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
 80094b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094b8:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 80094ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	627b      	str	r3, [r7, #36]	@ 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80094c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094c2:	685b      	ldr	r3, [r3, #4]
 80094c4:	687a      	ldr	r2, [r7, #4]
 80094c6:	429a      	cmp	r2, r3
 80094c8:	d903      	bls.n	80094d2 <pvPortMalloc+0x86>
 80094ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	2b00      	cmp	r3, #0
 80094d0:	d1f1      	bne.n	80094b6 <pvPortMalloc+0x6a>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 80094d2:	4b39      	ldr	r3, [pc, #228]	@ (80095b8 <pvPortMalloc+0x16c>)
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80094d8:	429a      	cmp	r2, r3
 80094da:	d052      	beq.n	8009582 <pvPortMalloc+0x136>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80094dc:	6a3b      	ldr	r3, [r7, #32]
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	2208      	movs	r2, #8
 80094e2:	4413      	add	r3, r2
 80094e4:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80094e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094e8:	681a      	ldr	r2, [r3, #0]
 80094ea:	6a3b      	ldr	r3, [r7, #32]
 80094ec:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80094ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094f0:	685a      	ldr	r2, [r3, #4]
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	1ad2      	subs	r2, r2, r3
 80094f6:	2308      	movs	r3, #8
 80094f8:	005b      	lsls	r3, r3, #1
 80094fa:	429a      	cmp	r2, r3
 80094fc:	d922      	bls.n	8009544 <pvPortMalloc+0xf8>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80094fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	4413      	add	r3, r2
 8009504:	617b      	str	r3, [r7, #20]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009506:	697b      	ldr	r3, [r7, #20]
 8009508:	f003 0307 	and.w	r3, r3, #7
 800950c:	2b00      	cmp	r3, #0
 800950e:	d00d      	beq.n	800952c <pvPortMalloc+0xe0>
        __asm volatile
 8009510:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009514:	b672      	cpsid	i
 8009516:	f383 8811 	msr	BASEPRI, r3
 800951a:	f3bf 8f6f 	isb	sy
 800951e:	f3bf 8f4f 	dsb	sy
 8009522:	b662      	cpsie	i
 8009524:	613b      	str	r3, [r7, #16]
    }
 8009526:	bf00      	nop
 8009528:	bf00      	nop
 800952a:	e7fd      	b.n	8009528 <pvPortMalloc+0xdc>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800952c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800952e:	685a      	ldr	r2, [r3, #4]
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	1ad2      	subs	r2, r2, r3
 8009534:	697b      	ldr	r3, [r7, #20]
 8009536:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8009538:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800953a:	687a      	ldr	r2, [r7, #4]
 800953c:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 800953e:	6978      	ldr	r0, [r7, #20]
 8009540:	f000 f902 	bl	8009748 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009544:	4b1d      	ldr	r3, [pc, #116]	@ (80095bc <pvPortMalloc+0x170>)
 8009546:	681a      	ldr	r2, [r3, #0]
 8009548:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800954a:	685b      	ldr	r3, [r3, #4]
 800954c:	1ad3      	subs	r3, r2, r3
 800954e:	4a1b      	ldr	r2, [pc, #108]	@ (80095bc <pvPortMalloc+0x170>)
 8009550:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009552:	4b1a      	ldr	r3, [pc, #104]	@ (80095bc <pvPortMalloc+0x170>)
 8009554:	681a      	ldr	r2, [r3, #0]
 8009556:	4b1b      	ldr	r3, [pc, #108]	@ (80095c4 <pvPortMalloc+0x178>)
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	429a      	cmp	r2, r3
 800955c:	d203      	bcs.n	8009566 <pvPortMalloc+0x11a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800955e:	4b17      	ldr	r3, [pc, #92]	@ (80095bc <pvPortMalloc+0x170>)
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	4a18      	ldr	r2, [pc, #96]	@ (80095c4 <pvPortMalloc+0x178>)
 8009564:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 8009566:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009568:	685b      	ldr	r3, [r3, #4]
 800956a:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800956e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009570:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8009572:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009574:	2200      	movs	r2, #0
 8009576:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8009578:	4b13      	ldr	r3, [pc, #76]	@ (80095c8 <pvPortMalloc+0x17c>)
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	3301      	adds	r3, #1
 800957e:	4a12      	ldr	r2, [pc, #72]	@ (80095c8 <pvPortMalloc+0x17c>)
 8009580:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8009582:	f7fe fb79 	bl	8007c78 <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009586:	69fb      	ldr	r3, [r7, #28]
 8009588:	f003 0307 	and.w	r3, r3, #7
 800958c:	2b00      	cmp	r3, #0
 800958e:	d00d      	beq.n	80095ac <pvPortMalloc+0x160>
        __asm volatile
 8009590:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009594:	b672      	cpsid	i
 8009596:	f383 8811 	msr	BASEPRI, r3
 800959a:	f3bf 8f6f 	isb	sy
 800959e:	f3bf 8f4f 	dsb	sy
 80095a2:	b662      	cpsie	i
 80095a4:	60fb      	str	r3, [r7, #12]
    }
 80095a6:	bf00      	nop
 80095a8:	bf00      	nop
 80095aa:	e7fd      	b.n	80095a8 <pvPortMalloc+0x15c>
    return pvReturn;
 80095ac:	69fb      	ldr	r3, [r7, #28]
}
 80095ae:	4618      	mov	r0, r3
 80095b0:	3728      	adds	r7, #40	@ 0x28
 80095b2:	46bd      	mov	sp, r7
 80095b4:	bd80      	pop	{r7, pc}
 80095b6:	bf00      	nop
 80095b8:	2000409c 	.word	0x2000409c
 80095bc:	200040a0 	.word	0x200040a0
 80095c0:	20004094 	.word	0x20004094
 80095c4:	200040a4 	.word	0x200040a4
 80095c8:	200040a8 	.word	0x200040a8

080095cc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 80095cc:	b580      	push	{r7, lr}
 80095ce:	b086      	sub	sp, #24
 80095d0:	af00      	add	r7, sp, #0
 80095d2:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	2b00      	cmp	r3, #0
 80095dc:	d04f      	beq.n	800967e <vPortFree+0xb2>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 80095de:	2308      	movs	r3, #8
 80095e0:	425b      	negs	r3, r3
 80095e2:	697a      	ldr	r2, [r7, #20]
 80095e4:	4413      	add	r3, r2
 80095e6:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 80095e8:	697b      	ldr	r3, [r7, #20]
 80095ea:	613b      	str	r3, [r7, #16]

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 80095ec:	693b      	ldr	r3, [r7, #16]
 80095ee:	685b      	ldr	r3, [r3, #4]
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	db0d      	blt.n	8009610 <vPortFree+0x44>
        __asm volatile
 80095f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80095f8:	b672      	cpsid	i
 80095fa:	f383 8811 	msr	BASEPRI, r3
 80095fe:	f3bf 8f6f 	isb	sy
 8009602:	f3bf 8f4f 	dsb	sy
 8009606:	b662      	cpsie	i
 8009608:	60fb      	str	r3, [r7, #12]
    }
 800960a:	bf00      	nop
 800960c:	bf00      	nop
 800960e:	e7fd      	b.n	800960c <vPortFree+0x40>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009610:	693b      	ldr	r3, [r7, #16]
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	2b00      	cmp	r3, #0
 8009616:	d00d      	beq.n	8009634 <vPortFree+0x68>
        __asm volatile
 8009618:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800961c:	b672      	cpsid	i
 800961e:	f383 8811 	msr	BASEPRI, r3
 8009622:	f3bf 8f6f 	isb	sy
 8009626:	f3bf 8f4f 	dsb	sy
 800962a:	b662      	cpsie	i
 800962c:	60bb      	str	r3, [r7, #8]
    }
 800962e:	bf00      	nop
 8009630:	bf00      	nop
 8009632:	e7fd      	b.n	8009630 <vPortFree+0x64>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 8009634:	693b      	ldr	r3, [r7, #16]
 8009636:	685b      	ldr	r3, [r3, #4]
 8009638:	0fdb      	lsrs	r3, r3, #31
 800963a:	f003 0301 	and.w	r3, r3, #1
 800963e:	b2db      	uxtb	r3, r3
 8009640:	2b00      	cmp	r3, #0
 8009642:	d01c      	beq.n	800967e <vPortFree+0xb2>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8009644:	693b      	ldr	r3, [r7, #16]
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	2b00      	cmp	r3, #0
 800964a:	d118      	bne.n	800967e <vPortFree+0xb2>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 800964c:	693b      	ldr	r3, [r7, #16]
 800964e:	685b      	ldr	r3, [r3, #4]
 8009650:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8009654:	693b      	ldr	r3, [r7, #16]
 8009656:	605a      	str	r2, [r3, #4]
                {
                    ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                }
                #endif

                vTaskSuspendAll();
 8009658:	f7fe fb00 	bl	8007c5c <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 800965c:	693b      	ldr	r3, [r7, #16]
 800965e:	685a      	ldr	r2, [r3, #4]
 8009660:	4b09      	ldr	r3, [pc, #36]	@ (8009688 <vPortFree+0xbc>)
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	4413      	add	r3, r2
 8009666:	4a08      	ldr	r2, [pc, #32]	@ (8009688 <vPortFree+0xbc>)
 8009668:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800966a:	6938      	ldr	r0, [r7, #16]
 800966c:	f000 f86c 	bl	8009748 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8009670:	4b06      	ldr	r3, [pc, #24]	@ (800968c <vPortFree+0xc0>)
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	3301      	adds	r3, #1
 8009676:	4a05      	ldr	r2, [pc, #20]	@ (800968c <vPortFree+0xc0>)
 8009678:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 800967a:	f7fe fafd 	bl	8007c78 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 800967e:	bf00      	nop
 8009680:	3718      	adds	r7, #24
 8009682:	46bd      	mov	sp, r7
 8009684:	bd80      	pop	{r7, pc}
 8009686:	bf00      	nop
 8009688:	200040a0 	.word	0x200040a0
 800968c:	200040ac 	.word	0x200040ac

08009690 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8009690:	b480      	push	{r7}
 8009692:	b085      	sub	sp, #20
 8009694:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    portPOINTER_SIZE_TYPE uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009696:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800969a:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 800969c:	4b25      	ldr	r3, [pc, #148]	@ (8009734 <prvHeapInit+0xa4>)
 800969e:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80096a0:	68fb      	ldr	r3, [r7, #12]
 80096a2:	f003 0307 	and.w	r3, r3, #7
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	d00c      	beq.n	80096c4 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80096aa:	68fb      	ldr	r3, [r7, #12]
 80096ac:	3307      	adds	r3, #7
 80096ae:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 80096b0:	68fb      	ldr	r3, [r7, #12]
 80096b2:	f023 0307 	bic.w	r3, r3, #7
 80096b6:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( portPOINTER_SIZE_TYPE ) ucHeap;
 80096b8:	68ba      	ldr	r2, [r7, #8]
 80096ba:	68fb      	ldr	r3, [r7, #12]
 80096bc:	1ad3      	subs	r3, r2, r3
 80096be:	4a1d      	ldr	r2, [pc, #116]	@ (8009734 <prvHeapInit+0xa4>)
 80096c0:	4413      	add	r3, r2
 80096c2:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 80096c4:	68fb      	ldr	r3, [r7, #12]
 80096c6:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80096c8:	4a1b      	ldr	r2, [pc, #108]	@ (8009738 <prvHeapInit+0xa8>)
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 80096ce:	4b1a      	ldr	r3, [pc, #104]	@ (8009738 <prvHeapInit+0xa8>)
 80096d0:	2200      	movs	r2, #0
 80096d2:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( portPOINTER_SIZE_TYPE ) pucAlignedHeap ) + xTotalHeapSize;
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	68ba      	ldr	r2, [r7, #8]
 80096d8:	4413      	add	r3, r2
 80096da:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 80096dc:	2208      	movs	r2, #8
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	1a9b      	subs	r3, r3, r2
 80096e2:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 80096e4:	68fb      	ldr	r3, [r7, #12]
 80096e6:	f023 0307 	bic.w	r3, r3, #7
 80096ea:	60fb      	str	r3, [r7, #12]
    pxEnd = ( BlockLink_t * ) uxAddress;
 80096ec:	68fb      	ldr	r3, [r7, #12]
 80096ee:	4a13      	ldr	r2, [pc, #76]	@ (800973c <prvHeapInit+0xac>)
 80096f0:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 80096f2:	4b12      	ldr	r3, [pc, #72]	@ (800973c <prvHeapInit+0xac>)
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	2200      	movs	r2, #0
 80096f8:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 80096fa:	4b10      	ldr	r3, [pc, #64]	@ (800973c <prvHeapInit+0xac>)
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	2200      	movs	r2, #0
 8009700:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 8009706:	683b      	ldr	r3, [r7, #0]
 8009708:	68fa      	ldr	r2, [r7, #12]
 800970a:	1ad2      	subs	r2, r2, r3
 800970c:	683b      	ldr	r3, [r7, #0]
 800970e:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009710:	4b0a      	ldr	r3, [pc, #40]	@ (800973c <prvHeapInit+0xac>)
 8009712:	681a      	ldr	r2, [r3, #0]
 8009714:	683b      	ldr	r3, [r7, #0]
 8009716:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009718:	683b      	ldr	r3, [r7, #0]
 800971a:	685b      	ldr	r3, [r3, #4]
 800971c:	4a08      	ldr	r2, [pc, #32]	@ (8009740 <prvHeapInit+0xb0>)
 800971e:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009720:	683b      	ldr	r3, [r7, #0]
 8009722:	685b      	ldr	r3, [r3, #4]
 8009724:	4a07      	ldr	r2, [pc, #28]	@ (8009744 <prvHeapInit+0xb4>)
 8009726:	6013      	str	r3, [r2, #0]
}
 8009728:	bf00      	nop
 800972a:	3714      	adds	r7, #20
 800972c:	46bd      	mov	sp, r7
 800972e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009732:	4770      	bx	lr
 8009734:	20000494 	.word	0x20000494
 8009738:	20004094 	.word	0x20004094
 800973c:	2000409c 	.word	0x2000409c
 8009740:	200040a4 	.word	0x200040a4
 8009744:	200040a0 	.word	0x200040a0

08009748 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8009748:	b480      	push	{r7}
 800974a:	b085      	sub	sp, #20
 800974c:	af00      	add	r7, sp, #0
 800974e:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009750:	4b28      	ldr	r3, [pc, #160]	@ (80097f4 <prvInsertBlockIntoFreeList+0xac>)
 8009752:	60fb      	str	r3, [r7, #12]
 8009754:	e002      	b.n	800975c <prvInsertBlockIntoFreeList+0x14>
 8009756:	68fb      	ldr	r3, [r7, #12]
 8009758:	681b      	ldr	r3, [r3, #0]
 800975a:	60fb      	str	r3, [r7, #12]
 800975c:	68fb      	ldr	r3, [r7, #12]
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	687a      	ldr	r2, [r7, #4]
 8009762:	429a      	cmp	r2, r3
 8009764:	d8f7      	bhi.n	8009756 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8009766:	68fb      	ldr	r3, [r7, #12]
 8009768:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800976a:	68fb      	ldr	r3, [r7, #12]
 800976c:	685b      	ldr	r3, [r3, #4]
 800976e:	68ba      	ldr	r2, [r7, #8]
 8009770:	4413      	add	r3, r2
 8009772:	687a      	ldr	r2, [r7, #4]
 8009774:	429a      	cmp	r2, r3
 8009776:	d108      	bne.n	800978a <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009778:	68fb      	ldr	r3, [r7, #12]
 800977a:	685a      	ldr	r2, [r3, #4]
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	685b      	ldr	r3, [r3, #4]
 8009780:	441a      	add	r2, r3
 8009782:	68fb      	ldr	r3, [r7, #12]
 8009784:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8009786:	68fb      	ldr	r3, [r7, #12]
 8009788:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	685b      	ldr	r3, [r3, #4]
 8009792:	68ba      	ldr	r2, [r7, #8]
 8009794:	441a      	add	r2, r3
 8009796:	68fb      	ldr	r3, [r7, #12]
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	429a      	cmp	r2, r3
 800979c:	d118      	bne.n	80097d0 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 800979e:	68fb      	ldr	r3, [r7, #12]
 80097a0:	681a      	ldr	r2, [r3, #0]
 80097a2:	4b15      	ldr	r3, [pc, #84]	@ (80097f8 <prvInsertBlockIntoFreeList+0xb0>)
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	429a      	cmp	r2, r3
 80097a8:	d00d      	beq.n	80097c6 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	685a      	ldr	r2, [r3, #4]
 80097ae:	68fb      	ldr	r3, [r7, #12]
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	685b      	ldr	r3, [r3, #4]
 80097b4:	441a      	add	r2, r3
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80097ba:	68fb      	ldr	r3, [r7, #12]
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	681a      	ldr	r2, [r3, #0]
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	601a      	str	r2, [r3, #0]
 80097c4:	e008      	b.n	80097d8 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80097c6:	4b0c      	ldr	r3, [pc, #48]	@ (80097f8 <prvInsertBlockIntoFreeList+0xb0>)
 80097c8:	681a      	ldr	r2, [r3, #0]
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	601a      	str	r2, [r3, #0]
 80097ce:	e003      	b.n	80097d8 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	681a      	ldr	r2, [r3, #0]
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 80097d8:	68fa      	ldr	r2, [r7, #12]
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	429a      	cmp	r2, r3
 80097de:	d002      	beq.n	80097e6 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80097e0:	68fb      	ldr	r3, [r7, #12]
 80097e2:	687a      	ldr	r2, [r7, #4]
 80097e4:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80097e6:	bf00      	nop
 80097e8:	3714      	adds	r7, #20
 80097ea:	46bd      	mov	sp, r7
 80097ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097f0:	4770      	bx	lr
 80097f2:	bf00      	nop
 80097f4:	20004094 	.word	0x20004094
 80097f8:	2000409c 	.word	0x2000409c

080097fc <memset>:
 80097fc:	4402      	add	r2, r0
 80097fe:	4603      	mov	r3, r0
 8009800:	4293      	cmp	r3, r2
 8009802:	d100      	bne.n	8009806 <memset+0xa>
 8009804:	4770      	bx	lr
 8009806:	f803 1b01 	strb.w	r1, [r3], #1
 800980a:	e7f9      	b.n	8009800 <memset+0x4>

0800980c <__libc_init_array>:
 800980c:	b570      	push	{r4, r5, r6, lr}
 800980e:	4d0d      	ldr	r5, [pc, #52]	@ (8009844 <__libc_init_array+0x38>)
 8009810:	4c0d      	ldr	r4, [pc, #52]	@ (8009848 <__libc_init_array+0x3c>)
 8009812:	1b64      	subs	r4, r4, r5
 8009814:	10a4      	asrs	r4, r4, #2
 8009816:	2600      	movs	r6, #0
 8009818:	42a6      	cmp	r6, r4
 800981a:	d109      	bne.n	8009830 <__libc_init_array+0x24>
 800981c:	4d0b      	ldr	r5, [pc, #44]	@ (800984c <__libc_init_array+0x40>)
 800981e:	4c0c      	ldr	r4, [pc, #48]	@ (8009850 <__libc_init_array+0x44>)
 8009820:	f000 f826 	bl	8009870 <_init>
 8009824:	1b64      	subs	r4, r4, r5
 8009826:	10a4      	asrs	r4, r4, #2
 8009828:	2600      	movs	r6, #0
 800982a:	42a6      	cmp	r6, r4
 800982c:	d105      	bne.n	800983a <__libc_init_array+0x2e>
 800982e:	bd70      	pop	{r4, r5, r6, pc}
 8009830:	f855 3b04 	ldr.w	r3, [r5], #4
 8009834:	4798      	blx	r3
 8009836:	3601      	adds	r6, #1
 8009838:	e7ee      	b.n	8009818 <__libc_init_array+0xc>
 800983a:	f855 3b04 	ldr.w	r3, [r5], #4
 800983e:	4798      	blx	r3
 8009840:	3601      	adds	r6, #1
 8009842:	e7f2      	b.n	800982a <__libc_init_array+0x1e>
 8009844:	08009940 	.word	0x08009940
 8009848:	08009940 	.word	0x08009940
 800984c:	08009940 	.word	0x08009940
 8009850:	08009944 	.word	0x08009944

08009854 <memcpy>:
 8009854:	440a      	add	r2, r1
 8009856:	4291      	cmp	r1, r2
 8009858:	f100 33ff 	add.w	r3, r0, #4294967295
 800985c:	d100      	bne.n	8009860 <memcpy+0xc>
 800985e:	4770      	bx	lr
 8009860:	b510      	push	{r4, lr}
 8009862:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009866:	f803 4f01 	strb.w	r4, [r3, #1]!
 800986a:	4291      	cmp	r1, r2
 800986c:	d1f9      	bne.n	8009862 <memcpy+0xe>
 800986e:	bd10      	pop	{r4, pc}

08009870 <_init>:
 8009870:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009872:	bf00      	nop
 8009874:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009876:	bc08      	pop	{r3}
 8009878:	469e      	mov	lr, r3
 800987a:	4770      	bx	lr

0800987c <_fini>:
 800987c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800987e:	bf00      	nop
 8009880:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009882:	bc08      	pop	{r3}
 8009884:	469e      	mov	lr, r3
 8009886:	4770      	bx	lr
