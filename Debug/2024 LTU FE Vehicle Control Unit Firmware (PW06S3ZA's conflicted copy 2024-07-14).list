
2024 LTU FE Vehicle Control Unit Firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009208  08000200  08000200  00001200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b0  08009408  08009408  0000a408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080094b8  080094b8  0000b030  2**0
                  CONTENTS
  4 .ARM          00000008  080094b8  080094b8  0000a4b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080094c0  080094c0  0000b030  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080094c0  080094c0  0000a4c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080094c4  080094c4  0000a4c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000030  20000000  080094c8  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004070  20000030  080094f8  0000b030  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200040a0  080094f8  0000b0a0  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0000b030  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017ee6  00000000  00000000  0000b05e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000033ee  00000000  00000000  00022f44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001538  00000000  00000000  00026338  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001081  00000000  00000000  00027870  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a88a  00000000  00000000  000288f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019236  00000000  00000000  0005317b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00110417  00000000  00000000  0006c3b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0017c7c8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000059d8  00000000  00000000  0017c80c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000093  00000000  00000000  001821e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	@ (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	@ (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	@ (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000030 	.word	0x20000030
 800021c:	00000000 	.word	0x00000000
 8000220:	080093f0 	.word	0x080093f0

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	@ (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	@ (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	@ (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000034 	.word	0x20000034
 800023c:	080093f0 	.word	0x080093f0

08000240 <__aeabi_uldivmod>:
 8000240:	b953      	cbnz	r3, 8000258 <__aeabi_uldivmod+0x18>
 8000242:	b94a      	cbnz	r2, 8000258 <__aeabi_uldivmod+0x18>
 8000244:	2900      	cmp	r1, #0
 8000246:	bf08      	it	eq
 8000248:	2800      	cmpeq	r0, #0
 800024a:	bf1c      	itt	ne
 800024c:	f04f 31ff 	movne.w	r1, #4294967295
 8000250:	f04f 30ff 	movne.w	r0, #4294967295
 8000254:	f000 b96a 	b.w	800052c <__aeabi_idiv0>
 8000258:	f1ad 0c08 	sub.w	ip, sp, #8
 800025c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000260:	f000 f806 	bl	8000270 <__udivmoddi4>
 8000264:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000268:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800026c:	b004      	add	sp, #16
 800026e:	4770      	bx	lr

08000270 <__udivmoddi4>:
 8000270:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000274:	9d08      	ldr	r5, [sp, #32]
 8000276:	460c      	mov	r4, r1
 8000278:	2b00      	cmp	r3, #0
 800027a:	d14e      	bne.n	800031a <__udivmoddi4+0xaa>
 800027c:	4694      	mov	ip, r2
 800027e:	458c      	cmp	ip, r1
 8000280:	4686      	mov	lr, r0
 8000282:	fab2 f282 	clz	r2, r2
 8000286:	d962      	bls.n	800034e <__udivmoddi4+0xde>
 8000288:	b14a      	cbz	r2, 800029e <__udivmoddi4+0x2e>
 800028a:	f1c2 0320 	rsb	r3, r2, #32
 800028e:	4091      	lsls	r1, r2
 8000290:	fa20 f303 	lsr.w	r3, r0, r3
 8000294:	fa0c fc02 	lsl.w	ip, ip, r2
 8000298:	4319      	orrs	r1, r3
 800029a:	fa00 fe02 	lsl.w	lr, r0, r2
 800029e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002a2:	fa1f f68c 	uxth.w	r6, ip
 80002a6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002aa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ae:	fb07 1114 	mls	r1, r7, r4, r1
 80002b2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002b6:	fb04 f106 	mul.w	r1, r4, r6
 80002ba:	4299      	cmp	r1, r3
 80002bc:	d90a      	bls.n	80002d4 <__udivmoddi4+0x64>
 80002be:	eb1c 0303 	adds.w	r3, ip, r3
 80002c2:	f104 30ff 	add.w	r0, r4, #4294967295
 80002c6:	f080 8112 	bcs.w	80004ee <__udivmoddi4+0x27e>
 80002ca:	4299      	cmp	r1, r3
 80002cc:	f240 810f 	bls.w	80004ee <__udivmoddi4+0x27e>
 80002d0:	3c02      	subs	r4, #2
 80002d2:	4463      	add	r3, ip
 80002d4:	1a59      	subs	r1, r3, r1
 80002d6:	fa1f f38e 	uxth.w	r3, lr
 80002da:	fbb1 f0f7 	udiv	r0, r1, r7
 80002de:	fb07 1110 	mls	r1, r7, r0, r1
 80002e2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e6:	fb00 f606 	mul.w	r6, r0, r6
 80002ea:	429e      	cmp	r6, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x94>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f100 31ff 	add.w	r1, r0, #4294967295
 80002f6:	f080 80fc 	bcs.w	80004f2 <__udivmoddi4+0x282>
 80002fa:	429e      	cmp	r6, r3
 80002fc:	f240 80f9 	bls.w	80004f2 <__udivmoddi4+0x282>
 8000300:	4463      	add	r3, ip
 8000302:	3802      	subs	r0, #2
 8000304:	1b9b      	subs	r3, r3, r6
 8000306:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800030a:	2100      	movs	r1, #0
 800030c:	b11d      	cbz	r5, 8000316 <__udivmoddi4+0xa6>
 800030e:	40d3      	lsrs	r3, r2
 8000310:	2200      	movs	r2, #0
 8000312:	e9c5 3200 	strd	r3, r2, [r5]
 8000316:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800031a:	428b      	cmp	r3, r1
 800031c:	d905      	bls.n	800032a <__udivmoddi4+0xba>
 800031e:	b10d      	cbz	r5, 8000324 <__udivmoddi4+0xb4>
 8000320:	e9c5 0100 	strd	r0, r1, [r5]
 8000324:	2100      	movs	r1, #0
 8000326:	4608      	mov	r0, r1
 8000328:	e7f5      	b.n	8000316 <__udivmoddi4+0xa6>
 800032a:	fab3 f183 	clz	r1, r3
 800032e:	2900      	cmp	r1, #0
 8000330:	d146      	bne.n	80003c0 <__udivmoddi4+0x150>
 8000332:	42a3      	cmp	r3, r4
 8000334:	d302      	bcc.n	800033c <__udivmoddi4+0xcc>
 8000336:	4290      	cmp	r0, r2
 8000338:	f0c0 80f0 	bcc.w	800051c <__udivmoddi4+0x2ac>
 800033c:	1a86      	subs	r6, r0, r2
 800033e:	eb64 0303 	sbc.w	r3, r4, r3
 8000342:	2001      	movs	r0, #1
 8000344:	2d00      	cmp	r5, #0
 8000346:	d0e6      	beq.n	8000316 <__udivmoddi4+0xa6>
 8000348:	e9c5 6300 	strd	r6, r3, [r5]
 800034c:	e7e3      	b.n	8000316 <__udivmoddi4+0xa6>
 800034e:	2a00      	cmp	r2, #0
 8000350:	f040 8090 	bne.w	8000474 <__udivmoddi4+0x204>
 8000354:	eba1 040c 	sub.w	r4, r1, ip
 8000358:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800035c:	fa1f f78c 	uxth.w	r7, ip
 8000360:	2101      	movs	r1, #1
 8000362:	fbb4 f6f8 	udiv	r6, r4, r8
 8000366:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800036a:	fb08 4416 	mls	r4, r8, r6, r4
 800036e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000372:	fb07 f006 	mul.w	r0, r7, r6
 8000376:	4298      	cmp	r0, r3
 8000378:	d908      	bls.n	800038c <__udivmoddi4+0x11c>
 800037a:	eb1c 0303 	adds.w	r3, ip, r3
 800037e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000382:	d202      	bcs.n	800038a <__udivmoddi4+0x11a>
 8000384:	4298      	cmp	r0, r3
 8000386:	f200 80cd 	bhi.w	8000524 <__udivmoddi4+0x2b4>
 800038a:	4626      	mov	r6, r4
 800038c:	1a1c      	subs	r4, r3, r0
 800038e:	fa1f f38e 	uxth.w	r3, lr
 8000392:	fbb4 f0f8 	udiv	r0, r4, r8
 8000396:	fb08 4410 	mls	r4, r8, r0, r4
 800039a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800039e:	fb00 f707 	mul.w	r7, r0, r7
 80003a2:	429f      	cmp	r7, r3
 80003a4:	d908      	bls.n	80003b8 <__udivmoddi4+0x148>
 80003a6:	eb1c 0303 	adds.w	r3, ip, r3
 80003aa:	f100 34ff 	add.w	r4, r0, #4294967295
 80003ae:	d202      	bcs.n	80003b6 <__udivmoddi4+0x146>
 80003b0:	429f      	cmp	r7, r3
 80003b2:	f200 80b0 	bhi.w	8000516 <__udivmoddi4+0x2a6>
 80003b6:	4620      	mov	r0, r4
 80003b8:	1bdb      	subs	r3, r3, r7
 80003ba:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003be:	e7a5      	b.n	800030c <__udivmoddi4+0x9c>
 80003c0:	f1c1 0620 	rsb	r6, r1, #32
 80003c4:	408b      	lsls	r3, r1
 80003c6:	fa22 f706 	lsr.w	r7, r2, r6
 80003ca:	431f      	orrs	r7, r3
 80003cc:	fa20 fc06 	lsr.w	ip, r0, r6
 80003d0:	fa04 f301 	lsl.w	r3, r4, r1
 80003d4:	ea43 030c 	orr.w	r3, r3, ip
 80003d8:	40f4      	lsrs	r4, r6
 80003da:	fa00 f801 	lsl.w	r8, r0, r1
 80003de:	0c38      	lsrs	r0, r7, #16
 80003e0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003e4:	fbb4 fef0 	udiv	lr, r4, r0
 80003e8:	fa1f fc87 	uxth.w	ip, r7
 80003ec:	fb00 441e 	mls	r4, r0, lr, r4
 80003f0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003f4:	fb0e f90c 	mul.w	r9, lr, ip
 80003f8:	45a1      	cmp	r9, r4
 80003fa:	fa02 f201 	lsl.w	r2, r2, r1
 80003fe:	d90a      	bls.n	8000416 <__udivmoddi4+0x1a6>
 8000400:	193c      	adds	r4, r7, r4
 8000402:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000406:	f080 8084 	bcs.w	8000512 <__udivmoddi4+0x2a2>
 800040a:	45a1      	cmp	r9, r4
 800040c:	f240 8081 	bls.w	8000512 <__udivmoddi4+0x2a2>
 8000410:	f1ae 0e02 	sub.w	lr, lr, #2
 8000414:	443c      	add	r4, r7
 8000416:	eba4 0409 	sub.w	r4, r4, r9
 800041a:	fa1f f983 	uxth.w	r9, r3
 800041e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000422:	fb00 4413 	mls	r4, r0, r3, r4
 8000426:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800042a:	fb03 fc0c 	mul.w	ip, r3, ip
 800042e:	45a4      	cmp	ip, r4
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x1d2>
 8000432:	193c      	adds	r4, r7, r4
 8000434:	f103 30ff 	add.w	r0, r3, #4294967295
 8000438:	d267      	bcs.n	800050a <__udivmoddi4+0x29a>
 800043a:	45a4      	cmp	ip, r4
 800043c:	d965      	bls.n	800050a <__udivmoddi4+0x29a>
 800043e:	3b02      	subs	r3, #2
 8000440:	443c      	add	r4, r7
 8000442:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000446:	fba0 9302 	umull	r9, r3, r0, r2
 800044a:	eba4 040c 	sub.w	r4, r4, ip
 800044e:	429c      	cmp	r4, r3
 8000450:	46ce      	mov	lr, r9
 8000452:	469c      	mov	ip, r3
 8000454:	d351      	bcc.n	80004fa <__udivmoddi4+0x28a>
 8000456:	d04e      	beq.n	80004f6 <__udivmoddi4+0x286>
 8000458:	b155      	cbz	r5, 8000470 <__udivmoddi4+0x200>
 800045a:	ebb8 030e 	subs.w	r3, r8, lr
 800045e:	eb64 040c 	sbc.w	r4, r4, ip
 8000462:	fa04 f606 	lsl.w	r6, r4, r6
 8000466:	40cb      	lsrs	r3, r1
 8000468:	431e      	orrs	r6, r3
 800046a:	40cc      	lsrs	r4, r1
 800046c:	e9c5 6400 	strd	r6, r4, [r5]
 8000470:	2100      	movs	r1, #0
 8000472:	e750      	b.n	8000316 <__udivmoddi4+0xa6>
 8000474:	f1c2 0320 	rsb	r3, r2, #32
 8000478:	fa20 f103 	lsr.w	r1, r0, r3
 800047c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000480:	fa24 f303 	lsr.w	r3, r4, r3
 8000484:	4094      	lsls	r4, r2
 8000486:	430c      	orrs	r4, r1
 8000488:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800048c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000490:	fa1f f78c 	uxth.w	r7, ip
 8000494:	fbb3 f0f8 	udiv	r0, r3, r8
 8000498:	fb08 3110 	mls	r1, r8, r0, r3
 800049c:	0c23      	lsrs	r3, r4, #16
 800049e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004a2:	fb00 f107 	mul.w	r1, r0, r7
 80004a6:	4299      	cmp	r1, r3
 80004a8:	d908      	bls.n	80004bc <__udivmoddi4+0x24c>
 80004aa:	eb1c 0303 	adds.w	r3, ip, r3
 80004ae:	f100 36ff 	add.w	r6, r0, #4294967295
 80004b2:	d22c      	bcs.n	800050e <__udivmoddi4+0x29e>
 80004b4:	4299      	cmp	r1, r3
 80004b6:	d92a      	bls.n	800050e <__udivmoddi4+0x29e>
 80004b8:	3802      	subs	r0, #2
 80004ba:	4463      	add	r3, ip
 80004bc:	1a5b      	subs	r3, r3, r1
 80004be:	b2a4      	uxth	r4, r4
 80004c0:	fbb3 f1f8 	udiv	r1, r3, r8
 80004c4:	fb08 3311 	mls	r3, r8, r1, r3
 80004c8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004cc:	fb01 f307 	mul.w	r3, r1, r7
 80004d0:	42a3      	cmp	r3, r4
 80004d2:	d908      	bls.n	80004e6 <__udivmoddi4+0x276>
 80004d4:	eb1c 0404 	adds.w	r4, ip, r4
 80004d8:	f101 36ff 	add.w	r6, r1, #4294967295
 80004dc:	d213      	bcs.n	8000506 <__udivmoddi4+0x296>
 80004de:	42a3      	cmp	r3, r4
 80004e0:	d911      	bls.n	8000506 <__udivmoddi4+0x296>
 80004e2:	3902      	subs	r1, #2
 80004e4:	4464      	add	r4, ip
 80004e6:	1ae4      	subs	r4, r4, r3
 80004e8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004ec:	e739      	b.n	8000362 <__udivmoddi4+0xf2>
 80004ee:	4604      	mov	r4, r0
 80004f0:	e6f0      	b.n	80002d4 <__udivmoddi4+0x64>
 80004f2:	4608      	mov	r0, r1
 80004f4:	e706      	b.n	8000304 <__udivmoddi4+0x94>
 80004f6:	45c8      	cmp	r8, r9
 80004f8:	d2ae      	bcs.n	8000458 <__udivmoddi4+0x1e8>
 80004fa:	ebb9 0e02 	subs.w	lr, r9, r2
 80004fe:	eb63 0c07 	sbc.w	ip, r3, r7
 8000502:	3801      	subs	r0, #1
 8000504:	e7a8      	b.n	8000458 <__udivmoddi4+0x1e8>
 8000506:	4631      	mov	r1, r6
 8000508:	e7ed      	b.n	80004e6 <__udivmoddi4+0x276>
 800050a:	4603      	mov	r3, r0
 800050c:	e799      	b.n	8000442 <__udivmoddi4+0x1d2>
 800050e:	4630      	mov	r0, r6
 8000510:	e7d4      	b.n	80004bc <__udivmoddi4+0x24c>
 8000512:	46d6      	mov	lr, sl
 8000514:	e77f      	b.n	8000416 <__udivmoddi4+0x1a6>
 8000516:	4463      	add	r3, ip
 8000518:	3802      	subs	r0, #2
 800051a:	e74d      	b.n	80003b8 <__udivmoddi4+0x148>
 800051c:	4606      	mov	r6, r0
 800051e:	4623      	mov	r3, r4
 8000520:	4608      	mov	r0, r1
 8000522:	e70f      	b.n	8000344 <__udivmoddi4+0xd4>
 8000524:	3e02      	subs	r6, #2
 8000526:	4463      	add	r3, ip
 8000528:	e730      	b.n	800038c <__udivmoddi4+0x11c>
 800052a:	bf00      	nop

0800052c <__aeabi_idiv0>:
 800052c:	4770      	bx	lr
 800052e:	bf00      	nop

08000530 <initializeCAN>:
 */

#include "CAN.h"

void initializeCAN(CAN_HandleTypeDef* hcan)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	b082      	sub	sp, #8
 8000534:	af00      	add	r7, sp, #0
 8000536:	6078      	str	r0, [r7, #4]
	if (HAL_CAN_Start(hcan) != HAL_OK)
 8000538:	6878      	ldr	r0, [r7, #4]
 800053a:	f003 f805 	bl	8003548 <HAL_CAN_Start>
 800053e:	4603      	mov	r3, r0
 8000540:	2b00      	cmp	r3, #0
 8000542:	d001      	beq.n	8000548 <initializeCAN+0x18>
	{
		Error_Handler();
 8000544:	f001 fd2a 	bl	8001f9c <Error_Handler>
	}

	configAMSCANFilter(hcan);
 8000548:	6878      	ldr	r0, [r7, #4]
 800054a:	f000 f98d 	bl	8000868 <configAMSCANFilter>

	configIMDCANFilter(hcan);
 800054e:	6878      	ldr	r0, [r7, #4]
 8000550:	f000 f9b3 	bl	80008ba <configIMDCANFilter>

	configInverterRPMCANFilter(hcan);
 8000554:	6878      	ldr	r0, [r7, #4]
 8000556:	f000 f9d7 	bl	8000908 <configInverterRPMCANFilter>

	configInverterTempCANFilter(hcan);
 800055a:	6878      	ldr	r0, [r7, #4]
 800055c:	f000 f9fd 	bl	800095a <configInverterTempCANFilter>

	if (HAL_CAN_ActivateNotification(hcan, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK)
 8000560:	2102      	movs	r1, #2
 8000562:	6878      	ldr	r0, [r7, #4]
 8000564:	f003 fa3a 	bl	80039dc <HAL_CAN_ActivateNotification>
 8000568:	4603      	mov	r3, r0
 800056a:	2b00      	cmp	r3, #0
 800056c:	d001      	beq.n	8000572 <initializeCAN+0x42>
	{
		Error_Handler();
 800056e:	f001 fd15 	bl	8001f9c <Error_Handler>
	}

	if (HAL_CAN_ActivateNotification(hcan, CAN_IT_RX_FIFO1_MSG_PENDING) != HAL_OK)
 8000572:	2110      	movs	r1, #16
 8000574:	6878      	ldr	r0, [r7, #4]
 8000576:	f003 fa31 	bl	80039dc <HAL_CAN_ActivateNotification>
 800057a:	4603      	mov	r3, r0
 800057c:	2b00      	cmp	r3, #0
 800057e:	d001      	beq.n	8000584 <initializeCAN+0x54>
	{
		Error_Handler();
 8000580:	f001 fd0c 	bl	8001f9c <Error_Handler>
	}
}
 8000584:	bf00      	nop
 8000586:	3708      	adds	r7, #8
 8000588:	46bd      	mov	sp, r7
 800058a:	bd80      	pop	{r7, pc}

0800058c <sendSync>:

void sendSync(CAN_HandleTypeDef* hcan)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	b08c      	sub	sp, #48	@ 0x30
 8000590:	af00      	add	r7, sp, #0
 8000592:	6078      	str	r0, [r7, #4]
	CAN_TxHeaderTypeDef txHeader;
	uint8_t data[1] = { (0x00U) };
 8000594:	2300      	movs	r3, #0
 8000596:	753b      	strb	r3, [r7, #20]
	uint32_t mailbox;
	ECU_SYNC_t sync;
	uint8_t len, ide;


	txHeader.DLC = ECU_SYNC_DLC;
 8000598:	2301      	movs	r3, #1
 800059a:	62bb      	str	r3, [r7, #40]	@ 0x28
	txHeader.ExtId = DISABLE;
 800059c:	2300      	movs	r3, #0
 800059e:	61fb      	str	r3, [r7, #28]
	txHeader.IDE = ECU_SYNC_IDE;
 80005a0:	2300      	movs	r3, #0
 80005a2:	623b      	str	r3, [r7, #32]
	txHeader.RTR = CAN_RTR_DATA;
 80005a4:	2300      	movs	r3, #0
 80005a6:	627b      	str	r3, [r7, #36]	@ 0x24
	txHeader.StdId = ECU_SYNC_CANID;
 80005a8:	2380      	movs	r3, #128	@ 0x80
 80005aa:	61bb      	str	r3, [r7, #24]
	txHeader.TransmitGlobalTime = DISABLE;
 80005ac:	2300      	movs	r3, #0
 80005ae:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c

	sync.ECU_SYNCH_Counter = (0x00U);
 80005b2:	2300      	movs	r3, #0
 80005b4:	733b      	strb	r3, [r7, #12]

	Pack_ECU_SYNC__DO_QUASAR_CANopen(&sync, data, &len, &ide);
 80005b6:	f107 030a 	add.w	r3, r7, #10
 80005ba:	f107 020b 	add.w	r2, r7, #11
 80005be:	f107 0114 	add.w	r1, r7, #20
 80005c2:	f107 000c 	add.w	r0, r7, #12
 80005c6:	f000 fa25 	bl	8000a14 <Pack_ECU_SYNC__DO_QUASAR_CANopen>

	if (HAL_CAN_AddTxMessage(hcan, &txHeader, data, &mailbox) != HAL_OK)
 80005ca:	f107 0310 	add.w	r3, r7, #16
 80005ce:	f107 0214 	add.w	r2, r7, #20
 80005d2:	f107 0118 	add.w	r1, r7, #24
 80005d6:	6878      	ldr	r0, [r7, #4]
 80005d8:	f002 fffa 	bl	80035d0 <HAL_CAN_AddTxMessage>
 80005dc:	4603      	mov	r3, r0
 80005de:	2b00      	cmp	r3, #0
 80005e0:	d001      	beq.n	80005e6 <sendSync+0x5a>
	{
		Error_Handler();
 80005e2:	f001 fcdb 	bl	8001f9c <Error_Handler>
	}

	while (HAL_CAN_IsTxMessagePending(hcan, mailbox));
 80005e6:	bf00      	nop
 80005e8:	693b      	ldr	r3, [r7, #16]
 80005ea:	4619      	mov	r1, r3
 80005ec:	6878      	ldr	r0, [r7, #4]
 80005ee:	f003 f8bf 	bl	8003770 <HAL_CAN_IsTxMessagePending>
 80005f2:	4603      	mov	r3, r0
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d1f7      	bne.n	80005e8 <sendSync+0x5c>
}
 80005f8:	bf00      	nop
 80005fa:	bf00      	nop
 80005fc:	3730      	adds	r7, #48	@ 0x30
 80005fe:	46bd      	mov	sp, r7
 8000600:	bd80      	pop	{r7, pc}

08000602 <nodeGuarding>:

void nodeGuarding(CAN_HandleTypeDef* hcan)
{
 8000602:	b580      	push	{r7, lr}
 8000604:	b08a      	sub	sp, #40	@ 0x28
 8000606:	af00      	add	r7, sp, #0
 8000608:	6078      	str	r0, [r7, #4]
	CAN_TxHeaderTypeDef txHeader;
	uint8_t data[1] = { (0x00U) };
 800060a:	2300      	movs	r3, #0
 800060c:	733b      	strb	r3, [r7, #12]
	uint32_t mailbox;

	txHeader.DLC = ECU_EMD_NMT_node_guarding_DLC;
 800060e:	2301      	movs	r3, #1
 8000610:	623b      	str	r3, [r7, #32]
	txHeader.ExtId = DISABLE;
 8000612:	2300      	movs	r3, #0
 8000614:	617b      	str	r3, [r7, #20]
	txHeader.IDE = CAN_ID_STD;
 8000616:	2300      	movs	r3, #0
 8000618:	61bb      	str	r3, [r7, #24]
	txHeader.RTR = CAN_RTR_REMOTE;
 800061a:	2302      	movs	r3, #2
 800061c:	61fb      	str	r3, [r7, #28]
	txHeader.StdId = ECU_EMD_NMT_node_guarding_CANID;
 800061e:	f240 737a 	movw	r3, #1914	@ 0x77a
 8000622:	613b      	str	r3, [r7, #16]
	txHeader.TransmitGlobalTime = DISABLE;
 8000624:	2300      	movs	r3, #0
 8000626:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24

	if (HAL_CAN_AddTxMessage(hcan, &txHeader, data, &mailbox) != HAL_OK)
 800062a:	f107 0308 	add.w	r3, r7, #8
 800062e:	f107 020c 	add.w	r2, r7, #12
 8000632:	f107 0110 	add.w	r1, r7, #16
 8000636:	6878      	ldr	r0, [r7, #4]
 8000638:	f002 ffca 	bl	80035d0 <HAL_CAN_AddTxMessage>
 800063c:	4603      	mov	r3, r0
 800063e:	2b00      	cmp	r3, #0
 8000640:	d001      	beq.n	8000646 <nodeGuarding+0x44>
	{
		Error_Handler();
 8000642:	f001 fcab 	bl	8001f9c <Error_Handler>
	}

	while (HAL_CAN_IsTxMessagePending(hcan, mailbox));
 8000646:	bf00      	nop
 8000648:	68bb      	ldr	r3, [r7, #8]
 800064a:	4619      	mov	r1, r3
 800064c:	6878      	ldr	r0, [r7, #4]
 800064e:	f003 f88f 	bl	8003770 <HAL_CAN_IsTxMessagePending>
 8000652:	4603      	mov	r3, r0
 8000654:	2b00      	cmp	r3, #0
 8000656:	d1f7      	bne.n	8000648 <nodeGuarding+0x46>

	return;
 8000658:	bf00      	nop
}
 800065a:	3728      	adds	r7, #40	@ 0x28
 800065c:	46bd      	mov	sp, r7
 800065e:	bd80      	pop	{r7, pc}

08000660 <startNode>:

void startNode(CAN_HandleTypeDef* hcan)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b08e      	sub	sp, #56	@ 0x38
 8000664:	af00      	add	r7, sp, #0
 8000666:	6078      	str	r0, [r7, #4]
	CAN_TxHeaderTypeDef txHeader;
	uint8_t data[8] = { (0x00U), (0x00U), (0x00U), (0x00U), (0x00U), (0x00U), (0x00U), (0x00U) };
 8000668:	4a1e      	ldr	r2, [pc, #120]	@ (80006e4 <startNode+0x84>)
 800066a:	f107 0318 	add.w	r3, r7, #24
 800066e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000672:	e883 0003 	stmia.w	r3, {r0, r1}
	uint32_t mailbox;
	ECU_NMT_command_t nmt_t;
	uint8_t len, ide;

	nmt_t.ECU_NMT_CommandSpecifier = (0x01U);
 8000676:	2301      	movs	r3, #1
 8000678:	743b      	strb	r3, [r7, #16]
	nmt_t.ECU_NMT_NodeId = (0x7AU);
 800067a:	237a      	movs	r3, #122	@ 0x7a
 800067c:	747b      	strb	r3, [r7, #17]

	Pack_ECU_NMT_command__DO_QUASAR_CANopen(&nmt_t, data, &len, &ide);
 800067e:	f107 030e 	add.w	r3, r7, #14
 8000682:	f107 020f 	add.w	r2, r7, #15
 8000686:	f107 0118 	add.w	r1, r7, #24
 800068a:	f107 0010 	add.w	r0, r7, #16
 800068e:	f000 f98d 	bl	80009ac <Pack_ECU_NMT_command__DO_QUASAR_CANopen>

	txHeader.DLC = ECU_NMT_command_DLC;
 8000692:	2302      	movs	r3, #2
 8000694:	633b      	str	r3, [r7, #48]	@ 0x30
	txHeader.ExtId = DISABLE;
 8000696:	2300      	movs	r3, #0
 8000698:	627b      	str	r3, [r7, #36]	@ 0x24
	txHeader.IDE = ide;
 800069a:	7bbb      	ldrb	r3, [r7, #14]
 800069c:	62bb      	str	r3, [r7, #40]	@ 0x28
	txHeader.RTR = CAN_RTR_DATA;
 800069e:	2300      	movs	r3, #0
 80006a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
	txHeader.StdId = ECU_NMT_command_CANID;
 80006a2:	2300      	movs	r3, #0
 80006a4:	623b      	str	r3, [r7, #32]
	txHeader.TransmitGlobalTime = DISABLE;
 80006a6:	2300      	movs	r3, #0
 80006a8:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34

	if (HAL_CAN_AddTxMessage(hcan, &txHeader, data, &mailbox) != HAL_OK)
 80006ac:	f107 0314 	add.w	r3, r7, #20
 80006b0:	f107 0218 	add.w	r2, r7, #24
 80006b4:	f107 0120 	add.w	r1, r7, #32
 80006b8:	6878      	ldr	r0, [r7, #4]
 80006ba:	f002 ff89 	bl	80035d0 <HAL_CAN_AddTxMessage>
 80006be:	4603      	mov	r3, r0
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d001      	beq.n	80006c8 <startNode+0x68>
	{
		Error_Handler();
 80006c4:	f001 fc6a 	bl	8001f9c <Error_Handler>
	}

	while (HAL_CAN_IsTxMessagePending(hcan, mailbox));
 80006c8:	bf00      	nop
 80006ca:	697b      	ldr	r3, [r7, #20]
 80006cc:	4619      	mov	r1, r3
 80006ce:	6878      	ldr	r0, [r7, #4]
 80006d0:	f003 f84e 	bl	8003770 <HAL_CAN_IsTxMessagePending>
 80006d4:	4603      	mov	r3, r0
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d1f7      	bne.n	80006ca <startNode+0x6a>

	return;
 80006da:	bf00      	nop
}
 80006dc:	3738      	adds	r7, #56	@ 0x38
 80006de:	46bd      	mov	sp, r7
 80006e0:	bd80      	pop	{r7, pc}
 80006e2:	bf00      	nop
 80006e4:	08009408 	.word	0x08009408

080006e8 <clearErrors>:

void clearErrors(CAN_HandleTypeDef* hcan)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b092      	sub	sp, #72	@ 0x48
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	6078      	str	r0, [r7, #4]
	CAN_TxHeaderTypeDef txHeader;
	uint8_t data[8] = { (0x00U), (0x00U), (0x00U), (0x00U), (0x00U), (0x04U), (0x00U), (0x00U) };
 80006f0:	4a29      	ldr	r2, [pc, #164]	@ (8000798 <clearErrors+0xb0>)
 80006f2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80006f6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80006fa:	e883 0003 	stmia.w	r3, {r0, r1}
	uint32_t mailbox;
	EMD_RxPDO_3_t rxPDO3;
	uint8_t len, ide;

	rxPDO3.EMD_CMD_ActiveDischarge = 0;
 80006fe:	2300      	movs	r3, #0
 8000700:	777b      	strb	r3, [r7, #29]
	rxPDO3.EMD_CMD_ClearErrors = (0x01U);
 8000702:	2301      	movs	r3, #1
 8000704:	76fb      	strb	r3, [r7, #27]
	rxPDO3.EMD_CMD_ControlMode = 0;
 8000706:	2300      	movs	r3, #0
 8000708:	763b      	strb	r3, [r7, #24]
	rxPDO3.EMD_CMD_DigitalOutput1 = 0;
 800070a:	2300      	movs	r3, #0
 800070c:	f887 3020 	strb.w	r3, [r7, #32]
	rxPDO3.EMD_CMD_DigitalOutput2 = 0;
 8000710:	2300      	movs	r3, #0
 8000712:	77fb      	strb	r3, [r7, #31]
	rxPDO3.EMD_CMD_LimitationMode = 0;
 8000714:	2300      	movs	r3, #0
 8000716:	77bb      	strb	r3, [r7, #30]
	rxPDO3.EMD_CMD_RestartRequest = 0;
 8000718:	2300      	movs	r3, #0
 800071a:	773b      	strb	r3, [r7, #28]
	rxPDO3.EMD_CMD_SpeedRefLim = 0;
 800071c:	2300      	movs	r3, #0
 800071e:	617b      	str	r3, [r7, #20]
	rxPDO3.EMD_CMD_SpeedRefLim_VAL = 0;
 8000720:	2300      	movs	r3, #0
 8000722:	76bb      	strb	r3, [r7, #26]
	rxPDO3.EMD_CMD_TorqueRefLim = 0;
 8000724:	2300      	movs	r3, #0
 8000726:	823b      	strh	r3, [r7, #16]
	rxPDO3.EMD_CMD_TorqueRefLim_VAL = 0;
 8000728:	2300      	movs	r3, #0
 800072a:	74bb      	strb	r3, [r7, #18]
	rxPDO3.EMD_MSGCNT_RxPDO3 = 0;
 800072c:	2300      	movs	r3, #0
 800072e:	767b      	strb	r3, [r7, #25]

	Pack_EMD_RxPDO_3__DO_QUASAR_CANopen(&rxPDO3, data, &len, &ide);
 8000730:	f107 030e 	add.w	r3, r7, #14
 8000734:	f107 020f 	add.w	r2, r7, #15
 8000738:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 800073c:	f107 0010 	add.w	r0, r7, #16
 8000740:	f000 fa2a 	bl	8000b98 <Pack_EMD_RxPDO_3__DO_QUASAR_CANopen>

	txHeader.DLC = len;
 8000744:	7bfb      	ldrb	r3, [r7, #15]
 8000746:	643b      	str	r3, [r7, #64]	@ 0x40
	txHeader.ExtId = DISABLE;
 8000748:	2300      	movs	r3, #0
 800074a:	637b      	str	r3, [r7, #52]	@ 0x34
	txHeader.IDE = ide;
 800074c:	7bbb      	ldrb	r3, [r7, #14]
 800074e:	63bb      	str	r3, [r7, #56]	@ 0x38
	txHeader.RTR = CAN_RTR_DATA;
 8000750:	2300      	movs	r3, #0
 8000752:	63fb      	str	r3, [r7, #60]	@ 0x3c
	txHeader.StdId = EMD_RxPDO_3_CANID;
 8000754:	f240 437a 	movw	r3, #1146	@ 0x47a
 8000758:	633b      	str	r3, [r7, #48]	@ 0x30
	txHeader.TransmitGlobalTime = DISABLE;
 800075a:	2300      	movs	r3, #0
 800075c:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44

	if (HAL_CAN_AddTxMessage(hcan, &txHeader, data, &mailbox) != HAL_OK)
 8000760:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000764:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8000768:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 800076c:	6878      	ldr	r0, [r7, #4]
 800076e:	f002 ff2f 	bl	80035d0 <HAL_CAN_AddTxMessage>
 8000772:	4603      	mov	r3, r0
 8000774:	2b00      	cmp	r3, #0
 8000776:	d001      	beq.n	800077c <clearErrors+0x94>
	{
		Error_Handler();
 8000778:	f001 fc10 	bl	8001f9c <Error_Handler>
	}

	while (HAL_CAN_IsTxMessagePending(hcan, mailbox));
 800077c:	bf00      	nop
 800077e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000780:	4619      	mov	r1, r3
 8000782:	6878      	ldr	r0, [r7, #4]
 8000784:	f002 fff4 	bl	8003770 <HAL_CAN_IsTxMessagePending>
 8000788:	4603      	mov	r3, r0
 800078a:	2b00      	cmp	r3, #0
 800078c:	d1f7      	bne.n	800077e <clearErrors+0x96>

	return;
 800078e:	bf00      	nop
}
 8000790:	3748      	adds	r7, #72	@ 0x48
 8000792:	46bd      	mov	sp, r7
 8000794:	bd80      	pop	{r7, pc}
 8000796:	bf00      	nop
 8000798:	08009410 	.word	0x08009410

0800079c <torqueControlMessage>:

void torqueControlMessage(CAN_HandleTypeDef* hcan, int _speedRefLimit, int* _torqueRefLimit)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b094      	sub	sp, #80	@ 0x50
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	60f8      	str	r0, [r7, #12]
 80007a4:	60b9      	str	r1, [r7, #8]
 80007a6:	607a      	str	r2, [r7, #4]
	CAN_TxHeaderTypeDef txHeader;
	uint8_t data[8] = { (0x00U), (0x00U), (0x00U), (0x00U), (0x00U), (0x00U), (0x00U), (0x00U) };
 80007a8:	4a2e      	ldr	r2, [pc, #184]	@ (8000864 <torqueControlMessage+0xc8>)
 80007aa:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80007ae:	e892 0003 	ldmia.w	r2, {r0, r1}
 80007b2:	e883 0003 	stmia.w	r3, {r0, r1}
	uint32_t mailbox;
	EMD_RxPDO_3_t rxPDO3;
	uint8_t len, ide;

	rxPDO3.EMD_CMD_ActiveDischarge = 0;
 80007b6:	2300      	movs	r3, #0
 80007b8:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
	rxPDO3.EMD_CMD_ClearErrors = 0;
 80007bc:	2300      	movs	r3, #0
 80007be:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
	rxPDO3.EMD_CMD_ControlMode = (0x01U);
 80007c2:	2301      	movs	r3, #1
 80007c4:	f887 3020 	strb.w	r3, [r7, #32]
	rxPDO3.EMD_CMD_DigitalOutput1 = 0;
 80007c8:	2300      	movs	r3, #0
 80007ca:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
	rxPDO3.EMD_CMD_DigitalOutput2 = 0;
 80007ce:	2300      	movs	r3, #0
 80007d0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	rxPDO3.EMD_CMD_LimitationMode = 0;
 80007d4:	2300      	movs	r3, #0
 80007d6:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	rxPDO3.EMD_CMD_RestartRequest = 0;
 80007da:	2300      	movs	r3, #0
 80007dc:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
	rxPDO3.EMD_CMD_SpeedRefLim = _speedRefLimit;
 80007e0:	68bb      	ldr	r3, [r7, #8]
 80007e2:	61fb      	str	r3, [r7, #28]
	rxPDO3.EMD_CMD_SpeedRefLim_VAL = 0;
 80007e4:	2300      	movs	r3, #0
 80007e6:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
	rxPDO3.EMD_CMD_TorqueRefLim = *_torqueRefLimit;
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	681b      	ldr	r3, [r3, #0]
 80007ee:	b21b      	sxth	r3, r3
 80007f0:	833b      	strh	r3, [r7, #24]
	rxPDO3.EMD_CMD_TorqueRefLim_VAL = 0;
 80007f2:	2300      	movs	r3, #0
 80007f4:	76bb      	strb	r3, [r7, #26]
	rxPDO3.EMD_MSGCNT_RxPDO3 = 0;
 80007f6:	2300      	movs	r3, #0
 80007f8:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21

	Pack_EMD_RxPDO_3__DO_QUASAR_CANopen(&rxPDO3, data, &len, &ide);
 80007fc:	f107 0316 	add.w	r3, r7, #22
 8000800:	f107 0217 	add.w	r2, r7, #23
 8000804:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 8000808:	f107 0018 	add.w	r0, r7, #24
 800080c:	f000 f9c4 	bl	8000b98 <Pack_EMD_RxPDO_3__DO_QUASAR_CANopen>

	txHeader.DLC = EMD_RxPDO_3_DLC;
 8000810:	2306      	movs	r3, #6
 8000812:	64bb      	str	r3, [r7, #72]	@ 0x48
	txHeader.ExtId = DISABLE;
 8000814:	2300      	movs	r3, #0
 8000816:	63fb      	str	r3, [r7, #60]	@ 0x3c
	txHeader.IDE = ide;
 8000818:	7dbb      	ldrb	r3, [r7, #22]
 800081a:	643b      	str	r3, [r7, #64]	@ 0x40
	txHeader.RTR = CAN_RTR_DATA;
 800081c:	2300      	movs	r3, #0
 800081e:	647b      	str	r3, [r7, #68]	@ 0x44
	txHeader.StdId = EMD_RxPDO_3_CANID;
 8000820:	f240 437a 	movw	r3, #1146	@ 0x47a
 8000824:	63bb      	str	r3, [r7, #56]	@ 0x38
	txHeader.TransmitGlobalTime = DISABLE;
 8000826:	2300      	movs	r3, #0
 8000828:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c

	if (HAL_CAN_AddTxMessage(hcan, &txHeader, data, &mailbox) != HAL_OK)
 800082c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000830:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8000834:	f107 0138 	add.w	r1, r7, #56	@ 0x38
 8000838:	68f8      	ldr	r0, [r7, #12]
 800083a:	f002 fec9 	bl	80035d0 <HAL_CAN_AddTxMessage>
 800083e:	4603      	mov	r3, r0
 8000840:	2b00      	cmp	r3, #0
 8000842:	d001      	beq.n	8000848 <torqueControlMessage+0xac>
	{
		Error_Handler();
 8000844:	f001 fbaa 	bl	8001f9c <Error_Handler>
	}

	while (HAL_CAN_IsTxMessagePending(hcan, mailbox));
 8000848:	bf00      	nop
 800084a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800084c:	4619      	mov	r1, r3
 800084e:	68f8      	ldr	r0, [r7, #12]
 8000850:	f002 ff8e 	bl	8003770 <HAL_CAN_IsTxMessagePending>
 8000854:	4603      	mov	r3, r0
 8000856:	2b00      	cmp	r3, #0
 8000858:	d1f7      	bne.n	800084a <torqueControlMessage+0xae>

	return;
 800085a:	bf00      	nop
}
 800085c:	3750      	adds	r7, #80	@ 0x50
 800085e:	46bd      	mov	sp, r7
 8000860:	bd80      	pop	{r7, pc}
 8000862:	bf00      	nop
 8000864:	08009408 	.word	0x08009408

08000868 <configAMSCANFilter>:

void configAMSCANFilter(CAN_HandleTypeDef* hcan)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	b08c      	sub	sp, #48	@ 0x30
 800086c:	af00      	add	r7, sp, #0
 800086e:	6078      	str	r0, [r7, #4]
	CAN_FilterTypeDef filter;

	filter.FilterActivation = CAN_FILTER_ENABLE;
 8000870:	2301      	movs	r3, #1
 8000872:	62bb      	str	r3, [r7, #40]	@ 0x28
	filter.FilterBank = 0;
 8000874:	2300      	movs	r3, #0
 8000876:	61fb      	str	r3, [r7, #28]
	filter.FilterFIFOAssignment = CAN_LOW_PRIORITY_FIFO;
 8000878:	2300      	movs	r3, #0
 800087a:	61bb      	str	r3, [r7, #24]
	filter.FilterIdHigh = ((0x301U)<<5);
 800087c:	f246 0320 	movw	r3, #24608	@ 0x6020
 8000880:	60bb      	str	r3, [r7, #8]
	filter.FilterIdLow = (0x000U);
 8000882:	2300      	movs	r3, #0
 8000884:	60fb      	str	r3, [r7, #12]
	filter.FilterMaskIdHigh = ((0x301U)<<5);
 8000886:	f246 0320 	movw	r3, #24608	@ 0x6020
 800088a:	613b      	str	r3, [r7, #16]
	filter.FilterMaskIdLow = (0x000U);
 800088c:	2300      	movs	r3, #0
 800088e:	617b      	str	r3, [r7, #20]
	filter.FilterMode = CAN_FILTERMODE_IDMASK;
 8000890:	2300      	movs	r3, #0
 8000892:	623b      	str	r3, [r7, #32]
	filter.FilterScale = CAN_FILTERSCALE_32BIT;
 8000894:	2301      	movs	r3, #1
 8000896:	627b      	str	r3, [r7, #36]	@ 0x24
	filter.SlaveStartFilterBank = 14;
 8000898:	230e      	movs	r3, #14
 800089a:	62fb      	str	r3, [r7, #44]	@ 0x2c

	if (HAL_CAN_ConfigFilter(hcan, &filter) != HAL_OK)
 800089c:	f107 0308 	add.w	r3, r7, #8
 80008a0:	4619      	mov	r1, r3
 80008a2:	6878      	ldr	r0, [r7, #4]
 80008a4:	f002 fd64 	bl	8003370 <HAL_CAN_ConfigFilter>
 80008a8:	4603      	mov	r3, r0
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d001      	beq.n	80008b2 <configAMSCANFilter+0x4a>
	{
		Error_Handler();
 80008ae:	f001 fb75 	bl	8001f9c <Error_Handler>
	}
}
 80008b2:	bf00      	nop
 80008b4:	3730      	adds	r7, #48	@ 0x30
 80008b6:	46bd      	mov	sp, r7
 80008b8:	bd80      	pop	{r7, pc}

080008ba <configIMDCANFilter>:

void configIMDCANFilter(CAN_HandleTypeDef* hcan)
{
 80008ba:	b580      	push	{r7, lr}
 80008bc:	b08c      	sub	sp, #48	@ 0x30
 80008be:	af00      	add	r7, sp, #0
 80008c0:	6078      	str	r0, [r7, #4]
	CAN_FilterTypeDef filter;

	filter.FilterActivation = CAN_FILTER_ENABLE;
 80008c2:	2301      	movs	r3, #1
 80008c4:	62bb      	str	r3, [r7, #40]	@ 0x28
	filter.FilterBank = 1;
 80008c6:	2301      	movs	r3, #1
 80008c8:	61fb      	str	r3, [r7, #28]
	filter.FilterFIFOAssignment = CAN_LOW_PRIORITY_FIFO;
 80008ca:	2300      	movs	r3, #0
 80008cc:	61bb      	str	r3, [r7, #24]
	filter.FilterIdHigh = ((0x007U)<<5);
 80008ce:	23e0      	movs	r3, #224	@ 0xe0
 80008d0:	60bb      	str	r3, [r7, #8]
	filter.FilterIdLow = (0x000U);
 80008d2:	2300      	movs	r3, #0
 80008d4:	60fb      	str	r3, [r7, #12]
	filter.FilterMaskIdHigh = ((0x007U)<<5);
 80008d6:	23e0      	movs	r3, #224	@ 0xe0
 80008d8:	613b      	str	r3, [r7, #16]
	filter.FilterMaskIdLow = (0x000U);
 80008da:	2300      	movs	r3, #0
 80008dc:	617b      	str	r3, [r7, #20]
	filter.FilterMode = CAN_FILTERMODE_IDMASK;
 80008de:	2300      	movs	r3, #0
 80008e0:	623b      	str	r3, [r7, #32]
	filter.FilterScale = CAN_FILTERSCALE_32BIT;
 80008e2:	2301      	movs	r3, #1
 80008e4:	627b      	str	r3, [r7, #36]	@ 0x24
	filter.SlaveStartFilterBank = 14;
 80008e6:	230e      	movs	r3, #14
 80008e8:	62fb      	str	r3, [r7, #44]	@ 0x2c

	if (HAL_CAN_ConfigFilter(hcan, &filter) != HAL_OK)
 80008ea:	f107 0308 	add.w	r3, r7, #8
 80008ee:	4619      	mov	r1, r3
 80008f0:	6878      	ldr	r0, [r7, #4]
 80008f2:	f002 fd3d 	bl	8003370 <HAL_CAN_ConfigFilter>
 80008f6:	4603      	mov	r3, r0
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d001      	beq.n	8000900 <configIMDCANFilter+0x46>
	{
		Error_Handler();
 80008fc:	f001 fb4e 	bl	8001f9c <Error_Handler>
	}
}
 8000900:	bf00      	nop
 8000902:	3730      	adds	r7, #48	@ 0x30
 8000904:	46bd      	mov	sp, r7
 8000906:	bd80      	pop	{r7, pc}

08000908 <configInverterRPMCANFilter>:

void configInverterRPMCANFilter(CAN_HandleTypeDef* hcan)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b08c      	sub	sp, #48	@ 0x30
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]
	CAN_FilterTypeDef filter;

	filter.FilterActivation = CAN_FILTER_ENABLE;
 8000910:	2301      	movs	r3, #1
 8000912:	62bb      	str	r3, [r7, #40]	@ 0x28
	filter.FilterBank = 2;
 8000914:	2302      	movs	r3, #2
 8000916:	61fb      	str	r3, [r7, #28]
	filter.FilterFIFOAssignment = CAN_HIGH_PRIORITY_FIFO;
 8000918:	2301      	movs	r3, #1
 800091a:	61bb      	str	r3, [r7, #24]
	filter.FilterIdHigh = ((0x3FAU)<<5);
 800091c:	f647 7340 	movw	r3, #32576	@ 0x7f40
 8000920:	60bb      	str	r3, [r7, #8]
	filter.FilterIdLow = (0x000U);
 8000922:	2300      	movs	r3, #0
 8000924:	60fb      	str	r3, [r7, #12]
	filter.FilterMaskIdHigh = ((0x3FAU)<<5);
 8000926:	f647 7340 	movw	r3, #32576	@ 0x7f40
 800092a:	613b      	str	r3, [r7, #16]
	filter.FilterMaskIdLow = (0x000U);
 800092c:	2300      	movs	r3, #0
 800092e:	617b      	str	r3, [r7, #20]
	filter.FilterMode = CAN_FILTERMODE_IDLIST;
 8000930:	2301      	movs	r3, #1
 8000932:	623b      	str	r3, [r7, #32]
	filter.FilterScale = CAN_FILTERSCALE_32BIT;
 8000934:	2301      	movs	r3, #1
 8000936:	627b      	str	r3, [r7, #36]	@ 0x24
	filter.SlaveStartFilterBank = 14;
 8000938:	230e      	movs	r3, #14
 800093a:	62fb      	str	r3, [r7, #44]	@ 0x2c

	if (HAL_CAN_ConfigFilter(hcan, &filter) != HAL_OK)
 800093c:	f107 0308 	add.w	r3, r7, #8
 8000940:	4619      	mov	r1, r3
 8000942:	6878      	ldr	r0, [r7, #4]
 8000944:	f002 fd14 	bl	8003370 <HAL_CAN_ConfigFilter>
 8000948:	4603      	mov	r3, r0
 800094a:	2b00      	cmp	r3, #0
 800094c:	d001      	beq.n	8000952 <configInverterRPMCANFilter+0x4a>
	{
		Error_Handler();
 800094e:	f001 fb25 	bl	8001f9c <Error_Handler>
	}
}
 8000952:	bf00      	nop
 8000954:	3730      	adds	r7, #48	@ 0x30
 8000956:	46bd      	mov	sp, r7
 8000958:	bd80      	pop	{r7, pc}

0800095a <configInverterTempCANFilter>:

void configInverterTempCANFilter(CAN_HandleTypeDef* hcan)
{
 800095a:	b580      	push	{r7, lr}
 800095c:	b08c      	sub	sp, #48	@ 0x30
 800095e:	af00      	add	r7, sp, #0
 8000960:	6078      	str	r0, [r7, #4]
	CAN_FilterTypeDef filter;

	filter.FilterActivation = CAN_FILTER_ENABLE;
 8000962:	2301      	movs	r3, #1
 8000964:	62bb      	str	r3, [r7, #40]	@ 0x28
	filter.FilterBank = 3;
 8000966:	2303      	movs	r3, #3
 8000968:	61fb      	str	r3, [r7, #28]
	filter.FilterFIFOAssignment = CAN_LOW_PRIORITY_FIFO;
 800096a:	2300      	movs	r3, #0
 800096c:	61bb      	str	r3, [r7, #24]
	filter.FilterIdHigh = ((0xBAU)<<5);
 800096e:	f44f 53ba 	mov.w	r3, #5952	@ 0x1740
 8000972:	60bb      	str	r3, [r7, #8]
	filter.FilterIdLow = (0x000U);
 8000974:	2300      	movs	r3, #0
 8000976:	60fb      	str	r3, [r7, #12]
	filter.FilterMaskIdHigh = ((0x0BAU)<<5);
 8000978:	f44f 53ba 	mov.w	r3, #5952	@ 0x1740
 800097c:	613b      	str	r3, [r7, #16]
	filter.FilterMaskIdLow = (0x000U);
 800097e:	2300      	movs	r3, #0
 8000980:	617b      	str	r3, [r7, #20]
	filter.FilterMode = CAN_FILTERMODE_IDMASK;
 8000982:	2300      	movs	r3, #0
 8000984:	623b      	str	r3, [r7, #32]
	filter.FilterScale = CAN_FILTERSCALE_32BIT;
 8000986:	2301      	movs	r3, #1
 8000988:	627b      	str	r3, [r7, #36]	@ 0x24
	filter.SlaveStartFilterBank = 14;
 800098a:	230e      	movs	r3, #14
 800098c:	62fb      	str	r3, [r7, #44]	@ 0x2c

	if (HAL_CAN_ConfigFilter(hcan, &filter) != HAL_OK)
 800098e:	f107 0308 	add.w	r3, r7, #8
 8000992:	4619      	mov	r1, r3
 8000994:	6878      	ldr	r0, [r7, #4]
 8000996:	f002 fceb 	bl	8003370 <HAL_CAN_ConfigFilter>
 800099a:	4603      	mov	r3, r0
 800099c:	2b00      	cmp	r3, #0
 800099e:	d001      	beq.n	80009a4 <configInverterTempCANFilter+0x4a>
	{
		Error_Handler();
 80009a0:	f001 fafc 	bl	8001f9c <Error_Handler>
	}
}
 80009a4:	bf00      	nop
 80009a6:	3730      	adds	r7, #48	@ 0x30
 80009a8:	46bd      	mov	sp, r7
 80009aa:	bd80      	pop	{r7, pc}

080009ac <Pack_ECU_NMT_command__DO_QUASAR_CANopen>:
  _m->ECU_NMT_NodeId = (_d[1] & (0xFFU));
  return ECU_NMT_command_CANID;
}

uint32_t Pack_ECU_NMT_command__DO_QUASAR_CANopen(const ECU_NMT_command_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide)
{
 80009ac:	b480      	push	{r7}
 80009ae:	b087      	sub	sp, #28
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	60f8      	str	r0, [r7, #12]
 80009b4:	60b9      	str	r1, [r7, #8]
 80009b6:	607a      	str	r2, [r7, #4]
 80009b8:	603b      	str	r3, [r7, #0]
  uint8_t i; for (i = 0; i < ECU_NMT_command_DLC; _d[i++] = 0);
 80009ba:	2300      	movs	r3, #0
 80009bc:	75fb      	strb	r3, [r7, #23]
 80009be:	e007      	b.n	80009d0 <Pack_ECU_NMT_command__DO_QUASAR_CANopen+0x24>
 80009c0:	7dfb      	ldrb	r3, [r7, #23]
 80009c2:	1c5a      	adds	r2, r3, #1
 80009c4:	75fa      	strb	r2, [r7, #23]
 80009c6:	461a      	mov	r2, r3
 80009c8:	68bb      	ldr	r3, [r7, #8]
 80009ca:	4413      	add	r3, r2
 80009cc:	2200      	movs	r2, #0
 80009ce:	701a      	strb	r2, [r3, #0]
 80009d0:	7dfb      	ldrb	r3, [r7, #23]
 80009d2:	2b01      	cmp	r3, #1
 80009d4:	d9f4      	bls.n	80009c0 <Pack_ECU_NMT_command__DO_QUASAR_CANopen+0x14>

  _d[0] |= (_m->ECU_NMT_CommandSpecifier & (0xFFU));
 80009d6:	68bb      	ldr	r3, [r7, #8]
 80009d8:	781a      	ldrb	r2, [r3, #0]
 80009da:	68fb      	ldr	r3, [r7, #12]
 80009dc:	781b      	ldrb	r3, [r3, #0]
 80009de:	4313      	orrs	r3, r2
 80009e0:	b2da      	uxtb	r2, r3
 80009e2:	68bb      	ldr	r3, [r7, #8]
 80009e4:	701a      	strb	r2, [r3, #0]
  _d[1] |= (_m->ECU_NMT_NodeId & (0xFFU));
 80009e6:	68bb      	ldr	r3, [r7, #8]
 80009e8:	3301      	adds	r3, #1
 80009ea:	7819      	ldrb	r1, [r3, #0]
 80009ec:	68fb      	ldr	r3, [r7, #12]
 80009ee:	785a      	ldrb	r2, [r3, #1]
 80009f0:	68bb      	ldr	r3, [r7, #8]
 80009f2:	3301      	adds	r3, #1
 80009f4:	430a      	orrs	r2, r1
 80009f6:	b2d2      	uxtb	r2, r2
 80009f8:	701a      	strb	r2, [r3, #0]
  *_len = 2; *_ide = 0;
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	2202      	movs	r2, #2
 80009fe:	701a      	strb	r2, [r3, #0]
 8000a00:	683b      	ldr	r3, [r7, #0]
 8000a02:	2200      	movs	r2, #0
 8000a04:	701a      	strb	r2, [r3, #0]
  return ECU_NMT_command_CANID;
 8000a06:	2300      	movs	r3, #0
}
 8000a08:	4618      	mov	r0, r3
 8000a0a:	371c      	adds	r7, #28
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a12:	4770      	bx	lr

08000a14 <Pack_ECU_SYNC__DO_QUASAR_CANopen>:
  _m->ECU_SYNCH_Counter = (_d[0] & (0xFFU));
  return ECU_SYNC_CANID;
}

uint32_t Pack_ECU_SYNC__DO_QUASAR_CANopen(const ECU_SYNC_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide)
{
 8000a14:	b480      	push	{r7}
 8000a16:	b087      	sub	sp, #28
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	60f8      	str	r0, [r7, #12]
 8000a1c:	60b9      	str	r1, [r7, #8]
 8000a1e:	607a      	str	r2, [r7, #4]
 8000a20:	603b      	str	r3, [r7, #0]
  uint8_t i; for (i = 0; i < ECU_SYNC_DLC; _d[i++] = 0);
 8000a22:	2300      	movs	r3, #0
 8000a24:	75fb      	strb	r3, [r7, #23]
 8000a26:	e007      	b.n	8000a38 <Pack_ECU_SYNC__DO_QUASAR_CANopen+0x24>
 8000a28:	7dfb      	ldrb	r3, [r7, #23]
 8000a2a:	1c5a      	adds	r2, r3, #1
 8000a2c:	75fa      	strb	r2, [r7, #23]
 8000a2e:	461a      	mov	r2, r3
 8000a30:	68bb      	ldr	r3, [r7, #8]
 8000a32:	4413      	add	r3, r2
 8000a34:	2200      	movs	r2, #0
 8000a36:	701a      	strb	r2, [r3, #0]
 8000a38:	7dfb      	ldrb	r3, [r7, #23]
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d0f4      	beq.n	8000a28 <Pack_ECU_SYNC__DO_QUASAR_CANopen+0x14>

  _d[0] |= (_m->ECU_SYNCH_Counter & (0xFFU));
 8000a3e:	68bb      	ldr	r3, [r7, #8]
 8000a40:	781a      	ldrb	r2, [r3, #0]
 8000a42:	68fb      	ldr	r3, [r7, #12]
 8000a44:	781b      	ldrb	r3, [r3, #0]
 8000a46:	4313      	orrs	r3, r2
 8000a48:	b2da      	uxtb	r2, r3
 8000a4a:	68bb      	ldr	r3, [r7, #8]
 8000a4c:	701a      	strb	r2, [r3, #0]
  *_len = 1; *_ide = 0;
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	2201      	movs	r2, #1
 8000a52:	701a      	strb	r2, [r3, #0]
 8000a54:	683b      	ldr	r3, [r7, #0]
 8000a56:	2200      	movs	r2, #0
 8000a58:	701a      	strb	r2, [r3, #0]
  return ECU_SYNC_CANID;
 8000a5a:	2380      	movs	r3, #128	@ 0x80
}
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	371c      	adds	r7, #28
 8000a60:	46bd      	mov	sp, r7
 8000a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a66:	4770      	bx	lr

08000a68 <Unpack_EMD_TxPDO_5__DO_QUASAR_CANopen>:

// --------------------------------------------------------------------------
uint32_t Unpack_EMD_TxPDO_5__DO_QUASAR_CANopen(EMD_TxPDO_5_t* _m, const uint8_t* _d, uint8_t dlc_)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	b085      	sub	sp, #20
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	60f8      	str	r0, [r7, #12]
 8000a70:	60b9      	str	r1, [r7, #8]
 8000a72:	4613      	mov	r3, r2
 8000a74:	71fb      	strb	r3, [r7, #7]
  _m->EMD_ACT_MaxJunctionTemp = ((_d[0] & (0xFFU))) - 40;
 8000a76:	68bb      	ldr	r3, [r7, #8]
 8000a78:	781b      	ldrb	r3, [r3, #0]
 8000a7a:	3b28      	subs	r3, #40	@ 0x28
 8000a7c:	b29b      	uxth	r3, r3
 8000a7e:	b21a      	sxth	r2, r3
 8000a80:	68fb      	ldr	r3, [r7, #12]
 8000a82:	801a      	strh	r2, [r3, #0]
  _m->EMD_ACT_MotorTemperature = ((_d[1] & (0xFFU))) - 40;
 8000a84:	68bb      	ldr	r3, [r7, #8]
 8000a86:	3301      	adds	r3, #1
 8000a88:	781b      	ldrb	r3, [r3, #0]
 8000a8a:	3b28      	subs	r3, #40	@ 0x28
 8000a8c:	b29b      	uxth	r3, r3
 8000a8e:	b21a      	sxth	r2, r3
 8000a90:	68fb      	ldr	r3, [r7, #12]
 8000a92:	805a      	strh	r2, [r3, #2]
  _m->EMD_ACT_ControlStrategy = (_d[2] & (0x07U));
 8000a94:	68bb      	ldr	r3, [r7, #8]
 8000a96:	3302      	adds	r3, #2
 8000a98:	781b      	ldrb	r3, [r3, #0]
 8000a9a:	f003 0307 	and.w	r3, r3, #7
 8000a9e:	b2da      	uxtb	r2, r3
 8000aa0:	68fb      	ldr	r3, [r7, #12]
 8000aa2:	711a      	strb	r2, [r3, #4]
  _m->EMD_ACT_MotorTemperature_VAL = ((_d[2] >> 3) & (0x03U));
 8000aa4:	68bb      	ldr	r3, [r7, #8]
 8000aa6:	3302      	adds	r3, #2
 8000aa8:	781b      	ldrb	r3, [r3, #0]
 8000aaa:	08db      	lsrs	r3, r3, #3
 8000aac:	b2db      	uxtb	r3, r3
 8000aae:	f003 0303 	and.w	r3, r3, #3
 8000ab2:	b2da      	uxtb	r2, r3
 8000ab4:	68fb      	ldr	r3, [r7, #12]
 8000ab6:	715a      	strb	r2, [r3, #5]
  _m->EMD_ACT_MaxJunctionTemp_VAL = ((_d[2] >> 5) & (0x03U));
 8000ab8:	68bb      	ldr	r3, [r7, #8]
 8000aba:	3302      	adds	r3, #2
 8000abc:	781b      	ldrb	r3, [r3, #0]
 8000abe:	095b      	lsrs	r3, r3, #5
 8000ac0:	b2db      	uxtb	r3, r3
 8000ac2:	f003 0303 	and.w	r3, r3, #3
 8000ac6:	b2da      	uxtb	r2, r3
 8000ac8:	68fb      	ldr	r3, [r7, #12]
 8000aca:	719a      	strb	r2, [r3, #6]
  _m->EMD_MSGCNT_TxPDO5 = (_d[3] & (0x0FU));
 8000acc:	68bb      	ldr	r3, [r7, #8]
 8000ace:	3303      	adds	r3, #3
 8000ad0:	781b      	ldrb	r3, [r3, #0]
 8000ad2:	f003 030f 	and.w	r3, r3, #15
 8000ad6:	b2da      	uxtb	r2, r3
 8000ad8:	68fb      	ldr	r3, [r7, #12]
 8000ada:	71da      	strb	r2, [r3, #7]
  return EMD_TxPDO_5_CANID;
 8000adc:	f44f 73dd 	mov.w	r3, #442	@ 0x1ba
}
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	3714      	adds	r7, #20
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aea:	4770      	bx	lr

08000aec <Unpack_EMD_TxPDO_3__DO_QUASAR_CANopen>:
  return EMD_RxPDO_2_CANID;
}

// --------------------------------------------------------------------------
uint32_t Unpack_EMD_TxPDO_3__DO_QUASAR_CANopen(EMD_TxPDO_3_t* _m, const uint8_t* _d, uint8_t dlc_)
{
 8000aec:	b480      	push	{r7}
 8000aee:	b085      	sub	sp, #20
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	60f8      	str	r0, [r7, #12]
 8000af4:	60b9      	str	r1, [r7, #8]
 8000af6:	4613      	mov	r3, r2
 8000af8:	71fb      	strb	r3, [r7, #7]
  _m->EMD_ACT_MotorSpeed = (((_d[1] & (0xFFU)) << 8) | (_d[0] & (0xFFU))) - 32768;
 8000afa:	68bb      	ldr	r3, [r7, #8]
 8000afc:	3301      	adds	r3, #1
 8000afe:	781b      	ldrb	r3, [r3, #0]
 8000b00:	021b      	lsls	r3, r3, #8
 8000b02:	68ba      	ldr	r2, [r7, #8]
 8000b04:	7812      	ldrb	r2, [r2, #0]
 8000b06:	4313      	orrs	r3, r2
 8000b08:	f5a3 4300 	sub.w	r3, r3, #32768	@ 0x8000
 8000b0c:	461a      	mov	r2, r3
 8000b0e:	68fb      	ldr	r3, [r7, #12]
 8000b10:	601a      	str	r2, [r3, #0]
  _m->EMD_ACT_MechanicPower = (((_d[3] & (0xFFU)) << 8) | (_d[2] & (0xFFU))) - 32768;
 8000b12:	68bb      	ldr	r3, [r7, #8]
 8000b14:	3303      	adds	r3, #3
 8000b16:	781b      	ldrb	r3, [r3, #0]
 8000b18:	021b      	lsls	r3, r3, #8
 8000b1a:	68ba      	ldr	r2, [r7, #8]
 8000b1c:	3202      	adds	r2, #2
 8000b1e:	7812      	ldrb	r2, [r2, #0]
 8000b20:	4313      	orrs	r3, r2
 8000b22:	f5a3 4300 	sub.w	r3, r3, #32768	@ 0x8000
 8000b26:	461a      	mov	r2, r3
 8000b28:	68fb      	ldr	r3, [r7, #12]
 8000b2a:	605a      	str	r2, [r3, #4]
  _m->EMD_ACT_DcLinkPower = (((_d[5] & (0xFFU)) << 8) | (_d[4] & (0xFFU))) - 32768;
 8000b2c:	68bb      	ldr	r3, [r7, #8]
 8000b2e:	3305      	adds	r3, #5
 8000b30:	781b      	ldrb	r3, [r3, #0]
 8000b32:	021b      	lsls	r3, r3, #8
 8000b34:	68ba      	ldr	r2, [r7, #8]
 8000b36:	3204      	adds	r2, #4
 8000b38:	7812      	ldrb	r2, [r2, #0]
 8000b3a:	4313      	orrs	r3, r2
 8000b3c:	f5a3 4300 	sub.w	r3, r3, #32768	@ 0x8000
 8000b40:	461a      	mov	r2, r3
 8000b42:	68fb      	ldr	r3, [r7, #12]
 8000b44:	609a      	str	r2, [r3, #8]
  _m->EMD_MSGCNT_TxPDO3 = (_d[6] & (0x0FU));
 8000b46:	68bb      	ldr	r3, [r7, #8]
 8000b48:	3306      	adds	r3, #6
 8000b4a:	781b      	ldrb	r3, [r3, #0]
 8000b4c:	f003 030f 	and.w	r3, r3, #15
 8000b50:	b2da      	uxtb	r2, r3
 8000b52:	68fb      	ldr	r3, [r7, #12]
 8000b54:	731a      	strb	r2, [r3, #12]
  _m->EMD_ACT_MechanicPower_VAL = ((_d[6] >> 4) & (0x03U));
 8000b56:	68bb      	ldr	r3, [r7, #8]
 8000b58:	3306      	adds	r3, #6
 8000b5a:	781b      	ldrb	r3, [r3, #0]
 8000b5c:	091b      	lsrs	r3, r3, #4
 8000b5e:	b2db      	uxtb	r3, r3
 8000b60:	f003 0303 	and.w	r3, r3, #3
 8000b64:	b2da      	uxtb	r2, r3
 8000b66:	68fb      	ldr	r3, [r7, #12]
 8000b68:	735a      	strb	r2, [r3, #13]
  _m->EMD_ACT_MotorSpeed_VAL = ((_d[6] >> 6) & (0x03U));
 8000b6a:	68bb      	ldr	r3, [r7, #8]
 8000b6c:	3306      	adds	r3, #6
 8000b6e:	781b      	ldrb	r3, [r3, #0]
 8000b70:	099b      	lsrs	r3, r3, #6
 8000b72:	b2da      	uxtb	r2, r3
 8000b74:	68fb      	ldr	r3, [r7, #12]
 8000b76:	739a      	strb	r2, [r3, #14]
  _m->EMD_ACT_DcLinkPower_VAL = (_d[7] & (0x03U));
 8000b78:	68bb      	ldr	r3, [r7, #8]
 8000b7a:	3307      	adds	r3, #7
 8000b7c:	781b      	ldrb	r3, [r3, #0]
 8000b7e:	f003 0303 	and.w	r3, r3, #3
 8000b82:	b2da      	uxtb	r2, r3
 8000b84:	68fb      	ldr	r3, [r7, #12]
 8000b86:	73da      	strb	r2, [r3, #15]
  return EMD_TxPDO_3_CANID;
 8000b88:	f240 33fa 	movw	r3, #1018	@ 0x3fa
}
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	3714      	adds	r7, #20
 8000b90:	46bd      	mov	sp, r7
 8000b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b96:	4770      	bx	lr

08000b98 <Pack_EMD_RxPDO_3__DO_QUASAR_CANopen>:
  _m->EMD_CMD_DigitalOutput1 = ((_d[5] >> 7) & (0x01U));
  return EMD_RxPDO_3_CANID;
}

uint32_t Pack_EMD_RxPDO_3__DO_QUASAR_CANopen(const EMD_RxPDO_3_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	b087      	sub	sp, #28
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	60f8      	str	r0, [r7, #12]
 8000ba0:	60b9      	str	r1, [r7, #8]
 8000ba2:	607a      	str	r2, [r7, #4]
 8000ba4:	603b      	str	r3, [r7, #0]
  uint8_t i; for (i = 0; i < EMD_RxPDO_3_DLC; _d[i++] = 0);
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	75fb      	strb	r3, [r7, #23]
 8000baa:	e007      	b.n	8000bbc <Pack_EMD_RxPDO_3__DO_QUASAR_CANopen+0x24>
 8000bac:	7dfb      	ldrb	r3, [r7, #23]
 8000bae:	1c5a      	adds	r2, r3, #1
 8000bb0:	75fa      	strb	r2, [r7, #23]
 8000bb2:	461a      	mov	r2, r3
 8000bb4:	68bb      	ldr	r3, [r7, #8]
 8000bb6:	4413      	add	r3, r2
 8000bb8:	2200      	movs	r2, #0
 8000bba:	701a      	strb	r2, [r3, #0]
 8000bbc:	7dfb      	ldrb	r3, [r7, #23]
 8000bbe:	2b05      	cmp	r3, #5
 8000bc0:	d9f4      	bls.n	8000bac <Pack_EMD_RxPDO_3__DO_QUASAR_CANopen+0x14>

  _d[0] |= (_m->EMD_CMD_TorqueRefLim & (0xFFU));
 8000bc2:	68bb      	ldr	r3, [r7, #8]
 8000bc4:	781a      	ldrb	r2, [r3, #0]
 8000bc6:	68fb      	ldr	r3, [r7, #12]
 8000bc8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000bcc:	b2db      	uxtb	r3, r3
 8000bce:	4313      	orrs	r3, r2
 8000bd0:	b2da      	uxtb	r2, r3
 8000bd2:	68bb      	ldr	r3, [r7, #8]
 8000bd4:	701a      	strb	r2, [r3, #0]
  _d[1] |= ((_m->EMD_CMD_TorqueRefLim >> 8) & (0x3FU)) | ((_m->EMD_CMD_TorqueRefLim_VAL & (0x03U)) << 6);
 8000bd6:	68bb      	ldr	r3, [r7, #8]
 8000bd8:	3301      	adds	r3, #1
 8000bda:	7819      	ldrb	r1, [r3, #0]
 8000bdc:	68fb      	ldr	r3, [r7, #12]
 8000bde:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000be2:	121b      	asrs	r3, r3, #8
 8000be4:	b21b      	sxth	r3, r3
 8000be6:	b2db      	uxtb	r3, r3
 8000be8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8000bec:	b2da      	uxtb	r2, r3
 8000bee:	68fb      	ldr	r3, [r7, #12]
 8000bf0:	789b      	ldrb	r3, [r3, #2]
 8000bf2:	019b      	lsls	r3, r3, #6
 8000bf4:	b2db      	uxtb	r3, r3
 8000bf6:	4313      	orrs	r3, r2
 8000bf8:	b2da      	uxtb	r2, r3
 8000bfa:	68bb      	ldr	r3, [r7, #8]
 8000bfc:	3301      	adds	r3, #1
 8000bfe:	430a      	orrs	r2, r1
 8000c00:	b2d2      	uxtb	r2, r2
 8000c02:	701a      	strb	r2, [r3, #0]
  _d[2] |= (_m->EMD_CMD_SpeedRefLim & (0xFFU));
 8000c04:	68bb      	ldr	r3, [r7, #8]
 8000c06:	3302      	adds	r3, #2
 8000c08:	7819      	ldrb	r1, [r3, #0]
 8000c0a:	68fb      	ldr	r3, [r7, #12]
 8000c0c:	685b      	ldr	r3, [r3, #4]
 8000c0e:	b2da      	uxtb	r2, r3
 8000c10:	68bb      	ldr	r3, [r7, #8]
 8000c12:	3302      	adds	r3, #2
 8000c14:	430a      	orrs	r2, r1
 8000c16:	b2d2      	uxtb	r2, r2
 8000c18:	701a      	strb	r2, [r3, #0]
  _d[3] |= ((_m->EMD_CMD_SpeedRefLim >> 8) & (0xFFU));
 8000c1a:	68bb      	ldr	r3, [r7, #8]
 8000c1c:	3303      	adds	r3, #3
 8000c1e:	7819      	ldrb	r1, [r3, #0]
 8000c20:	68fb      	ldr	r3, [r7, #12]
 8000c22:	685b      	ldr	r3, [r3, #4]
 8000c24:	121b      	asrs	r3, r3, #8
 8000c26:	b2da      	uxtb	r2, r3
 8000c28:	68bb      	ldr	r3, [r7, #8]
 8000c2a:	3303      	adds	r3, #3
 8000c2c:	430a      	orrs	r2, r1
 8000c2e:	b2d2      	uxtb	r2, r2
 8000c30:	701a      	strb	r2, [r3, #0]
  _d[4] |= (_m->EMD_CMD_ControlMode & (0x0FU)) | ((_m->EMD_MSGCNT_RxPDO3 & (0x0FU)) << 4);
 8000c32:	68bb      	ldr	r3, [r7, #8]
 8000c34:	3304      	adds	r3, #4
 8000c36:	7819      	ldrb	r1, [r3, #0]
 8000c38:	68fb      	ldr	r3, [r7, #12]
 8000c3a:	7a1b      	ldrb	r3, [r3, #8]
 8000c3c:	f003 030f 	and.w	r3, r3, #15
 8000c40:	b2da      	uxtb	r2, r3
 8000c42:	68fb      	ldr	r3, [r7, #12]
 8000c44:	7a5b      	ldrb	r3, [r3, #9]
 8000c46:	011b      	lsls	r3, r3, #4
 8000c48:	b2db      	uxtb	r3, r3
 8000c4a:	4313      	orrs	r3, r2
 8000c4c:	b2da      	uxtb	r2, r3
 8000c4e:	68bb      	ldr	r3, [r7, #8]
 8000c50:	3304      	adds	r3, #4
 8000c52:	430a      	orrs	r2, r1
 8000c54:	b2d2      	uxtb	r2, r2
 8000c56:	701a      	strb	r2, [r3, #0]
  _d[5] |= (_m->EMD_CMD_SpeedRefLim_VAL & (0x03U)) | ((_m->EMD_CMD_ClearErrors & (0x01U)) << 2) | ((_m->EMD_CMD_RestartRequest & (0x01U)) << 3) | ((_m->EMD_CMD_ActiveDischarge & (0x01U)) << 4) | ((_m->EMD_CMD_LimitationMode & (0x01U)) << 5) | ((_m->EMD_CMD_DigitalOutput2 & (0x01U)) << 6) | ((_m->EMD_CMD_DigitalOutput1 & (0x01U)) << 7);
 8000c58:	68bb      	ldr	r3, [r7, #8]
 8000c5a:	3305      	adds	r3, #5
 8000c5c:	7819      	ldrb	r1, [r3, #0]
 8000c5e:	68fb      	ldr	r3, [r7, #12]
 8000c60:	7a9b      	ldrb	r3, [r3, #10]
 8000c62:	f003 0303 	and.w	r3, r3, #3
 8000c66:	b2da      	uxtb	r2, r3
 8000c68:	68fb      	ldr	r3, [r7, #12]
 8000c6a:	7adb      	ldrb	r3, [r3, #11]
 8000c6c:	009b      	lsls	r3, r3, #2
 8000c6e:	b2db      	uxtb	r3, r3
 8000c70:	f003 0304 	and.w	r3, r3, #4
 8000c74:	b2db      	uxtb	r3, r3
 8000c76:	4313      	orrs	r3, r2
 8000c78:	b2da      	uxtb	r2, r3
 8000c7a:	68fb      	ldr	r3, [r7, #12]
 8000c7c:	7b1b      	ldrb	r3, [r3, #12]
 8000c7e:	00db      	lsls	r3, r3, #3
 8000c80:	b2db      	uxtb	r3, r3
 8000c82:	f003 0308 	and.w	r3, r3, #8
 8000c86:	b2db      	uxtb	r3, r3
 8000c88:	4313      	orrs	r3, r2
 8000c8a:	b2da      	uxtb	r2, r3
 8000c8c:	68fb      	ldr	r3, [r7, #12]
 8000c8e:	7b5b      	ldrb	r3, [r3, #13]
 8000c90:	011b      	lsls	r3, r3, #4
 8000c92:	b2db      	uxtb	r3, r3
 8000c94:	f003 0310 	and.w	r3, r3, #16
 8000c98:	b2db      	uxtb	r3, r3
 8000c9a:	4313      	orrs	r3, r2
 8000c9c:	b2da      	uxtb	r2, r3
 8000c9e:	68fb      	ldr	r3, [r7, #12]
 8000ca0:	7b9b      	ldrb	r3, [r3, #14]
 8000ca2:	015b      	lsls	r3, r3, #5
 8000ca4:	b2db      	uxtb	r3, r3
 8000ca6:	f003 0320 	and.w	r3, r3, #32
 8000caa:	b2db      	uxtb	r3, r3
 8000cac:	4313      	orrs	r3, r2
 8000cae:	b2da      	uxtb	r2, r3
 8000cb0:	68fb      	ldr	r3, [r7, #12]
 8000cb2:	7bdb      	ldrb	r3, [r3, #15]
 8000cb4:	019b      	lsls	r3, r3, #6
 8000cb6:	b2db      	uxtb	r3, r3
 8000cb8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000cbc:	b2db      	uxtb	r3, r3
 8000cbe:	4313      	orrs	r3, r2
 8000cc0:	b2da      	uxtb	r2, r3
 8000cc2:	68fb      	ldr	r3, [r7, #12]
 8000cc4:	7c1b      	ldrb	r3, [r3, #16]
 8000cc6:	01db      	lsls	r3, r3, #7
 8000cc8:	b2db      	uxtb	r3, r3
 8000cca:	4313      	orrs	r3, r2
 8000ccc:	b2da      	uxtb	r2, r3
 8000cce:	68bb      	ldr	r3, [r7, #8]
 8000cd0:	3305      	adds	r3, #5
 8000cd2:	430a      	orrs	r2, r1
 8000cd4:	b2d2      	uxtb	r2, r2
 8000cd6:	701a      	strb	r2, [r3, #0]
  *_len = 6; *_ide = 0;
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	2206      	movs	r2, #6
 8000cdc:	701a      	strb	r2, [r3, #0]
 8000cde:	683b      	ldr	r3, [r7, #0]
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	701a      	strb	r2, [r3, #0]
  return EMD_RxPDO_3_CANID;
 8000ce4:	f240 437a 	movw	r3, #1146	@ 0x47a
}
 8000ce8:	4618      	mov	r0, r3
 8000cea:	371c      	adds	r7, #28
 8000cec:	46bd      	mov	sp, r7
 8000cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf2:	4770      	bx	lr

08000cf4 <Unpack_IMD_Info_isolation>:
  return IMD_Response_CANID;
}

// --------------------------------------------------------------------------
uint32_t Unpack_IMD_Info_isolation(IMD_Info_t* _m, const uint8_t* _d, uint8_t dlc_)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	b085      	sub	sp, #20
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	60f8      	str	r0, [r7, #12]
 8000cfc:	60b9      	str	r1, [r7, #8]
 8000cfe:	4613      	mov	r3, r2
 8000d00:	71fb      	strb	r3, [r7, #7]
  _m->II_IMC_R_ISO = (int)((_d[1] & (0xFFU)) << 8) | (_d[0] & (0xFFU));
 8000d02:	68bb      	ldr	r3, [r7, #8]
 8000d04:	3301      	adds	r3, #1
 8000d06:	781b      	ldrb	r3, [r3, #0]
 8000d08:	021b      	lsls	r3, r3, #8
 8000d0a:	68ba      	ldr	r2, [r7, #8]
 8000d0c:	7812      	ldrb	r2, [r2, #0]
 8000d0e:	4313      	orrs	r3, r2
 8000d10:	461a      	mov	r2, r3
 8000d12:	68fb      	ldr	r3, [r7, #12]
 8000d14:	601a      	str	r2, [r3, #0]
  _m->II_IMC_STATUS_00_IsoFailure = (_d[2] & (0x01U));
 8000d16:	68bb      	ldr	r3, [r7, #8]
 8000d18:	3302      	adds	r3, #2
 8000d1a:	781b      	ldrb	r3, [r3, #0]
 8000d1c:	f003 0301 	and.w	r3, r3, #1
 8000d20:	b2da      	uxtb	r2, r3
 8000d22:	68fb      	ldr	r3, [r7, #12]
 8000d24:	711a      	strb	r2, [r3, #4]
  _m->II_IMC_STATUS_01_Ground = ((_d[2] >> 1) & (0x01U));
 8000d26:	68bb      	ldr	r3, [r7, #8]
 8000d28:	3302      	adds	r3, #2
 8000d2a:	781b      	ldrb	r3, [r3, #0]
 8000d2c:	085b      	lsrs	r3, r3, #1
 8000d2e:	b2db      	uxtb	r3, r3
 8000d30:	f003 0301 	and.w	r3, r3, #1
 8000d34:	b2da      	uxtb	r2, r3
 8000d36:	68fb      	ldr	r3, [r7, #12]
 8000d38:	715a      	strb	r2, [r3, #5]
  _m->II_IMC_STATUS_02_System = ((_d[2] >> 2) & (0x01U));
 8000d3a:	68bb      	ldr	r3, [r7, #8]
 8000d3c:	3302      	adds	r3, #2
 8000d3e:	781b      	ldrb	r3, [r3, #0]
 8000d40:	089b      	lsrs	r3, r3, #2
 8000d42:	b2db      	uxtb	r3, r3
 8000d44:	f003 0301 	and.w	r3, r3, #1
 8000d48:	b2da      	uxtb	r2, r3
 8000d4a:	68fb      	ldr	r3, [r7, #12]
 8000d4c:	719a      	strb	r2, [r3, #6]
  _m->II_IMC_STATUS_03_Calibration = ((_d[2] >> 3) & (0x01U));
 8000d4e:	68bb      	ldr	r3, [r7, #8]
 8000d50:	3302      	adds	r3, #2
 8000d52:	781b      	ldrb	r3, [r3, #0]
 8000d54:	08db      	lsrs	r3, r3, #3
 8000d56:	b2db      	uxtb	r3, r3
 8000d58:	f003 0301 	and.w	r3, r3, #1
 8000d5c:	b2da      	uxtb	r2, r3
 8000d5e:	68fb      	ldr	r3, [r7, #12]
 8000d60:	71da      	strb	r2, [r3, #7]
  _m->II_IMC_STATUS_04_Selftest = ((_d[2] >> 4) & (0x01U));
 8000d62:	68bb      	ldr	r3, [r7, #8]
 8000d64:	3302      	adds	r3, #2
 8000d66:	781b      	ldrb	r3, [r3, #0]
 8000d68:	091b      	lsrs	r3, r3, #4
 8000d6a:	b2db      	uxtb	r3, r3
 8000d6c:	f003 0301 	and.w	r3, r3, #1
 8000d70:	b2da      	uxtb	r2, r3
 8000d72:	68fb      	ldr	r3, [r7, #12]
 8000d74:	721a      	strb	r2, [r3, #8]
  _m->II_IMC_STATUS_05_IsoWarning = ((_d[2] >> 5) & (0x01U));
 8000d76:	68bb      	ldr	r3, [r7, #8]
 8000d78:	3302      	adds	r3, #2
 8000d7a:	781b      	ldrb	r3, [r3, #0]
 8000d7c:	095b      	lsrs	r3, r3, #5
 8000d7e:	b2db      	uxtb	r3, r3
 8000d80:	f003 0301 	and.w	r3, r3, #1
 8000d84:	b2da      	uxtb	r2, r3
 8000d86:	68fb      	ldr	r3, [r7, #12]
 8000d88:	725a      	strb	r2, [r3, #9]
  _m->II_VIFC_STATUS_00_IsoMeasurement = (_d[4] & (0x01U));
 8000d8a:	68bb      	ldr	r3, [r7, #8]
 8000d8c:	3304      	adds	r3, #4
 8000d8e:	781b      	ldrb	r3, [r3, #0]
 8000d90:	f003 0301 	and.w	r3, r3, #1
 8000d94:	b2da      	uxtb	r2, r3
 8000d96:	68fb      	ldr	r3, [r7, #12]
 8000d98:	729a      	strb	r2, [r3, #10]
  _m->II_VIFC_STATUS_01_IMC_Connection = ((_d[4] >> 1) & (0x01U));
 8000d9a:	68bb      	ldr	r3, [r7, #8]
 8000d9c:	3304      	adds	r3, #4
 8000d9e:	781b      	ldrb	r3, [r3, #0]
 8000da0:	085b      	lsrs	r3, r3, #1
 8000da2:	b2db      	uxtb	r3, r3
 8000da4:	f003 0301 	and.w	r3, r3, #1
 8000da8:	b2da      	uxtb	r2, r3
 8000daa:	68fb      	ldr	r3, [r7, #12]
 8000dac:	72da      	strb	r2, [r3, #11]
  _m->II_VIFC_STATUS_02_IMC_Alive = ((_d[4] >> 2) & (0x01U));
 8000dae:	68bb      	ldr	r3, [r7, #8]
 8000db0:	3304      	adds	r3, #4
 8000db2:	781b      	ldrb	r3, [r3, #0]
 8000db4:	089b      	lsrs	r3, r3, #2
 8000db6:	b2db      	uxtb	r3, r3
 8000db8:	f003 0301 	and.w	r3, r3, #1
 8000dbc:	b2da      	uxtb	r2, r3
 8000dbe:	68fb      	ldr	r3, [r7, #12]
 8000dc0:	731a      	strb	r2, [r3, #12]
  _m->II_VIFC_STATUS_08_Outdated = (_d[5] & (0x01U));
 8000dc2:	68bb      	ldr	r3, [r7, #8]
 8000dc4:	3305      	adds	r3, #5
 8000dc6:	781b      	ldrb	r3, [r3, #0]
 8000dc8:	f003 0301 	and.w	r3, r3, #1
 8000dcc:	b2da      	uxtb	r2, r3
 8000dce:	68fb      	ldr	r3, [r7, #12]
 8000dd0:	735a      	strb	r2, [r3, #13]
  return IMD_Info_CANID;
 8000dd2:	2337      	movs	r3, #55	@ 0x37
}
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	3714      	adds	r7, #20
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dde:	4770      	bx	lr

08000de0 <HAL_TIM_OC_DelayElapsedCallback>:
// Software Timer Handlers
TimerHandle_t xTimer;

// RTD Speaker ISR
void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b082      	sub	sp, #8
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  //UNUSED(htim);

	HAL_GPIO_WritePin(RTD_PIN_PORT, RTD_PIN, RTD_DISABLE);
 8000de8:	4b08      	ldr	r3, [pc, #32]	@ (8000e0c <HAL_TIM_OC_DelayElapsedCallback+0x2c>)
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000df0:	2200      	movs	r2, #0
 8000df2:	4618      	mov	r0, r3
 8000df4:	f003 fae4 	bl	80043c0 <HAL_GPIO_WritePin>

	HAL_TIM_OC_Stop_IT(&htim1, IGNITION_OUPUT_CAPTURE);
 8000df8:	2300      	movs	r3, #0
 8000dfa:	4619      	mov	r1, r3
 8000dfc:	4804      	ldr	r0, [pc, #16]	@ (8000e10 <HAL_TIM_OC_DelayElapsedCallback+0x30>)
 8000dfe:	f004 fa25 	bl	800524c <HAL_TIM_OC_Stop_IT>

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8000e02:	bf00      	nop
 8000e04:	3708      	adds	r7, #8
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bd80      	pop	{r7, pc}
 8000e0a:	bf00      	nop
 8000e0c:	2000000c 	.word	0x2000000c
 8000e10:	200000e4 	.word	0x200000e4

08000e14 <HAL_CAN_RxFifo0MsgPendingCallback>:

// CAN ISR
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b090      	sub	sp, #64	@ 0x40
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]

	CAN_RxHeaderTypeDef rxHeaderFIFO0;
	uint8_t dataFIFO0[8];
	CAN_MsgHeaderTypedef msgFIFO0;

	if (hcan->Instance == CAN1)
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	4a19      	ldr	r2, [pc, #100]	@ (8000e88 <HAL_CAN_RxFifo0MsgPendingCallback+0x74>)
 8000e22:	4293      	cmp	r3, r2
 8000e24:	d12c      	bne.n	8000e80 <HAL_CAN_RxFifo0MsgPendingCallback+0x6c>
	{
		if (HAL_CAN_GetRxMessage(hcan, CAN_LOW_PRIORITY_FIFO, &rxHeaderFIFO0, dataFIFO0) == HAL_OK)
 8000e26:	f107 031c 	add.w	r3, r7, #28
 8000e2a:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8000e2e:	2100      	movs	r1, #0
 8000e30:	6878      	ldr	r0, [r7, #4]
 8000e32:	f002 fcc1 	bl	80037b8 <HAL_CAN_GetRxMessage>
 8000e36:	4603      	mov	r3, r0
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d121      	bne.n	8000e80 <HAL_CAN_RxFifo0MsgPendingCallback+0x6c>
		{
			msgFIFO0.StdID = rxHeaderFIFO0.StdId;
 8000e3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e3e:	617b      	str	r3, [r7, #20]
			msgFIFO0.RTR = rxHeaderFIFO0.RTR;
 8000e40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000e42:	61bb      	str	r3, [r7, #24]

			memcpy(msgFIFO0.data, dataFIFO0, 8);
 8000e44:	f107 030c 	add.w	r3, r7, #12
 8000e48:	f107 021c 	add.w	r2, r7, #28
 8000e4c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000e50:	e883 0003 	stmia.w	r3, {r0, r1}

			BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8000e54:	2300      	movs	r3, #0
 8000e56:	60bb      	str	r3, [r7, #8]
			xQueueSendFromISR(lowPriorityQueue, &msgFIFO0, &xHigherPriorityTaskWoken);
 8000e58:	4b0c      	ldr	r3, [pc, #48]	@ (8000e8c <HAL_CAN_RxFifo0MsgPendingCallback+0x78>)
 8000e5a:	6818      	ldr	r0, [r3, #0]
 8000e5c:	f107 0208 	add.w	r2, r7, #8
 8000e60:	f107 010c 	add.w	r1, r7, #12
 8000e64:	2300      	movs	r3, #0
 8000e66:	f005 ff39 	bl	8006cdc <xQueueGenericSendFromISR>
			portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8000e6a:	68bb      	ldr	r3, [r7, #8]
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d007      	beq.n	8000e80 <HAL_CAN_RxFifo0MsgPendingCallback+0x6c>
 8000e70:	4b07      	ldr	r3, [pc, #28]	@ (8000e90 <HAL_CAN_RxFifo0MsgPendingCallback+0x7c>)
 8000e72:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000e76:	601a      	str	r2, [r3, #0]
 8000e78:	f3bf 8f4f 	dsb	sy
 8000e7c:	f3bf 8f6f 	isb	sy

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8000e80:	bf00      	nop
 8000e82:	3740      	adds	r7, #64	@ 0x40
 8000e84:	46bd      	mov	sp, r7
 8000e86:	bd80      	pop	{r7, pc}
 8000e88:	40006400 	.word	0x40006400
 8000e8c:	2000029c 	.word	0x2000029c
 8000e90:	e000ed04 	.word	0xe000ed04

08000e94 <HAL_CAN_RxFifo1MsgPendingCallback>:

void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b090      	sub	sp, #64	@ 0x40
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]

	CAN_RxHeaderTypeDef rxHeaderFIFO1;
	uint8_t dataFIFO1[8];
	CAN_MsgHeaderTypedef msgFIFO1;

	if (hcan->Instance == CAN1)
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	4a19      	ldr	r2, [pc, #100]	@ (8000f08 <HAL_CAN_RxFifo1MsgPendingCallback+0x74>)
 8000ea2:	4293      	cmp	r3, r2
 8000ea4:	d12c      	bne.n	8000f00 <HAL_CAN_RxFifo1MsgPendingCallback+0x6c>
	{
		if (HAL_CAN_GetRxMessage(hcan, CAN_HIGH_PRIORITY_FIFO, &rxHeaderFIFO1, dataFIFO1) == HAL_OK)
 8000ea6:	f107 031c 	add.w	r3, r7, #28
 8000eaa:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8000eae:	2101      	movs	r1, #1
 8000eb0:	6878      	ldr	r0, [r7, #4]
 8000eb2:	f002 fc81 	bl	80037b8 <HAL_CAN_GetRxMessage>
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d121      	bne.n	8000f00 <HAL_CAN_RxFifo1MsgPendingCallback+0x6c>
		{
			msgFIFO1.StdID = rxHeaderFIFO1.StdId;
 8000ebc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ebe:	617b      	str	r3, [r7, #20]
			msgFIFO1.RTR = rxHeaderFIFO1.RTR;
 8000ec0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000ec2:	61bb      	str	r3, [r7, #24]

			memcpy(msgFIFO1.data, dataFIFO1, 8);
 8000ec4:	f107 030c 	add.w	r3, r7, #12
 8000ec8:	f107 021c 	add.w	r2, r7, #28
 8000ecc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000ed0:	e883 0003 	stmia.w	r3, {r0, r1}

			BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	60bb      	str	r3, [r7, #8]
			xQueueSendFromISR(highPriorityQueue, &msgFIFO1, &xHigherPriorityTaskWoken);
 8000ed8:	4b0c      	ldr	r3, [pc, #48]	@ (8000f0c <HAL_CAN_RxFifo1MsgPendingCallback+0x78>)
 8000eda:	6818      	ldr	r0, [r3, #0]
 8000edc:	f107 0208 	add.w	r2, r7, #8
 8000ee0:	f107 010c 	add.w	r1, r7, #12
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	f005 fef9 	bl	8006cdc <xQueueGenericSendFromISR>
			portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8000eea:	68bb      	ldr	r3, [r7, #8]
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d007      	beq.n	8000f00 <HAL_CAN_RxFifo1MsgPendingCallback+0x6c>
 8000ef0:	4b07      	ldr	r3, [pc, #28]	@ (8000f10 <HAL_CAN_RxFifo1MsgPendingCallback+0x7c>)
 8000ef2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000ef6:	601a      	str	r2, [r3, #0]
 8000ef8:	f3bf 8f4f 	dsb	sy
 8000efc:	f3bf 8f6f 	isb	sy

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8000f00:	bf00      	nop
 8000f02:	3740      	adds	r7, #64	@ 0x40
 8000f04:	46bd      	mov	sp, r7
 8000f06:	bd80      	pop	{r7, pc}
 8000f08:	40006400 	.word	0x40006400
 8000f0c:	200002a0 	.word	0x200002a0
 8000f10:	e000ed04 	.word	0xe000ed04

08000f14 <vTimerCallback>:

/***************************** Timer Callback Request Inverter Data *****************************/
void vTimerCallback(xTimerHandle xTimer)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b082      	sub	sp, #8
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
	// Inverter Sync Message
	sendSync(&hcan1);
 8000f1c:	4803      	ldr	r0, [pc, #12]	@ (8000f2c <vTimerCallback+0x18>)
 8000f1e:	f7ff fb35 	bl	800058c <sendSync>
}
 8000f22:	bf00      	nop
 8000f24:	3708      	adds	r7, #8
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bd80      	pop	{r7, pc}
 8000f2a:	bf00      	nop
 8000f2c:	20000094 	.word	0x20000094

08000f30 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f30:	b590      	push	{r4, r7, lr}
 8000f32:	b089      	sub	sp, #36	@ 0x24
 8000f34:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f36:	f001 fcc4 	bl	80028c2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f3a:	f000 f94f 	bl	80011dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f3e:	f000 fbf9 	bl	8001734 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000f42:	f000 f9b5 	bl	80012b0 <MX_ADC1_Init>
  MX_CAN1_Init();
 8000f46:	f000 fa31 	bl	80013ac <MX_CAN1_Init>
  MX_CAN2_Init();
 8000f4a:	f000 fa65 	bl	8001418 <MX_CAN2_Init>
  MX_TIM1_Init();
 8000f4e:	f000 fa99 	bl	8001484 <MX_TIM1_Init>
  MX_TIM8_Init();
 8000f52:	f000 fb43 	bl	80015dc <MX_TIM8_Init>
  /* USER CODE BEGIN 2 */

  // Initialize CAN1
  initializeCAN(&hcan1);
 8000f56:	4885      	ldr	r0, [pc, #532]	@ (800116c <main+0x23c>)
 8000f58:	f7ff faea 	bl	8000530 <initializeCAN>

  // CAN FAULT State -> Good
  HAL_GPIO_WritePin(CAN_FAULT_PORT, CAN_FAULT_PIN, NO_FAULT_STATE);
 8000f5c:	4b84      	ldr	r3, [pc, #528]	@ (8001170 <main+0x240>)
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	2110      	movs	r1, #16
 8000f62:	2201      	movs	r2, #1
 8000f64:	4618      	mov	r0, r3
 8000f66:	f003 fa2b 	bl	80043c0 <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(TEMP_SENSE_CAN_FAULT_PORT, TEMP_SENSE_CAN_FAULT_PIN, NO_FAULT_STATE);
 8000f6a:	4b82      	ldr	r3, [pc, #520]	@ (8001174 <main+0x244>)
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	2120      	movs	r1, #32
 8000f70:	2201      	movs	r2, #1
 8000f72:	4618      	mov	r0, r3
 8000f74:	f003 fa24 	bl	80043c0 <HAL_GPIO_WritePin>

  // Enable CAN 1 Transreceiver
  HAL_GPIO_WritePin(CAN_ENABLE_1_PORT, CAN_ENABLE_1_PIN, CAN_ENABLE);
 8000f78:	4b7f      	ldr	r3, [pc, #508]	@ (8001178 <main+0x248>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000f80:	2200      	movs	r2, #0
 8000f82:	4618      	mov	r0, r3
 8000f84:	f003 fa1c 	bl	80043c0 <HAL_GPIO_WritePin>

  /***************************** Queue Creation *****************************/

  lowPriorityQueue = xQueueCreate(7, sizeof(CAN_MsgHeaderTypedef));
 8000f88:	2200      	movs	r2, #0
 8000f8a:	2110      	movs	r1, #16
 8000f8c:	2007      	movs	r0, #7
 8000f8e:	f005 fd2b 	bl	80069e8 <xQueueGenericCreate>
 8000f92:	4603      	mov	r3, r0
 8000f94:	4a79      	ldr	r2, [pc, #484]	@ (800117c <main+0x24c>)
 8000f96:	6013      	str	r3, [r2, #0]

  if (lowPriorityQueue == NULL)
 8000f98:	4b78      	ldr	r3, [pc, #480]	@ (800117c <main+0x24c>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d101      	bne.n	8000fa4 <main+0x74>
  {
	  Error_Handler();
 8000fa0:	f000 fffc 	bl	8001f9c <Error_Handler>
  }

  highPriorityQueue = xQueueCreate(2, sizeof(CAN_MsgHeaderTypedef));
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	2110      	movs	r1, #16
 8000fa8:	2002      	movs	r0, #2
 8000faa:	f005 fd1d 	bl	80069e8 <xQueueGenericCreate>
 8000fae:	4603      	mov	r3, r0
 8000fb0:	4a73      	ldr	r2, [pc, #460]	@ (8001180 <main+0x250>)
 8000fb2:	6013      	str	r3, [r2, #0]

  if (highPriorityQueue == NULL)
 8000fb4:	4b72      	ldr	r3, [pc, #456]	@ (8001180 <main+0x250>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d101      	bne.n	8000fc0 <main+0x90>
  {
	  Error_Handler();
 8000fbc:	f000 ffee 	bl	8001f9c <Error_Handler>
  }

  /***************************** Timer Creation *****************************/
  xTimer = xTimerCreate("Sync_Timer", pdMS_TO_TICKS(SYNC_PERIOD), pdTRUE, (void*)0, vTimerCallback);
 8000fc0:	4b70      	ldr	r3, [pc, #448]	@ (8001184 <main+0x254>)
 8000fc2:	9300      	str	r3, [sp, #0]
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	2201      	movs	r2, #1
 8000fc8:	2196      	movs	r1, #150	@ 0x96
 8000fca:	486f      	ldr	r0, [pc, #444]	@ (8001188 <main+0x258>)
 8000fcc:	f007 fab0 	bl	8008530 <xTimerCreate>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	4a6e      	ldr	r2, [pc, #440]	@ (800118c <main+0x25c>)
 8000fd4:	6013      	str	r3, [r2, #0]

  xTimerStart(xTimer, 0);
 8000fd6:	4b6d      	ldr	r3, [pc, #436]	@ (800118c <main+0x25c>)
 8000fd8:	681c      	ldr	r4, [r3, #0]
 8000fda:	f006 fd0b 	bl	80079f4 <xTaskGetTickCount>
 8000fde:	4602      	mov	r2, r0
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	9300      	str	r3, [sp, #0]
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	2101      	movs	r1, #1
 8000fe8:	4620      	mov	r0, r4
 8000fea:	f007 fafd 	bl	80085e8 <xTimerGenericCommand>

  /***************************** Task Creation *****************************/

  xReturned = xTaskCreate(Task1_Handler, "Node_Guarding", 200, NULL, tskIDLE_PRIORITY + 3, &task1Handle);
 8000fee:	4b68      	ldr	r3, [pc, #416]	@ (8001190 <main+0x260>)
 8000ff0:	9301      	str	r3, [sp, #4]
 8000ff2:	2303      	movs	r3, #3
 8000ff4:	9300      	str	r3, [sp, #0]
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	22c8      	movs	r2, #200	@ 0xc8
 8000ffa:	4966      	ldr	r1, [pc, #408]	@ (8001194 <main+0x264>)
 8000ffc:	4866      	ldr	r0, [pc, #408]	@ (8001198 <main+0x268>)
 8000ffe:	f006 f9ab 	bl	8007358 <xTaskCreate>
 8001002:	4603      	mov	r3, r0
 8001004:	4a65      	ldr	r2, [pc, #404]	@ (800119c <main+0x26c>)
 8001006:	6013      	str	r3, [r2, #0]
  configASSERT(xReturned == pdPASS);
 8001008:	4b64      	ldr	r3, [pc, #400]	@ (800119c <main+0x26c>)
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	2b01      	cmp	r3, #1
 800100e:	d00d      	beq.n	800102c <main+0xfc>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8001010:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001014:	b672      	cpsid	i
 8001016:	f383 8811 	msr	BASEPRI, r3
 800101a:	f3bf 8f6f 	isb	sy
 800101e:	f3bf 8f4f 	dsb	sy
 8001022:	b662      	cpsie	i
 8001024:	617b      	str	r3, [r7, #20]
            "	isb														\n"\
            "	dsb														\n"\
            "	cpsie i													\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8001026:	bf00      	nop
 8001028:	bf00      	nop
 800102a:	e7fd      	b.n	8001028 <main+0xf8>

  xReturned = xTaskCreate(Task2_Handler, "Torque_Control", 200, NULL, tskIDLE_PRIORITY + 2, &task2Handle);
 800102c:	4b5c      	ldr	r3, [pc, #368]	@ (80011a0 <main+0x270>)
 800102e:	9301      	str	r3, [sp, #4]
 8001030:	2302      	movs	r3, #2
 8001032:	9300      	str	r3, [sp, #0]
 8001034:	2300      	movs	r3, #0
 8001036:	22c8      	movs	r2, #200	@ 0xc8
 8001038:	495a      	ldr	r1, [pc, #360]	@ (80011a4 <main+0x274>)
 800103a:	485b      	ldr	r0, [pc, #364]	@ (80011a8 <main+0x278>)
 800103c:	f006 f98c 	bl	8007358 <xTaskCreate>
 8001040:	4603      	mov	r3, r0
 8001042:	4a56      	ldr	r2, [pc, #344]	@ (800119c <main+0x26c>)
 8001044:	6013      	str	r3, [r2, #0]
  configASSERT(xReturned == pdPASS);
 8001046:	4b55      	ldr	r3, [pc, #340]	@ (800119c <main+0x26c>)
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	2b01      	cmp	r3, #1
 800104c:	d00d      	beq.n	800106a <main+0x13a>
        __asm volatile
 800104e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001052:	b672      	cpsid	i
 8001054:	f383 8811 	msr	BASEPRI, r3
 8001058:	f3bf 8f6f 	isb	sy
 800105c:	f3bf 8f4f 	dsb	sy
 8001060:	b662      	cpsie	i
 8001062:	613b      	str	r3, [r7, #16]
    }
 8001064:	bf00      	nop
 8001066:	bf00      	nop
 8001068:	e7fd      	b.n	8001066 <main+0x136>

  xReturned = xTaskCreate(Task3_Handler, "Ignition", 200, NULL, tskIDLE_PRIORITY + 1, &task3Handle);
 800106a:	4b50      	ldr	r3, [pc, #320]	@ (80011ac <main+0x27c>)
 800106c:	9301      	str	r3, [sp, #4]
 800106e:	2301      	movs	r3, #1
 8001070:	9300      	str	r3, [sp, #0]
 8001072:	2300      	movs	r3, #0
 8001074:	22c8      	movs	r2, #200	@ 0xc8
 8001076:	494e      	ldr	r1, [pc, #312]	@ (80011b0 <main+0x280>)
 8001078:	484e      	ldr	r0, [pc, #312]	@ (80011b4 <main+0x284>)
 800107a:	f006 f96d 	bl	8007358 <xTaskCreate>
 800107e:	4603      	mov	r3, r0
 8001080:	4a46      	ldr	r2, [pc, #280]	@ (800119c <main+0x26c>)
 8001082:	6013      	str	r3, [r2, #0]
  configASSERT(xReturned == pdPASS);
 8001084:	4b45      	ldr	r3, [pc, #276]	@ (800119c <main+0x26c>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	2b01      	cmp	r3, #1
 800108a:	d00d      	beq.n	80010a8 <main+0x178>
        __asm volatile
 800108c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001090:	b672      	cpsid	i
 8001092:	f383 8811 	msr	BASEPRI, r3
 8001096:	f3bf 8f6f 	isb	sy
 800109a:	f3bf 8f4f 	dsb	sy
 800109e:	b662      	cpsie	i
 80010a0:	60fb      	str	r3, [r7, #12]
    }
 80010a2:	bf00      	nop
 80010a4:	bf00      	nop
 80010a6:	e7fd      	b.n	80010a4 <main+0x174>

  xReturned = xTaskCreate(Task4_Handler, "Process_CAN_Data", 200, NULL, tskIDLE_PRIORITY + 1, &task4Handle);
 80010a8:	4b43      	ldr	r3, [pc, #268]	@ (80011b8 <main+0x288>)
 80010aa:	9301      	str	r3, [sp, #4]
 80010ac:	2301      	movs	r3, #1
 80010ae:	9300      	str	r3, [sp, #0]
 80010b0:	2300      	movs	r3, #0
 80010b2:	22c8      	movs	r2, #200	@ 0xc8
 80010b4:	4941      	ldr	r1, [pc, #260]	@ (80011bc <main+0x28c>)
 80010b6:	4842      	ldr	r0, [pc, #264]	@ (80011c0 <main+0x290>)
 80010b8:	f006 f94e 	bl	8007358 <xTaskCreate>
 80010bc:	4603      	mov	r3, r0
 80010be:	4a37      	ldr	r2, [pc, #220]	@ (800119c <main+0x26c>)
 80010c0:	6013      	str	r3, [r2, #0]
  configASSERT(xReturned == pdPASS);
 80010c2:	4b36      	ldr	r3, [pc, #216]	@ (800119c <main+0x26c>)
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	2b01      	cmp	r3, #1
 80010c8:	d00d      	beq.n	80010e6 <main+0x1b6>
        __asm volatile
 80010ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80010ce:	b672      	cpsid	i
 80010d0:	f383 8811 	msr	BASEPRI, r3
 80010d4:	f3bf 8f6f 	isb	sy
 80010d8:	f3bf 8f4f 	dsb	sy
 80010dc:	b662      	cpsie	i
 80010de:	60bb      	str	r3, [r7, #8]
    }
 80010e0:	bf00      	nop
 80010e2:	bf00      	nop
 80010e4:	e7fd      	b.n	80010e2 <main+0x1b2>

  xReturned = xTaskCreate(Task5_Handler, "Safety_System_Check", 200, NULL, tskIDLE_PRIORITY + 1, &task5Handle);
 80010e6:	4b37      	ldr	r3, [pc, #220]	@ (80011c4 <main+0x294>)
 80010e8:	9301      	str	r3, [sp, #4]
 80010ea:	2301      	movs	r3, #1
 80010ec:	9300      	str	r3, [sp, #0]
 80010ee:	2300      	movs	r3, #0
 80010f0:	22c8      	movs	r2, #200	@ 0xc8
 80010f2:	4935      	ldr	r1, [pc, #212]	@ (80011c8 <main+0x298>)
 80010f4:	4835      	ldr	r0, [pc, #212]	@ (80011cc <main+0x29c>)
 80010f6:	f006 f92f 	bl	8007358 <xTaskCreate>
 80010fa:	4603      	mov	r3, r0
 80010fc:	4a27      	ldr	r2, [pc, #156]	@ (800119c <main+0x26c>)
 80010fe:	6013      	str	r3, [r2, #0]
  configASSERT(xReturned == pdPASS);
 8001100:	4b26      	ldr	r3, [pc, #152]	@ (800119c <main+0x26c>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	2b01      	cmp	r3, #1
 8001106:	d00d      	beq.n	8001124 <main+0x1f4>
        __asm volatile
 8001108:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800110c:	b672      	cpsid	i
 800110e:	f383 8811 	msr	BASEPRI, r3
 8001112:	f3bf 8f6f 	isb	sy
 8001116:	f3bf 8f4f 	dsb	sy
 800111a:	b662      	cpsie	i
 800111c:	607b      	str	r3, [r7, #4]
    }
 800111e:	bf00      	nop
 8001120:	bf00      	nop
 8001122:	e7fd      	b.n	8001120 <main+0x1f0>

  xReturned = xTaskCreate(Task6_Handler, "Torque_Derate", 200, NULL, tskIDLE_PRIORITY + 1, &task6Handle);
 8001124:	4b2a      	ldr	r3, [pc, #168]	@ (80011d0 <main+0x2a0>)
 8001126:	9301      	str	r3, [sp, #4]
 8001128:	2301      	movs	r3, #1
 800112a:	9300      	str	r3, [sp, #0]
 800112c:	2300      	movs	r3, #0
 800112e:	22c8      	movs	r2, #200	@ 0xc8
 8001130:	4928      	ldr	r1, [pc, #160]	@ (80011d4 <main+0x2a4>)
 8001132:	4829      	ldr	r0, [pc, #164]	@ (80011d8 <main+0x2a8>)
 8001134:	f006 f910 	bl	8007358 <xTaskCreate>
 8001138:	4603      	mov	r3, r0
 800113a:	4a18      	ldr	r2, [pc, #96]	@ (800119c <main+0x26c>)
 800113c:	6013      	str	r3, [r2, #0]
  configASSERT(xReturned == pdPASS);
 800113e:	4b17      	ldr	r3, [pc, #92]	@ (800119c <main+0x26c>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	2b01      	cmp	r3, #1
 8001144:	d00d      	beq.n	8001162 <main+0x232>
        __asm volatile
 8001146:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800114a:	b672      	cpsid	i
 800114c:	f383 8811 	msr	BASEPRI, r3
 8001150:	f3bf 8f6f 	isb	sy
 8001154:	f3bf 8f4f 	dsb	sy
 8001158:	b662      	cpsie	i
 800115a:	603b      	str	r3, [r7, #0]
    }
 800115c:	bf00      	nop
 800115e:	bf00      	nop
 8001160:	e7fd      	b.n	800115e <main+0x22e>

  vTaskStartScheduler();
 8001162:	f006 fae5 	bl	8007730 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001166:	bf00      	nop
 8001168:	e7fd      	b.n	8001166 <main+0x236>
 800116a:	bf00      	nop
 800116c:	20000094 	.word	0x20000094
 8001170:	20000000 	.word	0x20000000
 8001174:	20000004 	.word	0x20000004
 8001178:	20000008 	.word	0x20000008
 800117c:	2000029c 	.word	0x2000029c
 8001180:	200002a0 	.word	0x200002a0
 8001184:	08000f15 	.word	0x08000f15
 8001188:	08009418 	.word	0x08009418
 800118c:	200002a4 	.word	0x200002a4
 8001190:	20000284 	.word	0x20000284
 8001194:	08009424 	.word	0x08009424
 8001198:	080018a1 	.word	0x080018a1
 800119c:	20000280 	.word	0x20000280
 80011a0:	20000288 	.word	0x20000288
 80011a4:	08009434 	.word	0x08009434
 80011a8:	080018d1 	.word	0x080018d1
 80011ac:	2000028c 	.word	0x2000028c
 80011b0:	08009444 	.word	0x08009444
 80011b4:	08001959 	.word	0x08001959
 80011b8:	20000290 	.word	0x20000290
 80011bc:	08009450 	.word	0x08009450
 80011c0:	08001985 	.word	0x08001985
 80011c4:	20000294 	.word	0x20000294
 80011c8:	08009464 	.word	0x08009464
 80011cc:	08001a99 	.word	0x08001a99
 80011d0:	20000298 	.word	0x20000298
 80011d4:	08009478 	.word	0x08009478
 80011d8:	08001af5 	.word	0x08001af5

080011dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b094      	sub	sp, #80	@ 0x50
 80011e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011e2:	f107 031c 	add.w	r3, r7, #28
 80011e6:	2234      	movs	r2, #52	@ 0x34
 80011e8:	2100      	movs	r1, #0
 80011ea:	4618      	mov	r0, r3
 80011ec:	f008 f8c6 	bl	800937c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011f0:	f107 0308 	add.w	r3, r7, #8
 80011f4:	2200      	movs	r2, #0
 80011f6:	601a      	str	r2, [r3, #0]
 80011f8:	605a      	str	r2, [r3, #4]
 80011fa:	609a      	str	r2, [r3, #8]
 80011fc:	60da      	str	r2, [r3, #12]
 80011fe:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001200:	4b29      	ldr	r3, [pc, #164]	@ (80012a8 <SystemClock_Config+0xcc>)
 8001202:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001204:	4a28      	ldr	r2, [pc, #160]	@ (80012a8 <SystemClock_Config+0xcc>)
 8001206:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800120a:	6413      	str	r3, [r2, #64]	@ 0x40
 800120c:	4b26      	ldr	r3, [pc, #152]	@ (80012a8 <SystemClock_Config+0xcc>)
 800120e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001210:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001214:	607b      	str	r3, [r7, #4]
 8001216:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001218:	4b24      	ldr	r3, [pc, #144]	@ (80012ac <SystemClock_Config+0xd0>)
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001220:	4a22      	ldr	r2, [pc, #136]	@ (80012ac <SystemClock_Config+0xd0>)
 8001222:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001226:	6013      	str	r3, [r2, #0]
 8001228:	4b20      	ldr	r3, [pc, #128]	@ (80012ac <SystemClock_Config+0xd0>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001230:	603b      	str	r3, [r7, #0]
 8001232:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001234:	2302      	movs	r3, #2
 8001236:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001238:	2301      	movs	r3, #1
 800123a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800123c:	2310      	movs	r3, #16
 800123e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001240:	2302      	movs	r3, #2
 8001242:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001244:	2300      	movs	r3, #0
 8001246:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001248:	2308      	movs	r3, #8
 800124a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 800124c:	23b4      	movs	r3, #180	@ 0xb4
 800124e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001250:	2302      	movs	r3, #2
 8001252:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001254:	2302      	movs	r3, #2
 8001256:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001258:	2302      	movs	r3, #2
 800125a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800125c:	f107 031c 	add.w	r3, r7, #28
 8001260:	4618      	mov	r0, r3
 8001262:	f003 f8c7 	bl	80043f4 <HAL_RCC_OscConfig>
 8001266:	4603      	mov	r3, r0
 8001268:	2b00      	cmp	r3, #0
 800126a:	d001      	beq.n	8001270 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800126c:	f000 fe96 	bl	8001f9c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001270:	230f      	movs	r3, #15
 8001272:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001274:	2302      	movs	r3, #2
 8001276:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8001278:	2380      	movs	r3, #128	@ 0x80
 800127a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800127c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001280:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001282:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001286:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001288:	f107 0308 	add.w	r3, r7, #8
 800128c:	2102      	movs	r1, #2
 800128e:	4618      	mov	r0, r3
 8001290:	f003 fb5e 	bl	8004950 <HAL_RCC_ClockConfig>
 8001294:	4603      	mov	r3, r0
 8001296:	2b00      	cmp	r3, #0
 8001298:	d001      	beq.n	800129e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800129a:	f000 fe7f 	bl	8001f9c <Error_Handler>
  }
}
 800129e:	bf00      	nop
 80012a0:	3750      	adds	r7, #80	@ 0x50
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bd80      	pop	{r7, pc}
 80012a6:	bf00      	nop
 80012a8:	40023800 	.word	0x40023800
 80012ac:	40007000 	.word	0x40007000

080012b0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b084      	sub	sp, #16
 80012b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80012b6:	463b      	mov	r3, r7
 80012b8:	2200      	movs	r2, #0
 80012ba:	601a      	str	r2, [r3, #0]
 80012bc:	605a      	str	r2, [r3, #4]
 80012be:	609a      	str	r2, [r3, #8]
 80012c0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80012c2:	4b37      	ldr	r3, [pc, #220]	@ (80013a0 <MX_ADC1_Init+0xf0>)
 80012c4:	4a37      	ldr	r2, [pc, #220]	@ (80013a4 <MX_ADC1_Init+0xf4>)
 80012c6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 80012c8:	4b35      	ldr	r3, [pc, #212]	@ (80013a0 <MX_ADC1_Init+0xf0>)
 80012ca:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80012ce:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_10B;
 80012d0:	4b33      	ldr	r3, [pc, #204]	@ (80013a0 <MX_ADC1_Init+0xf0>)
 80012d2:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80012d6:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80012d8:	4b31      	ldr	r3, [pc, #196]	@ (80013a0 <MX_ADC1_Init+0xf0>)
 80012da:	2201      	movs	r2, #1
 80012dc:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80012de:	4b30      	ldr	r3, [pc, #192]	@ (80013a0 <MX_ADC1_Init+0xf0>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80012e4:	4b2e      	ldr	r3, [pc, #184]	@ (80013a0 <MX_ADC1_Init+0xf0>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80012ec:	4b2c      	ldr	r3, [pc, #176]	@ (80013a0 <MX_ADC1_Init+0xf0>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80012f2:	4b2b      	ldr	r3, [pc, #172]	@ (80013a0 <MX_ADC1_Init+0xf0>)
 80012f4:	4a2c      	ldr	r2, [pc, #176]	@ (80013a8 <MX_ADC1_Init+0xf8>)
 80012f6:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80012f8:	4b29      	ldr	r3, [pc, #164]	@ (80013a0 <MX_ADC1_Init+0xf0>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 4;
 80012fe:	4b28      	ldr	r3, [pc, #160]	@ (80013a0 <MX_ADC1_Init+0xf0>)
 8001300:	2204      	movs	r2, #4
 8001302:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001304:	4b26      	ldr	r3, [pc, #152]	@ (80013a0 <MX_ADC1_Init+0xf0>)
 8001306:	2200      	movs	r2, #0
 8001308:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800130c:	4b24      	ldr	r3, [pc, #144]	@ (80013a0 <MX_ADC1_Init+0xf0>)
 800130e:	2201      	movs	r2, #1
 8001310:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001312:	4823      	ldr	r0, [pc, #140]	@ (80013a0 <MX_ADC1_Init+0xf0>)
 8001314:	f001 fb02 	bl	800291c <HAL_ADC_Init>
 8001318:	4603      	mov	r3, r0
 800131a:	2b00      	cmp	r3, #0
 800131c:	d001      	beq.n	8001322 <MX_ADC1_Init+0x72>
  {
    Error_Handler();
 800131e:	f000 fe3d 	bl	8001f9c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001322:	2300      	movs	r3, #0
 8001324:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001326:	2301      	movs	r3, #1
 8001328:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 800132a:	2303      	movs	r3, #3
 800132c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800132e:	463b      	mov	r3, r7
 8001330:	4619      	mov	r1, r3
 8001332:	481b      	ldr	r0, [pc, #108]	@ (80013a0 <MX_ADC1_Init+0xf0>)
 8001334:	f001 fcd0 	bl	8002cd8 <HAL_ADC_ConfigChannel>
 8001338:	4603      	mov	r3, r0
 800133a:	2b00      	cmp	r3, #0
 800133c:	d001      	beq.n	8001342 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 800133e:	f000 fe2d 	bl	8001f9c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001342:	2301      	movs	r3, #1
 8001344:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001346:	2302      	movs	r3, #2
 8001348:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800134a:	463b      	mov	r3, r7
 800134c:	4619      	mov	r1, r3
 800134e:	4814      	ldr	r0, [pc, #80]	@ (80013a0 <MX_ADC1_Init+0xf0>)
 8001350:	f001 fcc2 	bl	8002cd8 <HAL_ADC_ConfigChannel>
 8001354:	4603      	mov	r3, r0
 8001356:	2b00      	cmp	r3, #0
 8001358:	d001      	beq.n	800135e <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 800135a:	f000 fe1f 	bl	8001f9c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800135e:	2302      	movs	r3, #2
 8001360:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001362:	2303      	movs	r3, #3
 8001364:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001366:	463b      	mov	r3, r7
 8001368:	4619      	mov	r1, r3
 800136a:	480d      	ldr	r0, [pc, #52]	@ (80013a0 <MX_ADC1_Init+0xf0>)
 800136c:	f001 fcb4 	bl	8002cd8 <HAL_ADC_ConfigChannel>
 8001370:	4603      	mov	r3, r0
 8001372:	2b00      	cmp	r3, #0
 8001374:	d001      	beq.n	800137a <MX_ADC1_Init+0xca>
  {
    Error_Handler();
 8001376:	f000 fe11 	bl	8001f9c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800137a:	2303      	movs	r3, #3
 800137c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 800137e:	2304      	movs	r3, #4
 8001380:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001382:	463b      	mov	r3, r7
 8001384:	4619      	mov	r1, r3
 8001386:	4806      	ldr	r0, [pc, #24]	@ (80013a0 <MX_ADC1_Init+0xf0>)
 8001388:	f001 fca6 	bl	8002cd8 <HAL_ADC_ConfigChannel>
 800138c:	4603      	mov	r3, r0
 800138e:	2b00      	cmp	r3, #0
 8001390:	d001      	beq.n	8001396 <MX_ADC1_Init+0xe6>
  {
    Error_Handler();
 8001392:	f000 fe03 	bl	8001f9c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001396:	bf00      	nop
 8001398:	3710      	adds	r7, #16
 800139a:	46bd      	mov	sp, r7
 800139c:	bd80      	pop	{r7, pc}
 800139e:	bf00      	nop
 80013a0:	2000004c 	.word	0x2000004c
 80013a4:	40012000 	.word	0x40012000
 80013a8:	0f000001 	.word	0x0f000001

080013ac <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80013b0:	4b17      	ldr	r3, [pc, #92]	@ (8001410 <MX_CAN1_Init+0x64>)
 80013b2:	4a18      	ldr	r2, [pc, #96]	@ (8001414 <MX_CAN1_Init+0x68>)
 80013b4:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 5;
 80013b6:	4b16      	ldr	r3, [pc, #88]	@ (8001410 <MX_CAN1_Init+0x64>)
 80013b8:	2205      	movs	r2, #5
 80013ba:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80013bc:	4b14      	ldr	r3, [pc, #80]	@ (8001410 <MX_CAN1_Init+0x64>)
 80013be:	2200      	movs	r2, #0
 80013c0:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80013c2:	4b13      	ldr	r3, [pc, #76]	@ (8001410 <MX_CAN1_Init+0x64>)
 80013c4:	2200      	movs	r2, #0
 80013c6:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_15TQ;
 80013c8:	4b11      	ldr	r3, [pc, #68]	@ (8001410 <MX_CAN1_Init+0x64>)
 80013ca:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 80013ce:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 80013d0:	4b0f      	ldr	r3, [pc, #60]	@ (8001410 <MX_CAN1_Init+0x64>)
 80013d2:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80013d6:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80013d8:	4b0d      	ldr	r3, [pc, #52]	@ (8001410 <MX_CAN1_Init+0x64>)
 80013da:	2200      	movs	r2, #0
 80013dc:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80013de:	4b0c      	ldr	r3, [pc, #48]	@ (8001410 <MX_CAN1_Init+0x64>)
 80013e0:	2200      	movs	r2, #0
 80013e2:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80013e4:	4b0a      	ldr	r3, [pc, #40]	@ (8001410 <MX_CAN1_Init+0x64>)
 80013e6:	2200      	movs	r2, #0
 80013e8:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80013ea:	4b09      	ldr	r3, [pc, #36]	@ (8001410 <MX_CAN1_Init+0x64>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80013f0:	4b07      	ldr	r3, [pc, #28]	@ (8001410 <MX_CAN1_Init+0x64>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80013f6:	4b06      	ldr	r3, [pc, #24]	@ (8001410 <MX_CAN1_Init+0x64>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80013fc:	4804      	ldr	r0, [pc, #16]	@ (8001410 <MX_CAN1_Init+0x64>)
 80013fe:	f001 febb 	bl	8003178 <HAL_CAN_Init>
 8001402:	4603      	mov	r3, r0
 8001404:	2b00      	cmp	r3, #0
 8001406:	d001      	beq.n	800140c <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8001408:	f000 fdc8 	bl	8001f9c <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 800140c:	bf00      	nop
 800140e:	bd80      	pop	{r7, pc}
 8001410:	20000094 	.word	0x20000094
 8001414:	40006400 	.word	0x40006400

08001418 <MX_CAN2_Init>:
  * @brief CAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN2_Init(void)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 800141c:	4b17      	ldr	r3, [pc, #92]	@ (800147c <MX_CAN2_Init+0x64>)
 800141e:	4a18      	ldr	r2, [pc, #96]	@ (8001480 <MX_CAN2_Init+0x68>)
 8001420:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 5;
 8001422:	4b16      	ldr	r3, [pc, #88]	@ (800147c <MX_CAN2_Init+0x64>)
 8001424:	2205      	movs	r2, #5
 8001426:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 8001428:	4b14      	ldr	r3, [pc, #80]	@ (800147c <MX_CAN2_Init+0x64>)
 800142a:	2200      	movs	r2, #0
 800142c:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800142e:	4b13      	ldr	r3, [pc, #76]	@ (800147c <MX_CAN2_Init+0x64>)
 8001430:	2200      	movs	r2, #0
 8001432:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_15TQ;
 8001434:	4b11      	ldr	r3, [pc, #68]	@ (800147c <MX_CAN2_Init+0x64>)
 8001436:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 800143a:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_2TQ;
 800143c:	4b0f      	ldr	r3, [pc, #60]	@ (800147c <MX_CAN2_Init+0x64>)
 800143e:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8001442:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 8001444:	4b0d      	ldr	r3, [pc, #52]	@ (800147c <MX_CAN2_Init+0x64>)
 8001446:	2200      	movs	r2, #0
 8001448:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 800144a:	4b0c      	ldr	r3, [pc, #48]	@ (800147c <MX_CAN2_Init+0x64>)
 800144c:	2200      	movs	r2, #0
 800144e:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 8001450:	4b0a      	ldr	r3, [pc, #40]	@ (800147c <MX_CAN2_Init+0x64>)
 8001452:	2200      	movs	r2, #0
 8001454:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 8001456:	4b09      	ldr	r3, [pc, #36]	@ (800147c <MX_CAN2_Init+0x64>)
 8001458:	2200      	movs	r2, #0
 800145a:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 800145c:	4b07      	ldr	r3, [pc, #28]	@ (800147c <MX_CAN2_Init+0x64>)
 800145e:	2200      	movs	r2, #0
 8001460:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 8001462:	4b06      	ldr	r3, [pc, #24]	@ (800147c <MX_CAN2_Init+0x64>)
 8001464:	2200      	movs	r2, #0
 8001466:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 8001468:	4804      	ldr	r0, [pc, #16]	@ (800147c <MX_CAN2_Init+0x64>)
 800146a:	f001 fe85 	bl	8003178 <HAL_CAN_Init>
 800146e:	4603      	mov	r3, r0
 8001470:	2b00      	cmp	r3, #0
 8001472:	d001      	beq.n	8001478 <MX_CAN2_Init+0x60>
  {
    Error_Handler();
 8001474:	f000 fd92 	bl	8001f9c <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 8001478:	bf00      	nop
 800147a:	bd80      	pop	{r7, pc}
 800147c:	200000bc 	.word	0x200000bc
 8001480:	40006800 	.word	0x40006800

08001484 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b09a      	sub	sp, #104	@ 0x68
 8001488:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800148a:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800148e:	2200      	movs	r2, #0
 8001490:	601a      	str	r2, [r3, #0]
 8001492:	605a      	str	r2, [r3, #4]
 8001494:	609a      	str	r2, [r3, #8]
 8001496:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001498:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800149c:	2200      	movs	r2, #0
 800149e:	601a      	str	r2, [r3, #0]
 80014a0:	605a      	str	r2, [r3, #4]
 80014a2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80014a4:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80014a8:	2200      	movs	r2, #0
 80014aa:	601a      	str	r2, [r3, #0]
 80014ac:	605a      	str	r2, [r3, #4]
 80014ae:	609a      	str	r2, [r3, #8]
 80014b0:	60da      	str	r2, [r3, #12]
 80014b2:	611a      	str	r2, [r3, #16]
 80014b4:	615a      	str	r2, [r3, #20]
 80014b6:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80014b8:	1d3b      	adds	r3, r7, #4
 80014ba:	222c      	movs	r2, #44	@ 0x2c
 80014bc:	2100      	movs	r1, #0
 80014be:	4618      	mov	r0, r3
 80014c0:	f007 ff5c 	bl	800937c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80014c4:	4b43      	ldr	r3, [pc, #268]	@ (80015d4 <MX_TIM1_Init+0x150>)
 80014c6:	4a44      	ldr	r2, [pc, #272]	@ (80015d8 <MX_TIM1_Init+0x154>)
 80014c8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 18000-1;
 80014ca:	4b42      	ldr	r3, [pc, #264]	@ (80015d4 <MX_TIM1_Init+0x150>)
 80014cc:	f244 624f 	movw	r2, #17999	@ 0x464f
 80014d0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014d2:	4b40      	ldr	r3, [pc, #256]	@ (80015d4 <MX_TIM1_Init+0x150>)
 80014d4:	2200      	movs	r2, #0
 80014d6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 10000-1;
 80014d8:	4b3e      	ldr	r3, [pc, #248]	@ (80015d4 <MX_TIM1_Init+0x150>)
 80014da:	f242 720f 	movw	r2, #9999	@ 0x270f
 80014de:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014e0:	4b3c      	ldr	r3, [pc, #240]	@ (80015d4 <MX_TIM1_Init+0x150>)
 80014e2:	2200      	movs	r2, #0
 80014e4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80014e6:	4b3b      	ldr	r3, [pc, #236]	@ (80015d4 <MX_TIM1_Init+0x150>)
 80014e8:	2200      	movs	r2, #0
 80014ea:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014ec:	4b39      	ldr	r3, [pc, #228]	@ (80015d4 <MX_TIM1_Init+0x150>)
 80014ee:	2200      	movs	r2, #0
 80014f0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80014f2:	4838      	ldr	r0, [pc, #224]	@ (80015d4 <MX_TIM1_Init+0x150>)
 80014f4:	f003 fc30 	bl	8004d58 <HAL_TIM_Base_Init>
 80014f8:	4603      	mov	r3, r0
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d001      	beq.n	8001502 <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 80014fe:	f000 fd4d 	bl	8001f9c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001502:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001506:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001508:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800150c:	4619      	mov	r1, r3
 800150e:	4831      	ldr	r0, [pc, #196]	@ (80015d4 <MX_TIM1_Init+0x150>)
 8001510:	f004 fb74 	bl	8005bfc <HAL_TIM_ConfigClockSource>
 8001514:	4603      	mov	r3, r0
 8001516:	2b00      	cmp	r3, #0
 8001518:	d001      	beq.n	800151e <MX_TIM1_Init+0x9a>
  {
    Error_Handler();
 800151a:	f000 fd3f 	bl	8001f9c <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 800151e:	482d      	ldr	r0, [pc, #180]	@ (80015d4 <MX_TIM1_Init+0x150>)
 8001520:	f003 fcea 	bl	8004ef8 <HAL_TIM_OC_Init>
 8001524:	4603      	mov	r3, r0
 8001526:	2b00      	cmp	r3, #0
 8001528:	d001      	beq.n	800152e <MX_TIM1_Init+0xaa>
  {
    Error_Handler();
 800152a:	f000 fd37 	bl	8001f9c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800152e:	2300      	movs	r3, #0
 8001530:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001532:	2300      	movs	r3, #0
 8001534:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001536:	2300      	movs	r3, #0
 8001538:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800153a:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800153e:	4619      	mov	r1, r3
 8001540:	4824      	ldr	r0, [pc, #144]	@ (80015d4 <MX_TIM1_Init+0x150>)
 8001542:	f005 f801 	bl	8006548 <HAL_TIMEx_MasterConfigSynchronization>
 8001546:	4603      	mov	r3, r0
 8001548:	2b00      	cmp	r3, #0
 800154a:	d001      	beq.n	8001550 <MX_TIM1_Init+0xcc>
  {
    Error_Handler();
 800154c:	f000 fd26 	bl	8001f9c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8001550:	2300      	movs	r3, #0
 8001552:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 10000-1;
 8001554:	f242 730f 	movw	r3, #9999	@ 0x270f
 8001558:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800155a:	2300      	movs	r3, #0
 800155c:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800155e:	2300      	movs	r3, #0
 8001560:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001562:	2300      	movs	r3, #0
 8001564:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001566:	2300      	movs	r3, #0
 8001568:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800156a:	2300      	movs	r3, #0
 800156c:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800156e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001572:	2200      	movs	r2, #0
 8001574:	4619      	mov	r1, r3
 8001576:	4817      	ldr	r0, [pc, #92]	@ (80015d4 <MX_TIM1_Init+0x150>)
 8001578:	f004 f9b2 	bl	80058e0 <HAL_TIM_OC_ConfigChannel>
 800157c:	4603      	mov	r3, r0
 800157e:	2b00      	cmp	r3, #0
 8001580:	d001      	beq.n	8001586 <MX_TIM1_Init+0x102>
  {
    Error_Handler();
 8001582:	f000 fd0b 	bl	8001f9c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001586:	2300      	movs	r3, #0
 8001588:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800158a:	2300      	movs	r3, #0
 800158c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800158e:	2300      	movs	r3, #0
 8001590:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001592:	2300      	movs	r3, #0
 8001594:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001596:	2300      	movs	r3, #0
 8001598:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800159a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800159e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80015a0:	2300      	movs	r3, #0
 80015a2:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80015a4:	2300      	movs	r3, #0
 80015a6:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80015a8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80015ac:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80015ae:	2300      	movs	r3, #0
 80015b0:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80015b2:	2300      	movs	r3, #0
 80015b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80015b6:	1d3b      	adds	r3, r7, #4
 80015b8:	4619      	mov	r1, r3
 80015ba:	4806      	ldr	r0, [pc, #24]	@ (80015d4 <MX_TIM1_Init+0x150>)
 80015bc:	f005 f852 	bl	8006664 <HAL_TIMEx_ConfigBreakDeadTime>
 80015c0:	4603      	mov	r3, r0
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d001      	beq.n	80015ca <MX_TIM1_Init+0x146>
  {
    Error_Handler();
 80015c6:	f000 fce9 	bl	8001f9c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80015ca:	bf00      	nop
 80015cc:	3768      	adds	r7, #104	@ 0x68
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}
 80015d2:	bf00      	nop
 80015d4:	200000e4 	.word	0x200000e4
 80015d8:	40010000 	.word	0x40010000

080015dc <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b09a      	sub	sp, #104	@ 0x68
 80015e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80015e2:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80015e6:	2200      	movs	r2, #0
 80015e8:	601a      	str	r2, [r3, #0]
 80015ea:	605a      	str	r2, [r3, #4]
 80015ec:	609a      	str	r2, [r3, #8]
 80015ee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015f0:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80015f4:	2200      	movs	r2, #0
 80015f6:	601a      	str	r2, [r3, #0]
 80015f8:	605a      	str	r2, [r3, #4]
 80015fa:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80015fc:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001600:	2200      	movs	r2, #0
 8001602:	601a      	str	r2, [r3, #0]
 8001604:	605a      	str	r2, [r3, #4]
 8001606:	609a      	str	r2, [r3, #8]
 8001608:	60da      	str	r2, [r3, #12]
 800160a:	611a      	str	r2, [r3, #16]
 800160c:	615a      	str	r2, [r3, #20]
 800160e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001610:	1d3b      	adds	r3, r7, #4
 8001612:	222c      	movs	r2, #44	@ 0x2c
 8001614:	2100      	movs	r1, #0
 8001616:	4618      	mov	r0, r3
 8001618:	f007 feb0 	bl	800937c <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800161c:	4b43      	ldr	r3, [pc, #268]	@ (800172c <MX_TIM8_Init+0x150>)
 800161e:	4a44      	ldr	r2, [pc, #272]	@ (8001730 <MX_TIM8_Init+0x154>)
 8001620:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 36-1;
 8001622:	4b42      	ldr	r3, [pc, #264]	@ (800172c <MX_TIM8_Init+0x150>)
 8001624:	2223      	movs	r2, #35	@ 0x23
 8001626:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001628:	4b40      	ldr	r3, [pc, #256]	@ (800172c <MX_TIM8_Init+0x150>)
 800162a:	2200      	movs	r2, #0
 800162c:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 100-1;
 800162e:	4b3f      	ldr	r3, [pc, #252]	@ (800172c <MX_TIM8_Init+0x150>)
 8001630:	2263      	movs	r2, #99	@ 0x63
 8001632:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001634:	4b3d      	ldr	r3, [pc, #244]	@ (800172c <MX_TIM8_Init+0x150>)
 8001636:	2200      	movs	r2, #0
 8001638:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800163a:	4b3c      	ldr	r3, [pc, #240]	@ (800172c <MX_TIM8_Init+0x150>)
 800163c:	2200      	movs	r2, #0
 800163e:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001640:	4b3a      	ldr	r3, [pc, #232]	@ (800172c <MX_TIM8_Init+0x150>)
 8001642:	2200      	movs	r2, #0
 8001644:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001646:	4839      	ldr	r0, [pc, #228]	@ (800172c <MX_TIM8_Init+0x150>)
 8001648:	f003 fb86 	bl	8004d58 <HAL_TIM_Base_Init>
 800164c:	4603      	mov	r3, r0
 800164e:	2b00      	cmp	r3, #0
 8001650:	d001      	beq.n	8001656 <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 8001652:	f000 fca3 	bl	8001f9c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001656:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800165a:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 800165c:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8001660:	4619      	mov	r1, r3
 8001662:	4832      	ldr	r0, [pc, #200]	@ (800172c <MX_TIM8_Init+0x150>)
 8001664:	f004 faca 	bl	8005bfc <HAL_TIM_ConfigClockSource>
 8001668:	4603      	mov	r3, r0
 800166a:	2b00      	cmp	r3, #0
 800166c:	d001      	beq.n	8001672 <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 800166e:	f000 fc95 	bl	8001f9c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8001672:	482e      	ldr	r0, [pc, #184]	@ (800172c <MX_TIM8_Init+0x150>)
 8001674:	f003 feb8 	bl	80053e8 <HAL_TIM_PWM_Init>
 8001678:	4603      	mov	r3, r0
 800167a:	2b00      	cmp	r3, #0
 800167c:	d001      	beq.n	8001682 <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 800167e:	f000 fc8d 	bl	8001f9c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001682:	2300      	movs	r3, #0
 8001684:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001686:	2300      	movs	r3, #0
 8001688:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800168a:	2300      	movs	r3, #0
 800168c:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800168e:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001692:	4619      	mov	r1, r3
 8001694:	4825      	ldr	r0, [pc, #148]	@ (800172c <MX_TIM8_Init+0x150>)
 8001696:	f004 ff57 	bl	8006548 <HAL_TIMEx_MasterConfigSynchronization>
 800169a:	4603      	mov	r3, r0
 800169c:	2b00      	cmp	r3, #0
 800169e:	d001      	beq.n	80016a4 <MX_TIM8_Init+0xc8>
  {
    Error_Handler();
 80016a0:	f000 fc7c 	bl	8001f9c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80016a4:	2360      	movs	r3, #96	@ 0x60
 80016a6:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 80016a8:	2300      	movs	r3, #0
 80016aa:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80016ac:	2300      	movs	r3, #0
 80016ae:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80016b0:	2300      	movs	r3, #0
 80016b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80016b4:	2300      	movs	r3, #0
 80016b6:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80016b8:	2300      	movs	r3, #0
 80016ba:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80016bc:	2300      	movs	r3, #0
 80016be:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80016c0:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80016c4:	2208      	movs	r2, #8
 80016c6:	4619      	mov	r1, r3
 80016c8:	4818      	ldr	r0, [pc, #96]	@ (800172c <MX_TIM8_Init+0x150>)
 80016ca:	f004 f983 	bl	80059d4 <HAL_TIM_PWM_ConfigChannel>
 80016ce:	4603      	mov	r3, r0
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d001      	beq.n	80016d8 <MX_TIM8_Init+0xfc>
  {
    Error_Handler();
 80016d4:	f000 fc62 	bl	8001f9c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80016d8:	2300      	movs	r3, #0
 80016da:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80016dc:	2300      	movs	r3, #0
 80016de:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80016e0:	2300      	movs	r3, #0
 80016e2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80016e4:	2300      	movs	r3, #0
 80016e6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80016e8:	2300      	movs	r3, #0
 80016ea:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80016ec:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80016f0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80016f2:	2300      	movs	r3, #0
 80016f4:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80016f6:	2300      	movs	r3, #0
 80016f8:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80016fa:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80016fe:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001700:	2300      	movs	r3, #0
 8001702:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001704:	2300      	movs	r3, #0
 8001706:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8001708:	1d3b      	adds	r3, r7, #4
 800170a:	4619      	mov	r1, r3
 800170c:	4807      	ldr	r0, [pc, #28]	@ (800172c <MX_TIM8_Init+0x150>)
 800170e:	f004 ffa9 	bl	8006664 <HAL_TIMEx_ConfigBreakDeadTime>
 8001712:	4603      	mov	r3, r0
 8001714:	2b00      	cmp	r3, #0
 8001716:	d001      	beq.n	800171c <MX_TIM8_Init+0x140>
  {
    Error_Handler();
 8001718:	f000 fc40 	bl	8001f9c <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 800171c:	4803      	ldr	r0, [pc, #12]	@ (800172c <MX_TIM8_Init+0x150>)
 800171e:	f000 fda1 	bl	8002264 <HAL_TIM_MspPostInit>

}
 8001722:	bf00      	nop
 8001724:	3768      	adds	r7, #104	@ 0x68
 8001726:	46bd      	mov	sp, r7
 8001728:	bd80      	pop	{r7, pc}
 800172a:	bf00      	nop
 800172c:	20000130 	.word	0x20000130
 8001730:	40010400 	.word	0x40010400

08001734 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b08a      	sub	sp, #40	@ 0x28
 8001738:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800173a:	f107 0314 	add.w	r3, r7, #20
 800173e:	2200      	movs	r2, #0
 8001740:	601a      	str	r2, [r3, #0]
 8001742:	605a      	str	r2, [r3, #4]
 8001744:	609a      	str	r2, [r3, #8]
 8001746:	60da      	str	r2, [r3, #12]
 8001748:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800174a:	4b4c      	ldr	r3, [pc, #304]	@ (800187c <MX_GPIO_Init+0x148>)
 800174c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800174e:	4a4b      	ldr	r2, [pc, #300]	@ (800187c <MX_GPIO_Init+0x148>)
 8001750:	f043 0304 	orr.w	r3, r3, #4
 8001754:	6313      	str	r3, [r2, #48]	@ 0x30
 8001756:	4b49      	ldr	r3, [pc, #292]	@ (800187c <MX_GPIO_Init+0x148>)
 8001758:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800175a:	f003 0304 	and.w	r3, r3, #4
 800175e:	613b      	str	r3, [r7, #16]
 8001760:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001762:	4b46      	ldr	r3, [pc, #280]	@ (800187c <MX_GPIO_Init+0x148>)
 8001764:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001766:	4a45      	ldr	r2, [pc, #276]	@ (800187c <MX_GPIO_Init+0x148>)
 8001768:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800176c:	6313      	str	r3, [r2, #48]	@ 0x30
 800176e:	4b43      	ldr	r3, [pc, #268]	@ (800187c <MX_GPIO_Init+0x148>)
 8001770:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001772:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001776:	60fb      	str	r3, [r7, #12]
 8001778:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800177a:	4b40      	ldr	r3, [pc, #256]	@ (800187c <MX_GPIO_Init+0x148>)
 800177c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800177e:	4a3f      	ldr	r2, [pc, #252]	@ (800187c <MX_GPIO_Init+0x148>)
 8001780:	f043 0301 	orr.w	r3, r3, #1
 8001784:	6313      	str	r3, [r2, #48]	@ 0x30
 8001786:	4b3d      	ldr	r3, [pc, #244]	@ (800187c <MX_GPIO_Init+0x148>)
 8001788:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800178a:	f003 0301 	and.w	r3, r3, #1
 800178e:	60bb      	str	r3, [r7, #8]
 8001790:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001792:	4b3a      	ldr	r3, [pc, #232]	@ (800187c <MX_GPIO_Init+0x148>)
 8001794:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001796:	4a39      	ldr	r2, [pc, #228]	@ (800187c <MX_GPIO_Init+0x148>)
 8001798:	f043 0302 	orr.w	r3, r3, #2
 800179c:	6313      	str	r3, [r2, #48]	@ 0x30
 800179e:	4b37      	ldr	r3, [pc, #220]	@ (800187c <MX_GPIO_Init+0x148>)
 80017a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017a2:	f003 0302 	and.w	r3, r3, #2
 80017a6:	607b      	str	r3, [r7, #4]
 80017a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80017aa:	4b34      	ldr	r3, [pc, #208]	@ (800187c <MX_GPIO_Init+0x148>)
 80017ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017ae:	4a33      	ldr	r2, [pc, #204]	@ (800187c <MX_GPIO_Init+0x148>)
 80017b0:	f043 0308 	orr.w	r3, r3, #8
 80017b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80017b6:	4b31      	ldr	r3, [pc, #196]	@ (800187c <MX_GPIO_Init+0x148>)
 80017b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017ba:	f003 0308 	and.w	r3, r3, #8
 80017be:	603b      	str	r3, [r7, #0]
 80017c0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_10, GPIO_PIN_RESET);
 80017c2:	2200      	movs	r2, #0
 80017c4:	f44f 6186 	mov.w	r1, #1072	@ 0x430
 80017c8:	482d      	ldr	r0, [pc, #180]	@ (8001880 <MX_GPIO_Init+0x14c>)
 80017ca:	f002 fdf9 	bl	80043c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 80017ce:	2200      	movs	r2, #0
 80017d0:	f44f 4140 	mov.w	r1, #49152	@ 0xc000
 80017d4:	482b      	ldr	r0, [pc, #172]	@ (8001884 <MX_GPIO_Init+0x150>)
 80017d6:	f002 fdf3 	bl	80043c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6|GPIO_PIN_9, GPIO_PIN_RESET);
 80017da:	2200      	movs	r2, #0
 80017dc:	f44f 7110 	mov.w	r1, #576	@ 0x240
 80017e0:	4829      	ldr	r0, [pc, #164]	@ (8001888 <MX_GPIO_Init+0x154>)
 80017e2:	f002 fded 	bl	80043c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA4 PA5 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_10;
 80017e6:	f44f 6386 	mov.w	r3, #1072	@ 0x430
 80017ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017ec:	2301      	movs	r3, #1
 80017ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017f0:	2300      	movs	r3, #0
 80017f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017f4:	2300      	movs	r3, #0
 80017f6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017f8:	f107 0314 	add.w	r3, r7, #20
 80017fc:	4619      	mov	r1, r3
 80017fe:	4820      	ldr	r0, [pc, #128]	@ (8001880 <MX_GPIO_Init+0x14c>)
 8001800:	f002 fc1a 	bl	8004038 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001804:	2340      	movs	r3, #64	@ 0x40
 8001806:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001808:	2300      	movs	r3, #0
 800180a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800180c:	2301      	movs	r3, #1
 800180e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001810:	f107 0314 	add.w	r3, r7, #20
 8001814:	4619      	mov	r1, r3
 8001816:	481a      	ldr	r0, [pc, #104]	@ (8001880 <MX_GPIO_Init+0x14c>)
 8001818:	f002 fc0e 	bl	8004038 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 800181c:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8001820:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001822:	2301      	movs	r3, #1
 8001824:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001826:	2300      	movs	r3, #0
 8001828:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800182a:	2300      	movs	r3, #0
 800182c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800182e:	f107 0314 	add.w	r3, r7, #20
 8001832:	4619      	mov	r1, r3
 8001834:	4813      	ldr	r0, [pc, #76]	@ (8001884 <MX_GPIO_Init+0x150>)
 8001836:	f002 fbff 	bl	8004038 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 800183a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800183e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001840:	2300      	movs	r3, #0
 8001842:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001844:	2300      	movs	r3, #0
 8001846:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001848:	f107 0314 	add.w	r3, r7, #20
 800184c:	4619      	mov	r1, r3
 800184e:	480f      	ldr	r0, [pc, #60]	@ (800188c <MX_GPIO_Init+0x158>)
 8001850:	f002 fbf2 	bl	8004038 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC6 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8001854:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8001858:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800185a:	2301      	movs	r3, #1
 800185c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800185e:	2300      	movs	r3, #0
 8001860:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001862:	2300      	movs	r3, #0
 8001864:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001866:	f107 0314 	add.w	r3, r7, #20
 800186a:	4619      	mov	r1, r3
 800186c:	4806      	ldr	r0, [pc, #24]	@ (8001888 <MX_GPIO_Init+0x154>)
 800186e:	f002 fbe3 	bl	8004038 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001872:	bf00      	nop
 8001874:	3728      	adds	r7, #40	@ 0x28
 8001876:	46bd      	mov	sp, r7
 8001878:	bd80      	pop	{r7, pc}
 800187a:	bf00      	nop
 800187c:	40023800 	.word	0x40023800
 8001880:	40020000 	.word	0x40020000
 8001884:	40020400 	.word	0x40020400
 8001888:	40020800 	.word	0x40020800
 800188c:	40020c00 	.word	0x40020c00

08001890 <vApplicationIdleHook>:

/* USER CODE BEGIN 4 */

/***************************** Idle Task *****************************/
void vApplicationIdleHook(void)
{
 8001890:	b480      	push	{r7}
 8001892:	af00      	add	r7, sp, #0

}
 8001894:	bf00      	nop
 8001896:	46bd      	mov	sp, r7
 8001898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189c:	4770      	bx	lr
	...

080018a0 <Task1_Handler>:

/***************************** Node Guarding Task *****************************/
void Task1_Handler(void* pvParameters)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b084      	sub	sp, #16
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = NODE_GUARDING_PERIOD;
 80018a8:	2364      	movs	r3, #100	@ 0x64
 80018aa:	60fb      	str	r3, [r7, #12]

	xLastWakeTime = xTaskGetTickCount();
 80018ac:	f006 f8a2 	bl	80079f4 <xTaskGetTickCount>
 80018b0:	4603      	mov	r3, r0
 80018b2:	60bb      	str	r3, [r7, #8]

	for (;;)
	{
		// Suspend task until period
		vTaskDelayUntil(&xLastWakeTime, xFrequency);
 80018b4:	f107 0308 	add.w	r3, r7, #8
 80018b8:	68f9      	ldr	r1, [r7, #12]
 80018ba:	4618      	mov	r0, r3
 80018bc:	f005 feb0 	bl	8007620 <xTaskDelayUntil>

		// Inverter Node Guarding Frame
		nodeGuarding(&hcan1);
 80018c0:	4802      	ldr	r0, [pc, #8]	@ (80018cc <Task1_Handler+0x2c>)
 80018c2:	f7fe fe9e 	bl	8000602 <nodeGuarding>
		vTaskDelayUntil(&xLastWakeTime, xFrequency);
 80018c6:	bf00      	nop
 80018c8:	e7f4      	b.n	80018b4 <Task1_Handler+0x14>
 80018ca:	bf00      	nop
 80018cc:	20000094 	.word	0x20000094

080018d0 <Task2_Handler>:
	}
}

/***************************** Torque Control Task *****************************/
void Task2_Handler(void* pvParameters)
{
 80018d0:	b590      	push	{r4, r7, lr}
 80018d2:	b089      	sub	sp, #36	@ 0x24
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = TORQUE_CONTROL_PERIOD;
 80018d8:	230a      	movs	r3, #10
 80018da:	61fb      	str	r3, [r7, #28]

	xLastWakeTime = xTaskGetTickCount();
 80018dc:	f006 f88a 	bl	80079f4 <xTaskGetTickCount>
 80018e0:	4603      	mov	r3, r0
 80018e2:	61bb      	str	r3, [r7, #24]
	CAN_MsgHeaderTypedef msg;

	for (;;)
	{
		// Suspend task until period
		vTaskDelayUntil(&xLastWakeTime, xFrequency);
 80018e4:	f107 0318 	add.w	r3, r7, #24
 80018e8:	69f9      	ldr	r1, [r7, #28]
 80018ea:	4618      	mov	r0, r3
 80018ec:	f005 fe98 	bl	8007620 <xTaskDelayUntil>

		// Throttle Sensor Error Checks
		errorSet[PRIM_THROTTLE_SENS_ERR] = primaryThrottleSensorErrorCheck();
 80018f0:	2400      	movs	r4, #0
 80018f2:	f000 fab7 	bl	8001e64 <primaryThrottleSensorErrorCheck>
 80018f6:	4603      	mov	r3, r0
 80018f8:	461a      	mov	r2, r3
 80018fa:	4b13      	ldr	r3, [pc, #76]	@ (8001948 <Task2_Handler+0x78>)
 80018fc:	551a      	strb	r2, [r3, r4]

		errorSet[SECOND_THROTTLE_SENS_ERR] = secondaryThrottleSensorErrorCheck();
 80018fe:	2401      	movs	r4, #1
 8001900:	f000 fad2 	bl	8001ea8 <secondaryThrottleSensorErrorCheck>
 8001904:	4603      	mov	r3, r0
 8001906:	461a      	mov	r2, r3
 8001908:	4b0f      	ldr	r3, [pc, #60]	@ (8001948 <Task2_Handler+0x78>)
 800190a:	551a      	strb	r2, [r3, r4]

		//errorSet[THROTTLE_OFFSET_ERROR] = throttleSensorDeviationCheck();

		// Get Inverter Data
		if (xQueueReceive(highPriorityQueue, &msg, 100) == pdPASS)
 800190c:	4b0f      	ldr	r3, [pc, #60]	@ (800194c <Task2_Handler+0x7c>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f107 0108 	add.w	r1, r7, #8
 8001914:	2264      	movs	r2, #100	@ 0x64
 8001916:	4618      	mov	r0, r3
 8001918:	f005 faa0 	bl	8006e5c <xQueueReceive>
 800191c:	4603      	mov	r3, r0
 800191e:	2b01      	cmp	r3, #1
 8001920:	d10f      	bne.n	8001942 <Task2_Handler+0x72>
		{
			if (msg.StdID == EMD_TxPDO_3_CANID)
 8001922:	693b      	ldr	r3, [r7, #16]
 8001924:	f240 32fa 	movw	r2, #1018	@ 0x3fa
 8001928:	4293      	cmp	r3, r2
 800192a:	d10a      	bne.n	8001942 <Task2_Handler+0x72>
			{
				Unpack_EMD_TxPDO_3__DO_QUASAR_CANopen(&txpdo_3, msg.data, EMD_TxPDO_3_DLC);
 800192c:	f107 0308 	add.w	r3, r7, #8
 8001930:	2208      	movs	r2, #8
 8001932:	4619      	mov	r1, r3
 8001934:	4806      	ldr	r0, [pc, #24]	@ (8001950 <Task2_Handler+0x80>)
 8001936:	f7ff f8d9 	bl	8000aec <Unpack_EMD_TxPDO_3__DO_QUASAR_CANopen>

				motorRpm = txpdo_3.EMD_ACT_MotorSpeed;
 800193a:	4b05      	ldr	r3, [pc, #20]	@ (8001950 <Task2_Handler+0x80>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	4a05      	ldr	r2, [pc, #20]	@ (8001954 <Task2_Handler+0x84>)
 8001940:	6013      	str	r3, [r2, #0]
			}
		}

		// Torque Request
		torqueRequest();
 8001942:	f000 facd 	bl	8001ee0 <torqueRequest>
		vTaskDelayUntil(&xLastWakeTime, xFrequency);
 8001946:	e7cd      	b.n	80018e4 <Task2_Handler+0x14>
 8001948:	200001f4 	.word	0x200001f4
 800194c:	200002a0 	.word	0x200002a0
 8001950:	2000025c 	.word	0x2000025c
 8001954:	20000274 	.word	0x20000274

08001958 <Task3_Handler>:
	}
}

/***************************** Ignition Task *****************************/
void Task3_Handler(void* pvParameters)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b082      	sub	sp, #8
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
	for (;;)
	{
		if (HAL_GPIO_ReadPin(IGNITION_ENABLE_PORT, IGNITION_ENABLE_PIN) == IGNITION_ACTIVE_STATE)
 8001960:	4b07      	ldr	r3, [pc, #28]	@ (8001980 <Task3_Handler+0x28>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	2240      	movs	r2, #64	@ 0x40
 8001966:	4611      	mov	r1, r2
 8001968:	4618      	mov	r0, r3
 800196a:	f002 fd11 	bl	8004390 <HAL_GPIO_ReadPin>
 800196e:	4603      	mov	r3, r0
 8001970:	461a      	mov	r2, r3
 8001972:	2300      	movs	r3, #0
 8001974:	429a      	cmp	r2, r3
 8001976:	d1f3      	bne.n	8001960 <Task3_Handler+0x8>
		{
			ignitionTask();
 8001978:	f000 f8f8 	bl	8001b6c <ignitionTask>
		if (HAL_GPIO_ReadPin(IGNITION_ENABLE_PORT, IGNITION_ENABLE_PIN) == IGNITION_ACTIVE_STATE)
 800197c:	e7f0      	b.n	8001960 <Task3_Handler+0x8>
 800197e:	bf00      	nop
 8001980:	20000014 	.word	0x20000014

08001984 <Task4_Handler>:
	}
}

/***************************** CAN Data Processing Task *****************************/
void Task4_Handler(void* pvParameters)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b086      	sub	sp, #24
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
	CAN_MsgHeaderTypedef msg;

	for (;;)
	{
		// Get Low Priority CAN Queue Data
		if (xQueueReceive(lowPriorityQueue, &msg, portMAX_DELAY) == pdPASS)
 800198c:	4b3a      	ldr	r3, [pc, #232]	@ (8001a78 <Task4_Handler+0xf4>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f107 0108 	add.w	r1, r7, #8
 8001994:	f04f 32ff 	mov.w	r2, #4294967295
 8001998:	4618      	mov	r0, r3
 800199a:	f005 fa5f 	bl	8006e5c <xQueueReceive>
 800199e:	4603      	mov	r3, r0
 80019a0:	2b01      	cmp	r3, #1
 80019a2:	d1f3      	bne.n	800198c <Task4_Handler+0x8>
		{
			switch (msg.StdID)
 80019a4:	693b      	ldr	r3, [r7, #16]
 80019a6:	f240 3251 	movw	r2, #849	@ 0x351
 80019aa:	4293      	cmp	r3, r2
 80019ac:	d051      	beq.n	8001a52 <Task4_Handler+0xce>
 80019ae:	f240 3251 	movw	r2, #849	@ 0x351
 80019b2:	4293      	cmp	r3, r2
 80019b4:	d85d      	bhi.n	8001a72 <Task4_Handler+0xee>
 80019b6:	f240 3241 	movw	r2, #833	@ 0x341
 80019ba:	4293      	cmp	r3, r2
 80019bc:	d041      	beq.n	8001a42 <Task4_Handler+0xbe>
 80019be:	f240 3241 	movw	r2, #833	@ 0x341
 80019c2:	4293      	cmp	r3, r2
 80019c4:	d855      	bhi.n	8001a72 <Task4_Handler+0xee>
 80019c6:	f240 3231 	movw	r2, #817	@ 0x331
 80019ca:	4293      	cmp	r3, r2
 80019cc:	d031      	beq.n	8001a32 <Task4_Handler+0xae>
 80019ce:	f240 3231 	movw	r2, #817	@ 0x331
 80019d2:	4293      	cmp	r3, r2
 80019d4:	d84d      	bhi.n	8001a72 <Task4_Handler+0xee>
 80019d6:	f240 3221 	movw	r2, #801	@ 0x321
 80019da:	4293      	cmp	r3, r2
 80019dc:	d021      	beq.n	8001a22 <Task4_Handler+0x9e>
 80019de:	f240 3221 	movw	r2, #801	@ 0x321
 80019e2:	4293      	cmp	r3, r2
 80019e4:	d845      	bhi.n	8001a72 <Task4_Handler+0xee>
 80019e6:	f240 3211 	movw	r2, #785	@ 0x311
 80019ea:	4293      	cmp	r3, r2
 80019ec:	d011      	beq.n	8001a12 <Task4_Handler+0x8e>
 80019ee:	f240 3211 	movw	r2, #785	@ 0x311
 80019f2:	4293      	cmp	r3, r2
 80019f4:	d83d      	bhi.n	8001a72 <Task4_Handler+0xee>
 80019f6:	2b37      	cmp	r3, #55	@ 0x37
 80019f8:	d003      	beq.n	8001a02 <Task4_Handler+0x7e>
 80019fa:	f5b3 7fdd 	cmp.w	r3, #442	@ 0x1ba
 80019fe:	d030      	beq.n	8001a62 <Task4_Handler+0xde>
				break;
			case EMD_TxPDO_5_CANID:
				Unpack_EMD_TxPDO_5__DO_QUASAR_CANopen(&txpdo_5, msg.data, EMD_TxPDO_3_DLC);
				break;
			default:
				break;
 8001a00:	e037      	b.n	8001a72 <Task4_Handler+0xee>
				Unpack_IMD_Info_isolation(&imdInfo, msg.data, IMD_Info_DLC);
 8001a02:	f107 0308 	add.w	r3, r7, #8
 8001a06:	2206      	movs	r2, #6
 8001a08:	4619      	mov	r1, r3
 8001a0a:	481c      	ldr	r0, [pc, #112]	@ (8001a7c <Task4_Handler+0xf8>)
 8001a0c:	f7ff f972 	bl	8000cf4 <Unpack_IMD_Info_isolation>
				break;
 8001a10:	e030      	b.n	8001a74 <Task4_Handler+0xf0>
				Unpack_TS_ECU1_TX1_Temp(&ecu1TX1, msg.data, TS_ECU1_TX1_DLC);
 8001a12:	f107 0308 	add.w	r3, r7, #8
 8001a16:	2205      	movs	r2, #5
 8001a18:	4619      	mov	r1, r3
 8001a1a:	4819      	ldr	r0, [pc, #100]	@ (8001a80 <Task4_Handler+0xfc>)
 8001a1c:	f000 fd3e 	bl	800249c <Unpack_TS_ECU1_TX1_Temp>
				break;
 8001a20:	e028      	b.n	8001a74 <Task4_Handler+0xf0>
				Unpack_TS_ECU2_TX1_Temp(&ecu2TX1, msg.data, TS_ECU2_TX1_DLC);
 8001a22:	f107 0308 	add.w	r3, r7, #8
 8001a26:	2205      	movs	r2, #5
 8001a28:	4619      	mov	r1, r3
 8001a2a:	4816      	ldr	r0, [pc, #88]	@ (8001a84 <Task4_Handler+0x100>)
 8001a2c:	f000 fd98 	bl	8002560 <Unpack_TS_ECU2_TX1_Temp>
				break;
 8001a30:	e020      	b.n	8001a74 <Task4_Handler+0xf0>
				Unpack_TS_ECU3_TX1_Temp(&ecu3TX1, msg.data, TS_ECU3_TX1_DLC);
 8001a32:	f107 0308 	add.w	r3, r7, #8
 8001a36:	2205      	movs	r2, #5
 8001a38:	4619      	mov	r1, r3
 8001a3a:	4813      	ldr	r0, [pc, #76]	@ (8001a88 <Task4_Handler+0x104>)
 8001a3c:	f000 fdf2 	bl	8002624 <Unpack_TS_ECU3_TX1_Temp>
				break;
 8001a40:	e018      	b.n	8001a74 <Task4_Handler+0xf0>
				Unpack_TS_ECU4_TX1_Temp(&ecu4TX1, msg.data, TS_ECU4_TX1_DLC);
 8001a42:	f107 0308 	add.w	r3, r7, #8
 8001a46:	2205      	movs	r2, #5
 8001a48:	4619      	mov	r1, r3
 8001a4a:	4810      	ldr	r0, [pc, #64]	@ (8001a8c <Task4_Handler+0x108>)
 8001a4c:	f000 fe4c 	bl	80026e8 <Unpack_TS_ECU4_TX1_Temp>
				break;
 8001a50:	e010      	b.n	8001a74 <Task4_Handler+0xf0>
				Unpack_TS_ECU5_TX1_Temp(&ecu5TX1, msg.data, TS_ECU5_TX1_DLC);
 8001a52:	f107 0308 	add.w	r3, r7, #8
 8001a56:	2205      	movs	r2, #5
 8001a58:	4619      	mov	r1, r3
 8001a5a:	480d      	ldr	r0, [pc, #52]	@ (8001a90 <Task4_Handler+0x10c>)
 8001a5c:	f000 fea6 	bl	80027ac <Unpack_TS_ECU5_TX1_Temp>
				break;
 8001a60:	e008      	b.n	8001a74 <Task4_Handler+0xf0>
				Unpack_EMD_TxPDO_5__DO_QUASAR_CANopen(&txpdo_5, msg.data, EMD_TxPDO_3_DLC);
 8001a62:	f107 0308 	add.w	r3, r7, #8
 8001a66:	2208      	movs	r2, #8
 8001a68:	4619      	mov	r1, r3
 8001a6a:	480a      	ldr	r0, [pc, #40]	@ (8001a94 <Task4_Handler+0x110>)
 8001a6c:	f7fe fffc 	bl	8000a68 <Unpack_EMD_TxPDO_5__DO_QUASAR_CANopen>
				break;
 8001a70:	e000      	b.n	8001a74 <Task4_Handler+0xf0>
				break;
 8001a72:	bf00      	nop
		if (xQueueReceive(lowPriorityQueue, &msg, portMAX_DELAY) == pdPASS)
 8001a74:	e78a      	b.n	800198c <Task4_Handler+0x8>
 8001a76:	bf00      	nop
 8001a78:	2000029c 	.word	0x2000029c
 8001a7c:	200001fc 	.word	0x200001fc
 8001a80:	2000020c 	.word	0x2000020c
 8001a84:	2000021c 	.word	0x2000021c
 8001a88:	2000022c 	.word	0x2000022c
 8001a8c:	2000023c 	.word	0x2000023c
 8001a90:	2000024c 	.word	0x2000024c
 8001a94:	2000026c 	.word	0x2000026c

08001a98 <Task5_Handler>:
	}
}

/***************************** Safety Systems Check *****************************/
void Task5_Handler(void* pvParameters)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b082      	sub	sp, #8
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
	for (;;)
	{
		motorTemp = txpdo_5.EMD_ACT_MotorTemperature;
 8001aa0:	4b0f      	ldr	r3, [pc, #60]	@ (8001ae0 <Task5_Handler+0x48>)
 8001aa2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001aa6:	461a      	mov	r2, r3
 8001aa8:	4b0e      	ldr	r3, [pc, #56]	@ (8001ae4 <Task5_Handler+0x4c>)
 8001aaa:	601a      	str	r2, [r3, #0]

		inverterTemp = txpdo_5.EMD_ACT_MaxJunctionTemp;
 8001aac:	4b0c      	ldr	r3, [pc, #48]	@ (8001ae0 <Task5_Handler+0x48>)
 8001aae:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ab2:	461a      	mov	r2, r3
 8001ab4:	4b0c      	ldr	r3, [pc, #48]	@ (8001ae8 <Task5_Handler+0x50>)
 8001ab6:	601a      	str	r2, [r3, #0]

		if (inverterTemp > INVERTER_TEMP_THRESHOLD)
 8001ab8:	4b0b      	ldr	r3, [pc, #44]	@ (8001ae8 <Task5_Handler+0x50>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	2b14      	cmp	r3, #20
 8001abe:	dd07      	ble.n	8001ad0 <Task5_Handler+0x38>
		{
		  // Enable Pump PWM
		  TIM8->CCR3 = 0;
 8001ac0:	4b0a      	ldr	r3, [pc, #40]	@ (8001aec <Task5_Handler+0x54>)
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	63da      	str	r2, [r3, #60]	@ 0x3c

		  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);
 8001ac6:	2108      	movs	r1, #8
 8001ac8:	4809      	ldr	r0, [pc, #36]	@ (8001af0 <Task5_Handler+0x58>)
 8001aca:	f003 fcef 	bl	80054ac <HAL_TIM_PWM_Start>
 8001ace:	e7e7      	b.n	8001aa0 <Task5_Handler+0x8>
		}
		else
		{
		  // Enable Pump PWM
		  TIM8->CCR3 = 0;
 8001ad0:	4b06      	ldr	r3, [pc, #24]	@ (8001aec <Task5_Handler+0x54>)
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	63da      	str	r2, [r3, #60]	@ 0x3c

		  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);
 8001ad6:	2108      	movs	r1, #8
 8001ad8:	4805      	ldr	r0, [pc, #20]	@ (8001af0 <Task5_Handler+0x58>)
 8001ada:	f003 fce7 	bl	80054ac <HAL_TIM_PWM_Start>
		motorTemp = txpdo_5.EMD_ACT_MotorTemperature;
 8001ade:	e7df      	b.n	8001aa0 <Task5_Handler+0x8>
 8001ae0:	2000026c 	.word	0x2000026c
 8001ae4:	20000278 	.word	0x20000278
 8001ae8:	2000027c 	.word	0x2000027c
 8001aec:	40010400 	.word	0x40010400
 8001af0:	20000130 	.word	0x20000130

08001af4 <Task6_Handler>:
	}
}

/***************************** Torque Derate *****************************/
void Task6_Handler(void* pvParameters)
{
 8001af4:	b480      	push	{r7}
 8001af6:	b083      	sub	sp, #12
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
	for (;;)
 8001afc:	bf00      	nop
 8001afe:	e7fd      	b.n	8001afc <Task6_Handler+0x8>

08001b00 <map>:
	{

	}
}

long map(long x, long in_min, long in_max, long out_min, long out_max) {
 8001b00:	b480      	push	{r7}
 8001b02:	b085      	sub	sp, #20
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	60f8      	str	r0, [r7, #12]
 8001b08:	60b9      	str	r1, [r7, #8]
 8001b0a:	607a      	str	r2, [r7, #4]
 8001b0c:	603b      	str	r3, [r7, #0]
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8001b0e:	68fa      	ldr	r2, [r7, #12]
 8001b10:	68bb      	ldr	r3, [r7, #8]
 8001b12:	1ad3      	subs	r3, r2, r3
 8001b14:	69b9      	ldr	r1, [r7, #24]
 8001b16:	683a      	ldr	r2, [r7, #0]
 8001b18:	1a8a      	subs	r2, r1, r2
 8001b1a:	fb03 f202 	mul.w	r2, r3, r2
 8001b1e:	6879      	ldr	r1, [r7, #4]
 8001b20:	68bb      	ldr	r3, [r7, #8]
 8001b22:	1acb      	subs	r3, r1, r3
 8001b24:	fb92 f2f3 	sdiv	r2, r2, r3
 8001b28:	683b      	ldr	r3, [r7, #0]
 8001b2a:	4413      	add	r3, r2
}
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	3714      	adds	r7, #20
 8001b30:	46bd      	mov	sp, r7
 8001b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b36:	4770      	bx	lr

08001b38 <constrain>:

long constrain(long x, long out_min, long out_max)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	b085      	sub	sp, #20
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	60f8      	str	r0, [r7, #12]
 8001b40:	60b9      	str	r1, [r7, #8]
 8001b42:	607a      	str	r2, [r7, #4]
	if (x < out_min)
 8001b44:	68fa      	ldr	r2, [r7, #12]
 8001b46:	68bb      	ldr	r3, [r7, #8]
 8001b48:	429a      	cmp	r2, r3
 8001b4a:	da01      	bge.n	8001b50 <constrain+0x18>
	{
		return out_min;
 8001b4c:	68bb      	ldr	r3, [r7, #8]
 8001b4e:	e006      	b.n	8001b5e <constrain+0x26>
	}

	if (x > out_max)
 8001b50:	68fa      	ldr	r2, [r7, #12]
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	429a      	cmp	r2, r3
 8001b56:	dd01      	ble.n	8001b5c <constrain+0x24>
	{
		return out_max;
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	e000      	b.n	8001b5e <constrain+0x26>
	}

	return x;
 8001b5c:	68fb      	ldr	r3, [r7, #12]
}
 8001b5e:	4618      	mov	r0, r3
 8001b60:	3714      	adds	r7, #20
 8001b62:	46bd      	mov	sp, r7
 8001b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b68:	4770      	bx	lr
	...

08001b6c <ignitionTask>:

void ignitionTask(void)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	af00      	add	r7, sp, #0
	buttonState = HAL_GPIO_ReadPin(IGNITION_PORT, IGNITION_PIN);
 8001b70:	4b25      	ldr	r3, [pc, #148]	@ (8001c08 <ignitionTask+0x9c>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001b78:	4611      	mov	r1, r2
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	f002 fc08 	bl	8004390 <HAL_GPIO_ReadPin>
 8001b80:	4603      	mov	r3, r0
 8001b82:	461a      	mov	r2, r3
 8001b84:	4b21      	ldr	r3, [pc, #132]	@ (8001c0c <ignitionTask+0xa0>)
 8001b86:	701a      	strb	r2, [r3, #0]

	buttonPressTime = HAL_GetTick();
 8001b88:	f000 febc 	bl	8002904 <HAL_GetTick>
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	4a20      	ldr	r2, [pc, #128]	@ (8001c10 <ignitionTask+0xa4>)
 8001b90:	6013      	str	r3, [r2, #0]

	while (buttonState == IGNITION_ACTIVE)
 8001b92:	e031      	b.n	8001bf8 <ignitionTask+0x8c>
	{
		if (HAL_GetTick() - buttonPressTime > IGNITION_BUTTON_THRESHOLD)
 8001b94:	f000 feb6 	bl	8002904 <HAL_GetTick>
 8001b98:	4602      	mov	r2, r0
 8001b9a:	4b1d      	ldr	r3, [pc, #116]	@ (8001c10 <ignitionTask+0xa4>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	1ad3      	subs	r3, r2, r3
 8001ba0:	2bc8      	cmp	r3, #200	@ 0xc8
 8001ba2:	d91d      	bls.n	8001be0 <ignitionTask+0x74>
		{
			startNode(&hcan1);
 8001ba4:	481b      	ldr	r0, [pc, #108]	@ (8001c14 <ignitionTask+0xa8>)
 8001ba6:	f7fe fd5b 	bl	8000660 <startNode>
			clearErrors(&hcan1);
 8001baa:	481a      	ldr	r0, [pc, #104]	@ (8001c14 <ignitionTask+0xa8>)
 8001bac:	f7fe fd9c 	bl	80006e8 <clearErrors>

			HAL_GPIO_WritePin(RTD_PIN_PORT, RTD_PIN, RTD_ACTIVE);
 8001bb0:	4b19      	ldr	r3, [pc, #100]	@ (8001c18 <ignitionTask+0xac>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001bb8:	2201      	movs	r2, #1
 8001bba:	4618      	mov	r0, r3
 8001bbc:	f002 fc00 	bl	80043c0 <HAL_GPIO_WritePin>

			TIM1->CNT = 0;
 8001bc0:	4b16      	ldr	r3, [pc, #88]	@ (8001c1c <ignitionTask+0xb0>)
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	625a      	str	r2, [r3, #36]	@ 0x24
			HAL_TIM_OC_Start_IT(&htim1, IGNITION_OUPUT_CAPTURE);
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	4619      	mov	r1, r3
 8001bca:	4815      	ldr	r0, [pc, #84]	@ (8001c20 <ignitionTask+0xb4>)
 8001bcc:	f003 f9f6 	bl	8004fbc <HAL_TIM_OC_Start_IT>

			enableCar = true;
 8001bd0:	4b14      	ldr	r3, [pc, #80]	@ (8001c24 <ignitionTask+0xb8>)
 8001bd2:	2201      	movs	r2, #1
 8001bd4:	701a      	strb	r2, [r3, #0]

			buttonPressTime = HAL_GetTick();
 8001bd6:	f000 fe95 	bl	8002904 <HAL_GetTick>
 8001bda:	4603      	mov	r3, r0
 8001bdc:	4a0c      	ldr	r2, [pc, #48]	@ (8001c10 <ignitionTask+0xa4>)
 8001bde:	6013      	str	r3, [r2, #0]
		}

		buttonState = HAL_GPIO_ReadPin(IGNITION_PORT, IGNITION_PIN);
 8001be0:	4b09      	ldr	r3, [pc, #36]	@ (8001c08 <ignitionTask+0x9c>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001be8:	4611      	mov	r1, r2
 8001bea:	4618      	mov	r0, r3
 8001bec:	f002 fbd0 	bl	8004390 <HAL_GPIO_ReadPin>
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	461a      	mov	r2, r3
 8001bf4:	4b05      	ldr	r3, [pc, #20]	@ (8001c0c <ignitionTask+0xa0>)
 8001bf6:	701a      	strb	r2, [r3, #0]
	while (buttonState == IGNITION_ACTIVE)
 8001bf8:	4b04      	ldr	r3, [pc, #16]	@ (8001c0c <ignitionTask+0xa0>)
 8001bfa:	781b      	ldrb	r3, [r3, #0]
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	4293      	cmp	r3, r2
 8001c00:	d0c8      	beq.n	8001b94 <ignitionTask+0x28>
	}

	return;
 8001c02:	bf00      	nop
}
 8001c04:	bd80      	pop	{r7, pc}
 8001c06:	bf00      	nop
 8001c08:	20000010 	.word	0x20000010
 8001c0c:	2000017c 	.word	0x2000017c
 8001c10:	20000180 	.word	0x20000180
 8001c14:	20000094 	.word	0x20000094
 8001c18:	2000000c 	.word	0x2000000c
 8001c1c:	40010000 	.word	0x40010000
 8001c20:	200000e4 	.word	0x200000e4
 8001c24:	2000017d 	.word	0x2000017d

08001c28 <setADCChannel>:

void setADCChannel(ADC_ChannelConfTypeDef* adcChConfig, uint32_t adcChannel)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b082      	sub	sp, #8
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
 8001c30:	6039      	str	r1, [r7, #0]
	adcChConfig->Channel = adcChannel;
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	683a      	ldr	r2, [r7, #0]
 8001c36:	601a      	str	r2, [r3, #0]
	adcChConfig->Rank = ADC_REGULAR_RANK_1;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	2201      	movs	r2, #1
 8001c3c:	605a      	str	r2, [r3, #4]
	adcChConfig->SamplingTime = ADC_SAMPLETIME_56CYCLES;
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	2203      	movs	r2, #3
 8001c42:	609a      	str	r2, [r3, #8]

	if (HAL_ADC_ConfigChannel(&hadc1, adcChConfig) != HAL_OK)
 8001c44:	6879      	ldr	r1, [r7, #4]
 8001c46:	4806      	ldr	r0, [pc, #24]	@ (8001c60 <setADCChannel+0x38>)
 8001c48:	f001 f846 	bl	8002cd8 <HAL_ADC_ConfigChannel>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d002      	beq.n	8001c58 <setADCChannel+0x30>
	{
		Error_Handler();
 8001c52:	f000 f9a3 	bl	8001f9c <Error_Handler>
	}

	return;
 8001c56:	bf00      	nop
 8001c58:	bf00      	nop
}
 8001c5a:	3708      	adds	r7, #8
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	bd80      	pop	{r7, pc}
 8001c60:	2000004c 	.word	0x2000004c

08001c64 <getADCAverage>:

uint32_t getADCAverage(ADC_ChannelConfTypeDef* adcChConfig, uint32_t adcChannel)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b088      	sub	sp, #32
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
 8001c6c:	6039      	str	r1, [r7, #0]
	setADCChannel(adcChConfig, adcChannel);
 8001c6e:	6839      	ldr	r1, [r7, #0]
 8001c70:	6878      	ldr	r0, [r7, #4]
 8001c72:	f7ff ffd9 	bl	8001c28 <setADCChannel>

	sum = 0;
 8001c76:	4b5c      	ldr	r3, [pc, #368]	@ (8001de8 <getADCAverage+0x184>)
 8001c78:	2200      	movs	r2, #0
 8001c7a:	601a      	str	r2, [r3, #0]

	for (int i = 0; i < ADC_SAMPLE_COUNT; i++)
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	61fb      	str	r3, [r7, #28]
 8001c80:	e014      	b.n	8001cac <getADCAverage+0x48>
	{
		HAL_ADC_Start(&hadc1);
 8001c82:	485a      	ldr	r0, [pc, #360]	@ (8001dec <getADCAverage+0x188>)
 8001c84:	f000 fe8e 	bl	80029a4 <HAL_ADC_Start>

		HAL_ADC_PollForConversion(&hadc1, (1U));
 8001c88:	2101      	movs	r1, #1
 8001c8a:	4858      	ldr	r0, [pc, #352]	@ (8001dec <getADCAverage+0x188>)
 8001c8c:	f000 ff8c 	bl	8002ba8 <HAL_ADC_PollForConversion>

		adcBuffer[i] = HAL_ADC_GetValue(&hadc1);
 8001c90:	4856      	ldr	r0, [pc, #344]	@ (8001dec <getADCAverage+0x188>)
 8001c92:	f001 f814 	bl	8002cbe <HAL_ADC_GetValue>
 8001c96:	4602      	mov	r2, r0
 8001c98:	4955      	ldr	r1, [pc, #340]	@ (8001df0 <getADCAverage+0x18c>)
 8001c9a:	69fb      	ldr	r3, [r7, #28]
 8001c9c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

		HAL_ADC_Stop(&hadc1);
 8001ca0:	4852      	ldr	r0, [pc, #328]	@ (8001dec <getADCAverage+0x188>)
 8001ca2:	f000 ff4d 	bl	8002b40 <HAL_ADC_Stop>
	for (int i = 0; i < ADC_SAMPLE_COUNT; i++)
 8001ca6:	69fb      	ldr	r3, [r7, #28]
 8001ca8:	3301      	adds	r3, #1
 8001caa:	61fb      	str	r3, [r7, #28]
 8001cac:	69fb      	ldr	r3, [r7, #28]
 8001cae:	2b0e      	cmp	r3, #14
 8001cb0:	dde7      	ble.n	8001c82 <getADCAverage+0x1e>
	}

	max = adcBuffer[0];
 8001cb2:	4b4f      	ldr	r3, [pc, #316]	@ (8001df0 <getADCAverage+0x18c>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	461a      	mov	r2, r3
 8001cb8:	4b4e      	ldr	r3, [pc, #312]	@ (8001df4 <getADCAverage+0x190>)
 8001cba:	601a      	str	r2, [r3, #0]

	for (int i = 1; i < ADC_SAMPLE_COUNT; i++)
 8001cbc:	2301      	movs	r3, #1
 8001cbe:	61bb      	str	r3, [r7, #24]
 8001cc0:	e014      	b.n	8001cec <getADCAverage+0x88>
	{
		if (adcBuffer[i] > max)
 8001cc2:	4a4b      	ldr	r2, [pc, #300]	@ (8001df0 <getADCAverage+0x18c>)
 8001cc4:	69bb      	ldr	r3, [r7, #24]
 8001cc6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cca:	4a4a      	ldr	r2, [pc, #296]	@ (8001df4 <getADCAverage+0x190>)
 8001ccc:	6812      	ldr	r2, [r2, #0]
 8001cce:	4293      	cmp	r3, r2
 8001cd0:	d909      	bls.n	8001ce6 <getADCAverage+0x82>
		{
			max = adcBuffer[i];
 8001cd2:	4a47      	ldr	r2, [pc, #284]	@ (8001df0 <getADCAverage+0x18c>)
 8001cd4:	69bb      	ldr	r3, [r7, #24]
 8001cd6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cda:	461a      	mov	r2, r3
 8001cdc:	4b45      	ldr	r3, [pc, #276]	@ (8001df4 <getADCAverage+0x190>)
 8001cde:	601a      	str	r2, [r3, #0]
			maxIndex = i;
 8001ce0:	4a45      	ldr	r2, [pc, #276]	@ (8001df8 <getADCAverage+0x194>)
 8001ce2:	69bb      	ldr	r3, [r7, #24]
 8001ce4:	6013      	str	r3, [r2, #0]
	for (int i = 1; i < ADC_SAMPLE_COUNT; i++)
 8001ce6:	69bb      	ldr	r3, [r7, #24]
 8001ce8:	3301      	adds	r3, #1
 8001cea:	61bb      	str	r3, [r7, #24]
 8001cec:	69bb      	ldr	r3, [r7, #24]
 8001cee:	2b0e      	cmp	r3, #14
 8001cf0:	dde7      	ble.n	8001cc2 <getADCAverage+0x5e>
		}
	}

	min = adcBuffer[0];
 8001cf2:	4b3f      	ldr	r3, [pc, #252]	@ (8001df0 <getADCAverage+0x18c>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	461a      	mov	r2, r3
 8001cf8:	4b40      	ldr	r3, [pc, #256]	@ (8001dfc <getADCAverage+0x198>)
 8001cfa:	601a      	str	r2, [r3, #0]

	for (int i = 1; i < ADC_SAMPLE_COUNT; i++)
 8001cfc:	2301      	movs	r3, #1
 8001cfe:	617b      	str	r3, [r7, #20]
 8001d00:	e014      	b.n	8001d2c <getADCAverage+0xc8>
	{
		if (adcBuffer[i] < min)
 8001d02:	4a3b      	ldr	r2, [pc, #236]	@ (8001df0 <getADCAverage+0x18c>)
 8001d04:	697b      	ldr	r3, [r7, #20]
 8001d06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d0a:	4a3c      	ldr	r2, [pc, #240]	@ (8001dfc <getADCAverage+0x198>)
 8001d0c:	6812      	ldr	r2, [r2, #0]
 8001d0e:	4293      	cmp	r3, r2
 8001d10:	d209      	bcs.n	8001d26 <getADCAverage+0xc2>
		{
			min = adcBuffer[i];
 8001d12:	4a37      	ldr	r2, [pc, #220]	@ (8001df0 <getADCAverage+0x18c>)
 8001d14:	697b      	ldr	r3, [r7, #20]
 8001d16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d1a:	461a      	mov	r2, r3
 8001d1c:	4b37      	ldr	r3, [pc, #220]	@ (8001dfc <getADCAverage+0x198>)
 8001d1e:	601a      	str	r2, [r3, #0]
			minIndex = i;
 8001d20:	4a37      	ldr	r2, [pc, #220]	@ (8001e00 <getADCAverage+0x19c>)
 8001d22:	697b      	ldr	r3, [r7, #20]
 8001d24:	6013      	str	r3, [r2, #0]
	for (int i = 1; i < ADC_SAMPLE_COUNT; i++)
 8001d26:	697b      	ldr	r3, [r7, #20]
 8001d28:	3301      	adds	r3, #1
 8001d2a:	617b      	str	r3, [r7, #20]
 8001d2c:	697b      	ldr	r3, [r7, #20]
 8001d2e:	2b0e      	cmp	r3, #14
 8001d30:	dde7      	ble.n	8001d02 <getADCAverage+0x9e>
		}
	}

	for (int i = 0; i < ADC_SAMPLE_COUNT; i++)
 8001d32:	2300      	movs	r3, #0
 8001d34:	613b      	str	r3, [r7, #16]
 8001d36:	e01a      	b.n	8001d6e <getADCAverage+0x10a>
	{
		if (i == minIndex || i == maxIndex)
 8001d38:	4b31      	ldr	r3, [pc, #196]	@ (8001e00 <getADCAverage+0x19c>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	693a      	ldr	r2, [r7, #16]
 8001d3e:	429a      	cmp	r2, r3
 8001d40:	d004      	beq.n	8001d4c <getADCAverage+0xe8>
 8001d42:	4b2d      	ldr	r3, [pc, #180]	@ (8001df8 <getADCAverage+0x194>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	693a      	ldr	r2, [r7, #16]
 8001d48:	429a      	cmp	r2, r3
 8001d4a:	d104      	bne.n	8001d56 <getADCAverage+0xf2>
		{
			sum += 0;
 8001d4c:	4b26      	ldr	r3, [pc, #152]	@ (8001de8 <getADCAverage+0x184>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	4a25      	ldr	r2, [pc, #148]	@ (8001de8 <getADCAverage+0x184>)
 8001d52:	6013      	str	r3, [r2, #0]
 8001d54:	e008      	b.n	8001d68 <getADCAverage+0x104>
		}
		else
		{
			sum += adcBuffer[i];
 8001d56:	4a26      	ldr	r2, [pc, #152]	@ (8001df0 <getADCAverage+0x18c>)
 8001d58:	693b      	ldr	r3, [r7, #16]
 8001d5a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001d5e:	4b22      	ldr	r3, [pc, #136]	@ (8001de8 <getADCAverage+0x184>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	4413      	add	r3, r2
 8001d64:	4a20      	ldr	r2, [pc, #128]	@ (8001de8 <getADCAverage+0x184>)
 8001d66:	6013      	str	r3, [r2, #0]
	for (int i = 0; i < ADC_SAMPLE_COUNT; i++)
 8001d68:	693b      	ldr	r3, [r7, #16]
 8001d6a:	3301      	adds	r3, #1
 8001d6c:	613b      	str	r3, [r7, #16]
 8001d6e:	693b      	ldr	r3, [r7, #16]
 8001d70:	2b0e      	cmp	r3, #14
 8001d72:	dde1      	ble.n	8001d38 <getADCAverage+0xd4>
		}
	}

	average = sum / (ADC_SAMPLE_COUNT - 2);
 8001d74:	4b1c      	ldr	r3, [pc, #112]	@ (8001de8 <getADCAverage+0x184>)
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	4a22      	ldr	r2, [pc, #136]	@ (8001e04 <getADCAverage+0x1a0>)
 8001d7a:	fba2 2303 	umull	r2, r3, r2, r3
 8001d7e:	089b      	lsrs	r3, r3, #2
 8001d80:	4a21      	ldr	r2, [pc, #132]	@ (8001e08 <getADCAverage+0x1a4>)
 8001d82:	6013      	str	r3, [r2, #0]

	adcBuffer[maxIndex] = average;
 8001d84:	4b1c      	ldr	r3, [pc, #112]	@ (8001df8 <getADCAverage+0x194>)
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	4a1f      	ldr	r2, [pc, #124]	@ (8001e08 <getADCAverage+0x1a4>)
 8001d8a:	6812      	ldr	r2, [r2, #0]
 8001d8c:	4918      	ldr	r1, [pc, #96]	@ (8001df0 <getADCAverage+0x18c>)
 8001d8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	adcBuffer[minIndex] = average;
 8001d92:	4b1b      	ldr	r3, [pc, #108]	@ (8001e00 <getADCAverage+0x19c>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	4a1c      	ldr	r2, [pc, #112]	@ (8001e08 <getADCAverage+0x1a4>)
 8001d98:	6812      	ldr	r2, [r2, #0]
 8001d9a:	4915      	ldr	r1, [pc, #84]	@ (8001df0 <getADCAverage+0x18c>)
 8001d9c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	sum = 0;
 8001da0:	4b11      	ldr	r3, [pc, #68]	@ (8001de8 <getADCAverage+0x184>)
 8001da2:	2200      	movs	r2, #0
 8001da4:	601a      	str	r2, [r3, #0]

	for (int i = 0; i < ADC_SAMPLE_COUNT; i++)
 8001da6:	2300      	movs	r3, #0
 8001da8:	60fb      	str	r3, [r7, #12]
 8001daa:	e00b      	b.n	8001dc4 <getADCAverage+0x160>
	{
		sum += adcBuffer[i];
 8001dac:	4a10      	ldr	r2, [pc, #64]	@ (8001df0 <getADCAverage+0x18c>)
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001db4:	4b0c      	ldr	r3, [pc, #48]	@ (8001de8 <getADCAverage+0x184>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	4413      	add	r3, r2
 8001dba:	4a0b      	ldr	r2, [pc, #44]	@ (8001de8 <getADCAverage+0x184>)
 8001dbc:	6013      	str	r3, [r2, #0]
	for (int i = 0; i < ADC_SAMPLE_COUNT; i++)
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	3301      	adds	r3, #1
 8001dc2:	60fb      	str	r3, [r7, #12]
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	2b0e      	cmp	r3, #14
 8001dc8:	ddf0      	ble.n	8001dac <getADCAverage+0x148>
	}

	average = sum / ADC_SAMPLE_COUNT;
 8001dca:	4b07      	ldr	r3, [pc, #28]	@ (8001de8 <getADCAverage+0x184>)
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	4a0f      	ldr	r2, [pc, #60]	@ (8001e0c <getADCAverage+0x1a8>)
 8001dd0:	fba2 2303 	umull	r2, r3, r2, r3
 8001dd4:	08db      	lsrs	r3, r3, #3
 8001dd6:	4a0c      	ldr	r2, [pc, #48]	@ (8001e08 <getADCAverage+0x1a4>)
 8001dd8:	6013      	str	r3, [r2, #0]

	return average;
 8001dda:	4b0b      	ldr	r3, [pc, #44]	@ (8001e08 <getADCAverage+0x1a4>)
 8001ddc:	681b      	ldr	r3, [r3, #0]
}
 8001dde:	4618      	mov	r0, r3
 8001de0:	3720      	adds	r7, #32
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bd80      	pop	{r7, pc}
 8001de6:	bf00      	nop
 8001de8:	200001e0 	.word	0x200001e0
 8001dec:	2000004c 	.word	0x2000004c
 8001df0:	200001a4 	.word	0x200001a4
 8001df4:	20000194 	.word	0x20000194
 8001df8:	2000019c 	.word	0x2000019c
 8001dfc:	20000198 	.word	0x20000198
 8001e00:	200001a0 	.word	0x200001a0
 8001e04:	4ec4ec4f 	.word	0x4ec4ec4f
 8001e08:	200001e4 	.word	0x200001e4
 8001e0c:	88888889 	.word	0x88888889

08001e10 <getPrimaryThrottlePosition>:

uint32_t getPrimaryThrottlePosition(ADC_ChannelConfTypeDef* adcChConfig)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b082      	sub	sp, #8
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
	return constrain(getADCAverage(adcChConfig, PRIMARY_THROTTLE_CHANNEL), ADC_MIN_LIMIT, ADC_MAX_LIMIT);
 8001e18:	2300      	movs	r3, #0
 8001e1a:	4619      	mov	r1, r3
 8001e1c:	6878      	ldr	r0, [r7, #4]
 8001e1e:	f7ff ff21 	bl	8001c64 <getADCAverage>
 8001e22:	4603      	mov	r3, r0
 8001e24:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 8001e28:	2100      	movs	r1, #0
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	f7ff fe84 	bl	8001b38 <constrain>
 8001e30:	4603      	mov	r3, r0
}
 8001e32:	4618      	mov	r0, r3
 8001e34:	3708      	adds	r7, #8
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bd80      	pop	{r7, pc}

08001e3a <getSecondaryThrottlePosition>:

uint32_t getSecondaryThrottlePosition(ADC_ChannelConfTypeDef* adcChConfig)
{
 8001e3a:	b580      	push	{r7, lr}
 8001e3c:	b082      	sub	sp, #8
 8001e3e:	af00      	add	r7, sp, #0
 8001e40:	6078      	str	r0, [r7, #4]
	return constrain(getADCAverage(adcChConfig, SECONDARY_THROTTLE_CHANNEL), ADC_MIN_LIMIT, ADC_MAX_LIMIT);
 8001e42:	2301      	movs	r3, #1
 8001e44:	4619      	mov	r1, r3
 8001e46:	6878      	ldr	r0, [r7, #4]
 8001e48:	f7ff ff0c 	bl	8001c64 <getADCAverage>
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 8001e52:	2100      	movs	r1, #0
 8001e54:	4618      	mov	r0, r3
 8001e56:	f7ff fe6f 	bl	8001b38 <constrain>
 8001e5a:	4603      	mov	r3, r0
}
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	3708      	adds	r7, #8
 8001e60:	46bd      	mov	sp, r7
 8001e62:	bd80      	pop	{r7, pc}

08001e64 <primaryThrottleSensorErrorCheck>:

bool primaryThrottleSensorErrorCheck()
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	af00      	add	r7, sp, #0
	primaryPotValue = getPrimaryThrottlePosition(&sConfig);
 8001e68:	480c      	ldr	r0, [pc, #48]	@ (8001e9c <primaryThrottleSensorErrorCheck+0x38>)
 8001e6a:	f7ff ffd1 	bl	8001e10 <getPrimaryThrottlePosition>
 8001e6e:	4603      	mov	r3, r0
 8001e70:	4a0b      	ldr	r2, [pc, #44]	@ (8001ea0 <primaryThrottleSensorErrorCheck+0x3c>)
 8001e72:	6013      	str	r3, [r2, #0]

	if (primaryPotValue <= PRIMARY_THROTTLE_RANGE_MIN || primaryPotValue >= PRIMARY_THROTTLE_RANGE_MAX)
 8001e74:	4b0a      	ldr	r3, [pc, #40]	@ (8001ea0 <primaryThrottleSensorErrorCheck+0x3c>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8001e7c:	4293      	cmp	r3, r2
 8001e7e:	d905      	bls.n	8001e8c <primaryThrottleSensorErrorCheck+0x28>
 8001e80:	4b07      	ldr	r3, [pc, #28]	@ (8001ea0 <primaryThrottleSensorErrorCheck+0x3c>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f240 22ee 	movw	r2, #750	@ 0x2ee
 8001e88:	4293      	cmp	r3, r2
 8001e8a:	d304      	bcc.n	8001e96 <primaryThrottleSensorErrorCheck+0x32>
	{
		throttleSensorTransition = true;
 8001e8c:	4b05      	ldr	r3, [pc, #20]	@ (8001ea4 <primaryThrottleSensorErrorCheck+0x40>)
 8001e8e:	2201      	movs	r2, #1
 8001e90:	701a      	strb	r2, [r3, #0]

		return true;
 8001e92:	2301      	movs	r3, #1
 8001e94:	e000      	b.n	8001e98 <primaryThrottleSensorErrorCheck+0x34>
	}
	else
	{
		return false;
 8001e96:	2300      	movs	r3, #0
	}
}
 8001e98:	4618      	mov	r0, r3
 8001e9a:	bd80      	pop	{r7, pc}
 8001e9c:	20000184 	.word	0x20000184
 8001ea0:	200001e8 	.word	0x200001e8
 8001ea4:	200001f0 	.word	0x200001f0

08001ea8 <secondaryThrottleSensorErrorCheck>:

bool secondaryThrottleSensorErrorCheck()
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	af00      	add	r7, sp, #0
	secondaryPotValue = getSecondaryThrottlePosition(&sConfig);
 8001eac:	480a      	ldr	r0, [pc, #40]	@ (8001ed8 <secondaryThrottleSensorErrorCheck+0x30>)
 8001eae:	f7ff ffc4 	bl	8001e3a <getSecondaryThrottlePosition>
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	4a09      	ldr	r2, [pc, #36]	@ (8001edc <secondaryThrottleSensorErrorCheck+0x34>)
 8001eb6:	6013      	str	r3, [r2, #0]

	if (secondaryPotValue <= SECONDARY_THROTTLE_RANGE_MIN || secondaryPotValue >= SECONDARY_THROTTLE_RANGE_MAX)
 8001eb8:	4b08      	ldr	r3, [pc, #32]	@ (8001edc <secondaryThrottleSensorErrorCheck+0x34>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	2296      	movs	r2, #150	@ 0x96
 8001ebe:	4293      	cmp	r3, r2
 8001ec0:	d905      	bls.n	8001ece <secondaryThrottleSensorErrorCheck+0x26>
 8001ec2:	4b06      	ldr	r3, [pc, #24]	@ (8001edc <secondaryThrottleSensorErrorCheck+0x34>)
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8001eca:	4293      	cmp	r3, r2
 8001ecc:	d301      	bcc.n	8001ed2 <secondaryThrottleSensorErrorCheck+0x2a>
	{
		return true;
 8001ece:	2301      	movs	r3, #1
 8001ed0:	e000      	b.n	8001ed4 <secondaryThrottleSensorErrorCheck+0x2c>
	}
	else
	{
		return false;
 8001ed2:	2300      	movs	r3, #0
	}
}
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	bd80      	pop	{r7, pc}
 8001ed8:	20000184 	.word	0x20000184
 8001edc:	200001ec 	.word	0x200001ec

08001ee0 <torqueRequest>:
		}
	}
}

void torqueRequest(void)
{
 8001ee0:	b590      	push	{r4, r7, lr}
 8001ee2:	b083      	sub	sp, #12
 8001ee4:	af02      	add	r7, sp, #8
	if ((errorSet[PRIM_THROTTLE_SENS_ERR] == true || errorSet[SECOND_THROTTLE_SENS_ERR] == true)) //|| errorSet[THROTTLE_OFFSET_ERROR] == true)
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	4a1f      	ldr	r2, [pc, #124]	@ (8001f68 <torqueRequest+0x88>)
 8001eea:	5cd3      	ldrb	r3, [r2, r3]
 8001eec:	2b01      	cmp	r3, #1
 8001eee:	d004      	beq.n	8001efa <torqueRequest+0x1a>
 8001ef0:	2301      	movs	r3, #1
 8001ef2:	4a1d      	ldr	r2, [pc, #116]	@ (8001f68 <torqueRequest+0x88>)
 8001ef4:	5cd3      	ldrb	r3, [r2, r3]
 8001ef6:	2b01      	cmp	r3, #1
 8001ef8:	d104      	bne.n	8001f04 <torqueRequest+0x24>
	{
		torqueRefLimit = 5000;
 8001efa:	4b1c      	ldr	r3, [pc, #112]	@ (8001f6c <torqueRequest+0x8c>)
 8001efc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f00:	601a      	str	r2, [r3, #0]
 8001f02:	e026      	b.n	8001f52 <torqueRequest+0x72>
	}
	else
	{
		//counter = 0;

		primaryPotValue = getPrimaryThrottlePosition(&sConfig);
 8001f04:	481a      	ldr	r0, [pc, #104]	@ (8001f70 <torqueRequest+0x90>)
 8001f06:	f7ff ff83 	bl	8001e10 <getPrimaryThrottlePosition>
 8001f0a:	4603      	mov	r3, r0
 8001f0c:	4a19      	ldr	r2, [pc, #100]	@ (8001f74 <torqueRequest+0x94>)
 8001f0e:	6013      	str	r3, [r2, #0]

		torqueRefLimit = map(primaryPotValue, PRIMARY_THROTTLE_POSITION_MIN, PRIMARY_THROTTLE_POSITION_MAX, TORQUE_REF_LIMIT_MIN, TORQUE_REF_LIMIT_MAX);
 8001f10:	4b18      	ldr	r3, [pc, #96]	@ (8001f74 <torqueRequest+0x94>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	4618      	mov	r0, r3
 8001f16:	f44f 7311 	mov.w	r3, #580	@ 0x244
 8001f1a:	4619      	mov	r1, r3
 8001f1c:	f240 239e 	movw	r3, #670	@ 0x29e
 8001f20:	461c      	mov	r4, r3
 8001f22:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f26:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 8001f2a:	9300      	str	r3, [sp, #0]
 8001f2c:	4613      	mov	r3, r2
 8001f2e:	4622      	mov	r2, r4
 8001f30:	f7ff fde6 	bl	8001b00 <map>
 8001f34:	4603      	mov	r3, r0
 8001f36:	4a0d      	ldr	r2, [pc, #52]	@ (8001f6c <torqueRequest+0x8c>)
 8001f38:	6013      	str	r3, [r2, #0]

		torqueRefLimit = constrain(torqueRefLimit, TORQUE_REF_LIMIT_MIN, TORQUE_REF_LIMIT_MAX);
 8001f3a:	4b0c      	ldr	r3, [pc, #48]	@ (8001f6c <torqueRequest+0x8c>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f241 3188 	movw	r1, #5000	@ 0x1388
 8001f42:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 8001f46:	4618      	mov	r0, r3
 8001f48:	f7ff fdf6 	bl	8001b38 <constrain>
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	4a07      	ldr	r2, [pc, #28]	@ (8001f6c <torqueRequest+0x8c>)
 8001f50:	6013      	str	r3, [r2, #0]
		torqueRefLimit = map(secondaryPotValue, SECONDARY_THROTTLE_POSITION_MIN, SECONDARY_THROTTLE_POSITION_MAX, TORQUE_REF_LIMIT_MIN, TORQUE_REF_LIMIT_MAX);

		torqueRefLimit = constrain(torqueRefLimit, TORQUE_REF_LIMIT_MIN, TORQUE_REF_LIMIT_MAX);
	}*/

	torqueControlMessage(&hcan1, SPEED_REF_LIMIT, &torqueRefLimit);
 8001f52:	f649 1364 	movw	r3, #39268	@ 0x9964
 8001f56:	4a05      	ldr	r2, [pc, #20]	@ (8001f6c <torqueRequest+0x8c>)
 8001f58:	4619      	mov	r1, r3
 8001f5a:	4807      	ldr	r0, [pc, #28]	@ (8001f78 <torqueRequest+0x98>)
 8001f5c:	f7fe fc1e 	bl	800079c <torqueControlMessage>
}
 8001f60:	bf00      	nop
 8001f62:	3704      	adds	r7, #4
 8001f64:	46bd      	mov	sp, r7
 8001f66:	bd90      	pop	{r4, r7, pc}
 8001f68:	200001f4 	.word	0x200001f4
 8001f6c:	20000018 	.word	0x20000018
 8001f70:	20000184 	.word	0x20000184
 8001f74:	200001e8 	.word	0x200001e8
 8001f78:	20000094 	.word	0x20000094

08001f7c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b082      	sub	sp, #8
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001f8c:	d101      	bne.n	8001f92 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001f8e:	f000 fca5 	bl	80028dc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001f92:	bf00      	nop
 8001f94:	3708      	adds	r7, #8
 8001f96:	46bd      	mov	sp, r7
 8001f98:	bd80      	pop	{r7, pc}
	...

08001f9c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001fa0:	b672      	cpsid	i
}
 8001fa2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  HAL_GPIO_WritePin(CAN_FAULT_PORT, CAN_FAULT_PIN, FAULT_STATE);
 8001fa4:	4b03      	ldr	r3, [pc, #12]	@ (8001fb4 <Error_Handler+0x18>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	2110      	movs	r1, #16
 8001faa:	2200      	movs	r2, #0
 8001fac:	4618      	mov	r0, r3
 8001fae:	f002 fa07 	bl	80043c0 <HAL_GPIO_WritePin>
 8001fb2:	e7f7      	b.n	8001fa4 <Error_Handler+0x8>
 8001fb4:	20000000 	.word	0x20000000

08001fb8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	b083      	sub	sp, #12
 8001fbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001fbe:	4b0f      	ldr	r3, [pc, #60]	@ (8001ffc <HAL_MspInit+0x44>)
 8001fc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fc2:	4a0e      	ldr	r2, [pc, #56]	@ (8001ffc <HAL_MspInit+0x44>)
 8001fc4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001fc8:	6413      	str	r3, [r2, #64]	@ 0x40
 8001fca:	4b0c      	ldr	r3, [pc, #48]	@ (8001ffc <HAL_MspInit+0x44>)
 8001fcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001fd2:	607b      	str	r3, [r7, #4]
 8001fd4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fd6:	4b09      	ldr	r3, [pc, #36]	@ (8001ffc <HAL_MspInit+0x44>)
 8001fd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fda:	4a08      	ldr	r2, [pc, #32]	@ (8001ffc <HAL_MspInit+0x44>)
 8001fdc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001fe0:	6453      	str	r3, [r2, #68]	@ 0x44
 8001fe2:	4b06      	ldr	r3, [pc, #24]	@ (8001ffc <HAL_MspInit+0x44>)
 8001fe4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fe6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001fea:	603b      	str	r3, [r7, #0]
 8001fec:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001fee:	bf00      	nop
 8001ff0:	370c      	adds	r7, #12
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff8:	4770      	bx	lr
 8001ffa:	bf00      	nop
 8001ffc:	40023800 	.word	0x40023800

08002000 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	b08a      	sub	sp, #40	@ 0x28
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002008:	f107 0314 	add.w	r3, r7, #20
 800200c:	2200      	movs	r2, #0
 800200e:	601a      	str	r2, [r3, #0]
 8002010:	605a      	str	r2, [r3, #4]
 8002012:	609a      	str	r2, [r3, #8]
 8002014:	60da      	str	r2, [r3, #12]
 8002016:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	4a15      	ldr	r2, [pc, #84]	@ (8002074 <HAL_ADC_MspInit+0x74>)
 800201e:	4293      	cmp	r3, r2
 8002020:	d123      	bne.n	800206a <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002022:	4b15      	ldr	r3, [pc, #84]	@ (8002078 <HAL_ADC_MspInit+0x78>)
 8002024:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002026:	4a14      	ldr	r2, [pc, #80]	@ (8002078 <HAL_ADC_MspInit+0x78>)
 8002028:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800202c:	6453      	str	r3, [r2, #68]	@ 0x44
 800202e:	4b12      	ldr	r3, [pc, #72]	@ (8002078 <HAL_ADC_MspInit+0x78>)
 8002030:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002032:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002036:	613b      	str	r3, [r7, #16]
 8002038:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800203a:	4b0f      	ldr	r3, [pc, #60]	@ (8002078 <HAL_ADC_MspInit+0x78>)
 800203c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800203e:	4a0e      	ldr	r2, [pc, #56]	@ (8002078 <HAL_ADC_MspInit+0x78>)
 8002040:	f043 0301 	orr.w	r3, r3, #1
 8002044:	6313      	str	r3, [r2, #48]	@ 0x30
 8002046:	4b0c      	ldr	r3, [pc, #48]	@ (8002078 <HAL_ADC_MspInit+0x78>)
 8002048:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800204a:	f003 0301 	and.w	r3, r3, #1
 800204e:	60fb      	str	r3, [r7, #12]
 8002050:	68fb      	ldr	r3, [r7, #12]
    PA0/WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8002052:	230f      	movs	r3, #15
 8002054:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002056:	2303      	movs	r3, #3
 8002058:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800205a:	2300      	movs	r3, #0
 800205c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800205e:	f107 0314 	add.w	r3, r7, #20
 8002062:	4619      	mov	r1, r3
 8002064:	4805      	ldr	r0, [pc, #20]	@ (800207c <HAL_ADC_MspInit+0x7c>)
 8002066:	f001 ffe7 	bl	8004038 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800206a:	bf00      	nop
 800206c:	3728      	adds	r7, #40	@ 0x28
 800206e:	46bd      	mov	sp, r7
 8002070:	bd80      	pop	{r7, pc}
 8002072:	bf00      	nop
 8002074:	40012000 	.word	0x40012000
 8002078:	40023800 	.word	0x40023800
 800207c:	40020000 	.word	0x40020000

08002080 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b08c      	sub	sp, #48	@ 0x30
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002088:	f107 031c 	add.w	r3, r7, #28
 800208c:	2200      	movs	r2, #0
 800208e:	601a      	str	r2, [r3, #0]
 8002090:	605a      	str	r2, [r3, #4]
 8002092:	609a      	str	r2, [r3, #8]
 8002094:	60da      	str	r2, [r3, #12]
 8002096:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	4a4e      	ldr	r2, [pc, #312]	@ (80021d8 <HAL_CAN_MspInit+0x158>)
 800209e:	4293      	cmp	r3, r2
 80020a0:	d142      	bne.n	8002128 <HAL_CAN_MspInit+0xa8>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 80020a2:	4b4e      	ldr	r3, [pc, #312]	@ (80021dc <HAL_CAN_MspInit+0x15c>)
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	3301      	adds	r3, #1
 80020a8:	4a4c      	ldr	r2, [pc, #304]	@ (80021dc <HAL_CAN_MspInit+0x15c>)
 80020aa:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 80020ac:	4b4b      	ldr	r3, [pc, #300]	@ (80021dc <HAL_CAN_MspInit+0x15c>)
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	2b01      	cmp	r3, #1
 80020b2:	d10b      	bne.n	80020cc <HAL_CAN_MspInit+0x4c>
      __HAL_RCC_CAN1_CLK_ENABLE();
 80020b4:	4b4a      	ldr	r3, [pc, #296]	@ (80021e0 <HAL_CAN_MspInit+0x160>)
 80020b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020b8:	4a49      	ldr	r2, [pc, #292]	@ (80021e0 <HAL_CAN_MspInit+0x160>)
 80020ba:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80020be:	6413      	str	r3, [r2, #64]	@ 0x40
 80020c0:	4b47      	ldr	r3, [pc, #284]	@ (80021e0 <HAL_CAN_MspInit+0x160>)
 80020c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020c4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80020c8:	61bb      	str	r3, [r7, #24]
 80020ca:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020cc:	4b44      	ldr	r3, [pc, #272]	@ (80021e0 <HAL_CAN_MspInit+0x160>)
 80020ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020d0:	4a43      	ldr	r2, [pc, #268]	@ (80021e0 <HAL_CAN_MspInit+0x160>)
 80020d2:	f043 0301 	orr.w	r3, r3, #1
 80020d6:	6313      	str	r3, [r2, #48]	@ 0x30
 80020d8:	4b41      	ldr	r3, [pc, #260]	@ (80021e0 <HAL_CAN_MspInit+0x160>)
 80020da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020dc:	f003 0301 	and.w	r3, r3, #1
 80020e0:	617b      	str	r3, [r7, #20]
 80020e2:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80020e4:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80020e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020ea:	2302      	movs	r3, #2
 80020ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020ee:	2300      	movs	r3, #0
 80020f0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020f2:	2303      	movs	r3, #3
 80020f4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80020f6:	2309      	movs	r3, #9
 80020f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020fa:	f107 031c 	add.w	r3, r7, #28
 80020fe:	4619      	mov	r1, r3
 8002100:	4838      	ldr	r0, [pc, #224]	@ (80021e4 <HAL_CAN_MspInit+0x164>)
 8002102:	f001 ff99 	bl	8004038 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 7, 0);
 8002106:	2200      	movs	r2, #0
 8002108:	2107      	movs	r1, #7
 800210a:	2014      	movs	r0, #20
 800210c:	f001 ff6a 	bl	8003fe4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8002110:	2014      	movs	r0, #20
 8002112:	f001 ff83 	bl	800401c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 6, 0);
 8002116:	2200      	movs	r2, #0
 8002118:	2106      	movs	r1, #6
 800211a:	2015      	movs	r0, #21
 800211c:	f001 ff62 	bl	8003fe4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8002120:	2015      	movs	r0, #21
 8002122:	f001 ff7b 	bl	800401c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }

}
 8002126:	e052      	b.n	80021ce <HAL_CAN_MspInit+0x14e>
  else if(hcan->Instance==CAN2)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	4a2e      	ldr	r2, [pc, #184]	@ (80021e8 <HAL_CAN_MspInit+0x168>)
 800212e:	4293      	cmp	r3, r2
 8002130:	d14d      	bne.n	80021ce <HAL_CAN_MspInit+0x14e>
    __HAL_RCC_CAN2_CLK_ENABLE();
 8002132:	4b2b      	ldr	r3, [pc, #172]	@ (80021e0 <HAL_CAN_MspInit+0x160>)
 8002134:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002136:	4a2a      	ldr	r2, [pc, #168]	@ (80021e0 <HAL_CAN_MspInit+0x160>)
 8002138:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800213c:	6413      	str	r3, [r2, #64]	@ 0x40
 800213e:	4b28      	ldr	r3, [pc, #160]	@ (80021e0 <HAL_CAN_MspInit+0x160>)
 8002140:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002142:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002146:	613b      	str	r3, [r7, #16]
 8002148:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 800214a:	4b24      	ldr	r3, [pc, #144]	@ (80021dc <HAL_CAN_MspInit+0x15c>)
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	3301      	adds	r3, #1
 8002150:	4a22      	ldr	r2, [pc, #136]	@ (80021dc <HAL_CAN_MspInit+0x15c>)
 8002152:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8002154:	4b21      	ldr	r3, [pc, #132]	@ (80021dc <HAL_CAN_MspInit+0x15c>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	2b01      	cmp	r3, #1
 800215a:	d10b      	bne.n	8002174 <HAL_CAN_MspInit+0xf4>
      __HAL_RCC_CAN1_CLK_ENABLE();
 800215c:	4b20      	ldr	r3, [pc, #128]	@ (80021e0 <HAL_CAN_MspInit+0x160>)
 800215e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002160:	4a1f      	ldr	r2, [pc, #124]	@ (80021e0 <HAL_CAN_MspInit+0x160>)
 8002162:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002166:	6413      	str	r3, [r2, #64]	@ 0x40
 8002168:	4b1d      	ldr	r3, [pc, #116]	@ (80021e0 <HAL_CAN_MspInit+0x160>)
 800216a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800216c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002170:	60fb      	str	r3, [r7, #12]
 8002172:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002174:	4b1a      	ldr	r3, [pc, #104]	@ (80021e0 <HAL_CAN_MspInit+0x160>)
 8002176:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002178:	4a19      	ldr	r2, [pc, #100]	@ (80021e0 <HAL_CAN_MspInit+0x160>)
 800217a:	f043 0302 	orr.w	r3, r3, #2
 800217e:	6313      	str	r3, [r2, #48]	@ 0x30
 8002180:	4b17      	ldr	r3, [pc, #92]	@ (80021e0 <HAL_CAN_MspInit+0x160>)
 8002182:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002184:	f003 0302 	and.w	r3, r3, #2
 8002188:	60bb      	str	r3, [r7, #8]
 800218a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 800218c:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8002190:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002192:	2302      	movs	r3, #2
 8002194:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002196:	2300      	movs	r3, #0
 8002198:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800219a:	2303      	movs	r3, #3
 800219c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 800219e:	2309      	movs	r3, #9
 80021a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021a2:	f107 031c 	add.w	r3, r7, #28
 80021a6:	4619      	mov	r1, r3
 80021a8:	4810      	ldr	r0, [pc, #64]	@ (80021ec <HAL_CAN_MspInit+0x16c>)
 80021aa:	f001 ff45 	bl	8004038 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(CAN2_RX0_IRQn, 1, 0);
 80021ae:	2200      	movs	r2, #0
 80021b0:	2101      	movs	r1, #1
 80021b2:	2040      	movs	r0, #64	@ 0x40
 80021b4:	f001 ff16 	bl	8003fe4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 80021b8:	2040      	movs	r0, #64	@ 0x40
 80021ba:	f001 ff2f 	bl	800401c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN2_RX1_IRQn, 2, 0);
 80021be:	2200      	movs	r2, #0
 80021c0:	2102      	movs	r1, #2
 80021c2:	2041      	movs	r0, #65	@ 0x41
 80021c4:	f001 ff0e 	bl	8003fe4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX1_IRQn);
 80021c8:	2041      	movs	r0, #65	@ 0x41
 80021ca:	f001 ff27 	bl	800401c <HAL_NVIC_EnableIRQ>
}
 80021ce:	bf00      	nop
 80021d0:	3730      	adds	r7, #48	@ 0x30
 80021d2:	46bd      	mov	sp, r7
 80021d4:	bd80      	pop	{r7, pc}
 80021d6:	bf00      	nop
 80021d8:	40006400 	.word	0x40006400
 80021dc:	200002a8 	.word	0x200002a8
 80021e0:	40023800 	.word	0x40023800
 80021e4:	40020000 	.word	0x40020000
 80021e8:	40006800 	.word	0x40006800
 80021ec:	40020400 	.word	0x40020400

080021f0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b084      	sub	sp, #16
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	4a16      	ldr	r2, [pc, #88]	@ (8002258 <HAL_TIM_Base_MspInit+0x68>)
 80021fe:	4293      	cmp	r3, r2
 8002200:	d114      	bne.n	800222c <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002202:	4b16      	ldr	r3, [pc, #88]	@ (800225c <HAL_TIM_Base_MspInit+0x6c>)
 8002204:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002206:	4a15      	ldr	r2, [pc, #84]	@ (800225c <HAL_TIM_Base_MspInit+0x6c>)
 8002208:	f043 0301 	orr.w	r3, r3, #1
 800220c:	6453      	str	r3, [r2, #68]	@ 0x44
 800220e:	4b13      	ldr	r3, [pc, #76]	@ (800225c <HAL_TIM_Base_MspInit+0x6c>)
 8002210:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002212:	f003 0301 	and.w	r3, r3, #1
 8002216:	60fb      	str	r3, [r7, #12]
 8002218:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 800221a:	2200      	movs	r2, #0
 800221c:	2100      	movs	r1, #0
 800221e:	201b      	movs	r0, #27
 8002220:	f001 fee0 	bl	8003fe4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8002224:	201b      	movs	r0, #27
 8002226:	f001 fef9 	bl	800401c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 800222a:	e010      	b.n	800224e <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM8)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	4a0b      	ldr	r2, [pc, #44]	@ (8002260 <HAL_TIM_Base_MspInit+0x70>)
 8002232:	4293      	cmp	r3, r2
 8002234:	d10b      	bne.n	800224e <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002236:	4b09      	ldr	r3, [pc, #36]	@ (800225c <HAL_TIM_Base_MspInit+0x6c>)
 8002238:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800223a:	4a08      	ldr	r2, [pc, #32]	@ (800225c <HAL_TIM_Base_MspInit+0x6c>)
 800223c:	f043 0302 	orr.w	r3, r3, #2
 8002240:	6453      	str	r3, [r2, #68]	@ 0x44
 8002242:	4b06      	ldr	r3, [pc, #24]	@ (800225c <HAL_TIM_Base_MspInit+0x6c>)
 8002244:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002246:	f003 0302 	and.w	r3, r3, #2
 800224a:	60bb      	str	r3, [r7, #8]
 800224c:	68bb      	ldr	r3, [r7, #8]
}
 800224e:	bf00      	nop
 8002250:	3710      	adds	r7, #16
 8002252:	46bd      	mov	sp, r7
 8002254:	bd80      	pop	{r7, pc}
 8002256:	bf00      	nop
 8002258:	40010000 	.word	0x40010000
 800225c:	40023800 	.word	0x40023800
 8002260:	40010400 	.word	0x40010400

08002264 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b088      	sub	sp, #32
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800226c:	f107 030c 	add.w	r3, r7, #12
 8002270:	2200      	movs	r2, #0
 8002272:	601a      	str	r2, [r3, #0]
 8002274:	605a      	str	r2, [r3, #4]
 8002276:	609a      	str	r2, [r3, #8]
 8002278:	60da      	str	r2, [r3, #12]
 800227a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM8)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	4a11      	ldr	r2, [pc, #68]	@ (80022c8 <HAL_TIM_MspPostInit+0x64>)
 8002282:	4293      	cmp	r3, r2
 8002284:	d11c      	bne.n	80022c0 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM8_MspPostInit 0 */

  /* USER CODE END TIM8_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002286:	4b11      	ldr	r3, [pc, #68]	@ (80022cc <HAL_TIM_MspPostInit+0x68>)
 8002288:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800228a:	4a10      	ldr	r2, [pc, #64]	@ (80022cc <HAL_TIM_MspPostInit+0x68>)
 800228c:	f043 0304 	orr.w	r3, r3, #4
 8002290:	6313      	str	r3, [r2, #48]	@ 0x30
 8002292:	4b0e      	ldr	r3, [pc, #56]	@ (80022cc <HAL_TIM_MspPostInit+0x68>)
 8002294:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002296:	f003 0304 	and.w	r3, r3, #4
 800229a:	60bb      	str	r3, [r7, #8]
 800229c:	68bb      	ldr	r3, [r7, #8]
    /**TIM8 GPIO Configuration
    PC8     ------> TIM8_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800229e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80022a2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022a4:	2302      	movs	r3, #2
 80022a6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022a8:	2300      	movs	r3, #0
 80022aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022ac:	2300      	movs	r3, #0
 80022ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80022b0:	2303      	movs	r3, #3
 80022b2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80022b4:	f107 030c 	add.w	r3, r7, #12
 80022b8:	4619      	mov	r1, r3
 80022ba:	4805      	ldr	r0, [pc, #20]	@ (80022d0 <HAL_TIM_MspPostInit+0x6c>)
 80022bc:	f001 febc 	bl	8004038 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 80022c0:	bf00      	nop
 80022c2:	3720      	adds	r7, #32
 80022c4:	46bd      	mov	sp, r7
 80022c6:	bd80      	pop	{r7, pc}
 80022c8:	40010400 	.word	0x40010400
 80022cc:	40023800 	.word	0x40023800
 80022d0:	40020800 	.word	0x40020800

080022d4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b08e      	sub	sp, #56	@ 0x38
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80022dc:	2300      	movs	r3, #0
 80022de:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80022e0:	2300      	movs	r3, #0
 80022e2:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 80022e4:	4b34      	ldr	r3, [pc, #208]	@ (80023b8 <HAL_InitTick+0xe4>)
 80022e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022e8:	4a33      	ldr	r2, [pc, #204]	@ (80023b8 <HAL_InitTick+0xe4>)
 80022ea:	f043 0301 	orr.w	r3, r3, #1
 80022ee:	6413      	str	r3, [r2, #64]	@ 0x40
 80022f0:	4b31      	ldr	r3, [pc, #196]	@ (80023b8 <HAL_InitTick+0xe4>)
 80022f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022f4:	f003 0301 	and.w	r3, r3, #1
 80022f8:	60fb      	str	r3, [r7, #12]
 80022fa:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80022fc:	f107 0210 	add.w	r2, r7, #16
 8002300:	f107 0314 	add.w	r3, r7, #20
 8002304:	4611      	mov	r1, r2
 8002306:	4618      	mov	r0, r3
 8002308:	f002 fcf4 	bl	8004cf4 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800230c:	6a3b      	ldr	r3, [r7, #32]
 800230e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8002310:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002312:	2b00      	cmp	r3, #0
 8002314:	d103      	bne.n	800231e <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002316:	f002 fcd9 	bl	8004ccc <HAL_RCC_GetPCLK1Freq>
 800231a:	6378      	str	r0, [r7, #52]	@ 0x34
 800231c:	e004      	b.n	8002328 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800231e:	f002 fcd5 	bl	8004ccc <HAL_RCC_GetPCLK1Freq>
 8002322:	4603      	mov	r3, r0
 8002324:	005b      	lsls	r3, r3, #1
 8002326:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002328:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800232a:	4a24      	ldr	r2, [pc, #144]	@ (80023bc <HAL_InitTick+0xe8>)
 800232c:	fba2 2303 	umull	r2, r3, r2, r3
 8002330:	0c9b      	lsrs	r3, r3, #18
 8002332:	3b01      	subs	r3, #1
 8002334:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8002336:	4b22      	ldr	r3, [pc, #136]	@ (80023c0 <HAL_InitTick+0xec>)
 8002338:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800233c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 800233e:	4b20      	ldr	r3, [pc, #128]	@ (80023c0 <HAL_InitTick+0xec>)
 8002340:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002344:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 8002346:	4a1e      	ldr	r2, [pc, #120]	@ (80023c0 <HAL_InitTick+0xec>)
 8002348:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800234a:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 800234c:	4b1c      	ldr	r3, [pc, #112]	@ (80023c0 <HAL_InitTick+0xec>)
 800234e:	2200      	movs	r2, #0
 8002350:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002352:	4b1b      	ldr	r3, [pc, #108]	@ (80023c0 <HAL_InitTick+0xec>)
 8002354:	2200      	movs	r2, #0
 8002356:	609a      	str	r2, [r3, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002358:	4b19      	ldr	r3, [pc, #100]	@ (80023c0 <HAL_InitTick+0xec>)
 800235a:	2200      	movs	r2, #0
 800235c:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim2);
 800235e:	4818      	ldr	r0, [pc, #96]	@ (80023c0 <HAL_InitTick+0xec>)
 8002360:	f002 fcfa 	bl	8004d58 <HAL_TIM_Base_Init>
 8002364:	4603      	mov	r3, r0
 8002366:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 800236a:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800236e:	2b00      	cmp	r3, #0
 8002370:	d11b      	bne.n	80023aa <HAL_InitTick+0xd6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 8002372:	4813      	ldr	r0, [pc, #76]	@ (80023c0 <HAL_InitTick+0xec>)
 8002374:	f002 fd48 	bl	8004e08 <HAL_TIM_Base_Start_IT>
 8002378:	4603      	mov	r3, r0
 800237a:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 800237e:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002382:	2b00      	cmp	r3, #0
 8002384:	d111      	bne.n	80023aa <HAL_InitTick+0xd6>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002386:	201c      	movs	r0, #28
 8002388:	f001 fe48 	bl	800401c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	2b0f      	cmp	r3, #15
 8002390:	d808      	bhi.n	80023a4 <HAL_InitTick+0xd0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 8002392:	2200      	movs	r2, #0
 8002394:	6879      	ldr	r1, [r7, #4]
 8002396:	201c      	movs	r0, #28
 8002398:	f001 fe24 	bl	8003fe4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800239c:	4a09      	ldr	r2, [pc, #36]	@ (80023c4 <HAL_InitTick+0xf0>)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	6013      	str	r3, [r2, #0]
 80023a2:	e002      	b.n	80023aa <HAL_InitTick+0xd6>
      }
      else
      {
        status = HAL_ERROR;
 80023a4:	2301      	movs	r3, #1
 80023a6:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80023aa:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 80023ae:	4618      	mov	r0, r3
 80023b0:	3738      	adds	r7, #56	@ 0x38
 80023b2:	46bd      	mov	sp, r7
 80023b4:	bd80      	pop	{r7, pc}
 80023b6:	bf00      	nop
 80023b8:	40023800 	.word	0x40023800
 80023bc:	431bde83 	.word	0x431bde83
 80023c0:	200002ac 	.word	0x200002ac
 80023c4:	20000020 	.word	0x20000020

080023c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80023c8:	b480      	push	{r7}
 80023ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80023cc:	bf00      	nop
 80023ce:	e7fd      	b.n	80023cc <NMI_Handler+0x4>

080023d0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80023d0:	b480      	push	{r7}
 80023d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80023d4:	bf00      	nop
 80023d6:	e7fd      	b.n	80023d4 <HardFault_Handler+0x4>

080023d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80023d8:	b480      	push	{r7}
 80023da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80023dc:	bf00      	nop
 80023de:	e7fd      	b.n	80023dc <MemManage_Handler+0x4>

080023e0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80023e0:	b480      	push	{r7}
 80023e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80023e4:	bf00      	nop
 80023e6:	e7fd      	b.n	80023e4 <BusFault_Handler+0x4>

080023e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80023e8:	b480      	push	{r7}
 80023ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80023ec:	bf00      	nop
 80023ee:	e7fd      	b.n	80023ec <UsageFault_Handler+0x4>

080023f0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80023f0:	b480      	push	{r7}
 80023f2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80023f4:	bf00      	nop
 80023f6:	46bd      	mov	sp, r7
 80023f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fc:	4770      	bx	lr
	...

08002400 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8002404:	4802      	ldr	r0, [pc, #8]	@ (8002410 <CAN1_RX0_IRQHandler+0x10>)
 8002406:	f001 fb0f 	bl	8003a28 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 800240a:	bf00      	nop
 800240c:	bd80      	pop	{r7, pc}
 800240e:	bf00      	nop
 8002410:	20000094 	.word	0x20000094

08002414 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8002418:	4802      	ldr	r0, [pc, #8]	@ (8002424 <CAN1_RX1_IRQHandler+0x10>)
 800241a:	f001 fb05 	bl	8003a28 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 800241e:	bf00      	nop
 8002420:	bd80      	pop	{r7, pc}
 8002422:	bf00      	nop
 8002424:	20000094 	.word	0x20000094

08002428 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800242c:	4802      	ldr	r0, [pc, #8]	@ (8002438 <TIM1_CC_IRQHandler+0x10>)
 800242e:	f003 f937 	bl	80056a0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8002432:	bf00      	nop
 8002434:	bd80      	pop	{r7, pc}
 8002436:	bf00      	nop
 8002438:	200000e4 	.word	0x200000e4

0800243c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002440:	4802      	ldr	r0, [pc, #8]	@ (800244c <TIM2_IRQHandler+0x10>)
 8002442:	f003 f92d 	bl	80056a0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002446:	bf00      	nop
 8002448:	bd80      	pop	{r7, pc}
 800244a:	bf00      	nop
 800244c:	200002ac 	.word	0x200002ac

08002450 <CAN2_RX0_IRQHandler>:

/**
  * @brief This function handles CAN2 RX0 interrupts.
  */
void CAN2_RX0_IRQHandler(void)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX0_IRQn 0 */

  /* USER CODE END CAN2_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8002454:	4802      	ldr	r0, [pc, #8]	@ (8002460 <CAN2_RX0_IRQHandler+0x10>)
 8002456:	f001 fae7 	bl	8003a28 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX0_IRQn 1 */

  /* USER CODE END CAN2_RX0_IRQn 1 */
}
 800245a:	bf00      	nop
 800245c:	bd80      	pop	{r7, pc}
 800245e:	bf00      	nop
 8002460:	200000bc 	.word	0x200000bc

08002464 <CAN2_RX1_IRQHandler>:

/**
  * @brief This function handles CAN2 RX1 interrupt.
  */
void CAN2_RX1_IRQHandler(void)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX1_IRQn 0 */

  /* USER CODE END CAN2_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8002468:	4802      	ldr	r0, [pc, #8]	@ (8002474 <CAN2_RX1_IRQHandler+0x10>)
 800246a:	f001 fadd 	bl	8003a28 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX1_IRQn 1 */

  /* USER CODE END CAN2_RX1_IRQn 1 */
}
 800246e:	bf00      	nop
 8002470:	bd80      	pop	{r7, pc}
 8002472:	bf00      	nop
 8002474:	200000bc 	.word	0x200000bc

08002478 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002478:	b480      	push	{r7}
 800247a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800247c:	4b06      	ldr	r3, [pc, #24]	@ (8002498 <SystemInit+0x20>)
 800247e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002482:	4a05      	ldr	r2, [pc, #20]	@ (8002498 <SystemInit+0x20>)
 8002484:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002488:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800248c:	bf00      	nop
 800248e:	46bd      	mov	sp, r7
 8002490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002494:	4770      	bx	lr
 8002496:	bf00      	nop
 8002498:	e000ed00 	.word	0xe000ed00

0800249c <Unpack_TS_ECU1_TX1_Temp>:
  return TS_ECU_SYNC_RX2_CANID;
}

// --------------------------------------------------------------------------
uint32_t Unpack_TS_ECU1_TX1_Temp(TS_ECU1_TX1_t* _m, const uint8_t* _d, uint8_t dlc_)
{
 800249c:	b480      	push	{r7}
 800249e:	b085      	sub	sp, #20
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	60f8      	str	r0, [r7, #12]
 80024a4:	60b9      	str	r1, [r7, #8]
 80024a6:	4613      	mov	r3, r2
 80024a8:	71fb      	strb	r3, [r7, #7]
  _m->TS_ECU_MaxSegmentTemperature = ((_d[0] & (0xFFU))) - 40;
 80024aa:	68bb      	ldr	r3, [r7, #8]
 80024ac:	781b      	ldrb	r3, [r3, #0]
 80024ae:	3b28      	subs	r3, #40	@ 0x28
 80024b0:	b29b      	uxth	r3, r3
 80024b2:	b21a      	sxth	r2, r3
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	801a      	strh	r2, [r3, #0]
  _m->TS_ECU_MinSegmentTemperature = ((_d[1] & (0xFFU))) - 40;
 80024b8:	68bb      	ldr	r3, [r7, #8]
 80024ba:	3301      	adds	r3, #1
 80024bc:	781b      	ldrb	r3, [r3, #0]
 80024be:	3b28      	subs	r3, #40	@ 0x28
 80024c0:	b29b      	uxth	r3, r3
 80024c2:	b21a      	sxth	r2, r3
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	805a      	strh	r2, [r3, #2]
  _m->TS_ECU_AverageSegmentTemp = ((_d[2] & (0xFFU))) - 40;
 80024c8:	68bb      	ldr	r3, [r7, #8]
 80024ca:	3302      	adds	r3, #2
 80024cc:	781b      	ldrb	r3, [r3, #0]
 80024ce:	3b28      	subs	r3, #40	@ 0x28
 80024d0:	b29b      	uxth	r3, r3
 80024d2:	b21a      	sxth	r2, r3
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	809a      	strh	r2, [r3, #4]
  _m->TS_ECU_MaxTemperatureCellCount = (_d[3] & (0xFFU));
 80024d8:	68bb      	ldr	r3, [r7, #8]
 80024da:	3303      	adds	r3, #3
 80024dc:	781a      	ldrb	r2, [r3, #0]
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	719a      	strb	r2, [r3, #6]
  _m->TS_ECU_FaultInState = (_d[4] & (0x01U));
 80024e2:	68bb      	ldr	r3, [r7, #8]
 80024e4:	3304      	adds	r3, #4
 80024e6:	781b      	ldrb	r3, [r3, #0]
 80024e8:	f003 0301 	and.w	r3, r3, #1
 80024ec:	b2da      	uxtb	r2, r3
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	71da      	strb	r2, [r3, #7]
  _m->TS_ECU_FaultOutState = ((_d[4] >> 1) & (0x01U));
 80024f2:	68bb      	ldr	r3, [r7, #8]
 80024f4:	3304      	adds	r3, #4
 80024f6:	781b      	ldrb	r3, [r3, #0]
 80024f8:	085b      	lsrs	r3, r3, #1
 80024fa:	b2db      	uxtb	r3, r3
 80024fc:	f003 0301 	and.w	r3, r3, #1
 8002500:	b2da      	uxtb	r2, r3
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	721a      	strb	r2, [r3, #8]
  _m->TS_ECU_TempThresholdFault = ((_d[4] >> 2) & (0x01U));
 8002506:	68bb      	ldr	r3, [r7, #8]
 8002508:	3304      	adds	r3, #4
 800250a:	781b      	ldrb	r3, [r3, #0]
 800250c:	089b      	lsrs	r3, r3, #2
 800250e:	b2db      	uxtb	r3, r3
 8002510:	f003 0301 	and.w	r3, r3, #1
 8002514:	b2da      	uxtb	r2, r3
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	725a      	strb	r2, [r3, #9]
  _m->TS_ECU_OpenCircuitFault = ((_d[4] >> 3) & (0x01U));
 800251a:	68bb      	ldr	r3, [r7, #8]
 800251c:	3304      	adds	r3, #4
 800251e:	781b      	ldrb	r3, [r3, #0]
 8002520:	08db      	lsrs	r3, r3, #3
 8002522:	b2db      	uxtb	r3, r3
 8002524:	f003 0301 	and.w	r3, r3, #1
 8002528:	b2da      	uxtb	r2, r3
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	729a      	strb	r2, [r3, #10]
  _m->FAN_ECU_ShortToGroundFault = ((_d[4] >> 4) & (0x01U));
 800252e:	68bb      	ldr	r3, [r7, #8]
 8002530:	3304      	adds	r3, #4
 8002532:	781b      	ldrb	r3, [r3, #0]
 8002534:	091b      	lsrs	r3, r3, #4
 8002536:	b2db      	uxtb	r3, r3
 8002538:	f003 0301 	and.w	r3, r3, #1
 800253c:	b2da      	uxtb	r2, r3
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	72da      	strb	r2, [r3, #11]
  _m->TS_ECU_CurrentState = ((_d[4] >> 5) & (0x07U));
 8002542:	68bb      	ldr	r3, [r7, #8]
 8002544:	3304      	adds	r3, #4
 8002546:	781b      	ldrb	r3, [r3, #0]
 8002548:	095b      	lsrs	r3, r3, #5
 800254a:	b2da      	uxtb	r2, r3
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	731a      	strb	r2, [r3, #12]
  return TS_ECU1_TX1_CANID;
 8002550:	f240 3311 	movw	r3, #785	@ 0x311
}
 8002554:	4618      	mov	r0, r3
 8002556:	3714      	adds	r7, #20
 8002558:	46bd      	mov	sp, r7
 800255a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255e:	4770      	bx	lr

08002560 <Unpack_TS_ECU2_TX1_Temp>:
  return TS_ECU1_TX4_CANID;
}

// --------------------------------------------------------------------------
uint32_t Unpack_TS_ECU2_TX1_Temp(TS_ECU2_TX1_t* _m, const uint8_t* _d, uint8_t dlc_)
{
 8002560:	b480      	push	{r7}
 8002562:	b085      	sub	sp, #20
 8002564:	af00      	add	r7, sp, #0
 8002566:	60f8      	str	r0, [r7, #12]
 8002568:	60b9      	str	r1, [r7, #8]
 800256a:	4613      	mov	r3, r2
 800256c:	71fb      	strb	r3, [r7, #7]
  _m->TS_ECU_MaxSegmentTemperature = ((_d[0] & (0xFFU))) - 40;
 800256e:	68bb      	ldr	r3, [r7, #8]
 8002570:	781b      	ldrb	r3, [r3, #0]
 8002572:	3b28      	subs	r3, #40	@ 0x28
 8002574:	b29b      	uxth	r3, r3
 8002576:	b21a      	sxth	r2, r3
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	801a      	strh	r2, [r3, #0]
  _m->TS_ECU_MinSegmentTemperature = ((_d[1] & (0xFFU))) - 40;
 800257c:	68bb      	ldr	r3, [r7, #8]
 800257e:	3301      	adds	r3, #1
 8002580:	781b      	ldrb	r3, [r3, #0]
 8002582:	3b28      	subs	r3, #40	@ 0x28
 8002584:	b29b      	uxth	r3, r3
 8002586:	b21a      	sxth	r2, r3
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	805a      	strh	r2, [r3, #2]
  _m->TS_ECU_AverageSegmentTemp = ((_d[2] & (0xFFU))) - 40;
 800258c:	68bb      	ldr	r3, [r7, #8]
 800258e:	3302      	adds	r3, #2
 8002590:	781b      	ldrb	r3, [r3, #0]
 8002592:	3b28      	subs	r3, #40	@ 0x28
 8002594:	b29b      	uxth	r3, r3
 8002596:	b21a      	sxth	r2, r3
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	809a      	strh	r2, [r3, #4]
  _m->TS_ECU_MaxTemperatureCellCount = (_d[3] & (0xFFU));
 800259c:	68bb      	ldr	r3, [r7, #8]
 800259e:	3303      	adds	r3, #3
 80025a0:	781a      	ldrb	r2, [r3, #0]
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	719a      	strb	r2, [r3, #6]
  _m->TS_ECU_FaultInState = (_d[4] & (0x01U));
 80025a6:	68bb      	ldr	r3, [r7, #8]
 80025a8:	3304      	adds	r3, #4
 80025aa:	781b      	ldrb	r3, [r3, #0]
 80025ac:	f003 0301 	and.w	r3, r3, #1
 80025b0:	b2da      	uxtb	r2, r3
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	71da      	strb	r2, [r3, #7]
  _m->TS_ECU_FaultOutState = ((_d[4] >> 1) & (0x01U));
 80025b6:	68bb      	ldr	r3, [r7, #8]
 80025b8:	3304      	adds	r3, #4
 80025ba:	781b      	ldrb	r3, [r3, #0]
 80025bc:	085b      	lsrs	r3, r3, #1
 80025be:	b2db      	uxtb	r3, r3
 80025c0:	f003 0301 	and.w	r3, r3, #1
 80025c4:	b2da      	uxtb	r2, r3
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	721a      	strb	r2, [r3, #8]
  _m->TS_ECU_TempThresholdFault = ((_d[4] >> 2) & (0x01U));
 80025ca:	68bb      	ldr	r3, [r7, #8]
 80025cc:	3304      	adds	r3, #4
 80025ce:	781b      	ldrb	r3, [r3, #0]
 80025d0:	089b      	lsrs	r3, r3, #2
 80025d2:	b2db      	uxtb	r3, r3
 80025d4:	f003 0301 	and.w	r3, r3, #1
 80025d8:	b2da      	uxtb	r2, r3
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	725a      	strb	r2, [r3, #9]
  _m->TS_ECU_OpenCircuitFault = ((_d[4] >> 3) & (0x01U));
 80025de:	68bb      	ldr	r3, [r7, #8]
 80025e0:	3304      	adds	r3, #4
 80025e2:	781b      	ldrb	r3, [r3, #0]
 80025e4:	08db      	lsrs	r3, r3, #3
 80025e6:	b2db      	uxtb	r3, r3
 80025e8:	f003 0301 	and.w	r3, r3, #1
 80025ec:	b2da      	uxtb	r2, r3
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	729a      	strb	r2, [r3, #10]
  _m->FAN_ECU_ShortToGroundFault = ((_d[4] >> 4) & (0x01U));
 80025f2:	68bb      	ldr	r3, [r7, #8]
 80025f4:	3304      	adds	r3, #4
 80025f6:	781b      	ldrb	r3, [r3, #0]
 80025f8:	091b      	lsrs	r3, r3, #4
 80025fa:	b2db      	uxtb	r3, r3
 80025fc:	f003 0301 	and.w	r3, r3, #1
 8002600:	b2da      	uxtb	r2, r3
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	72da      	strb	r2, [r3, #11]
  _m->TS_ECU_CurrentState = ((_d[4] >> 5) & (0x07U));
 8002606:	68bb      	ldr	r3, [r7, #8]
 8002608:	3304      	adds	r3, #4
 800260a:	781b      	ldrb	r3, [r3, #0]
 800260c:	095b      	lsrs	r3, r3, #5
 800260e:	b2da      	uxtb	r2, r3
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	731a      	strb	r2, [r3, #12]
  return TS_ECU2_TX1_CANID;
 8002614:	f240 3321 	movw	r3, #801	@ 0x321
}
 8002618:	4618      	mov	r0, r3
 800261a:	3714      	adds	r7, #20
 800261c:	46bd      	mov	sp, r7
 800261e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002622:	4770      	bx	lr

08002624 <Unpack_TS_ECU3_TX1_Temp>:
  return TS_ECU2_TX4_CANID;
}

// --------------------------------------------------------------------------
uint32_t Unpack_TS_ECU3_TX1_Temp(TS_ECU3_TX1_t* _m, const uint8_t* _d, uint8_t dlc_)
{
 8002624:	b480      	push	{r7}
 8002626:	b085      	sub	sp, #20
 8002628:	af00      	add	r7, sp, #0
 800262a:	60f8      	str	r0, [r7, #12]
 800262c:	60b9      	str	r1, [r7, #8]
 800262e:	4613      	mov	r3, r2
 8002630:	71fb      	strb	r3, [r7, #7]
  _m->TS_ECU_MaxSegmentTemperature = ((_d[0] & (0xFFU))) - 40;
 8002632:	68bb      	ldr	r3, [r7, #8]
 8002634:	781b      	ldrb	r3, [r3, #0]
 8002636:	3b28      	subs	r3, #40	@ 0x28
 8002638:	b29b      	uxth	r3, r3
 800263a:	b21a      	sxth	r2, r3
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	801a      	strh	r2, [r3, #0]
  _m->TS_ECU_MinSegmentTemperature = ((_d[1] & (0xFFU))) - 40;
 8002640:	68bb      	ldr	r3, [r7, #8]
 8002642:	3301      	adds	r3, #1
 8002644:	781b      	ldrb	r3, [r3, #0]
 8002646:	3b28      	subs	r3, #40	@ 0x28
 8002648:	b29b      	uxth	r3, r3
 800264a:	b21a      	sxth	r2, r3
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	805a      	strh	r2, [r3, #2]
  _m->TS_ECU_AverageSegmentTemp = ((_d[2] & (0xFFU))) - 40;
 8002650:	68bb      	ldr	r3, [r7, #8]
 8002652:	3302      	adds	r3, #2
 8002654:	781b      	ldrb	r3, [r3, #0]
 8002656:	3b28      	subs	r3, #40	@ 0x28
 8002658:	b29b      	uxth	r3, r3
 800265a:	b21a      	sxth	r2, r3
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	809a      	strh	r2, [r3, #4]
  _m->TS_ECU_MaxTemperatureCellCount = (_d[3] & (0xFFU));
 8002660:	68bb      	ldr	r3, [r7, #8]
 8002662:	3303      	adds	r3, #3
 8002664:	781a      	ldrb	r2, [r3, #0]
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	719a      	strb	r2, [r3, #6]
  _m->TS_ECU_FaultInState = (_d[4] & (0x01U));
 800266a:	68bb      	ldr	r3, [r7, #8]
 800266c:	3304      	adds	r3, #4
 800266e:	781b      	ldrb	r3, [r3, #0]
 8002670:	f003 0301 	and.w	r3, r3, #1
 8002674:	b2da      	uxtb	r2, r3
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	71da      	strb	r2, [r3, #7]
  _m->TS_ECU_FaultOutState = ((_d[4] >> 1) & (0x01U));
 800267a:	68bb      	ldr	r3, [r7, #8]
 800267c:	3304      	adds	r3, #4
 800267e:	781b      	ldrb	r3, [r3, #0]
 8002680:	085b      	lsrs	r3, r3, #1
 8002682:	b2db      	uxtb	r3, r3
 8002684:	f003 0301 	and.w	r3, r3, #1
 8002688:	b2da      	uxtb	r2, r3
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	721a      	strb	r2, [r3, #8]
  _m->TS_ECU_TempThresholdFault = ((_d[4] >> 2) & (0x01U));
 800268e:	68bb      	ldr	r3, [r7, #8]
 8002690:	3304      	adds	r3, #4
 8002692:	781b      	ldrb	r3, [r3, #0]
 8002694:	089b      	lsrs	r3, r3, #2
 8002696:	b2db      	uxtb	r3, r3
 8002698:	f003 0301 	and.w	r3, r3, #1
 800269c:	b2da      	uxtb	r2, r3
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	725a      	strb	r2, [r3, #9]
  _m->TS_ECU_OpenCircuitFault = ((_d[4] >> 3) & (0x01U));
 80026a2:	68bb      	ldr	r3, [r7, #8]
 80026a4:	3304      	adds	r3, #4
 80026a6:	781b      	ldrb	r3, [r3, #0]
 80026a8:	08db      	lsrs	r3, r3, #3
 80026aa:	b2db      	uxtb	r3, r3
 80026ac:	f003 0301 	and.w	r3, r3, #1
 80026b0:	b2da      	uxtb	r2, r3
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	729a      	strb	r2, [r3, #10]
  _m->FAN_ECU_ShortToGroundFault = ((_d[4] >> 4) & (0x01U));
 80026b6:	68bb      	ldr	r3, [r7, #8]
 80026b8:	3304      	adds	r3, #4
 80026ba:	781b      	ldrb	r3, [r3, #0]
 80026bc:	091b      	lsrs	r3, r3, #4
 80026be:	b2db      	uxtb	r3, r3
 80026c0:	f003 0301 	and.w	r3, r3, #1
 80026c4:	b2da      	uxtb	r2, r3
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	72da      	strb	r2, [r3, #11]
  _m->TS_ECU_CurrentState = ((_d[4] >> 5) & (0x07U));
 80026ca:	68bb      	ldr	r3, [r7, #8]
 80026cc:	3304      	adds	r3, #4
 80026ce:	781b      	ldrb	r3, [r3, #0]
 80026d0:	095b      	lsrs	r3, r3, #5
 80026d2:	b2da      	uxtb	r2, r3
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	731a      	strb	r2, [r3, #12]
  return TS_ECU3_TX1_CANID;
 80026d8:	f240 3331 	movw	r3, #817	@ 0x331
}
 80026dc:	4618      	mov	r0, r3
 80026de:	3714      	adds	r7, #20
 80026e0:	46bd      	mov	sp, r7
 80026e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e6:	4770      	bx	lr

080026e8 <Unpack_TS_ECU4_TX1_Temp>:
  return TS_ECU3_TX4_CANID;
}

// --------------------------------------------------------------------------
uint32_t Unpack_TS_ECU4_TX1_Temp(TS_ECU4_TX1_t* _m, const uint8_t* _d, uint8_t dlc_)
{
 80026e8:	b480      	push	{r7}
 80026ea:	b085      	sub	sp, #20
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	60f8      	str	r0, [r7, #12]
 80026f0:	60b9      	str	r1, [r7, #8]
 80026f2:	4613      	mov	r3, r2
 80026f4:	71fb      	strb	r3, [r7, #7]
  _m->TS_ECU_MaxSegmentTemperature = ((_d[0] & (0xFFU))) - 40;
 80026f6:	68bb      	ldr	r3, [r7, #8]
 80026f8:	781b      	ldrb	r3, [r3, #0]
 80026fa:	3b28      	subs	r3, #40	@ 0x28
 80026fc:	b29b      	uxth	r3, r3
 80026fe:	b21a      	sxth	r2, r3
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	801a      	strh	r2, [r3, #0]
  _m->TS_ECU_MinSegmentTemperature = ((_d[1] & (0xFFU))) - 40;
 8002704:	68bb      	ldr	r3, [r7, #8]
 8002706:	3301      	adds	r3, #1
 8002708:	781b      	ldrb	r3, [r3, #0]
 800270a:	3b28      	subs	r3, #40	@ 0x28
 800270c:	b29b      	uxth	r3, r3
 800270e:	b21a      	sxth	r2, r3
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	805a      	strh	r2, [r3, #2]
  _m->TS_ECU_AverageSegmentTemp = ((_d[2] & (0xFFU))) - 40;
 8002714:	68bb      	ldr	r3, [r7, #8]
 8002716:	3302      	adds	r3, #2
 8002718:	781b      	ldrb	r3, [r3, #0]
 800271a:	3b28      	subs	r3, #40	@ 0x28
 800271c:	b29b      	uxth	r3, r3
 800271e:	b21a      	sxth	r2, r3
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	809a      	strh	r2, [r3, #4]
  _m->TS_ECU_MaxTemperatureCellCount = (_d[3] & (0xFFU));
 8002724:	68bb      	ldr	r3, [r7, #8]
 8002726:	3303      	adds	r3, #3
 8002728:	781a      	ldrb	r2, [r3, #0]
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	719a      	strb	r2, [r3, #6]
  _m->TS_ECU_FaultInState = (_d[4] & (0x01U));
 800272e:	68bb      	ldr	r3, [r7, #8]
 8002730:	3304      	adds	r3, #4
 8002732:	781b      	ldrb	r3, [r3, #0]
 8002734:	f003 0301 	and.w	r3, r3, #1
 8002738:	b2da      	uxtb	r2, r3
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	71da      	strb	r2, [r3, #7]
  _m->TS_ECU_FaultOutState = ((_d[4] >> 1) & (0x01U));
 800273e:	68bb      	ldr	r3, [r7, #8]
 8002740:	3304      	adds	r3, #4
 8002742:	781b      	ldrb	r3, [r3, #0]
 8002744:	085b      	lsrs	r3, r3, #1
 8002746:	b2db      	uxtb	r3, r3
 8002748:	f003 0301 	and.w	r3, r3, #1
 800274c:	b2da      	uxtb	r2, r3
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	721a      	strb	r2, [r3, #8]
  _m->TS_ECU_TempThresholdFault = ((_d[4] >> 2) & (0x01U));
 8002752:	68bb      	ldr	r3, [r7, #8]
 8002754:	3304      	adds	r3, #4
 8002756:	781b      	ldrb	r3, [r3, #0]
 8002758:	089b      	lsrs	r3, r3, #2
 800275a:	b2db      	uxtb	r3, r3
 800275c:	f003 0301 	and.w	r3, r3, #1
 8002760:	b2da      	uxtb	r2, r3
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	725a      	strb	r2, [r3, #9]
  _m->TS_ECU_OpenCircuitFault = ((_d[4] >> 3) & (0x01U));
 8002766:	68bb      	ldr	r3, [r7, #8]
 8002768:	3304      	adds	r3, #4
 800276a:	781b      	ldrb	r3, [r3, #0]
 800276c:	08db      	lsrs	r3, r3, #3
 800276e:	b2db      	uxtb	r3, r3
 8002770:	f003 0301 	and.w	r3, r3, #1
 8002774:	b2da      	uxtb	r2, r3
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	729a      	strb	r2, [r3, #10]
  _m->FAN_ECU_ShortToGroundFault = ((_d[4] >> 4) & (0x01U));
 800277a:	68bb      	ldr	r3, [r7, #8]
 800277c:	3304      	adds	r3, #4
 800277e:	781b      	ldrb	r3, [r3, #0]
 8002780:	091b      	lsrs	r3, r3, #4
 8002782:	b2db      	uxtb	r3, r3
 8002784:	f003 0301 	and.w	r3, r3, #1
 8002788:	b2da      	uxtb	r2, r3
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	72da      	strb	r2, [r3, #11]
  _m->TS_ECU_CurrentState = ((_d[4] >> 5) & (0x07U));
 800278e:	68bb      	ldr	r3, [r7, #8]
 8002790:	3304      	adds	r3, #4
 8002792:	781b      	ldrb	r3, [r3, #0]
 8002794:	095b      	lsrs	r3, r3, #5
 8002796:	b2da      	uxtb	r2, r3
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	731a      	strb	r2, [r3, #12]
  return TS_ECU4_TX1_CANID;
 800279c:	f240 3341 	movw	r3, #833	@ 0x341
}
 80027a0:	4618      	mov	r0, r3
 80027a2:	3714      	adds	r7, #20
 80027a4:	46bd      	mov	sp, r7
 80027a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027aa:	4770      	bx	lr

080027ac <Unpack_TS_ECU5_TX1_Temp>:
  return TS_ECU4_TX4_CANID;
}

// --------------------------------------------------------------------------
uint32_t Unpack_TS_ECU5_TX1_Temp(TS_ECU5_TX1_t* _m, const uint8_t* _d, uint8_t dlc_)
{
 80027ac:	b480      	push	{r7}
 80027ae:	b085      	sub	sp, #20
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	60f8      	str	r0, [r7, #12]
 80027b4:	60b9      	str	r1, [r7, #8]
 80027b6:	4613      	mov	r3, r2
 80027b8:	71fb      	strb	r3, [r7, #7]
  _m->TS_ECU_MaxSegmentTemperature = ((_d[0] & (0xFFU))) - 40;
 80027ba:	68bb      	ldr	r3, [r7, #8]
 80027bc:	781b      	ldrb	r3, [r3, #0]
 80027be:	3b28      	subs	r3, #40	@ 0x28
 80027c0:	b29b      	uxth	r3, r3
 80027c2:	b21a      	sxth	r2, r3
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	801a      	strh	r2, [r3, #0]
  _m->TS_ECU_MinSegmentTemperature = ((_d[1] & (0xFFU))) - 40;
 80027c8:	68bb      	ldr	r3, [r7, #8]
 80027ca:	3301      	adds	r3, #1
 80027cc:	781b      	ldrb	r3, [r3, #0]
 80027ce:	3b28      	subs	r3, #40	@ 0x28
 80027d0:	b29b      	uxth	r3, r3
 80027d2:	b21a      	sxth	r2, r3
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	805a      	strh	r2, [r3, #2]
  _m->TS_ECU_AverageSegmentTemp = ((_d[2] & (0xFFU))) - 40;
 80027d8:	68bb      	ldr	r3, [r7, #8]
 80027da:	3302      	adds	r3, #2
 80027dc:	781b      	ldrb	r3, [r3, #0]
 80027de:	3b28      	subs	r3, #40	@ 0x28
 80027e0:	b29b      	uxth	r3, r3
 80027e2:	b21a      	sxth	r2, r3
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	809a      	strh	r2, [r3, #4]
  _m->TS_ECU_MaxTemperatureCellCount = (_d[3] & (0xFFU));
 80027e8:	68bb      	ldr	r3, [r7, #8]
 80027ea:	3303      	adds	r3, #3
 80027ec:	781a      	ldrb	r2, [r3, #0]
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	719a      	strb	r2, [r3, #6]
  _m->TS_ECU_FaultInState = (_d[4] & (0x01U));
 80027f2:	68bb      	ldr	r3, [r7, #8]
 80027f4:	3304      	adds	r3, #4
 80027f6:	781b      	ldrb	r3, [r3, #0]
 80027f8:	f003 0301 	and.w	r3, r3, #1
 80027fc:	b2da      	uxtb	r2, r3
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	71da      	strb	r2, [r3, #7]
  _m->TS_ECU_FaultOutState = ((_d[4] >> 1) & (0x01U));
 8002802:	68bb      	ldr	r3, [r7, #8]
 8002804:	3304      	adds	r3, #4
 8002806:	781b      	ldrb	r3, [r3, #0]
 8002808:	085b      	lsrs	r3, r3, #1
 800280a:	b2db      	uxtb	r3, r3
 800280c:	f003 0301 	and.w	r3, r3, #1
 8002810:	b2da      	uxtb	r2, r3
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	721a      	strb	r2, [r3, #8]
  _m->TS_ECU_TempThresholdFault = ((_d[4] >> 2) & (0x01U));
 8002816:	68bb      	ldr	r3, [r7, #8]
 8002818:	3304      	adds	r3, #4
 800281a:	781b      	ldrb	r3, [r3, #0]
 800281c:	089b      	lsrs	r3, r3, #2
 800281e:	b2db      	uxtb	r3, r3
 8002820:	f003 0301 	and.w	r3, r3, #1
 8002824:	b2da      	uxtb	r2, r3
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	725a      	strb	r2, [r3, #9]
  _m->TS_ECU_OpenCircuitFault = ((_d[4] >> 3) & (0x01U));
 800282a:	68bb      	ldr	r3, [r7, #8]
 800282c:	3304      	adds	r3, #4
 800282e:	781b      	ldrb	r3, [r3, #0]
 8002830:	08db      	lsrs	r3, r3, #3
 8002832:	b2db      	uxtb	r3, r3
 8002834:	f003 0301 	and.w	r3, r3, #1
 8002838:	b2da      	uxtb	r2, r3
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	729a      	strb	r2, [r3, #10]
  _m->FAN_ECU_ShortToGroundFault = ((_d[4] >> 4) & (0x01U));
 800283e:	68bb      	ldr	r3, [r7, #8]
 8002840:	3304      	adds	r3, #4
 8002842:	781b      	ldrb	r3, [r3, #0]
 8002844:	091b      	lsrs	r3, r3, #4
 8002846:	b2db      	uxtb	r3, r3
 8002848:	f003 0301 	and.w	r3, r3, #1
 800284c:	b2da      	uxtb	r2, r3
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	72da      	strb	r2, [r3, #11]
  _m->TS_ECU_CurrentState = ((_d[4] >> 5) & (0x07U));
 8002852:	68bb      	ldr	r3, [r7, #8]
 8002854:	3304      	adds	r3, #4
 8002856:	781b      	ldrb	r3, [r3, #0]
 8002858:	095b      	lsrs	r3, r3, #5
 800285a:	b2da      	uxtb	r2, r3
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	731a      	strb	r2, [r3, #12]
  return TS_ECU5_TX1_CANID;
 8002860:	f240 3351 	movw	r3, #849	@ 0x351
}
 8002864:	4618      	mov	r0, r3
 8002866:	3714      	adds	r7, #20
 8002868:	46bd      	mov	sp, r7
 800286a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286e:	4770      	bx	lr

08002870 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002870:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80028a8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002874:	480d      	ldr	r0, [pc, #52]	@ (80028ac <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002876:	490e      	ldr	r1, [pc, #56]	@ (80028b0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002878:	4a0e      	ldr	r2, [pc, #56]	@ (80028b4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800287a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800287c:	e002      	b.n	8002884 <LoopCopyDataInit>

0800287e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800287e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002880:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002882:	3304      	adds	r3, #4

08002884 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002884:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002886:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002888:	d3f9      	bcc.n	800287e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800288a:	4a0b      	ldr	r2, [pc, #44]	@ (80028b8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800288c:	4c0b      	ldr	r4, [pc, #44]	@ (80028bc <LoopFillZerobss+0x26>)
  movs r3, #0
 800288e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002890:	e001      	b.n	8002896 <LoopFillZerobss>

08002892 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002892:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002894:	3204      	adds	r2, #4

08002896 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002896:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002898:	d3fb      	bcc.n	8002892 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800289a:	f7ff fded 	bl	8002478 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800289e:	f006 fd75 	bl	800938c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80028a2:	f7fe fb45 	bl	8000f30 <main>
  bx  lr    
 80028a6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80028a8:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 80028ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80028b0:	20000030 	.word	0x20000030
  ldr r2, =_sidata
 80028b4:	080094c8 	.word	0x080094c8
  ldr r2, =_sbss
 80028b8:	20000030 	.word	0x20000030
  ldr r4, =_ebss
 80028bc:	200040a0 	.word	0x200040a0

080028c0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80028c0:	e7fe      	b.n	80028c0 <ADC_IRQHandler>

080028c2 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80028c2:	b580      	push	{r7, lr}
 80028c4:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80028c6:	2003      	movs	r0, #3
 80028c8:	f001 fb81 	bl	8003fce <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80028cc:	200f      	movs	r0, #15
 80028ce:	f7ff fd01 	bl	80022d4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80028d2:	f7ff fb71 	bl	8001fb8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80028d6:	2300      	movs	r3, #0
}
 80028d8:	4618      	mov	r0, r3
 80028da:	bd80      	pop	{r7, pc}

080028dc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80028dc:	b480      	push	{r7}
 80028de:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80028e0:	4b06      	ldr	r3, [pc, #24]	@ (80028fc <HAL_IncTick+0x20>)
 80028e2:	781b      	ldrb	r3, [r3, #0]
 80028e4:	461a      	mov	r2, r3
 80028e6:	4b06      	ldr	r3, [pc, #24]	@ (8002900 <HAL_IncTick+0x24>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	4413      	add	r3, r2
 80028ec:	4a04      	ldr	r2, [pc, #16]	@ (8002900 <HAL_IncTick+0x24>)
 80028ee:	6013      	str	r3, [r2, #0]
}
 80028f0:	bf00      	nop
 80028f2:	46bd      	mov	sp, r7
 80028f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f8:	4770      	bx	lr
 80028fa:	bf00      	nop
 80028fc:	20000024 	.word	0x20000024
 8002900:	200002f8 	.word	0x200002f8

08002904 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002904:	b480      	push	{r7}
 8002906:	af00      	add	r7, sp, #0
  return uwTick;
 8002908:	4b03      	ldr	r3, [pc, #12]	@ (8002918 <HAL_GetTick+0x14>)
 800290a:	681b      	ldr	r3, [r3, #0]
}
 800290c:	4618      	mov	r0, r3
 800290e:	46bd      	mov	sp, r7
 8002910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002914:	4770      	bx	lr
 8002916:	bf00      	nop
 8002918:	200002f8 	.word	0x200002f8

0800291c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	b084      	sub	sp, #16
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002924:	2300      	movs	r3, #0
 8002926:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	2b00      	cmp	r3, #0
 800292c:	d101      	bne.n	8002932 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800292e:	2301      	movs	r3, #1
 8002930:	e031      	b.n	8002996 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002936:	2b00      	cmp	r3, #0
 8002938:	d109      	bne.n	800294e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800293a:	6878      	ldr	r0, [r7, #4]
 800293c:	f7ff fb60 	bl	8002000 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2200      	movs	r2, #0
 8002944:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	2200      	movs	r2, #0
 800294a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002952:	f003 0310 	and.w	r3, r3, #16
 8002956:	2b00      	cmp	r3, #0
 8002958:	d116      	bne.n	8002988 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800295e:	4b10      	ldr	r3, [pc, #64]	@ (80029a0 <HAL_ADC_Init+0x84>)
 8002960:	4013      	ands	r3, r2
 8002962:	f043 0202 	orr.w	r2, r3, #2
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800296a:	6878      	ldr	r0, [r7, #4]
 800296c:	f000 fb0a 	bl	8002f84 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2200      	movs	r2, #0
 8002974:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800297a:	f023 0303 	bic.w	r3, r3, #3
 800297e:	f043 0201 	orr.w	r2, r3, #1
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	641a      	str	r2, [r3, #64]	@ 0x40
 8002986:	e001      	b.n	800298c <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002988:	2301      	movs	r3, #1
 800298a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2200      	movs	r2, #0
 8002990:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002994:	7bfb      	ldrb	r3, [r7, #15]
}
 8002996:	4618      	mov	r0, r3
 8002998:	3710      	adds	r7, #16
 800299a:	46bd      	mov	sp, r7
 800299c:	bd80      	pop	{r7, pc}
 800299e:	bf00      	nop
 80029a0:	ffffeefd 	.word	0xffffeefd

080029a4 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80029a4:	b480      	push	{r7}
 80029a6:	b085      	sub	sp, #20
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 80029ac:	2300      	movs	r3, #0
 80029ae:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80029b6:	2b01      	cmp	r3, #1
 80029b8:	d101      	bne.n	80029be <HAL_ADC_Start+0x1a>
 80029ba:	2302      	movs	r3, #2
 80029bc:	e0ad      	b.n	8002b1a <HAL_ADC_Start+0x176>
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	2201      	movs	r2, #1
 80029c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	689b      	ldr	r3, [r3, #8]
 80029cc:	f003 0301 	and.w	r3, r3, #1
 80029d0:	2b01      	cmp	r3, #1
 80029d2:	d018      	beq.n	8002a06 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	689a      	ldr	r2, [r3, #8]
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f042 0201 	orr.w	r2, r2, #1
 80029e2:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 80029e4:	4b50      	ldr	r3, [pc, #320]	@ (8002b28 <HAL_ADC_Start+0x184>)
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	4a50      	ldr	r2, [pc, #320]	@ (8002b2c <HAL_ADC_Start+0x188>)
 80029ea:	fba2 2303 	umull	r2, r3, r2, r3
 80029ee:	0c9a      	lsrs	r2, r3, #18
 80029f0:	4613      	mov	r3, r2
 80029f2:	005b      	lsls	r3, r3, #1
 80029f4:	4413      	add	r3, r2
 80029f6:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 80029f8:	e002      	b.n	8002a00 <HAL_ADC_Start+0x5c>
    {
      counter--;
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	3b01      	subs	r3, #1
 80029fe:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d1f9      	bne.n	80029fa <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	689b      	ldr	r3, [r3, #8]
 8002a0c:	f003 0301 	and.w	r3, r3, #1
 8002a10:	2b01      	cmp	r3, #1
 8002a12:	d175      	bne.n	8002b00 <HAL_ADC_Start+0x15c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002a18:	4b45      	ldr	r3, [pc, #276]	@ (8002b30 <HAL_ADC_Start+0x18c>)
 8002a1a:	4013      	ands	r3, r2
 8002a1c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	685b      	ldr	r3, [r3, #4]
 8002a2a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d007      	beq.n	8002a42 <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a36:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002a3a:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a46:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002a4a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002a4e:	d106      	bne.n	8002a5e <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a54:	f023 0206 	bic.w	r2, r3, #6
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	645a      	str	r2, [r3, #68]	@ 0x44
 8002a5c:	e002      	b.n	8002a64 <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	2200      	movs	r2, #0
 8002a62:	645a      	str	r2, [r3, #68]	@ 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	2200      	movs	r2, #0
 8002a68:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8002a74:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8002a76:	4b2f      	ldr	r3, [pc, #188]	@ (8002b34 <HAL_ADC_Start+0x190>)
 8002a78:	685b      	ldr	r3, [r3, #4]
 8002a7a:	f003 031f 	and.w	r3, r3, #31
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d10f      	bne.n	8002aa2 <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	689b      	ldr	r3, [r3, #8]
 8002a88:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d143      	bne.n	8002b18 <HAL_ADC_Start+0x174>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	689a      	ldr	r2, [r3, #8]
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002a9e:	609a      	str	r2, [r3, #8]
 8002aa0:	e03a      	b.n	8002b18 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	4a24      	ldr	r2, [pc, #144]	@ (8002b38 <HAL_ADC_Start+0x194>)
 8002aa8:	4293      	cmp	r3, r2
 8002aaa:	d10e      	bne.n	8002aca <HAL_ADC_Start+0x126>
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	689b      	ldr	r3, [r3, #8]
 8002ab2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d107      	bne.n	8002aca <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	689a      	ldr	r2, [r3, #8]
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002ac8:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8002aca:	4b1a      	ldr	r3, [pc, #104]	@ (8002b34 <HAL_ADC_Start+0x190>)
 8002acc:	685b      	ldr	r3, [r3, #4]
 8002ace:	f003 0310 	and.w	r3, r3, #16
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d120      	bne.n	8002b18 <HAL_ADC_Start+0x174>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	4a18      	ldr	r2, [pc, #96]	@ (8002b3c <HAL_ADC_Start+0x198>)
 8002adc:	4293      	cmp	r3, r2
 8002ade:	d11b      	bne.n	8002b18 <HAL_ADC_Start+0x174>
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	689b      	ldr	r3, [r3, #8]
 8002ae6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d114      	bne.n	8002b18 <HAL_ADC_Start+0x174>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	689a      	ldr	r2, [r3, #8]
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002afc:	609a      	str	r2, [r3, #8]
 8002afe:	e00b      	b.n	8002b18 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b04:	f043 0210 	orr.w	r2, r3, #16
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b10:	f043 0201 	orr.w	r2, r3, #1
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	645a      	str	r2, [r3, #68]	@ 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002b18:	2300      	movs	r3, #0
}
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	3714      	adds	r7, #20
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b24:	4770      	bx	lr
 8002b26:	bf00      	nop
 8002b28:	2000001c 	.word	0x2000001c
 8002b2c:	431bde83 	.word	0x431bde83
 8002b30:	fffff8fe 	.word	0xfffff8fe
 8002b34:	40012300 	.word	0x40012300
 8002b38:	40012000 	.word	0x40012000
 8002b3c:	40012200 	.word	0x40012200

08002b40 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8002b40:	b480      	push	{r7}
 8002b42:	b083      	sub	sp, #12
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002b4e:	2b01      	cmp	r3, #1
 8002b50:	d101      	bne.n	8002b56 <HAL_ADC_Stop+0x16>
 8002b52:	2302      	movs	r3, #2
 8002b54:	e01f      	b.n	8002b96 <HAL_ADC_Stop+0x56>
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	2201      	movs	r2, #1
 8002b5a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	689a      	ldr	r2, [r3, #8]
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f022 0201 	bic.w	r2, r2, #1
 8002b6c:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	689b      	ldr	r3, [r3, #8]
 8002b74:	f003 0301 	and.w	r3, r3, #1
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d107      	bne.n	8002b8c <HAL_ADC_Stop+0x4c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002b80:	4b08      	ldr	r3, [pc, #32]	@ (8002ba4 <HAL_ADC_Stop+0x64>)
 8002b82:	4013      	ands	r3, r2
 8002b84:	f043 0201 	orr.w	r2, r3, #1
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	2200      	movs	r2, #0
 8002b90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002b94:	2300      	movs	r3, #0
}
 8002b96:	4618      	mov	r0, r3
 8002b98:	370c      	adds	r7, #12
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba0:	4770      	bx	lr
 8002ba2:	bf00      	nop
 8002ba4:	ffffeefe 	.word	0xffffeefe

08002ba8 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b084      	sub	sp, #16
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
 8002bb0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	689b      	ldr	r3, [r3, #8]
 8002bbc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002bc0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002bc4:	d113      	bne.n	8002bee <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	689b      	ldr	r3, [r3, #8]
 8002bcc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002bd0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002bd4:	d10b      	bne.n	8002bee <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bda:	f043 0220 	orr.w	r2, r3, #32
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	2200      	movs	r2, #0
 8002be6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    return HAL_ERROR;
 8002bea:	2301      	movs	r3, #1
 8002bec:	e063      	b.n	8002cb6 <HAL_ADC_PollForConversion+0x10e>
  }
 
  /* Get tick */ 
  tickstart = HAL_GetTick();
 8002bee:	f7ff fe89 	bl	8002904 <HAL_GetTick>
 8002bf2:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002bf4:	e021      	b.n	8002c3a <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8002bf6:	683b      	ldr	r3, [r7, #0]
 8002bf8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bfc:	d01d      	beq.n	8002c3a <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d007      	beq.n	8002c14 <HAL_ADC_PollForConversion+0x6c>
 8002c04:	f7ff fe7e 	bl	8002904 <HAL_GetTick>
 8002c08:	4602      	mov	r2, r0
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	1ad3      	subs	r3, r2, r3
 8002c0e:	683a      	ldr	r2, [r7, #0]
 8002c10:	429a      	cmp	r2, r3
 8002c12:	d212      	bcs.n	8002c3a <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f003 0302 	and.w	r3, r3, #2
 8002c1e:	2b02      	cmp	r3, #2
 8002c20:	d00b      	beq.n	8002c3a <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c26:	f043 0204 	orr.w	r2, r3, #4
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	641a      	str	r2, [r3, #64]	@ 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	2200      	movs	r2, #0
 8002c32:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
          
          return HAL_TIMEOUT;
 8002c36:	2303      	movs	r3, #3
 8002c38:	e03d      	b.n	8002cb6 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f003 0302 	and.w	r3, r3, #2
 8002c44:	2b02      	cmp	r3, #2
 8002c46:	d1d6      	bne.n	8002bf6 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f06f 0212 	mvn.w	r2, #18
 8002c50:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c56:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F7, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	689b      	ldr	r3, [r3, #8]
 8002c64:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d123      	bne.n	8002cb4 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	699b      	ldr	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d11f      	bne.n	8002cb4 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c7a:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d006      	beq.n	8002c90 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	689b      	ldr	r3, [r3, #8]
 8002c88:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d111      	bne.n	8002cb4 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c94:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	641a      	str	r2, [r3, #64]	@ 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ca0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d105      	bne.n	8002cb4 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cac:	f043 0201 	orr.w	r2, r3, #1
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002cb4:	2300      	movs	r3, #0
}
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	3710      	adds	r7, #16
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	bd80      	pop	{r7, pc}

08002cbe <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8002cbe:	b480      	push	{r7}
 8002cc0:	b083      	sub	sp, #12
 8002cc2:	af00      	add	r7, sp, #0
 8002cc4:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8002ccc:	4618      	mov	r0, r3
 8002cce:	370c      	adds	r7, #12
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd6:	4770      	bx	lr

08002cd8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002cd8:	b480      	push	{r7}
 8002cda:	b085      	sub	sp, #20
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
 8002ce0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002cec:	2b01      	cmp	r3, #1
 8002cee:	d101      	bne.n	8002cf4 <HAL_ADC_ConfigChannel+0x1c>
 8002cf0:	2302      	movs	r3, #2
 8002cf2:	e136      	b.n	8002f62 <HAL_ADC_ConfigChannel+0x28a>
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	2201      	movs	r2, #1
 8002cf8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	2b09      	cmp	r3, #9
 8002d02:	d93a      	bls.n	8002d7a <HAL_ADC_ConfigChannel+0xa2>
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002d0c:	d035      	beq.n	8002d7a <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	68d9      	ldr	r1, [r3, #12]
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	b29b      	uxth	r3, r3
 8002d1a:	461a      	mov	r2, r3
 8002d1c:	4613      	mov	r3, r2
 8002d1e:	005b      	lsls	r3, r3, #1
 8002d20:	4413      	add	r3, r2
 8002d22:	3b1e      	subs	r3, #30
 8002d24:	2207      	movs	r2, #7
 8002d26:	fa02 f303 	lsl.w	r3, r2, r3
 8002d2a:	43da      	mvns	r2, r3
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	400a      	ands	r2, r1
 8002d32:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	4a8d      	ldr	r2, [pc, #564]	@ (8002f70 <HAL_ADC_ConfigChannel+0x298>)
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	d10a      	bne.n	8002d54 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	68d9      	ldr	r1, [r3, #12]
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	689b      	ldr	r3, [r3, #8]
 8002d48:	061a      	lsls	r2, r3, #24
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	430a      	orrs	r2, r1
 8002d50:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002d52:	e035      	b.n	8002dc0 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	68d9      	ldr	r1, [r3, #12]
 8002d5a:	683b      	ldr	r3, [r7, #0]
 8002d5c:	689a      	ldr	r2, [r3, #8]
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	b29b      	uxth	r3, r3
 8002d64:	4618      	mov	r0, r3
 8002d66:	4603      	mov	r3, r0
 8002d68:	005b      	lsls	r3, r3, #1
 8002d6a:	4403      	add	r3, r0
 8002d6c:	3b1e      	subs	r3, #30
 8002d6e:	409a      	lsls	r2, r3
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	430a      	orrs	r2, r1
 8002d76:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002d78:	e022      	b.n	8002dc0 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	6919      	ldr	r1, [r3, #16]
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	b29b      	uxth	r3, r3
 8002d86:	461a      	mov	r2, r3
 8002d88:	4613      	mov	r3, r2
 8002d8a:	005b      	lsls	r3, r3, #1
 8002d8c:	4413      	add	r3, r2
 8002d8e:	2207      	movs	r2, #7
 8002d90:	fa02 f303 	lsl.w	r3, r2, r3
 8002d94:	43da      	mvns	r2, r3
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	400a      	ands	r2, r1
 8002d9c:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	6919      	ldr	r1, [r3, #16]
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	689a      	ldr	r2, [r3, #8]
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	b29b      	uxth	r3, r3
 8002dae:	4618      	mov	r0, r3
 8002db0:	4603      	mov	r3, r0
 8002db2:	005b      	lsls	r3, r3, #1
 8002db4:	4403      	add	r3, r0
 8002db6:	409a      	lsls	r2, r3
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	430a      	orrs	r2, r1
 8002dbe:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	685b      	ldr	r3, [r3, #4]
 8002dc4:	2b06      	cmp	r3, #6
 8002dc6:	d824      	bhi.n	8002e12 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	685a      	ldr	r2, [r3, #4]
 8002dd2:	4613      	mov	r3, r2
 8002dd4:	009b      	lsls	r3, r3, #2
 8002dd6:	4413      	add	r3, r2
 8002dd8:	3b05      	subs	r3, #5
 8002dda:	221f      	movs	r2, #31
 8002ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8002de0:	43da      	mvns	r2, r3
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	400a      	ands	r2, r1
 8002de8:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	b29b      	uxth	r3, r3
 8002df6:	4618      	mov	r0, r3
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	685a      	ldr	r2, [r3, #4]
 8002dfc:	4613      	mov	r3, r2
 8002dfe:	009b      	lsls	r3, r3, #2
 8002e00:	4413      	add	r3, r2
 8002e02:	3b05      	subs	r3, #5
 8002e04:	fa00 f203 	lsl.w	r2, r0, r3
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	430a      	orrs	r2, r1
 8002e0e:	635a      	str	r2, [r3, #52]	@ 0x34
 8002e10:	e04c      	b.n	8002eac <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	685b      	ldr	r3, [r3, #4]
 8002e16:	2b0c      	cmp	r3, #12
 8002e18:	d824      	bhi.n	8002e64 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	685a      	ldr	r2, [r3, #4]
 8002e24:	4613      	mov	r3, r2
 8002e26:	009b      	lsls	r3, r3, #2
 8002e28:	4413      	add	r3, r2
 8002e2a:	3b23      	subs	r3, #35	@ 0x23
 8002e2c:	221f      	movs	r2, #31
 8002e2e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e32:	43da      	mvns	r2, r3
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	400a      	ands	r2, r1
 8002e3a:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002e42:	683b      	ldr	r3, [r7, #0]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	b29b      	uxth	r3, r3
 8002e48:	4618      	mov	r0, r3
 8002e4a:	683b      	ldr	r3, [r7, #0]
 8002e4c:	685a      	ldr	r2, [r3, #4]
 8002e4e:	4613      	mov	r3, r2
 8002e50:	009b      	lsls	r3, r3, #2
 8002e52:	4413      	add	r3, r2
 8002e54:	3b23      	subs	r3, #35	@ 0x23
 8002e56:	fa00 f203 	lsl.w	r2, r0, r3
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	430a      	orrs	r2, r1
 8002e60:	631a      	str	r2, [r3, #48]	@ 0x30
 8002e62:	e023      	b.n	8002eac <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002e6a:	683b      	ldr	r3, [r7, #0]
 8002e6c:	685a      	ldr	r2, [r3, #4]
 8002e6e:	4613      	mov	r3, r2
 8002e70:	009b      	lsls	r3, r3, #2
 8002e72:	4413      	add	r3, r2
 8002e74:	3b41      	subs	r3, #65	@ 0x41
 8002e76:	221f      	movs	r2, #31
 8002e78:	fa02 f303 	lsl.w	r3, r2, r3
 8002e7c:	43da      	mvns	r2, r3
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	400a      	ands	r2, r1
 8002e84:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	b29b      	uxth	r3, r3
 8002e92:	4618      	mov	r0, r3
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	685a      	ldr	r2, [r3, #4]
 8002e98:	4613      	mov	r3, r2
 8002e9a:	009b      	lsls	r3, r3, #2
 8002e9c:	4413      	add	r3, r2
 8002e9e:	3b41      	subs	r3, #65	@ 0x41
 8002ea0:	fa00 f203 	lsl.w	r2, r0, r3
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	430a      	orrs	r2, r1
 8002eaa:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	4a30      	ldr	r2, [pc, #192]	@ (8002f74 <HAL_ADC_ConfigChannel+0x29c>)
 8002eb2:	4293      	cmp	r3, r2
 8002eb4:	d10a      	bne.n	8002ecc <HAL_ADC_ConfigChannel+0x1f4>
 8002eb6:	683b      	ldr	r3, [r7, #0]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002ebe:	d105      	bne.n	8002ecc <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8002ec0:	4b2d      	ldr	r3, [pc, #180]	@ (8002f78 <HAL_ADC_ConfigChannel+0x2a0>)
 8002ec2:	685b      	ldr	r3, [r3, #4]
 8002ec4:	4a2c      	ldr	r2, [pc, #176]	@ (8002f78 <HAL_ADC_ConfigChannel+0x2a0>)
 8002ec6:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8002eca:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	4a28      	ldr	r2, [pc, #160]	@ (8002f74 <HAL_ADC_ConfigChannel+0x29c>)
 8002ed2:	4293      	cmp	r3, r2
 8002ed4:	d10f      	bne.n	8002ef6 <HAL_ADC_ConfigChannel+0x21e>
 8002ed6:	683b      	ldr	r3, [r7, #0]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	2b12      	cmp	r3, #18
 8002edc:	d10b      	bne.n	8002ef6 <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8002ede:	4b26      	ldr	r3, [pc, #152]	@ (8002f78 <HAL_ADC_ConfigChannel+0x2a0>)
 8002ee0:	685b      	ldr	r3, [r3, #4]
 8002ee2:	4a25      	ldr	r2, [pc, #148]	@ (8002f78 <HAL_ADC_ConfigChannel+0x2a0>)
 8002ee4:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8002ee8:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8002eea:	4b23      	ldr	r3, [pc, #140]	@ (8002f78 <HAL_ADC_ConfigChannel+0x2a0>)
 8002eec:	685b      	ldr	r3, [r3, #4]
 8002eee:	4a22      	ldr	r2, [pc, #136]	@ (8002f78 <HAL_ADC_ConfigChannel+0x2a0>)
 8002ef0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002ef4:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	4a1e      	ldr	r2, [pc, #120]	@ (8002f74 <HAL_ADC_ConfigChannel+0x29c>)
 8002efc:	4293      	cmp	r3, r2
 8002efe:	d12b      	bne.n	8002f58 <HAL_ADC_ConfigChannel+0x280>
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	4a1a      	ldr	r2, [pc, #104]	@ (8002f70 <HAL_ADC_ConfigChannel+0x298>)
 8002f06:	4293      	cmp	r3, r2
 8002f08:	d003      	beq.n	8002f12 <HAL_ADC_ConfigChannel+0x23a>
 8002f0a:	683b      	ldr	r3, [r7, #0]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	2b11      	cmp	r3, #17
 8002f10:	d122      	bne.n	8002f58 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8002f12:	4b19      	ldr	r3, [pc, #100]	@ (8002f78 <HAL_ADC_ConfigChannel+0x2a0>)
 8002f14:	685b      	ldr	r3, [r3, #4]
 8002f16:	4a18      	ldr	r2, [pc, #96]	@ (8002f78 <HAL_ADC_ConfigChannel+0x2a0>)
 8002f18:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8002f1c:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8002f1e:	4b16      	ldr	r3, [pc, #88]	@ (8002f78 <HAL_ADC_ConfigChannel+0x2a0>)
 8002f20:	685b      	ldr	r3, [r3, #4]
 8002f22:	4a15      	ldr	r2, [pc, #84]	@ (8002f78 <HAL_ADC_ConfigChannel+0x2a0>)
 8002f24:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002f28:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002f2a:	683b      	ldr	r3, [r7, #0]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	4a10      	ldr	r2, [pc, #64]	@ (8002f70 <HAL_ADC_ConfigChannel+0x298>)
 8002f30:	4293      	cmp	r3, r2
 8002f32:	d111      	bne.n	8002f58 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8002f34:	4b11      	ldr	r3, [pc, #68]	@ (8002f7c <HAL_ADC_ConfigChannel+0x2a4>)
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	4a11      	ldr	r2, [pc, #68]	@ (8002f80 <HAL_ADC_ConfigChannel+0x2a8>)
 8002f3a:	fba2 2303 	umull	r2, r3, r2, r3
 8002f3e:	0c9a      	lsrs	r2, r3, #18
 8002f40:	4613      	mov	r3, r2
 8002f42:	009b      	lsls	r3, r3, #2
 8002f44:	4413      	add	r3, r2
 8002f46:	005b      	lsls	r3, r3, #1
 8002f48:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002f4a:	e002      	b.n	8002f52 <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	3b01      	subs	r3, #1
 8002f50:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d1f9      	bne.n	8002f4c <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002f60:	2300      	movs	r3, #0
}
 8002f62:	4618      	mov	r0, r3
 8002f64:	3714      	adds	r7, #20
 8002f66:	46bd      	mov	sp, r7
 8002f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6c:	4770      	bx	lr
 8002f6e:	bf00      	nop
 8002f70:	10000012 	.word	0x10000012
 8002f74:	40012000 	.word	0x40012000
 8002f78:	40012300 	.word	0x40012300
 8002f7c:	2000001c 	.word	0x2000001c
 8002f80:	431bde83 	.word	0x431bde83

08002f84 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002f84:	b480      	push	{r7}
 8002f86:	b083      	sub	sp, #12
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8002f8c:	4b78      	ldr	r3, [pc, #480]	@ (8003170 <ADC_Init+0x1ec>)
 8002f8e:	685b      	ldr	r3, [r3, #4]
 8002f90:	4a77      	ldr	r2, [pc, #476]	@ (8003170 <ADC_Init+0x1ec>)
 8002f92:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 8002f96:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8002f98:	4b75      	ldr	r3, [pc, #468]	@ (8003170 <ADC_Init+0x1ec>)
 8002f9a:	685a      	ldr	r2, [r3, #4]
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	685b      	ldr	r3, [r3, #4]
 8002fa0:	4973      	ldr	r1, [pc, #460]	@ (8003170 <ADC_Init+0x1ec>)
 8002fa2:	4313      	orrs	r3, r2
 8002fa4:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	685a      	ldr	r2, [r3, #4]
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002fb4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	6859      	ldr	r1, [r3, #4]
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	691b      	ldr	r3, [r3, #16]
 8002fc0:	021a      	lsls	r2, r3, #8
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	430a      	orrs	r2, r1
 8002fc8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	685a      	ldr	r2, [r3, #4]
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8002fd8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	6859      	ldr	r1, [r3, #4]
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	689a      	ldr	r2, [r3, #8]
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	430a      	orrs	r2, r1
 8002fea:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	689a      	ldr	r2, [r3, #8]
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002ffa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	6899      	ldr	r1, [r3, #8]
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	68da      	ldr	r2, [r3, #12]
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	430a      	orrs	r2, r1
 800300c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003012:	4a58      	ldr	r2, [pc, #352]	@ (8003174 <ADC_Init+0x1f0>)
 8003014:	4293      	cmp	r3, r2
 8003016:	d022      	beq.n	800305e <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	689a      	ldr	r2, [r3, #8]
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003026:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	6899      	ldr	r1, [r3, #8]
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	430a      	orrs	r2, r1
 8003038:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	689a      	ldr	r2, [r3, #8]
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003048:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	6899      	ldr	r1, [r3, #8]
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	430a      	orrs	r2, r1
 800305a:	609a      	str	r2, [r3, #8]
 800305c:	e00f      	b.n	800307e <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	689a      	ldr	r2, [r3, #8]
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800306c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	689a      	ldr	r2, [r3, #8]
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800307c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	689a      	ldr	r2, [r3, #8]
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f022 0202 	bic.w	r2, r2, #2
 800308c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	6899      	ldr	r1, [r3, #8]
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	699b      	ldr	r3, [r3, #24]
 8003098:	005a      	lsls	r2, r3, #1
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	430a      	orrs	r2, r1
 80030a0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d01b      	beq.n	80030e4 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	685a      	ldr	r2, [r3, #4]
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80030ba:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	685a      	ldr	r2, [r3, #4]
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80030ca:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	6859      	ldr	r1, [r3, #4]
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030d6:	3b01      	subs	r3, #1
 80030d8:	035a      	lsls	r2, r3, #13
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	430a      	orrs	r2, r1
 80030e0:	605a      	str	r2, [r3, #4]
 80030e2:	e007      	b.n	80030f4 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	685a      	ldr	r2, [r3, #4]
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80030f2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8003102:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	69db      	ldr	r3, [r3, #28]
 800310e:	3b01      	subs	r3, #1
 8003110:	051a      	lsls	r2, r3, #20
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	430a      	orrs	r2, r1
 8003118:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	689a      	ldr	r2, [r3, #8]
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8003128:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	6899      	ldr	r1, [r3, #8]
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8003136:	025a      	lsls	r2, r3, #9
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	430a      	orrs	r2, r1
 800313e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	689a      	ldr	r2, [r3, #8]
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800314e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	6899      	ldr	r1, [r3, #8]
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	695b      	ldr	r3, [r3, #20]
 800315a:	029a      	lsls	r2, r3, #10
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	430a      	orrs	r2, r1
 8003162:	609a      	str	r2, [r3, #8]
}
 8003164:	bf00      	nop
 8003166:	370c      	adds	r7, #12
 8003168:	46bd      	mov	sp, r7
 800316a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316e:	4770      	bx	lr
 8003170:	40012300 	.word	0x40012300
 8003174:	0f000001 	.word	0x0f000001

08003178 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8003178:	b580      	push	{r7, lr}
 800317a:	b084      	sub	sp, #16
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2b00      	cmp	r3, #0
 8003184:	d101      	bne.n	800318a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8003186:	2301      	movs	r3, #1
 8003188:	e0ed      	b.n	8003366 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003190:	b2db      	uxtb	r3, r3
 8003192:	2b00      	cmp	r3, #0
 8003194:	d102      	bne.n	800319c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8003196:	6878      	ldr	r0, [r7, #4]
 8003198:	f7fe ff72 	bl	8002080 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	681a      	ldr	r2, [r3, #0]
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f042 0201 	orr.w	r2, r2, #1
 80031aa:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80031ac:	f7ff fbaa 	bl	8002904 <HAL_GetTick>
 80031b0:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80031b2:	e012      	b.n	80031da <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80031b4:	f7ff fba6 	bl	8002904 <HAL_GetTick>
 80031b8:	4602      	mov	r2, r0
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	1ad3      	subs	r3, r2, r3
 80031be:	2b0a      	cmp	r3, #10
 80031c0:	d90b      	bls.n	80031da <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031c6:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	2205      	movs	r2, #5
 80031d2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80031d6:	2301      	movs	r3, #1
 80031d8:	e0c5      	b.n	8003366 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	685b      	ldr	r3, [r3, #4]
 80031e0:	f003 0301 	and.w	r3, r3, #1
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d0e5      	beq.n	80031b4 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	681a      	ldr	r2, [r3, #0]
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f022 0202 	bic.w	r2, r2, #2
 80031f6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80031f8:	f7ff fb84 	bl	8002904 <HAL_GetTick>
 80031fc:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80031fe:	e012      	b.n	8003226 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003200:	f7ff fb80 	bl	8002904 <HAL_GetTick>
 8003204:	4602      	mov	r2, r0
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	1ad3      	subs	r3, r2, r3
 800320a:	2b0a      	cmp	r3, #10
 800320c:	d90b      	bls.n	8003226 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003212:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	2205      	movs	r2, #5
 800321e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003222:	2301      	movs	r3, #1
 8003224:	e09f      	b.n	8003366 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	685b      	ldr	r3, [r3, #4]
 800322c:	f003 0302 	and.w	r3, r3, #2
 8003230:	2b00      	cmp	r3, #0
 8003232:	d1e5      	bne.n	8003200 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	7e1b      	ldrb	r3, [r3, #24]
 8003238:	2b01      	cmp	r3, #1
 800323a:	d108      	bne.n	800324e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	681a      	ldr	r2, [r3, #0]
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800324a:	601a      	str	r2, [r3, #0]
 800324c:	e007      	b.n	800325e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	681a      	ldr	r2, [r3, #0]
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800325c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	7e5b      	ldrb	r3, [r3, #25]
 8003262:	2b01      	cmp	r3, #1
 8003264:	d108      	bne.n	8003278 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	681a      	ldr	r2, [r3, #0]
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003274:	601a      	str	r2, [r3, #0]
 8003276:	e007      	b.n	8003288 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	681a      	ldr	r2, [r3, #0]
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003286:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	7e9b      	ldrb	r3, [r3, #26]
 800328c:	2b01      	cmp	r3, #1
 800328e:	d108      	bne.n	80032a2 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	681a      	ldr	r2, [r3, #0]
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f042 0220 	orr.w	r2, r2, #32
 800329e:	601a      	str	r2, [r3, #0]
 80032a0:	e007      	b.n	80032b2 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	681a      	ldr	r2, [r3, #0]
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f022 0220 	bic.w	r2, r2, #32
 80032b0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	7edb      	ldrb	r3, [r3, #27]
 80032b6:	2b01      	cmp	r3, #1
 80032b8:	d108      	bne.n	80032cc <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	681a      	ldr	r2, [r3, #0]
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f022 0210 	bic.w	r2, r2, #16
 80032c8:	601a      	str	r2, [r3, #0]
 80032ca:	e007      	b.n	80032dc <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	681a      	ldr	r2, [r3, #0]
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f042 0210 	orr.w	r2, r2, #16
 80032da:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	7f1b      	ldrb	r3, [r3, #28]
 80032e0:	2b01      	cmp	r3, #1
 80032e2:	d108      	bne.n	80032f6 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	681a      	ldr	r2, [r3, #0]
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f042 0208 	orr.w	r2, r2, #8
 80032f2:	601a      	str	r2, [r3, #0]
 80032f4:	e007      	b.n	8003306 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	681a      	ldr	r2, [r3, #0]
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f022 0208 	bic.w	r2, r2, #8
 8003304:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	7f5b      	ldrb	r3, [r3, #29]
 800330a:	2b01      	cmp	r3, #1
 800330c:	d108      	bne.n	8003320 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	681a      	ldr	r2, [r3, #0]
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f042 0204 	orr.w	r2, r2, #4
 800331c:	601a      	str	r2, [r3, #0]
 800331e:	e007      	b.n	8003330 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	681a      	ldr	r2, [r3, #0]
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f022 0204 	bic.w	r2, r2, #4
 800332e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	689a      	ldr	r2, [r3, #8]
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	68db      	ldr	r3, [r3, #12]
 8003338:	431a      	orrs	r2, r3
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	691b      	ldr	r3, [r3, #16]
 800333e:	431a      	orrs	r2, r3
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	695b      	ldr	r3, [r3, #20]
 8003344:	ea42 0103 	orr.w	r1, r2, r3
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	685b      	ldr	r3, [r3, #4]
 800334c:	1e5a      	subs	r2, r3, #1
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	430a      	orrs	r2, r1
 8003354:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	2200      	movs	r2, #0
 800335a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2201      	movs	r2, #1
 8003360:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8003364:	2300      	movs	r3, #0
}
 8003366:	4618      	mov	r0, r3
 8003368:	3710      	adds	r7, #16
 800336a:	46bd      	mov	sp, r7
 800336c:	bd80      	pop	{r7, pc}
	...

08003370 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8003370:	b480      	push	{r7}
 8003372:	b087      	sub	sp, #28
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
 8003378:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003386:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8003388:	7cfb      	ldrb	r3, [r7, #19]
 800338a:	2b01      	cmp	r3, #1
 800338c:	d003      	beq.n	8003396 <HAL_CAN_ConfigFilter+0x26>
 800338e:	7cfb      	ldrb	r3, [r7, #19]
 8003390:	2b02      	cmp	r3, #2
 8003392:	f040 80c7 	bne.w	8003524 <HAL_CAN_ConfigFilter+0x1b4>
    assert_param(IS_CAN_FILTER_FIFO(sFilterConfig->FilterFIFOAssignment));
    assert_param(IS_CAN_FILTER_ACTIVATION(sFilterConfig->FilterActivation));

#if defined(CAN3)
    /* Check the CAN instance */
    if (hcan->Instance == CAN3)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	4a69      	ldr	r2, [pc, #420]	@ (8003540 <HAL_CAN_ConfigFilter+0x1d0>)
 800339c:	4293      	cmp	r3, r2
 800339e:	d001      	beq.n	80033a4 <HAL_CAN_ConfigFilter+0x34>
    }
    else
    {
      /* CAN1 and CAN2 are dual instances with 28 common filters banks */
      /* Select master instance to access the filter banks */
      can_ip = CAN1;
 80033a0:	4b68      	ldr	r3, [pc, #416]	@ (8003544 <HAL_CAN_ConfigFilter+0x1d4>)
 80033a2:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80033a4:	697b      	ldr	r3, [r7, #20]
 80033a6:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80033aa:	f043 0201 	orr.w	r2, r3, #1
 80033ae:	697b      	ldr	r3, [r7, #20]
 80033b0:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

#if defined(CAN3)
    /* Check the CAN instance */
    if (can_ip == CAN1)
 80033b4:	697b      	ldr	r3, [r7, #20]
 80033b6:	4a63      	ldr	r2, [pc, #396]	@ (8003544 <HAL_CAN_ConfigFilter+0x1d4>)
 80033b8:	4293      	cmp	r3, r2
 80033ba:	d111      	bne.n	80033e0 <HAL_CAN_ConfigFilter+0x70>
    {
      /* Select the start filter number of CAN2 slave instance */
      CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 80033bc:	697b      	ldr	r3, [r7, #20]
 80033be:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80033c2:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 80033c6:	697b      	ldr	r3, [r7, #20]
 80033c8:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 80033cc:	697b      	ldr	r3, [r7, #20]
 80033ce:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 80033d2:	683b      	ldr	r3, [r7, #0]
 80033d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033d6:	021b      	lsls	r3, r3, #8
 80033d8:	431a      	orrs	r2, r3
 80033da:	697b      	ldr	r3, [r7, #20]
 80033dc:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	695b      	ldr	r3, [r3, #20]
 80033e4:	f003 031f 	and.w	r3, r3, #31
 80033e8:	2201      	movs	r2, #1
 80033ea:	fa02 f303 	lsl.w	r3, r2, r3
 80033ee:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80033f0:	697b      	ldr	r3, [r7, #20]
 80033f2:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	43db      	mvns	r3, r3
 80033fa:	401a      	ands	r2, r3
 80033fc:	697b      	ldr	r3, [r7, #20]
 80033fe:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8003402:	683b      	ldr	r3, [r7, #0]
 8003404:	69db      	ldr	r3, [r3, #28]
 8003406:	2b00      	cmp	r3, #0
 8003408:	d123      	bne.n	8003452 <HAL_CAN_ConfigFilter+0xe2>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800340a:	697b      	ldr	r3, [r7, #20]
 800340c:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	43db      	mvns	r3, r3
 8003414:	401a      	ands	r2, r3
 8003416:	697b      	ldr	r3, [r7, #20]
 8003418:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800341c:	683b      	ldr	r3, [r7, #0]
 800341e:	68db      	ldr	r3, [r3, #12]
 8003420:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8003422:	683b      	ldr	r3, [r7, #0]
 8003424:	685b      	ldr	r3, [r3, #4]
 8003426:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003428:	683a      	ldr	r2, [r7, #0]
 800342a:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800342c:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800342e:	697b      	ldr	r3, [r7, #20]
 8003430:	3248      	adds	r2, #72	@ 0x48
 8003432:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003436:	683b      	ldr	r3, [r7, #0]
 8003438:	689b      	ldr	r3, [r3, #8]
 800343a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800343c:	683b      	ldr	r3, [r7, #0]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003442:	683b      	ldr	r3, [r7, #0]
 8003444:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003446:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003448:	6979      	ldr	r1, [r7, #20]
 800344a:	3348      	adds	r3, #72	@ 0x48
 800344c:	00db      	lsls	r3, r3, #3
 800344e:	440b      	add	r3, r1
 8003450:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8003452:	683b      	ldr	r3, [r7, #0]
 8003454:	69db      	ldr	r3, [r3, #28]
 8003456:	2b01      	cmp	r3, #1
 8003458:	d122      	bne.n	80034a0 <HAL_CAN_ConfigFilter+0x130>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800345a:	697b      	ldr	r3, [r7, #20]
 800345c:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	431a      	orrs	r2, r3
 8003464:	697b      	ldr	r3, [r7, #20]
 8003466:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800346a:	683b      	ldr	r3, [r7, #0]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	685b      	ldr	r3, [r3, #4]
 8003474:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003476:	683a      	ldr	r2, [r7, #0]
 8003478:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800347a:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800347c:	697b      	ldr	r3, [r7, #20]
 800347e:	3248      	adds	r2, #72	@ 0x48
 8003480:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	689b      	ldr	r3, [r3, #8]
 8003488:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800348a:	683b      	ldr	r3, [r7, #0]
 800348c:	68db      	ldr	r3, [r3, #12]
 800348e:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003490:	683b      	ldr	r3, [r7, #0]
 8003492:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003494:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003496:	6979      	ldr	r1, [r7, #20]
 8003498:	3348      	adds	r3, #72	@ 0x48
 800349a:	00db      	lsls	r3, r3, #3
 800349c:	440b      	add	r3, r1
 800349e:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80034a0:	683b      	ldr	r3, [r7, #0]
 80034a2:	699b      	ldr	r3, [r3, #24]
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d109      	bne.n	80034bc <HAL_CAN_ConfigFilter+0x14c>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80034a8:	697b      	ldr	r3, [r7, #20]
 80034aa:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	43db      	mvns	r3, r3
 80034b2:	401a      	ands	r2, r3
 80034b4:	697b      	ldr	r3, [r7, #20]
 80034b6:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 80034ba:	e007      	b.n	80034cc <HAL_CAN_ConfigFilter+0x15c>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80034bc:	697b      	ldr	r3, [r7, #20]
 80034be:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	431a      	orrs	r2, r3
 80034c6:	697b      	ldr	r3, [r7, #20]
 80034c8:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	691b      	ldr	r3, [r3, #16]
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d109      	bne.n	80034e8 <HAL_CAN_ConfigFilter+0x178>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80034d4:	697b      	ldr	r3, [r7, #20]
 80034d6:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	43db      	mvns	r3, r3
 80034de:	401a      	ands	r2, r3
 80034e0:	697b      	ldr	r3, [r7, #20]
 80034e2:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 80034e6:	e007      	b.n	80034f8 <HAL_CAN_ConfigFilter+0x188>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80034e8:	697b      	ldr	r3, [r7, #20]
 80034ea:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	431a      	orrs	r2, r3
 80034f2:	697b      	ldr	r3, [r7, #20]
 80034f4:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	6a1b      	ldr	r3, [r3, #32]
 80034fc:	2b01      	cmp	r3, #1
 80034fe:	d107      	bne.n	8003510 <HAL_CAN_ConfigFilter+0x1a0>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8003500:	697b      	ldr	r3, [r7, #20]
 8003502:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	431a      	orrs	r2, r3
 800350a:	697b      	ldr	r3, [r7, #20]
 800350c:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8003510:	697b      	ldr	r3, [r7, #20]
 8003512:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8003516:	f023 0201 	bic.w	r2, r3, #1
 800351a:	697b      	ldr	r3, [r7, #20]
 800351c:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8003520:	2300      	movs	r3, #0
 8003522:	e006      	b.n	8003532 <HAL_CAN_ConfigFilter+0x1c2>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003528:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8003530:	2301      	movs	r3, #1
  }
}
 8003532:	4618      	mov	r0, r3
 8003534:	371c      	adds	r7, #28
 8003536:	46bd      	mov	sp, r7
 8003538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353c:	4770      	bx	lr
 800353e:	bf00      	nop
 8003540:	40003400 	.word	0x40003400
 8003544:	40006400 	.word	0x40006400

08003548 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8003548:	b580      	push	{r7, lr}
 800354a:	b084      	sub	sp, #16
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003556:	b2db      	uxtb	r3, r3
 8003558:	2b01      	cmp	r3, #1
 800355a:	d12e      	bne.n	80035ba <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2202      	movs	r2, #2
 8003560:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	681a      	ldr	r2, [r3, #0]
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f022 0201 	bic.w	r2, r2, #1
 8003572:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003574:	f7ff f9c6 	bl	8002904 <HAL_GetTick>
 8003578:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800357a:	e012      	b.n	80035a2 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800357c:	f7ff f9c2 	bl	8002904 <HAL_GetTick>
 8003580:	4602      	mov	r2, r0
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	1ad3      	subs	r3, r2, r3
 8003586:	2b0a      	cmp	r3, #10
 8003588:	d90b      	bls.n	80035a2 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800358e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	2205      	movs	r2, #5
 800359a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800359e:	2301      	movs	r3, #1
 80035a0:	e012      	b.n	80035c8 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	685b      	ldr	r3, [r3, #4]
 80035a8:	f003 0301 	and.w	r3, r3, #1
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d1e5      	bne.n	800357c <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2200      	movs	r2, #0
 80035b4:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 80035b6:	2300      	movs	r3, #0
 80035b8:	e006      	b.n	80035c8 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035be:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80035c6:	2301      	movs	r3, #1
  }
}
 80035c8:	4618      	mov	r0, r3
 80035ca:	3710      	adds	r7, #16
 80035cc:	46bd      	mov	sp, r7
 80035ce:	bd80      	pop	{r7, pc}

080035d0 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 80035d0:	b480      	push	{r7}
 80035d2:	b089      	sub	sp, #36	@ 0x24
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	60f8      	str	r0, [r7, #12]
 80035d8:	60b9      	str	r1, [r7, #8]
 80035da:	607a      	str	r2, [r7, #4]
 80035dc:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80035e4:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	689b      	ldr	r3, [r3, #8]
 80035ec:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80035ee:	7ffb      	ldrb	r3, [r7, #31]
 80035f0:	2b01      	cmp	r3, #1
 80035f2:	d003      	beq.n	80035fc <HAL_CAN_AddTxMessage+0x2c>
 80035f4:	7ffb      	ldrb	r3, [r7, #31]
 80035f6:	2b02      	cmp	r3, #2
 80035f8:	f040 80ad 	bne.w	8003756 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80035fc:	69bb      	ldr	r3, [r7, #24]
 80035fe:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003602:	2b00      	cmp	r3, #0
 8003604:	d10a      	bne.n	800361c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8003606:	69bb      	ldr	r3, [r7, #24]
 8003608:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800360c:	2b00      	cmp	r3, #0
 800360e:	d105      	bne.n	800361c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8003610:	69bb      	ldr	r3, [r7, #24]
 8003612:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8003616:	2b00      	cmp	r3, #0
 8003618:	f000 8095 	beq.w	8003746 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 800361c:	69bb      	ldr	r3, [r7, #24]
 800361e:	0e1b      	lsrs	r3, r3, #24
 8003620:	f003 0303 	and.w	r3, r3, #3
 8003624:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8003626:	2201      	movs	r2, #1
 8003628:	697b      	ldr	r3, [r7, #20]
 800362a:	409a      	lsls	r2, r3
 800362c:	683b      	ldr	r3, [r7, #0]
 800362e:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8003630:	68bb      	ldr	r3, [r7, #8]
 8003632:	689b      	ldr	r3, [r3, #8]
 8003634:	2b00      	cmp	r3, #0
 8003636:	d10d      	bne.n	8003654 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8003638:	68bb      	ldr	r3, [r7, #8]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 800363e:	68bb      	ldr	r3, [r7, #8]
 8003640:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8003642:	68f9      	ldr	r1, [r7, #12]
 8003644:	6809      	ldr	r1, [r1, #0]
 8003646:	431a      	orrs	r2, r3
 8003648:	697b      	ldr	r3, [r7, #20]
 800364a:	3318      	adds	r3, #24
 800364c:	011b      	lsls	r3, r3, #4
 800364e:	440b      	add	r3, r1
 8003650:	601a      	str	r2, [r3, #0]
 8003652:	e00f      	b.n	8003674 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003654:	68bb      	ldr	r3, [r7, #8]
 8003656:	685b      	ldr	r3, [r3, #4]
 8003658:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 800365a:	68bb      	ldr	r3, [r7, #8]
 800365c:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800365e:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8003660:	68bb      	ldr	r3, [r7, #8]
 8003662:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003664:	68f9      	ldr	r1, [r7, #12]
 8003666:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8003668:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800366a:	697b      	ldr	r3, [r7, #20]
 800366c:	3318      	adds	r3, #24
 800366e:	011b      	lsls	r3, r3, #4
 8003670:	440b      	add	r3, r1
 8003672:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	6819      	ldr	r1, [r3, #0]
 8003678:	68bb      	ldr	r3, [r7, #8]
 800367a:	691a      	ldr	r2, [r3, #16]
 800367c:	697b      	ldr	r3, [r7, #20]
 800367e:	3318      	adds	r3, #24
 8003680:	011b      	lsls	r3, r3, #4
 8003682:	440b      	add	r3, r1
 8003684:	3304      	adds	r3, #4
 8003686:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8003688:	68bb      	ldr	r3, [r7, #8]
 800368a:	7d1b      	ldrb	r3, [r3, #20]
 800368c:	2b01      	cmp	r3, #1
 800368e:	d111      	bne.n	80036b4 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	681a      	ldr	r2, [r3, #0]
 8003694:	697b      	ldr	r3, [r7, #20]
 8003696:	3318      	adds	r3, #24
 8003698:	011b      	lsls	r3, r3, #4
 800369a:	4413      	add	r3, r2
 800369c:	3304      	adds	r3, #4
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	68fa      	ldr	r2, [r7, #12]
 80036a2:	6811      	ldr	r1, [r2, #0]
 80036a4:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80036a8:	697b      	ldr	r3, [r7, #20]
 80036aa:	3318      	adds	r3, #24
 80036ac:	011b      	lsls	r3, r3, #4
 80036ae:	440b      	add	r3, r1
 80036b0:	3304      	adds	r3, #4
 80036b2:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	3307      	adds	r3, #7
 80036b8:	781b      	ldrb	r3, [r3, #0]
 80036ba:	061a      	lsls	r2, r3, #24
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	3306      	adds	r3, #6
 80036c0:	781b      	ldrb	r3, [r3, #0]
 80036c2:	041b      	lsls	r3, r3, #16
 80036c4:	431a      	orrs	r2, r3
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	3305      	adds	r3, #5
 80036ca:	781b      	ldrb	r3, [r3, #0]
 80036cc:	021b      	lsls	r3, r3, #8
 80036ce:	4313      	orrs	r3, r2
 80036d0:	687a      	ldr	r2, [r7, #4]
 80036d2:	3204      	adds	r2, #4
 80036d4:	7812      	ldrb	r2, [r2, #0]
 80036d6:	4610      	mov	r0, r2
 80036d8:	68fa      	ldr	r2, [r7, #12]
 80036da:	6811      	ldr	r1, [r2, #0]
 80036dc:	ea43 0200 	orr.w	r2, r3, r0
 80036e0:	697b      	ldr	r3, [r7, #20]
 80036e2:	011b      	lsls	r3, r3, #4
 80036e4:	440b      	add	r3, r1
 80036e6:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 80036ea:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	3303      	adds	r3, #3
 80036f0:	781b      	ldrb	r3, [r3, #0]
 80036f2:	061a      	lsls	r2, r3, #24
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	3302      	adds	r3, #2
 80036f8:	781b      	ldrb	r3, [r3, #0]
 80036fa:	041b      	lsls	r3, r3, #16
 80036fc:	431a      	orrs	r2, r3
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	3301      	adds	r3, #1
 8003702:	781b      	ldrb	r3, [r3, #0]
 8003704:	021b      	lsls	r3, r3, #8
 8003706:	4313      	orrs	r3, r2
 8003708:	687a      	ldr	r2, [r7, #4]
 800370a:	7812      	ldrb	r2, [r2, #0]
 800370c:	4610      	mov	r0, r2
 800370e:	68fa      	ldr	r2, [r7, #12]
 8003710:	6811      	ldr	r1, [r2, #0]
 8003712:	ea43 0200 	orr.w	r2, r3, r0
 8003716:	697b      	ldr	r3, [r7, #20]
 8003718:	011b      	lsls	r3, r3, #4
 800371a:	440b      	add	r3, r1
 800371c:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8003720:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	681a      	ldr	r2, [r3, #0]
 8003726:	697b      	ldr	r3, [r7, #20]
 8003728:	3318      	adds	r3, #24
 800372a:	011b      	lsls	r3, r3, #4
 800372c:	4413      	add	r3, r2
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	68fa      	ldr	r2, [r7, #12]
 8003732:	6811      	ldr	r1, [r2, #0]
 8003734:	f043 0201 	orr.w	r2, r3, #1
 8003738:	697b      	ldr	r3, [r7, #20]
 800373a:	3318      	adds	r3, #24
 800373c:	011b      	lsls	r3, r3, #4
 800373e:	440b      	add	r3, r1
 8003740:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8003742:	2300      	movs	r3, #0
 8003744:	e00e      	b.n	8003764 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800374a:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8003752:	2301      	movs	r3, #1
 8003754:	e006      	b.n	8003764 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800375a:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8003762:	2301      	movs	r3, #1
  }
}
 8003764:	4618      	mov	r0, r3
 8003766:	3724      	adds	r7, #36	@ 0x24
 8003768:	46bd      	mov	sp, r7
 800376a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376e:	4770      	bx	lr

08003770 <HAL_CAN_IsTxMessagePending>:
  *          - 0 : No pending transmission request on any selected Tx Mailboxes.
  *          - 1 : Pending transmission request on at least one of the selected
  *                Tx Mailbox.
  */
uint32_t HAL_CAN_IsTxMessagePending(const CAN_HandleTypeDef *hcan, uint32_t TxMailboxes)
{
 8003770:	b480      	push	{r7}
 8003772:	b085      	sub	sp, #20
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
 8003778:	6039      	str	r1, [r7, #0]
  uint32_t status = 0U;
 800377a:	2300      	movs	r3, #0
 800377c:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003784:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_TX_MAILBOX_LIST(TxMailboxes));

  if ((state == HAL_CAN_STATE_READY) ||
 8003786:	7afb      	ldrb	r3, [r7, #11]
 8003788:	2b01      	cmp	r3, #1
 800378a:	d002      	beq.n	8003792 <HAL_CAN_IsTxMessagePending+0x22>
 800378c:	7afb      	ldrb	r3, [r7, #11]
 800378e:	2b02      	cmp	r3, #2
 8003790:	d10b      	bne.n	80037aa <HAL_CAN_IsTxMessagePending+0x3a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check pending transmission request on the selected Tx Mailboxes */
    if ((hcan->Instance->TSR & (TxMailboxes << CAN_TSR_TME0_Pos)) != (TxMailboxes << CAN_TSR_TME0_Pos))
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	689a      	ldr	r2, [r3, #8]
 8003798:	683b      	ldr	r3, [r7, #0]
 800379a:	069b      	lsls	r3, r3, #26
 800379c:	401a      	ands	r2, r3
 800379e:	683b      	ldr	r3, [r7, #0]
 80037a0:	069b      	lsls	r3, r3, #26
 80037a2:	429a      	cmp	r2, r3
 80037a4:	d001      	beq.n	80037aa <HAL_CAN_IsTxMessagePending+0x3a>
    {
      status = 1U;
 80037a6:	2301      	movs	r3, #1
 80037a8:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return status */
  return status;
 80037aa:	68fb      	ldr	r3, [r7, #12]
}
 80037ac:	4618      	mov	r0, r3
 80037ae:	3714      	adds	r7, #20
 80037b0:	46bd      	mov	sp, r7
 80037b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b6:	4770      	bx	lr

080037b8 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80037b8:	b480      	push	{r7}
 80037ba:	b087      	sub	sp, #28
 80037bc:	af00      	add	r7, sp, #0
 80037be:	60f8      	str	r0, [r7, #12]
 80037c0:	60b9      	str	r1, [r7, #8]
 80037c2:	607a      	str	r2, [r7, #4]
 80037c4:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80037cc:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80037ce:	7dfb      	ldrb	r3, [r7, #23]
 80037d0:	2b01      	cmp	r3, #1
 80037d2:	d003      	beq.n	80037dc <HAL_CAN_GetRxMessage+0x24>
 80037d4:	7dfb      	ldrb	r3, [r7, #23]
 80037d6:	2b02      	cmp	r3, #2
 80037d8:	f040 80f3 	bne.w	80039c2 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80037dc:	68bb      	ldr	r3, [r7, #8]
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d10e      	bne.n	8003800 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	68db      	ldr	r3, [r3, #12]
 80037e8:	f003 0303 	and.w	r3, r3, #3
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d116      	bne.n	800381e <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037f4:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 80037fc:	2301      	movs	r3, #1
 80037fe:	e0e7      	b.n	80039d0 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	691b      	ldr	r3, [r3, #16]
 8003806:	f003 0303 	and.w	r3, r3, #3
 800380a:	2b00      	cmp	r3, #0
 800380c:	d107      	bne.n	800381e <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003812:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 800381a:	2301      	movs	r3, #1
 800381c:	e0d8      	b.n	80039d0 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	681a      	ldr	r2, [r3, #0]
 8003822:	68bb      	ldr	r3, [r7, #8]
 8003824:	331b      	adds	r3, #27
 8003826:	011b      	lsls	r3, r3, #4
 8003828:	4413      	add	r3, r2
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f003 0204 	and.w	r2, r3, #4
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	689b      	ldr	r3, [r3, #8]
 8003838:	2b00      	cmp	r3, #0
 800383a:	d10c      	bne.n	8003856 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	681a      	ldr	r2, [r3, #0]
 8003840:	68bb      	ldr	r3, [r7, #8]
 8003842:	331b      	adds	r3, #27
 8003844:	011b      	lsls	r3, r3, #4
 8003846:	4413      	add	r3, r2
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	0d5b      	lsrs	r3, r3, #21
 800384c:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	601a      	str	r2, [r3, #0]
 8003854:	e00b      	b.n	800386e <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	681a      	ldr	r2, [r3, #0]
 800385a:	68bb      	ldr	r3, [r7, #8]
 800385c:	331b      	adds	r3, #27
 800385e:	011b      	lsls	r3, r3, #4
 8003860:	4413      	add	r3, r2
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	08db      	lsrs	r3, r3, #3
 8003866:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	681a      	ldr	r2, [r3, #0]
 8003872:	68bb      	ldr	r3, [r7, #8]
 8003874:	331b      	adds	r3, #27
 8003876:	011b      	lsls	r3, r3, #4
 8003878:	4413      	add	r3, r2
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f003 0202 	and.w	r2, r3, #2
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	681a      	ldr	r2, [r3, #0]
 8003888:	68bb      	ldr	r3, [r7, #8]
 800388a:	331b      	adds	r3, #27
 800388c:	011b      	lsls	r3, r3, #4
 800388e:	4413      	add	r3, r2
 8003890:	3304      	adds	r3, #4
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f003 020f 	and.w	r2, r3, #15
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	681a      	ldr	r2, [r3, #0]
 80038a0:	68bb      	ldr	r3, [r7, #8]
 80038a2:	331b      	adds	r3, #27
 80038a4:	011b      	lsls	r3, r3, #4
 80038a6:	4413      	add	r3, r2
 80038a8:	3304      	adds	r3, #4
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	0a1b      	lsrs	r3, r3, #8
 80038ae:	b2da      	uxtb	r2, r3
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	681a      	ldr	r2, [r3, #0]
 80038b8:	68bb      	ldr	r3, [r7, #8]
 80038ba:	331b      	adds	r3, #27
 80038bc:	011b      	lsls	r3, r3, #4
 80038be:	4413      	add	r3, r2
 80038c0:	3304      	adds	r3, #4
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	0c1b      	lsrs	r3, r3, #16
 80038c6:	b29a      	uxth	r2, r3
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	681a      	ldr	r2, [r3, #0]
 80038d0:	68bb      	ldr	r3, [r7, #8]
 80038d2:	011b      	lsls	r3, r3, #4
 80038d4:	4413      	add	r3, r2
 80038d6:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	b2da      	uxtb	r2, r3
 80038de:	683b      	ldr	r3, [r7, #0]
 80038e0:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	681a      	ldr	r2, [r3, #0]
 80038e6:	68bb      	ldr	r3, [r7, #8]
 80038e8:	011b      	lsls	r3, r3, #4
 80038ea:	4413      	add	r3, r2
 80038ec:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	0a1a      	lsrs	r2, r3, #8
 80038f4:	683b      	ldr	r3, [r7, #0]
 80038f6:	3301      	adds	r3, #1
 80038f8:	b2d2      	uxtb	r2, r2
 80038fa:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	681a      	ldr	r2, [r3, #0]
 8003900:	68bb      	ldr	r3, [r7, #8]
 8003902:	011b      	lsls	r3, r3, #4
 8003904:	4413      	add	r3, r2
 8003906:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	0c1a      	lsrs	r2, r3, #16
 800390e:	683b      	ldr	r3, [r7, #0]
 8003910:	3302      	adds	r3, #2
 8003912:	b2d2      	uxtb	r2, r2
 8003914:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	681a      	ldr	r2, [r3, #0]
 800391a:	68bb      	ldr	r3, [r7, #8]
 800391c:	011b      	lsls	r3, r3, #4
 800391e:	4413      	add	r3, r2
 8003920:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	0e1a      	lsrs	r2, r3, #24
 8003928:	683b      	ldr	r3, [r7, #0]
 800392a:	3303      	adds	r3, #3
 800392c:	b2d2      	uxtb	r2, r2
 800392e:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	681a      	ldr	r2, [r3, #0]
 8003934:	68bb      	ldr	r3, [r7, #8]
 8003936:	011b      	lsls	r3, r3, #4
 8003938:	4413      	add	r3, r2
 800393a:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800393e:	681a      	ldr	r2, [r3, #0]
 8003940:	683b      	ldr	r3, [r7, #0]
 8003942:	3304      	adds	r3, #4
 8003944:	b2d2      	uxtb	r2, r2
 8003946:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	681a      	ldr	r2, [r3, #0]
 800394c:	68bb      	ldr	r3, [r7, #8]
 800394e:	011b      	lsls	r3, r3, #4
 8003950:	4413      	add	r3, r2
 8003952:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	0a1a      	lsrs	r2, r3, #8
 800395a:	683b      	ldr	r3, [r7, #0]
 800395c:	3305      	adds	r3, #5
 800395e:	b2d2      	uxtb	r2, r2
 8003960:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	681a      	ldr	r2, [r3, #0]
 8003966:	68bb      	ldr	r3, [r7, #8]
 8003968:	011b      	lsls	r3, r3, #4
 800396a:	4413      	add	r3, r2
 800396c:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	0c1a      	lsrs	r2, r3, #16
 8003974:	683b      	ldr	r3, [r7, #0]
 8003976:	3306      	adds	r3, #6
 8003978:	b2d2      	uxtb	r2, r2
 800397a:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	681a      	ldr	r2, [r3, #0]
 8003980:	68bb      	ldr	r3, [r7, #8]
 8003982:	011b      	lsls	r3, r3, #4
 8003984:	4413      	add	r3, r2
 8003986:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	0e1a      	lsrs	r2, r3, #24
 800398e:	683b      	ldr	r3, [r7, #0]
 8003990:	3307      	adds	r3, #7
 8003992:	b2d2      	uxtb	r2, r2
 8003994:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003996:	68bb      	ldr	r3, [r7, #8]
 8003998:	2b00      	cmp	r3, #0
 800399a:	d108      	bne.n	80039ae <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	68da      	ldr	r2, [r3, #12]
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f042 0220 	orr.w	r2, r2, #32
 80039aa:	60da      	str	r2, [r3, #12]
 80039ac:	e007      	b.n	80039be <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	691a      	ldr	r2, [r3, #16]
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f042 0220 	orr.w	r2, r2, #32
 80039bc:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80039be:	2300      	movs	r3, #0
 80039c0:	e006      	b.n	80039d0 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039c6:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80039ce:	2301      	movs	r3, #1
  }
}
 80039d0:	4618      	mov	r0, r3
 80039d2:	371c      	adds	r7, #28
 80039d4:	46bd      	mov	sp, r7
 80039d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039da:	4770      	bx	lr

080039dc <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80039dc:	b480      	push	{r7}
 80039de:	b085      	sub	sp, #20
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	6078      	str	r0, [r7, #4]
 80039e4:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80039ec:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80039ee:	7bfb      	ldrb	r3, [r7, #15]
 80039f0:	2b01      	cmp	r3, #1
 80039f2:	d002      	beq.n	80039fa <HAL_CAN_ActivateNotification+0x1e>
 80039f4:	7bfb      	ldrb	r3, [r7, #15]
 80039f6:	2b02      	cmp	r3, #2
 80039f8:	d109      	bne.n	8003a0e <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	6959      	ldr	r1, [r3, #20]
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	683a      	ldr	r2, [r7, #0]
 8003a06:	430a      	orrs	r2, r1
 8003a08:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8003a0a:	2300      	movs	r3, #0
 8003a0c:	e006      	b.n	8003a1c <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a12:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8003a1a:	2301      	movs	r3, #1
  }
}
 8003a1c:	4618      	mov	r0, r3
 8003a1e:	3714      	adds	r7, #20
 8003a20:	46bd      	mov	sp, r7
 8003a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a26:	4770      	bx	lr

08003a28 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8003a28:	b580      	push	{r7, lr}
 8003a2a:	b08a      	sub	sp, #40	@ 0x28
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8003a30:	2300      	movs	r3, #0
 8003a32:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	695b      	ldr	r3, [r3, #20]
 8003a3a:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	685b      	ldr	r3, [r3, #4]
 8003a42:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	689b      	ldr	r3, [r3, #8]
 8003a4a:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	68db      	ldr	r3, [r3, #12]
 8003a52:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	691b      	ldr	r3, [r3, #16]
 8003a5a:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	699b      	ldr	r3, [r3, #24]
 8003a62:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8003a64:	6a3b      	ldr	r3, [r7, #32]
 8003a66:	f003 0301 	and.w	r3, r3, #1
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d07c      	beq.n	8003b68 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8003a6e:	69bb      	ldr	r3, [r7, #24]
 8003a70:	f003 0301 	and.w	r3, r3, #1
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d023      	beq.n	8003ac0 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	2201      	movs	r2, #1
 8003a7e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8003a80:	69bb      	ldr	r3, [r7, #24]
 8003a82:	f003 0302 	and.w	r3, r3, #2
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d003      	beq.n	8003a92 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8003a8a:	6878      	ldr	r0, [r7, #4]
 8003a8c:	f000 f983 	bl	8003d96 <HAL_CAN_TxMailbox0CompleteCallback>
 8003a90:	e016      	b.n	8003ac0 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8003a92:	69bb      	ldr	r3, [r7, #24]
 8003a94:	f003 0304 	and.w	r3, r3, #4
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d004      	beq.n	8003aa6 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8003a9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a9e:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003aa2:	627b      	str	r3, [r7, #36]	@ 0x24
 8003aa4:	e00c      	b.n	8003ac0 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8003aa6:	69bb      	ldr	r3, [r7, #24]
 8003aa8:	f003 0308 	and.w	r3, r3, #8
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d004      	beq.n	8003aba <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8003ab0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ab2:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003ab6:	627b      	str	r3, [r7, #36]	@ 0x24
 8003ab8:	e002      	b.n	8003ac0 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8003aba:	6878      	ldr	r0, [r7, #4]
 8003abc:	f000 f989 	bl	8003dd2 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8003ac0:	69bb      	ldr	r3, [r7, #24]
 8003ac2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d024      	beq.n	8003b14 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003ad2:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8003ad4:	69bb      	ldr	r3, [r7, #24]
 8003ad6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d003      	beq.n	8003ae6 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8003ade:	6878      	ldr	r0, [r7, #4]
 8003ae0:	f000 f963 	bl	8003daa <HAL_CAN_TxMailbox1CompleteCallback>
 8003ae4:	e016      	b.n	8003b14 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8003ae6:	69bb      	ldr	r3, [r7, #24]
 8003ae8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d004      	beq.n	8003afa <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8003af0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003af2:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003af6:	627b      	str	r3, [r7, #36]	@ 0x24
 8003af8:	e00c      	b.n	8003b14 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8003afa:	69bb      	ldr	r3, [r7, #24]
 8003afc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d004      	beq.n	8003b0e <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8003b04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b06:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003b0a:	627b      	str	r3, [r7, #36]	@ 0x24
 8003b0c:	e002      	b.n	8003b14 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8003b0e:	6878      	ldr	r0, [r7, #4]
 8003b10:	f000 f969 	bl	8003de6 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8003b14:	69bb      	ldr	r3, [r7, #24]
 8003b16:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d024      	beq.n	8003b68 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8003b26:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8003b28:	69bb      	ldr	r3, [r7, #24]
 8003b2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d003      	beq.n	8003b3a <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8003b32:	6878      	ldr	r0, [r7, #4]
 8003b34:	f000 f943 	bl	8003dbe <HAL_CAN_TxMailbox2CompleteCallback>
 8003b38:	e016      	b.n	8003b68 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8003b3a:	69bb      	ldr	r3, [r7, #24]
 8003b3c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d004      	beq.n	8003b4e <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8003b44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b46:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003b4a:	627b      	str	r3, [r7, #36]	@ 0x24
 8003b4c:	e00c      	b.n	8003b68 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8003b4e:	69bb      	ldr	r3, [r7, #24]
 8003b50:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d004      	beq.n	8003b62 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8003b58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b5a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b5e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003b60:	e002      	b.n	8003b68 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8003b62:	6878      	ldr	r0, [r7, #4]
 8003b64:	f000 f949 	bl	8003dfa <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8003b68:	6a3b      	ldr	r3, [r7, #32]
 8003b6a:	f003 0308 	and.w	r3, r3, #8
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d00c      	beq.n	8003b8c <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8003b72:	697b      	ldr	r3, [r7, #20]
 8003b74:	f003 0310 	and.w	r3, r3, #16
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d007      	beq.n	8003b8c <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8003b7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b7e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003b82:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	2210      	movs	r2, #16
 8003b8a:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8003b8c:	6a3b      	ldr	r3, [r7, #32]
 8003b8e:	f003 0304 	and.w	r3, r3, #4
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d00b      	beq.n	8003bae <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8003b96:	697b      	ldr	r3, [r7, #20]
 8003b98:	f003 0308 	and.w	r3, r3, #8
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d006      	beq.n	8003bae <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	2208      	movs	r2, #8
 8003ba6:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8003ba8:	6878      	ldr	r0, [r7, #4]
 8003baa:	f000 f930 	bl	8003e0e <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8003bae:	6a3b      	ldr	r3, [r7, #32]
 8003bb0:	f003 0302 	and.w	r3, r3, #2
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d009      	beq.n	8003bcc <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	68db      	ldr	r3, [r3, #12]
 8003bbe:	f003 0303 	and.w	r3, r3, #3
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d002      	beq.n	8003bcc <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8003bc6:	6878      	ldr	r0, [r7, #4]
 8003bc8:	f7fd f924 	bl	8000e14 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8003bcc:	6a3b      	ldr	r3, [r7, #32]
 8003bce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d00c      	beq.n	8003bf0 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8003bd6:	693b      	ldr	r3, [r7, #16]
 8003bd8:	f003 0310 	and.w	r3, r3, #16
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d007      	beq.n	8003bf0 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8003be0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003be2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003be6:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	2210      	movs	r2, #16
 8003bee:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8003bf0:	6a3b      	ldr	r3, [r7, #32]
 8003bf2:	f003 0320 	and.w	r3, r3, #32
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d00b      	beq.n	8003c12 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8003bfa:	693b      	ldr	r3, [r7, #16]
 8003bfc:	f003 0308 	and.w	r3, r3, #8
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d006      	beq.n	8003c12 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	2208      	movs	r2, #8
 8003c0a:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8003c0c:	6878      	ldr	r0, [r7, #4]
 8003c0e:	f000 f908 	bl	8003e22 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8003c12:	6a3b      	ldr	r3, [r7, #32]
 8003c14:	f003 0310 	and.w	r3, r3, #16
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d009      	beq.n	8003c30 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	691b      	ldr	r3, [r3, #16]
 8003c22:	f003 0303 	and.w	r3, r3, #3
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d002      	beq.n	8003c30 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8003c2a:	6878      	ldr	r0, [r7, #4]
 8003c2c:	f7fd f932 	bl	8000e94 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8003c30:	6a3b      	ldr	r3, [r7, #32]
 8003c32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d00b      	beq.n	8003c52 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8003c3a:	69fb      	ldr	r3, [r7, #28]
 8003c3c:	f003 0310 	and.w	r3, r3, #16
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d006      	beq.n	8003c52 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	2210      	movs	r2, #16
 8003c4a:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8003c4c:	6878      	ldr	r0, [r7, #4]
 8003c4e:	f000 f8f2 	bl	8003e36 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8003c52:	6a3b      	ldr	r3, [r7, #32]
 8003c54:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d00b      	beq.n	8003c74 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8003c5c:	69fb      	ldr	r3, [r7, #28]
 8003c5e:	f003 0308 	and.w	r3, r3, #8
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d006      	beq.n	8003c74 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	2208      	movs	r2, #8
 8003c6c:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8003c6e:	6878      	ldr	r0, [r7, #4]
 8003c70:	f000 f8eb 	bl	8003e4a <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8003c74:	6a3b      	ldr	r3, [r7, #32]
 8003c76:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d07b      	beq.n	8003d76 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8003c7e:	69fb      	ldr	r3, [r7, #28]
 8003c80:	f003 0304 	and.w	r3, r3, #4
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d072      	beq.n	8003d6e <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003c88:	6a3b      	ldr	r3, [r7, #32]
 8003c8a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d008      	beq.n	8003ca4 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d003      	beq.n	8003ca4 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8003c9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c9e:	f043 0301 	orr.w	r3, r3, #1
 8003ca2:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003ca4:	6a3b      	ldr	r3, [r7, #32]
 8003ca6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d008      	beq.n	8003cc0 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d003      	beq.n	8003cc0 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8003cb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cba:	f043 0302 	orr.w	r3, r3, #2
 8003cbe:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003cc0:	6a3b      	ldr	r3, [r7, #32]
 8003cc2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d008      	beq.n	8003cdc <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d003      	beq.n	8003cdc <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8003cd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cd6:	f043 0304 	orr.w	r3, r3, #4
 8003cda:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003cdc:	6a3b      	ldr	r3, [r7, #32]
 8003cde:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d043      	beq.n	8003d6e <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d03e      	beq.n	8003d6e <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003cf6:	2b60      	cmp	r3, #96	@ 0x60
 8003cf8:	d02b      	beq.n	8003d52 <HAL_CAN_IRQHandler+0x32a>
 8003cfa:	2b60      	cmp	r3, #96	@ 0x60
 8003cfc:	d82e      	bhi.n	8003d5c <HAL_CAN_IRQHandler+0x334>
 8003cfe:	2b50      	cmp	r3, #80	@ 0x50
 8003d00:	d022      	beq.n	8003d48 <HAL_CAN_IRQHandler+0x320>
 8003d02:	2b50      	cmp	r3, #80	@ 0x50
 8003d04:	d82a      	bhi.n	8003d5c <HAL_CAN_IRQHandler+0x334>
 8003d06:	2b40      	cmp	r3, #64	@ 0x40
 8003d08:	d019      	beq.n	8003d3e <HAL_CAN_IRQHandler+0x316>
 8003d0a:	2b40      	cmp	r3, #64	@ 0x40
 8003d0c:	d826      	bhi.n	8003d5c <HAL_CAN_IRQHandler+0x334>
 8003d0e:	2b30      	cmp	r3, #48	@ 0x30
 8003d10:	d010      	beq.n	8003d34 <HAL_CAN_IRQHandler+0x30c>
 8003d12:	2b30      	cmp	r3, #48	@ 0x30
 8003d14:	d822      	bhi.n	8003d5c <HAL_CAN_IRQHandler+0x334>
 8003d16:	2b10      	cmp	r3, #16
 8003d18:	d002      	beq.n	8003d20 <HAL_CAN_IRQHandler+0x2f8>
 8003d1a:	2b20      	cmp	r3, #32
 8003d1c:	d005      	beq.n	8003d2a <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8003d1e:	e01d      	b.n	8003d5c <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8003d20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d22:	f043 0308 	orr.w	r3, r3, #8
 8003d26:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8003d28:	e019      	b.n	8003d5e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8003d2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d2c:	f043 0310 	orr.w	r3, r3, #16
 8003d30:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8003d32:	e014      	b.n	8003d5e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8003d34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d36:	f043 0320 	orr.w	r3, r3, #32
 8003d3a:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8003d3c:	e00f      	b.n	8003d5e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8003d3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d40:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003d44:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8003d46:	e00a      	b.n	8003d5e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8003d48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d4a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003d4e:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8003d50:	e005      	b.n	8003d5e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8003d52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d54:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003d58:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8003d5a:	e000      	b.n	8003d5e <HAL_CAN_IRQHandler+0x336>
            break;
 8003d5c:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	699a      	ldr	r2, [r3, #24]
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8003d6c:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	2204      	movs	r2, #4
 8003d74:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8003d76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d008      	beq.n	8003d8e <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003d80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d82:	431a      	orrs	r2, r3
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8003d88:	6878      	ldr	r0, [r7, #4]
 8003d8a:	f000 f868 	bl	8003e5e <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8003d8e:	bf00      	nop
 8003d90:	3728      	adds	r7, #40	@ 0x28
 8003d92:	46bd      	mov	sp, r7
 8003d94:	bd80      	pop	{r7, pc}

08003d96 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003d96:	b480      	push	{r7}
 8003d98:	b083      	sub	sp, #12
 8003d9a:	af00      	add	r7, sp, #0
 8003d9c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8003d9e:	bf00      	nop
 8003da0:	370c      	adds	r7, #12
 8003da2:	46bd      	mov	sp, r7
 8003da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da8:	4770      	bx	lr

08003daa <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003daa:	b480      	push	{r7}
 8003dac:	b083      	sub	sp, #12
 8003dae:	af00      	add	r7, sp, #0
 8003db0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8003db2:	bf00      	nop
 8003db4:	370c      	adds	r7, #12
 8003db6:	46bd      	mov	sp, r7
 8003db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dbc:	4770      	bx	lr

08003dbe <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003dbe:	b480      	push	{r7}
 8003dc0:	b083      	sub	sp, #12
 8003dc2:	af00      	add	r7, sp, #0
 8003dc4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8003dc6:	bf00      	nop
 8003dc8:	370c      	adds	r7, #12
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd0:	4770      	bx	lr

08003dd2 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003dd2:	b480      	push	{r7}
 8003dd4:	b083      	sub	sp, #12
 8003dd6:	af00      	add	r7, sp, #0
 8003dd8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8003dda:	bf00      	nop
 8003ddc:	370c      	adds	r7, #12
 8003dde:	46bd      	mov	sp, r7
 8003de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de4:	4770      	bx	lr

08003de6 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003de6:	b480      	push	{r7}
 8003de8:	b083      	sub	sp, #12
 8003dea:	af00      	add	r7, sp, #0
 8003dec:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8003dee:	bf00      	nop
 8003df0:	370c      	adds	r7, #12
 8003df2:	46bd      	mov	sp, r7
 8003df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df8:	4770      	bx	lr

08003dfa <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003dfa:	b480      	push	{r7}
 8003dfc:	b083      	sub	sp, #12
 8003dfe:	af00      	add	r7, sp, #0
 8003e00:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8003e02:	bf00      	nop
 8003e04:	370c      	adds	r7, #12
 8003e06:	46bd      	mov	sp, r7
 8003e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0c:	4770      	bx	lr

08003e0e <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8003e0e:	b480      	push	{r7}
 8003e10:	b083      	sub	sp, #12
 8003e12:	af00      	add	r7, sp, #0
 8003e14:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8003e16:	bf00      	nop
 8003e18:	370c      	adds	r7, #12
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e20:	4770      	bx	lr

08003e22 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8003e22:	b480      	push	{r7}
 8003e24:	b083      	sub	sp, #12
 8003e26:	af00      	add	r7, sp, #0
 8003e28:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8003e2a:	bf00      	nop
 8003e2c:	370c      	adds	r7, #12
 8003e2e:	46bd      	mov	sp, r7
 8003e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e34:	4770      	bx	lr

08003e36 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8003e36:	b480      	push	{r7}
 8003e38:	b083      	sub	sp, #12
 8003e3a:	af00      	add	r7, sp, #0
 8003e3c:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8003e3e:	bf00      	nop
 8003e40:	370c      	adds	r7, #12
 8003e42:	46bd      	mov	sp, r7
 8003e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e48:	4770      	bx	lr

08003e4a <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8003e4a:	b480      	push	{r7}
 8003e4c:	b083      	sub	sp, #12
 8003e4e:	af00      	add	r7, sp, #0
 8003e50:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8003e52:	bf00      	nop
 8003e54:	370c      	adds	r7, #12
 8003e56:	46bd      	mov	sp, r7
 8003e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5c:	4770      	bx	lr

08003e5e <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8003e5e:	b480      	push	{r7}
 8003e60:	b083      	sub	sp, #12
 8003e62:	af00      	add	r7, sp, #0
 8003e64:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8003e66:	bf00      	nop
 8003e68:	370c      	adds	r7, #12
 8003e6a:	46bd      	mov	sp, r7
 8003e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e70:	4770      	bx	lr
	...

08003e74 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003e74:	b480      	push	{r7}
 8003e76:	b085      	sub	sp, #20
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	f003 0307 	and.w	r3, r3, #7
 8003e82:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003e84:	4b0b      	ldr	r3, [pc, #44]	@ (8003eb4 <__NVIC_SetPriorityGrouping+0x40>)
 8003e86:	68db      	ldr	r3, [r3, #12]
 8003e88:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003e8a:	68ba      	ldr	r2, [r7, #8]
 8003e8c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003e90:	4013      	ands	r3, r2
 8003e92:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003e98:	68bb      	ldr	r3, [r7, #8]
 8003e9a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003e9c:	4b06      	ldr	r3, [pc, #24]	@ (8003eb8 <__NVIC_SetPriorityGrouping+0x44>)
 8003e9e:	4313      	orrs	r3, r2
 8003ea0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003ea2:	4a04      	ldr	r2, [pc, #16]	@ (8003eb4 <__NVIC_SetPriorityGrouping+0x40>)
 8003ea4:	68bb      	ldr	r3, [r7, #8]
 8003ea6:	60d3      	str	r3, [r2, #12]
}
 8003ea8:	bf00      	nop
 8003eaa:	3714      	adds	r7, #20
 8003eac:	46bd      	mov	sp, r7
 8003eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb2:	4770      	bx	lr
 8003eb4:	e000ed00 	.word	0xe000ed00
 8003eb8:	05fa0000 	.word	0x05fa0000

08003ebc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003ebc:	b480      	push	{r7}
 8003ebe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003ec0:	4b04      	ldr	r3, [pc, #16]	@ (8003ed4 <__NVIC_GetPriorityGrouping+0x18>)
 8003ec2:	68db      	ldr	r3, [r3, #12]
 8003ec4:	0a1b      	lsrs	r3, r3, #8
 8003ec6:	f003 0307 	and.w	r3, r3, #7
}
 8003eca:	4618      	mov	r0, r3
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed2:	4770      	bx	lr
 8003ed4:	e000ed00 	.word	0xe000ed00

08003ed8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003ed8:	b480      	push	{r7}
 8003eda:	b083      	sub	sp, #12
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	4603      	mov	r3, r0
 8003ee0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003ee2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	db0b      	blt.n	8003f02 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003eea:	79fb      	ldrb	r3, [r7, #7]
 8003eec:	f003 021f 	and.w	r2, r3, #31
 8003ef0:	4907      	ldr	r1, [pc, #28]	@ (8003f10 <__NVIC_EnableIRQ+0x38>)
 8003ef2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ef6:	095b      	lsrs	r3, r3, #5
 8003ef8:	2001      	movs	r0, #1
 8003efa:	fa00 f202 	lsl.w	r2, r0, r2
 8003efe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003f02:	bf00      	nop
 8003f04:	370c      	adds	r7, #12
 8003f06:	46bd      	mov	sp, r7
 8003f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0c:	4770      	bx	lr
 8003f0e:	bf00      	nop
 8003f10:	e000e100 	.word	0xe000e100

08003f14 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003f14:	b480      	push	{r7}
 8003f16:	b083      	sub	sp, #12
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	4603      	mov	r3, r0
 8003f1c:	6039      	str	r1, [r7, #0]
 8003f1e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003f20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	db0a      	blt.n	8003f3e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f28:	683b      	ldr	r3, [r7, #0]
 8003f2a:	b2da      	uxtb	r2, r3
 8003f2c:	490c      	ldr	r1, [pc, #48]	@ (8003f60 <__NVIC_SetPriority+0x4c>)
 8003f2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f32:	0112      	lsls	r2, r2, #4
 8003f34:	b2d2      	uxtb	r2, r2
 8003f36:	440b      	add	r3, r1
 8003f38:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003f3c:	e00a      	b.n	8003f54 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f3e:	683b      	ldr	r3, [r7, #0]
 8003f40:	b2da      	uxtb	r2, r3
 8003f42:	4908      	ldr	r1, [pc, #32]	@ (8003f64 <__NVIC_SetPriority+0x50>)
 8003f44:	79fb      	ldrb	r3, [r7, #7]
 8003f46:	f003 030f 	and.w	r3, r3, #15
 8003f4a:	3b04      	subs	r3, #4
 8003f4c:	0112      	lsls	r2, r2, #4
 8003f4e:	b2d2      	uxtb	r2, r2
 8003f50:	440b      	add	r3, r1
 8003f52:	761a      	strb	r2, [r3, #24]
}
 8003f54:	bf00      	nop
 8003f56:	370c      	adds	r7, #12
 8003f58:	46bd      	mov	sp, r7
 8003f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5e:	4770      	bx	lr
 8003f60:	e000e100 	.word	0xe000e100
 8003f64:	e000ed00 	.word	0xe000ed00

08003f68 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003f68:	b480      	push	{r7}
 8003f6a:	b089      	sub	sp, #36	@ 0x24
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	60f8      	str	r0, [r7, #12]
 8003f70:	60b9      	str	r1, [r7, #8]
 8003f72:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	f003 0307 	and.w	r3, r3, #7
 8003f7a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003f7c:	69fb      	ldr	r3, [r7, #28]
 8003f7e:	f1c3 0307 	rsb	r3, r3, #7
 8003f82:	2b04      	cmp	r3, #4
 8003f84:	bf28      	it	cs
 8003f86:	2304      	movcs	r3, #4
 8003f88:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003f8a:	69fb      	ldr	r3, [r7, #28]
 8003f8c:	3304      	adds	r3, #4
 8003f8e:	2b06      	cmp	r3, #6
 8003f90:	d902      	bls.n	8003f98 <NVIC_EncodePriority+0x30>
 8003f92:	69fb      	ldr	r3, [r7, #28]
 8003f94:	3b03      	subs	r3, #3
 8003f96:	e000      	b.n	8003f9a <NVIC_EncodePriority+0x32>
 8003f98:	2300      	movs	r3, #0
 8003f9a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003f9c:	f04f 32ff 	mov.w	r2, #4294967295
 8003fa0:	69bb      	ldr	r3, [r7, #24]
 8003fa2:	fa02 f303 	lsl.w	r3, r2, r3
 8003fa6:	43da      	mvns	r2, r3
 8003fa8:	68bb      	ldr	r3, [r7, #8]
 8003faa:	401a      	ands	r2, r3
 8003fac:	697b      	ldr	r3, [r7, #20]
 8003fae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003fb0:	f04f 31ff 	mov.w	r1, #4294967295
 8003fb4:	697b      	ldr	r3, [r7, #20]
 8003fb6:	fa01 f303 	lsl.w	r3, r1, r3
 8003fba:	43d9      	mvns	r1, r3
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003fc0:	4313      	orrs	r3, r2
         );
}
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	3724      	adds	r7, #36	@ 0x24
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fcc:	4770      	bx	lr

08003fce <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003fce:	b580      	push	{r7, lr}
 8003fd0:	b082      	sub	sp, #8
 8003fd2:	af00      	add	r7, sp, #0
 8003fd4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003fd6:	6878      	ldr	r0, [r7, #4]
 8003fd8:	f7ff ff4c 	bl	8003e74 <__NVIC_SetPriorityGrouping>
}
 8003fdc:	bf00      	nop
 8003fde:	3708      	adds	r7, #8
 8003fe0:	46bd      	mov	sp, r7
 8003fe2:	bd80      	pop	{r7, pc}

08003fe4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003fe4:	b580      	push	{r7, lr}
 8003fe6:	b086      	sub	sp, #24
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	4603      	mov	r3, r0
 8003fec:	60b9      	str	r1, [r7, #8]
 8003fee:	607a      	str	r2, [r7, #4]
 8003ff0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003ff2:	2300      	movs	r3, #0
 8003ff4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003ff6:	f7ff ff61 	bl	8003ebc <__NVIC_GetPriorityGrouping>
 8003ffa:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003ffc:	687a      	ldr	r2, [r7, #4]
 8003ffe:	68b9      	ldr	r1, [r7, #8]
 8004000:	6978      	ldr	r0, [r7, #20]
 8004002:	f7ff ffb1 	bl	8003f68 <NVIC_EncodePriority>
 8004006:	4602      	mov	r2, r0
 8004008:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800400c:	4611      	mov	r1, r2
 800400e:	4618      	mov	r0, r3
 8004010:	f7ff ff80 	bl	8003f14 <__NVIC_SetPriority>
}
 8004014:	bf00      	nop
 8004016:	3718      	adds	r7, #24
 8004018:	46bd      	mov	sp, r7
 800401a:	bd80      	pop	{r7, pc}

0800401c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800401c:	b580      	push	{r7, lr}
 800401e:	b082      	sub	sp, #8
 8004020:	af00      	add	r7, sp, #0
 8004022:	4603      	mov	r3, r0
 8004024:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004026:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800402a:	4618      	mov	r0, r3
 800402c:	f7ff ff54 	bl	8003ed8 <__NVIC_EnableIRQ>
}
 8004030:	bf00      	nop
 8004032:	3708      	adds	r7, #8
 8004034:	46bd      	mov	sp, r7
 8004036:	bd80      	pop	{r7, pc}

08004038 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004038:	b480      	push	{r7}
 800403a:	b089      	sub	sp, #36	@ 0x24
 800403c:	af00      	add	r7, sp, #0
 800403e:	6078      	str	r0, [r7, #4]
 8004040:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8004042:	2300      	movs	r3, #0
 8004044:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8004046:	2300      	movs	r3, #0
 8004048:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800404a:	2300      	movs	r3, #0
 800404c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800404e:	2300      	movs	r3, #0
 8004050:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8004052:	2300      	movs	r3, #0
 8004054:	61fb      	str	r3, [r7, #28]
 8004056:	e175      	b.n	8004344 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8004058:	2201      	movs	r2, #1
 800405a:	69fb      	ldr	r3, [r7, #28]
 800405c:	fa02 f303 	lsl.w	r3, r2, r3
 8004060:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004062:	683b      	ldr	r3, [r7, #0]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	697a      	ldr	r2, [r7, #20]
 8004068:	4013      	ands	r3, r2
 800406a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800406c:	693a      	ldr	r2, [r7, #16]
 800406e:	697b      	ldr	r3, [r7, #20]
 8004070:	429a      	cmp	r2, r3
 8004072:	f040 8164 	bne.w	800433e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004076:	683b      	ldr	r3, [r7, #0]
 8004078:	685b      	ldr	r3, [r3, #4]
 800407a:	f003 0303 	and.w	r3, r3, #3
 800407e:	2b01      	cmp	r3, #1
 8004080:	d005      	beq.n	800408e <HAL_GPIO_Init+0x56>
 8004082:	683b      	ldr	r3, [r7, #0]
 8004084:	685b      	ldr	r3, [r3, #4]
 8004086:	f003 0303 	and.w	r3, r3, #3
 800408a:	2b02      	cmp	r3, #2
 800408c:	d130      	bne.n	80040f0 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	689b      	ldr	r3, [r3, #8]
 8004092:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8004094:	69fb      	ldr	r3, [r7, #28]
 8004096:	005b      	lsls	r3, r3, #1
 8004098:	2203      	movs	r2, #3
 800409a:	fa02 f303 	lsl.w	r3, r2, r3
 800409e:	43db      	mvns	r3, r3
 80040a0:	69ba      	ldr	r2, [r7, #24]
 80040a2:	4013      	ands	r3, r2
 80040a4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80040a6:	683b      	ldr	r3, [r7, #0]
 80040a8:	68da      	ldr	r2, [r3, #12]
 80040aa:	69fb      	ldr	r3, [r7, #28]
 80040ac:	005b      	lsls	r3, r3, #1
 80040ae:	fa02 f303 	lsl.w	r3, r2, r3
 80040b2:	69ba      	ldr	r2, [r7, #24]
 80040b4:	4313      	orrs	r3, r2
 80040b6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	69ba      	ldr	r2, [r7, #24]
 80040bc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	685b      	ldr	r3, [r3, #4]
 80040c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80040c4:	2201      	movs	r2, #1
 80040c6:	69fb      	ldr	r3, [r7, #28]
 80040c8:	fa02 f303 	lsl.w	r3, r2, r3
 80040cc:	43db      	mvns	r3, r3
 80040ce:	69ba      	ldr	r2, [r7, #24]
 80040d0:	4013      	ands	r3, r2
 80040d2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80040d4:	683b      	ldr	r3, [r7, #0]
 80040d6:	685b      	ldr	r3, [r3, #4]
 80040d8:	091b      	lsrs	r3, r3, #4
 80040da:	f003 0201 	and.w	r2, r3, #1
 80040de:	69fb      	ldr	r3, [r7, #28]
 80040e0:	fa02 f303 	lsl.w	r3, r2, r3
 80040e4:	69ba      	ldr	r2, [r7, #24]
 80040e6:	4313      	orrs	r3, r2
 80040e8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	69ba      	ldr	r2, [r7, #24]
 80040ee:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80040f0:	683b      	ldr	r3, [r7, #0]
 80040f2:	685b      	ldr	r3, [r3, #4]
 80040f4:	f003 0303 	and.w	r3, r3, #3
 80040f8:	2b03      	cmp	r3, #3
 80040fa:	d017      	beq.n	800412c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	68db      	ldr	r3, [r3, #12]
 8004100:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8004102:	69fb      	ldr	r3, [r7, #28]
 8004104:	005b      	lsls	r3, r3, #1
 8004106:	2203      	movs	r2, #3
 8004108:	fa02 f303 	lsl.w	r3, r2, r3
 800410c:	43db      	mvns	r3, r3
 800410e:	69ba      	ldr	r2, [r7, #24]
 8004110:	4013      	ands	r3, r2
 8004112:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8004114:	683b      	ldr	r3, [r7, #0]
 8004116:	689a      	ldr	r2, [r3, #8]
 8004118:	69fb      	ldr	r3, [r7, #28]
 800411a:	005b      	lsls	r3, r3, #1
 800411c:	fa02 f303 	lsl.w	r3, r2, r3
 8004120:	69ba      	ldr	r2, [r7, #24]
 8004122:	4313      	orrs	r3, r2
 8004124:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	69ba      	ldr	r2, [r7, #24]
 800412a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800412c:	683b      	ldr	r3, [r7, #0]
 800412e:	685b      	ldr	r3, [r3, #4]
 8004130:	f003 0303 	and.w	r3, r3, #3
 8004134:	2b02      	cmp	r3, #2
 8004136:	d123      	bne.n	8004180 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8004138:	69fb      	ldr	r3, [r7, #28]
 800413a:	08da      	lsrs	r2, r3, #3
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	3208      	adds	r2, #8
 8004140:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004144:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8004146:	69fb      	ldr	r3, [r7, #28]
 8004148:	f003 0307 	and.w	r3, r3, #7
 800414c:	009b      	lsls	r3, r3, #2
 800414e:	220f      	movs	r2, #15
 8004150:	fa02 f303 	lsl.w	r3, r2, r3
 8004154:	43db      	mvns	r3, r3
 8004156:	69ba      	ldr	r2, [r7, #24]
 8004158:	4013      	ands	r3, r2
 800415a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800415c:	683b      	ldr	r3, [r7, #0]
 800415e:	691a      	ldr	r2, [r3, #16]
 8004160:	69fb      	ldr	r3, [r7, #28]
 8004162:	f003 0307 	and.w	r3, r3, #7
 8004166:	009b      	lsls	r3, r3, #2
 8004168:	fa02 f303 	lsl.w	r3, r2, r3
 800416c:	69ba      	ldr	r2, [r7, #24]
 800416e:	4313      	orrs	r3, r2
 8004170:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8004172:	69fb      	ldr	r3, [r7, #28]
 8004174:	08da      	lsrs	r2, r3, #3
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	3208      	adds	r2, #8
 800417a:	69b9      	ldr	r1, [r7, #24]
 800417c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8004186:	69fb      	ldr	r3, [r7, #28]
 8004188:	005b      	lsls	r3, r3, #1
 800418a:	2203      	movs	r2, #3
 800418c:	fa02 f303 	lsl.w	r3, r2, r3
 8004190:	43db      	mvns	r3, r3
 8004192:	69ba      	ldr	r2, [r7, #24]
 8004194:	4013      	ands	r3, r2
 8004196:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8004198:	683b      	ldr	r3, [r7, #0]
 800419a:	685b      	ldr	r3, [r3, #4]
 800419c:	f003 0203 	and.w	r2, r3, #3
 80041a0:	69fb      	ldr	r3, [r7, #28]
 80041a2:	005b      	lsls	r3, r3, #1
 80041a4:	fa02 f303 	lsl.w	r3, r2, r3
 80041a8:	69ba      	ldr	r2, [r7, #24]
 80041aa:	4313      	orrs	r3, r2
 80041ac:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	69ba      	ldr	r2, [r7, #24]
 80041b2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80041b4:	683b      	ldr	r3, [r7, #0]
 80041b6:	685b      	ldr	r3, [r3, #4]
 80041b8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80041bc:	2b00      	cmp	r3, #0
 80041be:	f000 80be 	beq.w	800433e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80041c2:	4b66      	ldr	r3, [pc, #408]	@ (800435c <HAL_GPIO_Init+0x324>)
 80041c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041c6:	4a65      	ldr	r2, [pc, #404]	@ (800435c <HAL_GPIO_Init+0x324>)
 80041c8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80041cc:	6453      	str	r3, [r2, #68]	@ 0x44
 80041ce:	4b63      	ldr	r3, [pc, #396]	@ (800435c <HAL_GPIO_Init+0x324>)
 80041d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041d2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80041d6:	60fb      	str	r3, [r7, #12]
 80041d8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80041da:	4a61      	ldr	r2, [pc, #388]	@ (8004360 <HAL_GPIO_Init+0x328>)
 80041dc:	69fb      	ldr	r3, [r7, #28]
 80041de:	089b      	lsrs	r3, r3, #2
 80041e0:	3302      	adds	r3, #2
 80041e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80041e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80041e8:	69fb      	ldr	r3, [r7, #28]
 80041ea:	f003 0303 	and.w	r3, r3, #3
 80041ee:	009b      	lsls	r3, r3, #2
 80041f0:	220f      	movs	r2, #15
 80041f2:	fa02 f303 	lsl.w	r3, r2, r3
 80041f6:	43db      	mvns	r3, r3
 80041f8:	69ba      	ldr	r2, [r7, #24]
 80041fa:	4013      	ands	r3, r2
 80041fc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	4a58      	ldr	r2, [pc, #352]	@ (8004364 <HAL_GPIO_Init+0x32c>)
 8004202:	4293      	cmp	r3, r2
 8004204:	d037      	beq.n	8004276 <HAL_GPIO_Init+0x23e>
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	4a57      	ldr	r2, [pc, #348]	@ (8004368 <HAL_GPIO_Init+0x330>)
 800420a:	4293      	cmp	r3, r2
 800420c:	d031      	beq.n	8004272 <HAL_GPIO_Init+0x23a>
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	4a56      	ldr	r2, [pc, #344]	@ (800436c <HAL_GPIO_Init+0x334>)
 8004212:	4293      	cmp	r3, r2
 8004214:	d02b      	beq.n	800426e <HAL_GPIO_Init+0x236>
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	4a55      	ldr	r2, [pc, #340]	@ (8004370 <HAL_GPIO_Init+0x338>)
 800421a:	4293      	cmp	r3, r2
 800421c:	d025      	beq.n	800426a <HAL_GPIO_Init+0x232>
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	4a54      	ldr	r2, [pc, #336]	@ (8004374 <HAL_GPIO_Init+0x33c>)
 8004222:	4293      	cmp	r3, r2
 8004224:	d01f      	beq.n	8004266 <HAL_GPIO_Init+0x22e>
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	4a53      	ldr	r2, [pc, #332]	@ (8004378 <HAL_GPIO_Init+0x340>)
 800422a:	4293      	cmp	r3, r2
 800422c:	d019      	beq.n	8004262 <HAL_GPIO_Init+0x22a>
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	4a52      	ldr	r2, [pc, #328]	@ (800437c <HAL_GPIO_Init+0x344>)
 8004232:	4293      	cmp	r3, r2
 8004234:	d013      	beq.n	800425e <HAL_GPIO_Init+0x226>
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	4a51      	ldr	r2, [pc, #324]	@ (8004380 <HAL_GPIO_Init+0x348>)
 800423a:	4293      	cmp	r3, r2
 800423c:	d00d      	beq.n	800425a <HAL_GPIO_Init+0x222>
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	4a50      	ldr	r2, [pc, #320]	@ (8004384 <HAL_GPIO_Init+0x34c>)
 8004242:	4293      	cmp	r3, r2
 8004244:	d007      	beq.n	8004256 <HAL_GPIO_Init+0x21e>
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	4a4f      	ldr	r2, [pc, #316]	@ (8004388 <HAL_GPIO_Init+0x350>)
 800424a:	4293      	cmp	r3, r2
 800424c:	d101      	bne.n	8004252 <HAL_GPIO_Init+0x21a>
 800424e:	2309      	movs	r3, #9
 8004250:	e012      	b.n	8004278 <HAL_GPIO_Init+0x240>
 8004252:	230a      	movs	r3, #10
 8004254:	e010      	b.n	8004278 <HAL_GPIO_Init+0x240>
 8004256:	2308      	movs	r3, #8
 8004258:	e00e      	b.n	8004278 <HAL_GPIO_Init+0x240>
 800425a:	2307      	movs	r3, #7
 800425c:	e00c      	b.n	8004278 <HAL_GPIO_Init+0x240>
 800425e:	2306      	movs	r3, #6
 8004260:	e00a      	b.n	8004278 <HAL_GPIO_Init+0x240>
 8004262:	2305      	movs	r3, #5
 8004264:	e008      	b.n	8004278 <HAL_GPIO_Init+0x240>
 8004266:	2304      	movs	r3, #4
 8004268:	e006      	b.n	8004278 <HAL_GPIO_Init+0x240>
 800426a:	2303      	movs	r3, #3
 800426c:	e004      	b.n	8004278 <HAL_GPIO_Init+0x240>
 800426e:	2302      	movs	r3, #2
 8004270:	e002      	b.n	8004278 <HAL_GPIO_Init+0x240>
 8004272:	2301      	movs	r3, #1
 8004274:	e000      	b.n	8004278 <HAL_GPIO_Init+0x240>
 8004276:	2300      	movs	r3, #0
 8004278:	69fa      	ldr	r2, [r7, #28]
 800427a:	f002 0203 	and.w	r2, r2, #3
 800427e:	0092      	lsls	r2, r2, #2
 8004280:	4093      	lsls	r3, r2
 8004282:	69ba      	ldr	r2, [r7, #24]
 8004284:	4313      	orrs	r3, r2
 8004286:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8004288:	4935      	ldr	r1, [pc, #212]	@ (8004360 <HAL_GPIO_Init+0x328>)
 800428a:	69fb      	ldr	r3, [r7, #28]
 800428c:	089b      	lsrs	r3, r3, #2
 800428e:	3302      	adds	r3, #2
 8004290:	69ba      	ldr	r2, [r7, #24]
 8004292:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004296:	4b3d      	ldr	r3, [pc, #244]	@ (800438c <HAL_GPIO_Init+0x354>)
 8004298:	689b      	ldr	r3, [r3, #8]
 800429a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800429c:	693b      	ldr	r3, [r7, #16]
 800429e:	43db      	mvns	r3, r3
 80042a0:	69ba      	ldr	r2, [r7, #24]
 80042a2:	4013      	ands	r3, r2
 80042a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80042a6:	683b      	ldr	r3, [r7, #0]
 80042a8:	685b      	ldr	r3, [r3, #4]
 80042aa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d003      	beq.n	80042ba <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80042b2:	69ba      	ldr	r2, [r7, #24]
 80042b4:	693b      	ldr	r3, [r7, #16]
 80042b6:	4313      	orrs	r3, r2
 80042b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80042ba:	4a34      	ldr	r2, [pc, #208]	@ (800438c <HAL_GPIO_Init+0x354>)
 80042bc:	69bb      	ldr	r3, [r7, #24]
 80042be:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80042c0:	4b32      	ldr	r3, [pc, #200]	@ (800438c <HAL_GPIO_Init+0x354>)
 80042c2:	68db      	ldr	r3, [r3, #12]
 80042c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80042c6:	693b      	ldr	r3, [r7, #16]
 80042c8:	43db      	mvns	r3, r3
 80042ca:	69ba      	ldr	r2, [r7, #24]
 80042cc:	4013      	ands	r3, r2
 80042ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80042d0:	683b      	ldr	r3, [r7, #0]
 80042d2:	685b      	ldr	r3, [r3, #4]
 80042d4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d003      	beq.n	80042e4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80042dc:	69ba      	ldr	r2, [r7, #24]
 80042de:	693b      	ldr	r3, [r7, #16]
 80042e0:	4313      	orrs	r3, r2
 80042e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80042e4:	4a29      	ldr	r2, [pc, #164]	@ (800438c <HAL_GPIO_Init+0x354>)
 80042e6:	69bb      	ldr	r3, [r7, #24]
 80042e8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80042ea:	4b28      	ldr	r3, [pc, #160]	@ (800438c <HAL_GPIO_Init+0x354>)
 80042ec:	685b      	ldr	r3, [r3, #4]
 80042ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80042f0:	693b      	ldr	r3, [r7, #16]
 80042f2:	43db      	mvns	r3, r3
 80042f4:	69ba      	ldr	r2, [r7, #24]
 80042f6:	4013      	ands	r3, r2
 80042f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80042fa:	683b      	ldr	r3, [r7, #0]
 80042fc:	685b      	ldr	r3, [r3, #4]
 80042fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004302:	2b00      	cmp	r3, #0
 8004304:	d003      	beq.n	800430e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8004306:	69ba      	ldr	r2, [r7, #24]
 8004308:	693b      	ldr	r3, [r7, #16]
 800430a:	4313      	orrs	r3, r2
 800430c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800430e:	4a1f      	ldr	r2, [pc, #124]	@ (800438c <HAL_GPIO_Init+0x354>)
 8004310:	69bb      	ldr	r3, [r7, #24]
 8004312:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004314:	4b1d      	ldr	r3, [pc, #116]	@ (800438c <HAL_GPIO_Init+0x354>)
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800431a:	693b      	ldr	r3, [r7, #16]
 800431c:	43db      	mvns	r3, r3
 800431e:	69ba      	ldr	r2, [r7, #24]
 8004320:	4013      	ands	r3, r2
 8004322:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004324:	683b      	ldr	r3, [r7, #0]
 8004326:	685b      	ldr	r3, [r3, #4]
 8004328:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800432c:	2b00      	cmp	r3, #0
 800432e:	d003      	beq.n	8004338 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8004330:	69ba      	ldr	r2, [r7, #24]
 8004332:	693b      	ldr	r3, [r7, #16]
 8004334:	4313      	orrs	r3, r2
 8004336:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004338:	4a14      	ldr	r2, [pc, #80]	@ (800438c <HAL_GPIO_Init+0x354>)
 800433a:	69bb      	ldr	r3, [r7, #24]
 800433c:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800433e:	69fb      	ldr	r3, [r7, #28]
 8004340:	3301      	adds	r3, #1
 8004342:	61fb      	str	r3, [r7, #28]
 8004344:	69fb      	ldr	r3, [r7, #28]
 8004346:	2b0f      	cmp	r3, #15
 8004348:	f67f ae86 	bls.w	8004058 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800434c:	bf00      	nop
 800434e:	bf00      	nop
 8004350:	3724      	adds	r7, #36	@ 0x24
 8004352:	46bd      	mov	sp, r7
 8004354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004358:	4770      	bx	lr
 800435a:	bf00      	nop
 800435c:	40023800 	.word	0x40023800
 8004360:	40013800 	.word	0x40013800
 8004364:	40020000 	.word	0x40020000
 8004368:	40020400 	.word	0x40020400
 800436c:	40020800 	.word	0x40020800
 8004370:	40020c00 	.word	0x40020c00
 8004374:	40021000 	.word	0x40021000
 8004378:	40021400 	.word	0x40021400
 800437c:	40021800 	.word	0x40021800
 8004380:	40021c00 	.word	0x40021c00
 8004384:	40022000 	.word	0x40022000
 8004388:	40022400 	.word	0x40022400
 800438c:	40013c00 	.word	0x40013c00

08004390 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004390:	b480      	push	{r7}
 8004392:	b085      	sub	sp, #20
 8004394:	af00      	add	r7, sp, #0
 8004396:	6078      	str	r0, [r7, #4]
 8004398:	460b      	mov	r3, r1
 800439a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	691a      	ldr	r2, [r3, #16]
 80043a0:	887b      	ldrh	r3, [r7, #2]
 80043a2:	4013      	ands	r3, r2
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d002      	beq.n	80043ae <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80043a8:	2301      	movs	r3, #1
 80043aa:	73fb      	strb	r3, [r7, #15]
 80043ac:	e001      	b.n	80043b2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80043ae:	2300      	movs	r3, #0
 80043b0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80043b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80043b4:	4618      	mov	r0, r3
 80043b6:	3714      	adds	r7, #20
 80043b8:	46bd      	mov	sp, r7
 80043ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043be:	4770      	bx	lr

080043c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80043c0:	b480      	push	{r7}
 80043c2:	b083      	sub	sp, #12
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	6078      	str	r0, [r7, #4]
 80043c8:	460b      	mov	r3, r1
 80043ca:	807b      	strh	r3, [r7, #2]
 80043cc:	4613      	mov	r3, r2
 80043ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80043d0:	787b      	ldrb	r3, [r7, #1]
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d003      	beq.n	80043de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80043d6:	887a      	ldrh	r2, [r7, #2]
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80043dc:	e003      	b.n	80043e6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80043de:	887b      	ldrh	r3, [r7, #2]
 80043e0:	041a      	lsls	r2, r3, #16
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	619a      	str	r2, [r3, #24]
}
 80043e6:	bf00      	nop
 80043e8:	370c      	adds	r7, #12
 80043ea:	46bd      	mov	sp, r7
 80043ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f0:	4770      	bx	lr
	...

080043f4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80043f4:	b580      	push	{r7, lr}
 80043f6:	b086      	sub	sp, #24
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80043fc:	2300      	movs	r3, #0
 80043fe:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2b00      	cmp	r3, #0
 8004404:	d101      	bne.n	800440a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8004406:	2301      	movs	r3, #1
 8004408:	e29b      	b.n	8004942 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f003 0301 	and.w	r3, r3, #1
 8004412:	2b00      	cmp	r3, #0
 8004414:	f000 8087 	beq.w	8004526 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004418:	4b96      	ldr	r3, [pc, #600]	@ (8004674 <HAL_RCC_OscConfig+0x280>)
 800441a:	689b      	ldr	r3, [r3, #8]
 800441c:	f003 030c 	and.w	r3, r3, #12
 8004420:	2b04      	cmp	r3, #4
 8004422:	d00c      	beq.n	800443e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004424:	4b93      	ldr	r3, [pc, #588]	@ (8004674 <HAL_RCC_OscConfig+0x280>)
 8004426:	689b      	ldr	r3, [r3, #8]
 8004428:	f003 030c 	and.w	r3, r3, #12
 800442c:	2b08      	cmp	r3, #8
 800442e:	d112      	bne.n	8004456 <HAL_RCC_OscConfig+0x62>
 8004430:	4b90      	ldr	r3, [pc, #576]	@ (8004674 <HAL_RCC_OscConfig+0x280>)
 8004432:	685b      	ldr	r3, [r3, #4]
 8004434:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004438:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800443c:	d10b      	bne.n	8004456 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800443e:	4b8d      	ldr	r3, [pc, #564]	@ (8004674 <HAL_RCC_OscConfig+0x280>)
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004446:	2b00      	cmp	r3, #0
 8004448:	d06c      	beq.n	8004524 <HAL_RCC_OscConfig+0x130>
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	685b      	ldr	r3, [r3, #4]
 800444e:	2b00      	cmp	r3, #0
 8004450:	d168      	bne.n	8004524 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8004452:	2301      	movs	r3, #1
 8004454:	e275      	b.n	8004942 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	685b      	ldr	r3, [r3, #4]
 800445a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800445e:	d106      	bne.n	800446e <HAL_RCC_OscConfig+0x7a>
 8004460:	4b84      	ldr	r3, [pc, #528]	@ (8004674 <HAL_RCC_OscConfig+0x280>)
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	4a83      	ldr	r2, [pc, #524]	@ (8004674 <HAL_RCC_OscConfig+0x280>)
 8004466:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800446a:	6013      	str	r3, [r2, #0]
 800446c:	e02e      	b.n	80044cc <HAL_RCC_OscConfig+0xd8>
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	685b      	ldr	r3, [r3, #4]
 8004472:	2b00      	cmp	r3, #0
 8004474:	d10c      	bne.n	8004490 <HAL_RCC_OscConfig+0x9c>
 8004476:	4b7f      	ldr	r3, [pc, #508]	@ (8004674 <HAL_RCC_OscConfig+0x280>)
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	4a7e      	ldr	r2, [pc, #504]	@ (8004674 <HAL_RCC_OscConfig+0x280>)
 800447c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004480:	6013      	str	r3, [r2, #0]
 8004482:	4b7c      	ldr	r3, [pc, #496]	@ (8004674 <HAL_RCC_OscConfig+0x280>)
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	4a7b      	ldr	r2, [pc, #492]	@ (8004674 <HAL_RCC_OscConfig+0x280>)
 8004488:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800448c:	6013      	str	r3, [r2, #0]
 800448e:	e01d      	b.n	80044cc <HAL_RCC_OscConfig+0xd8>
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	685b      	ldr	r3, [r3, #4]
 8004494:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004498:	d10c      	bne.n	80044b4 <HAL_RCC_OscConfig+0xc0>
 800449a:	4b76      	ldr	r3, [pc, #472]	@ (8004674 <HAL_RCC_OscConfig+0x280>)
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	4a75      	ldr	r2, [pc, #468]	@ (8004674 <HAL_RCC_OscConfig+0x280>)
 80044a0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80044a4:	6013      	str	r3, [r2, #0]
 80044a6:	4b73      	ldr	r3, [pc, #460]	@ (8004674 <HAL_RCC_OscConfig+0x280>)
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	4a72      	ldr	r2, [pc, #456]	@ (8004674 <HAL_RCC_OscConfig+0x280>)
 80044ac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80044b0:	6013      	str	r3, [r2, #0]
 80044b2:	e00b      	b.n	80044cc <HAL_RCC_OscConfig+0xd8>
 80044b4:	4b6f      	ldr	r3, [pc, #444]	@ (8004674 <HAL_RCC_OscConfig+0x280>)
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	4a6e      	ldr	r2, [pc, #440]	@ (8004674 <HAL_RCC_OscConfig+0x280>)
 80044ba:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80044be:	6013      	str	r3, [r2, #0]
 80044c0:	4b6c      	ldr	r3, [pc, #432]	@ (8004674 <HAL_RCC_OscConfig+0x280>)
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	4a6b      	ldr	r2, [pc, #428]	@ (8004674 <HAL_RCC_OscConfig+0x280>)
 80044c6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80044ca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	685b      	ldr	r3, [r3, #4]
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d013      	beq.n	80044fc <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044d4:	f7fe fa16 	bl	8002904 <HAL_GetTick>
 80044d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044da:	e008      	b.n	80044ee <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80044dc:	f7fe fa12 	bl	8002904 <HAL_GetTick>
 80044e0:	4602      	mov	r2, r0
 80044e2:	693b      	ldr	r3, [r7, #16]
 80044e4:	1ad3      	subs	r3, r2, r3
 80044e6:	2b64      	cmp	r3, #100	@ 0x64
 80044e8:	d901      	bls.n	80044ee <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80044ea:	2303      	movs	r3, #3
 80044ec:	e229      	b.n	8004942 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044ee:	4b61      	ldr	r3, [pc, #388]	@ (8004674 <HAL_RCC_OscConfig+0x280>)
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d0f0      	beq.n	80044dc <HAL_RCC_OscConfig+0xe8>
 80044fa:	e014      	b.n	8004526 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044fc:	f7fe fa02 	bl	8002904 <HAL_GetTick>
 8004500:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004502:	e008      	b.n	8004516 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004504:	f7fe f9fe 	bl	8002904 <HAL_GetTick>
 8004508:	4602      	mov	r2, r0
 800450a:	693b      	ldr	r3, [r7, #16]
 800450c:	1ad3      	subs	r3, r2, r3
 800450e:	2b64      	cmp	r3, #100	@ 0x64
 8004510:	d901      	bls.n	8004516 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8004512:	2303      	movs	r3, #3
 8004514:	e215      	b.n	8004942 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004516:	4b57      	ldr	r3, [pc, #348]	@ (8004674 <HAL_RCC_OscConfig+0x280>)
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800451e:	2b00      	cmp	r3, #0
 8004520:	d1f0      	bne.n	8004504 <HAL_RCC_OscConfig+0x110>
 8004522:	e000      	b.n	8004526 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004524:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f003 0302 	and.w	r3, r3, #2
 800452e:	2b00      	cmp	r3, #0
 8004530:	d069      	beq.n	8004606 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004532:	4b50      	ldr	r3, [pc, #320]	@ (8004674 <HAL_RCC_OscConfig+0x280>)
 8004534:	689b      	ldr	r3, [r3, #8]
 8004536:	f003 030c 	and.w	r3, r3, #12
 800453a:	2b00      	cmp	r3, #0
 800453c:	d00b      	beq.n	8004556 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800453e:	4b4d      	ldr	r3, [pc, #308]	@ (8004674 <HAL_RCC_OscConfig+0x280>)
 8004540:	689b      	ldr	r3, [r3, #8]
 8004542:	f003 030c 	and.w	r3, r3, #12
 8004546:	2b08      	cmp	r3, #8
 8004548:	d11c      	bne.n	8004584 <HAL_RCC_OscConfig+0x190>
 800454a:	4b4a      	ldr	r3, [pc, #296]	@ (8004674 <HAL_RCC_OscConfig+0x280>)
 800454c:	685b      	ldr	r3, [r3, #4]
 800454e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004552:	2b00      	cmp	r3, #0
 8004554:	d116      	bne.n	8004584 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004556:	4b47      	ldr	r3, [pc, #284]	@ (8004674 <HAL_RCC_OscConfig+0x280>)
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f003 0302 	and.w	r3, r3, #2
 800455e:	2b00      	cmp	r3, #0
 8004560:	d005      	beq.n	800456e <HAL_RCC_OscConfig+0x17a>
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	68db      	ldr	r3, [r3, #12]
 8004566:	2b01      	cmp	r3, #1
 8004568:	d001      	beq.n	800456e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800456a:	2301      	movs	r3, #1
 800456c:	e1e9      	b.n	8004942 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800456e:	4b41      	ldr	r3, [pc, #260]	@ (8004674 <HAL_RCC_OscConfig+0x280>)
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	691b      	ldr	r3, [r3, #16]
 800457a:	00db      	lsls	r3, r3, #3
 800457c:	493d      	ldr	r1, [pc, #244]	@ (8004674 <HAL_RCC_OscConfig+0x280>)
 800457e:	4313      	orrs	r3, r2
 8004580:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004582:	e040      	b.n	8004606 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	68db      	ldr	r3, [r3, #12]
 8004588:	2b00      	cmp	r3, #0
 800458a:	d023      	beq.n	80045d4 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800458c:	4b39      	ldr	r3, [pc, #228]	@ (8004674 <HAL_RCC_OscConfig+0x280>)
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	4a38      	ldr	r2, [pc, #224]	@ (8004674 <HAL_RCC_OscConfig+0x280>)
 8004592:	f043 0301 	orr.w	r3, r3, #1
 8004596:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004598:	f7fe f9b4 	bl	8002904 <HAL_GetTick>
 800459c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800459e:	e008      	b.n	80045b2 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80045a0:	f7fe f9b0 	bl	8002904 <HAL_GetTick>
 80045a4:	4602      	mov	r2, r0
 80045a6:	693b      	ldr	r3, [r7, #16]
 80045a8:	1ad3      	subs	r3, r2, r3
 80045aa:	2b02      	cmp	r3, #2
 80045ac:	d901      	bls.n	80045b2 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80045ae:	2303      	movs	r3, #3
 80045b0:	e1c7      	b.n	8004942 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80045b2:	4b30      	ldr	r3, [pc, #192]	@ (8004674 <HAL_RCC_OscConfig+0x280>)
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f003 0302 	and.w	r3, r3, #2
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d0f0      	beq.n	80045a0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045be:	4b2d      	ldr	r3, [pc, #180]	@ (8004674 <HAL_RCC_OscConfig+0x280>)
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	691b      	ldr	r3, [r3, #16]
 80045ca:	00db      	lsls	r3, r3, #3
 80045cc:	4929      	ldr	r1, [pc, #164]	@ (8004674 <HAL_RCC_OscConfig+0x280>)
 80045ce:	4313      	orrs	r3, r2
 80045d0:	600b      	str	r3, [r1, #0]
 80045d2:	e018      	b.n	8004606 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80045d4:	4b27      	ldr	r3, [pc, #156]	@ (8004674 <HAL_RCC_OscConfig+0x280>)
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	4a26      	ldr	r2, [pc, #152]	@ (8004674 <HAL_RCC_OscConfig+0x280>)
 80045da:	f023 0301 	bic.w	r3, r3, #1
 80045de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045e0:	f7fe f990 	bl	8002904 <HAL_GetTick>
 80045e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80045e6:	e008      	b.n	80045fa <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80045e8:	f7fe f98c 	bl	8002904 <HAL_GetTick>
 80045ec:	4602      	mov	r2, r0
 80045ee:	693b      	ldr	r3, [r7, #16]
 80045f0:	1ad3      	subs	r3, r2, r3
 80045f2:	2b02      	cmp	r3, #2
 80045f4:	d901      	bls.n	80045fa <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80045f6:	2303      	movs	r3, #3
 80045f8:	e1a3      	b.n	8004942 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80045fa:	4b1e      	ldr	r3, [pc, #120]	@ (8004674 <HAL_RCC_OscConfig+0x280>)
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f003 0302 	and.w	r3, r3, #2
 8004602:	2b00      	cmp	r3, #0
 8004604:	d1f0      	bne.n	80045e8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f003 0308 	and.w	r3, r3, #8
 800460e:	2b00      	cmp	r3, #0
 8004610:	d038      	beq.n	8004684 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	695b      	ldr	r3, [r3, #20]
 8004616:	2b00      	cmp	r3, #0
 8004618:	d019      	beq.n	800464e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800461a:	4b16      	ldr	r3, [pc, #88]	@ (8004674 <HAL_RCC_OscConfig+0x280>)
 800461c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800461e:	4a15      	ldr	r2, [pc, #84]	@ (8004674 <HAL_RCC_OscConfig+0x280>)
 8004620:	f043 0301 	orr.w	r3, r3, #1
 8004624:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004626:	f7fe f96d 	bl	8002904 <HAL_GetTick>
 800462a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800462c:	e008      	b.n	8004640 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800462e:	f7fe f969 	bl	8002904 <HAL_GetTick>
 8004632:	4602      	mov	r2, r0
 8004634:	693b      	ldr	r3, [r7, #16]
 8004636:	1ad3      	subs	r3, r2, r3
 8004638:	2b02      	cmp	r3, #2
 800463a:	d901      	bls.n	8004640 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800463c:	2303      	movs	r3, #3
 800463e:	e180      	b.n	8004942 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004640:	4b0c      	ldr	r3, [pc, #48]	@ (8004674 <HAL_RCC_OscConfig+0x280>)
 8004642:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004644:	f003 0302 	and.w	r3, r3, #2
 8004648:	2b00      	cmp	r3, #0
 800464a:	d0f0      	beq.n	800462e <HAL_RCC_OscConfig+0x23a>
 800464c:	e01a      	b.n	8004684 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800464e:	4b09      	ldr	r3, [pc, #36]	@ (8004674 <HAL_RCC_OscConfig+0x280>)
 8004650:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004652:	4a08      	ldr	r2, [pc, #32]	@ (8004674 <HAL_RCC_OscConfig+0x280>)
 8004654:	f023 0301 	bic.w	r3, r3, #1
 8004658:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800465a:	f7fe f953 	bl	8002904 <HAL_GetTick>
 800465e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004660:	e00a      	b.n	8004678 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004662:	f7fe f94f 	bl	8002904 <HAL_GetTick>
 8004666:	4602      	mov	r2, r0
 8004668:	693b      	ldr	r3, [r7, #16]
 800466a:	1ad3      	subs	r3, r2, r3
 800466c:	2b02      	cmp	r3, #2
 800466e:	d903      	bls.n	8004678 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004670:	2303      	movs	r3, #3
 8004672:	e166      	b.n	8004942 <HAL_RCC_OscConfig+0x54e>
 8004674:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004678:	4b92      	ldr	r3, [pc, #584]	@ (80048c4 <HAL_RCC_OscConfig+0x4d0>)
 800467a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800467c:	f003 0302 	and.w	r3, r3, #2
 8004680:	2b00      	cmp	r3, #0
 8004682:	d1ee      	bne.n	8004662 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	f003 0304 	and.w	r3, r3, #4
 800468c:	2b00      	cmp	r3, #0
 800468e:	f000 80a4 	beq.w	80047da <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004692:	4b8c      	ldr	r3, [pc, #560]	@ (80048c4 <HAL_RCC_OscConfig+0x4d0>)
 8004694:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004696:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800469a:	2b00      	cmp	r3, #0
 800469c:	d10d      	bne.n	80046ba <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800469e:	4b89      	ldr	r3, [pc, #548]	@ (80048c4 <HAL_RCC_OscConfig+0x4d0>)
 80046a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046a2:	4a88      	ldr	r2, [pc, #544]	@ (80048c4 <HAL_RCC_OscConfig+0x4d0>)
 80046a4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80046a8:	6413      	str	r3, [r2, #64]	@ 0x40
 80046aa:	4b86      	ldr	r3, [pc, #536]	@ (80048c4 <HAL_RCC_OscConfig+0x4d0>)
 80046ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80046b2:	60bb      	str	r3, [r7, #8]
 80046b4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80046b6:	2301      	movs	r3, #1
 80046b8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80046ba:	4b83      	ldr	r3, [pc, #524]	@ (80048c8 <HAL_RCC_OscConfig+0x4d4>)
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d118      	bne.n	80046f8 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80046c6:	4b80      	ldr	r3, [pc, #512]	@ (80048c8 <HAL_RCC_OscConfig+0x4d4>)
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	4a7f      	ldr	r2, [pc, #508]	@ (80048c8 <HAL_RCC_OscConfig+0x4d4>)
 80046cc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80046d0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80046d2:	f7fe f917 	bl	8002904 <HAL_GetTick>
 80046d6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80046d8:	e008      	b.n	80046ec <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80046da:	f7fe f913 	bl	8002904 <HAL_GetTick>
 80046de:	4602      	mov	r2, r0
 80046e0:	693b      	ldr	r3, [r7, #16]
 80046e2:	1ad3      	subs	r3, r2, r3
 80046e4:	2b64      	cmp	r3, #100	@ 0x64
 80046e6:	d901      	bls.n	80046ec <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80046e8:	2303      	movs	r3, #3
 80046ea:	e12a      	b.n	8004942 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80046ec:	4b76      	ldr	r3, [pc, #472]	@ (80048c8 <HAL_RCC_OscConfig+0x4d4>)
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d0f0      	beq.n	80046da <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	689b      	ldr	r3, [r3, #8]
 80046fc:	2b01      	cmp	r3, #1
 80046fe:	d106      	bne.n	800470e <HAL_RCC_OscConfig+0x31a>
 8004700:	4b70      	ldr	r3, [pc, #448]	@ (80048c4 <HAL_RCC_OscConfig+0x4d0>)
 8004702:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004704:	4a6f      	ldr	r2, [pc, #444]	@ (80048c4 <HAL_RCC_OscConfig+0x4d0>)
 8004706:	f043 0301 	orr.w	r3, r3, #1
 800470a:	6713      	str	r3, [r2, #112]	@ 0x70
 800470c:	e02d      	b.n	800476a <HAL_RCC_OscConfig+0x376>
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	689b      	ldr	r3, [r3, #8]
 8004712:	2b00      	cmp	r3, #0
 8004714:	d10c      	bne.n	8004730 <HAL_RCC_OscConfig+0x33c>
 8004716:	4b6b      	ldr	r3, [pc, #428]	@ (80048c4 <HAL_RCC_OscConfig+0x4d0>)
 8004718:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800471a:	4a6a      	ldr	r2, [pc, #424]	@ (80048c4 <HAL_RCC_OscConfig+0x4d0>)
 800471c:	f023 0301 	bic.w	r3, r3, #1
 8004720:	6713      	str	r3, [r2, #112]	@ 0x70
 8004722:	4b68      	ldr	r3, [pc, #416]	@ (80048c4 <HAL_RCC_OscConfig+0x4d0>)
 8004724:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004726:	4a67      	ldr	r2, [pc, #412]	@ (80048c4 <HAL_RCC_OscConfig+0x4d0>)
 8004728:	f023 0304 	bic.w	r3, r3, #4
 800472c:	6713      	str	r3, [r2, #112]	@ 0x70
 800472e:	e01c      	b.n	800476a <HAL_RCC_OscConfig+0x376>
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	689b      	ldr	r3, [r3, #8]
 8004734:	2b05      	cmp	r3, #5
 8004736:	d10c      	bne.n	8004752 <HAL_RCC_OscConfig+0x35e>
 8004738:	4b62      	ldr	r3, [pc, #392]	@ (80048c4 <HAL_RCC_OscConfig+0x4d0>)
 800473a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800473c:	4a61      	ldr	r2, [pc, #388]	@ (80048c4 <HAL_RCC_OscConfig+0x4d0>)
 800473e:	f043 0304 	orr.w	r3, r3, #4
 8004742:	6713      	str	r3, [r2, #112]	@ 0x70
 8004744:	4b5f      	ldr	r3, [pc, #380]	@ (80048c4 <HAL_RCC_OscConfig+0x4d0>)
 8004746:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004748:	4a5e      	ldr	r2, [pc, #376]	@ (80048c4 <HAL_RCC_OscConfig+0x4d0>)
 800474a:	f043 0301 	orr.w	r3, r3, #1
 800474e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004750:	e00b      	b.n	800476a <HAL_RCC_OscConfig+0x376>
 8004752:	4b5c      	ldr	r3, [pc, #368]	@ (80048c4 <HAL_RCC_OscConfig+0x4d0>)
 8004754:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004756:	4a5b      	ldr	r2, [pc, #364]	@ (80048c4 <HAL_RCC_OscConfig+0x4d0>)
 8004758:	f023 0301 	bic.w	r3, r3, #1
 800475c:	6713      	str	r3, [r2, #112]	@ 0x70
 800475e:	4b59      	ldr	r3, [pc, #356]	@ (80048c4 <HAL_RCC_OscConfig+0x4d0>)
 8004760:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004762:	4a58      	ldr	r2, [pc, #352]	@ (80048c4 <HAL_RCC_OscConfig+0x4d0>)
 8004764:	f023 0304 	bic.w	r3, r3, #4
 8004768:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	689b      	ldr	r3, [r3, #8]
 800476e:	2b00      	cmp	r3, #0
 8004770:	d015      	beq.n	800479e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004772:	f7fe f8c7 	bl	8002904 <HAL_GetTick>
 8004776:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004778:	e00a      	b.n	8004790 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800477a:	f7fe f8c3 	bl	8002904 <HAL_GetTick>
 800477e:	4602      	mov	r2, r0
 8004780:	693b      	ldr	r3, [r7, #16]
 8004782:	1ad3      	subs	r3, r2, r3
 8004784:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004788:	4293      	cmp	r3, r2
 800478a:	d901      	bls.n	8004790 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800478c:	2303      	movs	r3, #3
 800478e:	e0d8      	b.n	8004942 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004790:	4b4c      	ldr	r3, [pc, #304]	@ (80048c4 <HAL_RCC_OscConfig+0x4d0>)
 8004792:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004794:	f003 0302 	and.w	r3, r3, #2
 8004798:	2b00      	cmp	r3, #0
 800479a:	d0ee      	beq.n	800477a <HAL_RCC_OscConfig+0x386>
 800479c:	e014      	b.n	80047c8 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800479e:	f7fe f8b1 	bl	8002904 <HAL_GetTick>
 80047a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80047a4:	e00a      	b.n	80047bc <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80047a6:	f7fe f8ad 	bl	8002904 <HAL_GetTick>
 80047aa:	4602      	mov	r2, r0
 80047ac:	693b      	ldr	r3, [r7, #16]
 80047ae:	1ad3      	subs	r3, r2, r3
 80047b0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80047b4:	4293      	cmp	r3, r2
 80047b6:	d901      	bls.n	80047bc <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80047b8:	2303      	movs	r3, #3
 80047ba:	e0c2      	b.n	8004942 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80047bc:	4b41      	ldr	r3, [pc, #260]	@ (80048c4 <HAL_RCC_OscConfig+0x4d0>)
 80047be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047c0:	f003 0302 	and.w	r3, r3, #2
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d1ee      	bne.n	80047a6 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80047c8:	7dfb      	ldrb	r3, [r7, #23]
 80047ca:	2b01      	cmp	r3, #1
 80047cc:	d105      	bne.n	80047da <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80047ce:	4b3d      	ldr	r3, [pc, #244]	@ (80048c4 <HAL_RCC_OscConfig+0x4d0>)
 80047d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047d2:	4a3c      	ldr	r2, [pc, #240]	@ (80048c4 <HAL_RCC_OscConfig+0x4d0>)
 80047d4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80047d8:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	699b      	ldr	r3, [r3, #24]
 80047de:	2b00      	cmp	r3, #0
 80047e0:	f000 80ae 	beq.w	8004940 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80047e4:	4b37      	ldr	r3, [pc, #220]	@ (80048c4 <HAL_RCC_OscConfig+0x4d0>)
 80047e6:	689b      	ldr	r3, [r3, #8]
 80047e8:	f003 030c 	and.w	r3, r3, #12
 80047ec:	2b08      	cmp	r3, #8
 80047ee:	d06d      	beq.n	80048cc <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	699b      	ldr	r3, [r3, #24]
 80047f4:	2b02      	cmp	r3, #2
 80047f6:	d14b      	bne.n	8004890 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80047f8:	4b32      	ldr	r3, [pc, #200]	@ (80048c4 <HAL_RCC_OscConfig+0x4d0>)
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	4a31      	ldr	r2, [pc, #196]	@ (80048c4 <HAL_RCC_OscConfig+0x4d0>)
 80047fe:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004802:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004804:	f7fe f87e 	bl	8002904 <HAL_GetTick>
 8004808:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800480a:	e008      	b.n	800481e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800480c:	f7fe f87a 	bl	8002904 <HAL_GetTick>
 8004810:	4602      	mov	r2, r0
 8004812:	693b      	ldr	r3, [r7, #16]
 8004814:	1ad3      	subs	r3, r2, r3
 8004816:	2b02      	cmp	r3, #2
 8004818:	d901      	bls.n	800481e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800481a:	2303      	movs	r3, #3
 800481c:	e091      	b.n	8004942 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800481e:	4b29      	ldr	r3, [pc, #164]	@ (80048c4 <HAL_RCC_OscConfig+0x4d0>)
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004826:	2b00      	cmp	r3, #0
 8004828:	d1f0      	bne.n	800480c <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	69da      	ldr	r2, [r3, #28]
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	6a1b      	ldr	r3, [r3, #32]
 8004832:	431a      	orrs	r2, r3
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004838:	019b      	lsls	r3, r3, #6
 800483a:	431a      	orrs	r2, r3
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004840:	085b      	lsrs	r3, r3, #1
 8004842:	3b01      	subs	r3, #1
 8004844:	041b      	lsls	r3, r3, #16
 8004846:	431a      	orrs	r2, r3
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800484c:	061b      	lsls	r3, r3, #24
 800484e:	431a      	orrs	r2, r3
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004854:	071b      	lsls	r3, r3, #28
 8004856:	491b      	ldr	r1, [pc, #108]	@ (80048c4 <HAL_RCC_OscConfig+0x4d0>)
 8004858:	4313      	orrs	r3, r2
 800485a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800485c:	4b19      	ldr	r3, [pc, #100]	@ (80048c4 <HAL_RCC_OscConfig+0x4d0>)
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	4a18      	ldr	r2, [pc, #96]	@ (80048c4 <HAL_RCC_OscConfig+0x4d0>)
 8004862:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004866:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004868:	f7fe f84c 	bl	8002904 <HAL_GetTick>
 800486c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800486e:	e008      	b.n	8004882 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004870:	f7fe f848 	bl	8002904 <HAL_GetTick>
 8004874:	4602      	mov	r2, r0
 8004876:	693b      	ldr	r3, [r7, #16]
 8004878:	1ad3      	subs	r3, r2, r3
 800487a:	2b02      	cmp	r3, #2
 800487c:	d901      	bls.n	8004882 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800487e:	2303      	movs	r3, #3
 8004880:	e05f      	b.n	8004942 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004882:	4b10      	ldr	r3, [pc, #64]	@ (80048c4 <HAL_RCC_OscConfig+0x4d0>)
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800488a:	2b00      	cmp	r3, #0
 800488c:	d0f0      	beq.n	8004870 <HAL_RCC_OscConfig+0x47c>
 800488e:	e057      	b.n	8004940 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004890:	4b0c      	ldr	r3, [pc, #48]	@ (80048c4 <HAL_RCC_OscConfig+0x4d0>)
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	4a0b      	ldr	r2, [pc, #44]	@ (80048c4 <HAL_RCC_OscConfig+0x4d0>)
 8004896:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800489a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800489c:	f7fe f832 	bl	8002904 <HAL_GetTick>
 80048a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80048a2:	e008      	b.n	80048b6 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80048a4:	f7fe f82e 	bl	8002904 <HAL_GetTick>
 80048a8:	4602      	mov	r2, r0
 80048aa:	693b      	ldr	r3, [r7, #16]
 80048ac:	1ad3      	subs	r3, r2, r3
 80048ae:	2b02      	cmp	r3, #2
 80048b0:	d901      	bls.n	80048b6 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80048b2:	2303      	movs	r3, #3
 80048b4:	e045      	b.n	8004942 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80048b6:	4b03      	ldr	r3, [pc, #12]	@ (80048c4 <HAL_RCC_OscConfig+0x4d0>)
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d1f0      	bne.n	80048a4 <HAL_RCC_OscConfig+0x4b0>
 80048c2:	e03d      	b.n	8004940 <HAL_RCC_OscConfig+0x54c>
 80048c4:	40023800 	.word	0x40023800
 80048c8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80048cc:	4b1f      	ldr	r3, [pc, #124]	@ (800494c <HAL_RCC_OscConfig+0x558>)
 80048ce:	685b      	ldr	r3, [r3, #4]
 80048d0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	699b      	ldr	r3, [r3, #24]
 80048d6:	2b01      	cmp	r3, #1
 80048d8:	d030      	beq.n	800493c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80048e4:	429a      	cmp	r2, r3
 80048e6:	d129      	bne.n	800493c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80048f2:	429a      	cmp	r2, r3
 80048f4:	d122      	bne.n	800493c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80048f6:	68fa      	ldr	r2, [r7, #12]
 80048f8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80048fc:	4013      	ands	r3, r2
 80048fe:	687a      	ldr	r2, [r7, #4]
 8004900:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004902:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004904:	4293      	cmp	r3, r2
 8004906:	d119      	bne.n	800493c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004912:	085b      	lsrs	r3, r3, #1
 8004914:	3b01      	subs	r3, #1
 8004916:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004918:	429a      	cmp	r2, r3
 800491a:	d10f      	bne.n	800493c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004926:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004928:	429a      	cmp	r2, r3
 800492a:	d107      	bne.n	800493c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004936:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004938:	429a      	cmp	r2, r3
 800493a:	d001      	beq.n	8004940 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 800493c:	2301      	movs	r3, #1
 800493e:	e000      	b.n	8004942 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8004940:	2300      	movs	r3, #0
}
 8004942:	4618      	mov	r0, r3
 8004944:	3718      	adds	r7, #24
 8004946:	46bd      	mov	sp, r7
 8004948:	bd80      	pop	{r7, pc}
 800494a:	bf00      	nop
 800494c:	40023800 	.word	0x40023800

08004950 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004950:	b580      	push	{r7, lr}
 8004952:	b084      	sub	sp, #16
 8004954:	af00      	add	r7, sp, #0
 8004956:	6078      	str	r0, [r7, #4]
 8004958:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800495a:	2300      	movs	r3, #0
 800495c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	2b00      	cmp	r3, #0
 8004962:	d101      	bne.n	8004968 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004964:	2301      	movs	r3, #1
 8004966:	e0d0      	b.n	8004b0a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004968:	4b6a      	ldr	r3, [pc, #424]	@ (8004b14 <HAL_RCC_ClockConfig+0x1c4>)
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f003 030f 	and.w	r3, r3, #15
 8004970:	683a      	ldr	r2, [r7, #0]
 8004972:	429a      	cmp	r2, r3
 8004974:	d910      	bls.n	8004998 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004976:	4b67      	ldr	r3, [pc, #412]	@ (8004b14 <HAL_RCC_ClockConfig+0x1c4>)
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f023 020f 	bic.w	r2, r3, #15
 800497e:	4965      	ldr	r1, [pc, #404]	@ (8004b14 <HAL_RCC_ClockConfig+0x1c4>)
 8004980:	683b      	ldr	r3, [r7, #0]
 8004982:	4313      	orrs	r3, r2
 8004984:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004986:	4b63      	ldr	r3, [pc, #396]	@ (8004b14 <HAL_RCC_ClockConfig+0x1c4>)
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f003 030f 	and.w	r3, r3, #15
 800498e:	683a      	ldr	r2, [r7, #0]
 8004990:	429a      	cmp	r2, r3
 8004992:	d001      	beq.n	8004998 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004994:	2301      	movs	r3, #1
 8004996:	e0b8      	b.n	8004b0a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f003 0302 	and.w	r3, r3, #2
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d020      	beq.n	80049e6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f003 0304 	and.w	r3, r3, #4
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d005      	beq.n	80049bc <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80049b0:	4b59      	ldr	r3, [pc, #356]	@ (8004b18 <HAL_RCC_ClockConfig+0x1c8>)
 80049b2:	689b      	ldr	r3, [r3, #8]
 80049b4:	4a58      	ldr	r2, [pc, #352]	@ (8004b18 <HAL_RCC_ClockConfig+0x1c8>)
 80049b6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80049ba:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f003 0308 	and.w	r3, r3, #8
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d005      	beq.n	80049d4 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80049c8:	4b53      	ldr	r3, [pc, #332]	@ (8004b18 <HAL_RCC_ClockConfig+0x1c8>)
 80049ca:	689b      	ldr	r3, [r3, #8]
 80049cc:	4a52      	ldr	r2, [pc, #328]	@ (8004b18 <HAL_RCC_ClockConfig+0x1c8>)
 80049ce:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80049d2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80049d4:	4b50      	ldr	r3, [pc, #320]	@ (8004b18 <HAL_RCC_ClockConfig+0x1c8>)
 80049d6:	689b      	ldr	r3, [r3, #8]
 80049d8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	689b      	ldr	r3, [r3, #8]
 80049e0:	494d      	ldr	r1, [pc, #308]	@ (8004b18 <HAL_RCC_ClockConfig+0x1c8>)
 80049e2:	4313      	orrs	r3, r2
 80049e4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f003 0301 	and.w	r3, r3, #1
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d040      	beq.n	8004a74 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	685b      	ldr	r3, [r3, #4]
 80049f6:	2b01      	cmp	r3, #1
 80049f8:	d107      	bne.n	8004a0a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80049fa:	4b47      	ldr	r3, [pc, #284]	@ (8004b18 <HAL_RCC_ClockConfig+0x1c8>)
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d115      	bne.n	8004a32 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004a06:	2301      	movs	r3, #1
 8004a08:	e07f      	b.n	8004b0a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	685b      	ldr	r3, [r3, #4]
 8004a0e:	2b02      	cmp	r3, #2
 8004a10:	d107      	bne.n	8004a22 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a12:	4b41      	ldr	r3, [pc, #260]	@ (8004b18 <HAL_RCC_ClockConfig+0x1c8>)
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d109      	bne.n	8004a32 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004a1e:	2301      	movs	r3, #1
 8004a20:	e073      	b.n	8004b0a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a22:	4b3d      	ldr	r3, [pc, #244]	@ (8004b18 <HAL_RCC_ClockConfig+0x1c8>)
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f003 0302 	and.w	r3, r3, #2
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d101      	bne.n	8004a32 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004a2e:	2301      	movs	r3, #1
 8004a30:	e06b      	b.n	8004b0a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004a32:	4b39      	ldr	r3, [pc, #228]	@ (8004b18 <HAL_RCC_ClockConfig+0x1c8>)
 8004a34:	689b      	ldr	r3, [r3, #8]
 8004a36:	f023 0203 	bic.w	r2, r3, #3
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	685b      	ldr	r3, [r3, #4]
 8004a3e:	4936      	ldr	r1, [pc, #216]	@ (8004b18 <HAL_RCC_ClockConfig+0x1c8>)
 8004a40:	4313      	orrs	r3, r2
 8004a42:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a44:	f7fd ff5e 	bl	8002904 <HAL_GetTick>
 8004a48:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a4a:	e00a      	b.n	8004a62 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a4c:	f7fd ff5a 	bl	8002904 <HAL_GetTick>
 8004a50:	4602      	mov	r2, r0
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	1ad3      	subs	r3, r2, r3
 8004a56:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004a5a:	4293      	cmp	r3, r2
 8004a5c:	d901      	bls.n	8004a62 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8004a5e:	2303      	movs	r3, #3
 8004a60:	e053      	b.n	8004b0a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a62:	4b2d      	ldr	r3, [pc, #180]	@ (8004b18 <HAL_RCC_ClockConfig+0x1c8>)
 8004a64:	689b      	ldr	r3, [r3, #8]
 8004a66:	f003 020c 	and.w	r2, r3, #12
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	685b      	ldr	r3, [r3, #4]
 8004a6e:	009b      	lsls	r3, r3, #2
 8004a70:	429a      	cmp	r2, r3
 8004a72:	d1eb      	bne.n	8004a4c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004a74:	4b27      	ldr	r3, [pc, #156]	@ (8004b14 <HAL_RCC_ClockConfig+0x1c4>)
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	f003 030f 	and.w	r3, r3, #15
 8004a7c:	683a      	ldr	r2, [r7, #0]
 8004a7e:	429a      	cmp	r2, r3
 8004a80:	d210      	bcs.n	8004aa4 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a82:	4b24      	ldr	r3, [pc, #144]	@ (8004b14 <HAL_RCC_ClockConfig+0x1c4>)
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f023 020f 	bic.w	r2, r3, #15
 8004a8a:	4922      	ldr	r1, [pc, #136]	@ (8004b14 <HAL_RCC_ClockConfig+0x1c4>)
 8004a8c:	683b      	ldr	r3, [r7, #0]
 8004a8e:	4313      	orrs	r3, r2
 8004a90:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a92:	4b20      	ldr	r3, [pc, #128]	@ (8004b14 <HAL_RCC_ClockConfig+0x1c4>)
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f003 030f 	and.w	r3, r3, #15
 8004a9a:	683a      	ldr	r2, [r7, #0]
 8004a9c:	429a      	cmp	r2, r3
 8004a9e:	d001      	beq.n	8004aa4 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8004aa0:	2301      	movs	r3, #1
 8004aa2:	e032      	b.n	8004b0a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f003 0304 	and.w	r3, r3, #4
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d008      	beq.n	8004ac2 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004ab0:	4b19      	ldr	r3, [pc, #100]	@ (8004b18 <HAL_RCC_ClockConfig+0x1c8>)
 8004ab2:	689b      	ldr	r3, [r3, #8]
 8004ab4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	68db      	ldr	r3, [r3, #12]
 8004abc:	4916      	ldr	r1, [pc, #88]	@ (8004b18 <HAL_RCC_ClockConfig+0x1c8>)
 8004abe:	4313      	orrs	r3, r2
 8004ac0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f003 0308 	and.w	r3, r3, #8
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d009      	beq.n	8004ae2 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004ace:	4b12      	ldr	r3, [pc, #72]	@ (8004b18 <HAL_RCC_ClockConfig+0x1c8>)
 8004ad0:	689b      	ldr	r3, [r3, #8]
 8004ad2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	691b      	ldr	r3, [r3, #16]
 8004ada:	00db      	lsls	r3, r3, #3
 8004adc:	490e      	ldr	r1, [pc, #56]	@ (8004b18 <HAL_RCC_ClockConfig+0x1c8>)
 8004ade:	4313      	orrs	r3, r2
 8004ae0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004ae2:	f000 f821 	bl	8004b28 <HAL_RCC_GetSysClockFreq>
 8004ae6:	4602      	mov	r2, r0
 8004ae8:	4b0b      	ldr	r3, [pc, #44]	@ (8004b18 <HAL_RCC_ClockConfig+0x1c8>)
 8004aea:	689b      	ldr	r3, [r3, #8]
 8004aec:	091b      	lsrs	r3, r3, #4
 8004aee:	f003 030f 	and.w	r3, r3, #15
 8004af2:	490a      	ldr	r1, [pc, #40]	@ (8004b1c <HAL_RCC_ClockConfig+0x1cc>)
 8004af4:	5ccb      	ldrb	r3, [r1, r3]
 8004af6:	fa22 f303 	lsr.w	r3, r2, r3
 8004afa:	4a09      	ldr	r2, [pc, #36]	@ (8004b20 <HAL_RCC_ClockConfig+0x1d0>)
 8004afc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004afe:	4b09      	ldr	r3, [pc, #36]	@ (8004b24 <HAL_RCC_ClockConfig+0x1d4>)
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	4618      	mov	r0, r3
 8004b04:	f7fd fbe6 	bl	80022d4 <HAL_InitTick>

  return HAL_OK;
 8004b08:	2300      	movs	r3, #0
}
 8004b0a:	4618      	mov	r0, r3
 8004b0c:	3710      	adds	r7, #16
 8004b0e:	46bd      	mov	sp, r7
 8004b10:	bd80      	pop	{r7, pc}
 8004b12:	bf00      	nop
 8004b14:	40023c00 	.word	0x40023c00
 8004b18:	40023800 	.word	0x40023800
 8004b1c:	080094a0 	.word	0x080094a0
 8004b20:	2000001c 	.word	0x2000001c
 8004b24:	20000020 	.word	0x20000020

08004b28 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004b28:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004b2c:	b090      	sub	sp, #64	@ 0x40
 8004b2e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8004b30:	2300      	movs	r3, #0
 8004b32:	637b      	str	r3, [r7, #52]	@ 0x34
 8004b34:	2300      	movs	r3, #0
 8004b36:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004b38:	2300      	movs	r3, #0
 8004b3a:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 8004b3c:	2300      	movs	r3, #0
 8004b3e:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004b40:	4b59      	ldr	r3, [pc, #356]	@ (8004ca8 <HAL_RCC_GetSysClockFreq+0x180>)
 8004b42:	689b      	ldr	r3, [r3, #8]
 8004b44:	f003 030c 	and.w	r3, r3, #12
 8004b48:	2b08      	cmp	r3, #8
 8004b4a:	d00d      	beq.n	8004b68 <HAL_RCC_GetSysClockFreq+0x40>
 8004b4c:	2b08      	cmp	r3, #8
 8004b4e:	f200 80a1 	bhi.w	8004c94 <HAL_RCC_GetSysClockFreq+0x16c>
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d002      	beq.n	8004b5c <HAL_RCC_GetSysClockFreq+0x34>
 8004b56:	2b04      	cmp	r3, #4
 8004b58:	d003      	beq.n	8004b62 <HAL_RCC_GetSysClockFreq+0x3a>
 8004b5a:	e09b      	b.n	8004c94 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004b5c:	4b53      	ldr	r3, [pc, #332]	@ (8004cac <HAL_RCC_GetSysClockFreq+0x184>)
 8004b5e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004b60:	e09b      	b.n	8004c9a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004b62:	4b53      	ldr	r3, [pc, #332]	@ (8004cb0 <HAL_RCC_GetSysClockFreq+0x188>)
 8004b64:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004b66:	e098      	b.n	8004c9a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004b68:	4b4f      	ldr	r3, [pc, #316]	@ (8004ca8 <HAL_RCC_GetSysClockFreq+0x180>)
 8004b6a:	685b      	ldr	r3, [r3, #4]
 8004b6c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004b70:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8004b72:	4b4d      	ldr	r3, [pc, #308]	@ (8004ca8 <HAL_RCC_GetSysClockFreq+0x180>)
 8004b74:	685b      	ldr	r3, [r3, #4]
 8004b76:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d028      	beq.n	8004bd0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004b7e:	4b4a      	ldr	r3, [pc, #296]	@ (8004ca8 <HAL_RCC_GetSysClockFreq+0x180>)
 8004b80:	685b      	ldr	r3, [r3, #4]
 8004b82:	099b      	lsrs	r3, r3, #6
 8004b84:	2200      	movs	r2, #0
 8004b86:	623b      	str	r3, [r7, #32]
 8004b88:	627a      	str	r2, [r7, #36]	@ 0x24
 8004b8a:	6a3b      	ldr	r3, [r7, #32]
 8004b8c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004b90:	2100      	movs	r1, #0
 8004b92:	4b47      	ldr	r3, [pc, #284]	@ (8004cb0 <HAL_RCC_GetSysClockFreq+0x188>)
 8004b94:	fb03 f201 	mul.w	r2, r3, r1
 8004b98:	2300      	movs	r3, #0
 8004b9a:	fb00 f303 	mul.w	r3, r0, r3
 8004b9e:	4413      	add	r3, r2
 8004ba0:	4a43      	ldr	r2, [pc, #268]	@ (8004cb0 <HAL_RCC_GetSysClockFreq+0x188>)
 8004ba2:	fba0 1202 	umull	r1, r2, r0, r2
 8004ba6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004ba8:	460a      	mov	r2, r1
 8004baa:	62ba      	str	r2, [r7, #40]	@ 0x28
 8004bac:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004bae:	4413      	add	r3, r2
 8004bb0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004bb2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004bb4:	2200      	movs	r2, #0
 8004bb6:	61bb      	str	r3, [r7, #24]
 8004bb8:	61fa      	str	r2, [r7, #28]
 8004bba:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004bbe:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8004bc2:	f7fb fb3d 	bl	8000240 <__aeabi_uldivmod>
 8004bc6:	4602      	mov	r2, r0
 8004bc8:	460b      	mov	r3, r1
 8004bca:	4613      	mov	r3, r2
 8004bcc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004bce:	e053      	b.n	8004c78 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004bd0:	4b35      	ldr	r3, [pc, #212]	@ (8004ca8 <HAL_RCC_GetSysClockFreq+0x180>)
 8004bd2:	685b      	ldr	r3, [r3, #4]
 8004bd4:	099b      	lsrs	r3, r3, #6
 8004bd6:	2200      	movs	r2, #0
 8004bd8:	613b      	str	r3, [r7, #16]
 8004bda:	617a      	str	r2, [r7, #20]
 8004bdc:	693b      	ldr	r3, [r7, #16]
 8004bde:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004be2:	f04f 0b00 	mov.w	fp, #0
 8004be6:	4652      	mov	r2, sl
 8004be8:	465b      	mov	r3, fp
 8004bea:	f04f 0000 	mov.w	r0, #0
 8004bee:	f04f 0100 	mov.w	r1, #0
 8004bf2:	0159      	lsls	r1, r3, #5
 8004bf4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004bf8:	0150      	lsls	r0, r2, #5
 8004bfa:	4602      	mov	r2, r0
 8004bfc:	460b      	mov	r3, r1
 8004bfe:	ebb2 080a 	subs.w	r8, r2, sl
 8004c02:	eb63 090b 	sbc.w	r9, r3, fp
 8004c06:	f04f 0200 	mov.w	r2, #0
 8004c0a:	f04f 0300 	mov.w	r3, #0
 8004c0e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004c12:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004c16:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004c1a:	ebb2 0408 	subs.w	r4, r2, r8
 8004c1e:	eb63 0509 	sbc.w	r5, r3, r9
 8004c22:	f04f 0200 	mov.w	r2, #0
 8004c26:	f04f 0300 	mov.w	r3, #0
 8004c2a:	00eb      	lsls	r3, r5, #3
 8004c2c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004c30:	00e2      	lsls	r2, r4, #3
 8004c32:	4614      	mov	r4, r2
 8004c34:	461d      	mov	r5, r3
 8004c36:	eb14 030a 	adds.w	r3, r4, sl
 8004c3a:	603b      	str	r3, [r7, #0]
 8004c3c:	eb45 030b 	adc.w	r3, r5, fp
 8004c40:	607b      	str	r3, [r7, #4]
 8004c42:	f04f 0200 	mov.w	r2, #0
 8004c46:	f04f 0300 	mov.w	r3, #0
 8004c4a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004c4e:	4629      	mov	r1, r5
 8004c50:	028b      	lsls	r3, r1, #10
 8004c52:	4621      	mov	r1, r4
 8004c54:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004c58:	4621      	mov	r1, r4
 8004c5a:	028a      	lsls	r2, r1, #10
 8004c5c:	4610      	mov	r0, r2
 8004c5e:	4619      	mov	r1, r3
 8004c60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004c62:	2200      	movs	r2, #0
 8004c64:	60bb      	str	r3, [r7, #8]
 8004c66:	60fa      	str	r2, [r7, #12]
 8004c68:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004c6c:	f7fb fae8 	bl	8000240 <__aeabi_uldivmod>
 8004c70:	4602      	mov	r2, r0
 8004c72:	460b      	mov	r3, r1
 8004c74:	4613      	mov	r3, r2
 8004c76:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8004c78:	4b0b      	ldr	r3, [pc, #44]	@ (8004ca8 <HAL_RCC_GetSysClockFreq+0x180>)
 8004c7a:	685b      	ldr	r3, [r3, #4]
 8004c7c:	0c1b      	lsrs	r3, r3, #16
 8004c7e:	f003 0303 	and.w	r3, r3, #3
 8004c82:	3301      	adds	r3, #1
 8004c84:	005b      	lsls	r3, r3, #1
 8004c86:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8004c88:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004c8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c90:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004c92:	e002      	b.n	8004c9a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004c94:	4b05      	ldr	r3, [pc, #20]	@ (8004cac <HAL_RCC_GetSysClockFreq+0x184>)
 8004c96:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004c98:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004c9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8004c9c:	4618      	mov	r0, r3
 8004c9e:	3740      	adds	r7, #64	@ 0x40
 8004ca0:	46bd      	mov	sp, r7
 8004ca2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004ca6:	bf00      	nop
 8004ca8:	40023800 	.word	0x40023800
 8004cac:	00f42400 	.word	0x00f42400
 8004cb0:	017d7840 	.word	0x017d7840

08004cb4 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004cb4:	b480      	push	{r7}
 8004cb6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004cb8:	4b03      	ldr	r3, [pc, #12]	@ (8004cc8 <HAL_RCC_GetHCLKFreq+0x14>)
 8004cba:	681b      	ldr	r3, [r3, #0]
}
 8004cbc:	4618      	mov	r0, r3
 8004cbe:	46bd      	mov	sp, r7
 8004cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc4:	4770      	bx	lr
 8004cc6:	bf00      	nop
 8004cc8:	2000001c 	.word	0x2000001c

08004ccc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004ccc:	b580      	push	{r7, lr}
 8004cce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004cd0:	f7ff fff0 	bl	8004cb4 <HAL_RCC_GetHCLKFreq>
 8004cd4:	4602      	mov	r2, r0
 8004cd6:	4b05      	ldr	r3, [pc, #20]	@ (8004cec <HAL_RCC_GetPCLK1Freq+0x20>)
 8004cd8:	689b      	ldr	r3, [r3, #8]
 8004cda:	0a9b      	lsrs	r3, r3, #10
 8004cdc:	f003 0307 	and.w	r3, r3, #7
 8004ce0:	4903      	ldr	r1, [pc, #12]	@ (8004cf0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004ce2:	5ccb      	ldrb	r3, [r1, r3]
 8004ce4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ce8:	4618      	mov	r0, r3
 8004cea:	bd80      	pop	{r7, pc}
 8004cec:	40023800 	.word	0x40023800
 8004cf0:	080094b0 	.word	0x080094b0

08004cf4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004cf4:	b480      	push	{r7}
 8004cf6:	b083      	sub	sp, #12
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	6078      	str	r0, [r7, #4]
 8004cfc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	220f      	movs	r2, #15
 8004d02:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004d04:	4b12      	ldr	r3, [pc, #72]	@ (8004d50 <HAL_RCC_GetClockConfig+0x5c>)
 8004d06:	689b      	ldr	r3, [r3, #8]
 8004d08:	f003 0203 	and.w	r2, r3, #3
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004d10:	4b0f      	ldr	r3, [pc, #60]	@ (8004d50 <HAL_RCC_GetClockConfig+0x5c>)
 8004d12:	689b      	ldr	r3, [r3, #8]
 8004d14:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004d1c:	4b0c      	ldr	r3, [pc, #48]	@ (8004d50 <HAL_RCC_GetClockConfig+0x5c>)
 8004d1e:	689b      	ldr	r3, [r3, #8]
 8004d20:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8004d28:	4b09      	ldr	r3, [pc, #36]	@ (8004d50 <HAL_RCC_GetClockConfig+0x5c>)
 8004d2a:	689b      	ldr	r3, [r3, #8]
 8004d2c:	08db      	lsrs	r3, r3, #3
 8004d2e:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004d36:	4b07      	ldr	r3, [pc, #28]	@ (8004d54 <HAL_RCC_GetClockConfig+0x60>)
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f003 020f 	and.w	r2, r3, #15
 8004d3e:	683b      	ldr	r3, [r7, #0]
 8004d40:	601a      	str	r2, [r3, #0]
}
 8004d42:	bf00      	nop
 8004d44:	370c      	adds	r7, #12
 8004d46:	46bd      	mov	sp, r7
 8004d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d4c:	4770      	bx	lr
 8004d4e:	bf00      	nop
 8004d50:	40023800 	.word	0x40023800
 8004d54:	40023c00 	.word	0x40023c00

08004d58 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004d58:	b580      	push	{r7, lr}
 8004d5a:	b082      	sub	sp, #8
 8004d5c:	af00      	add	r7, sp, #0
 8004d5e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d101      	bne.n	8004d6a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004d66:	2301      	movs	r3, #1
 8004d68:	e049      	b.n	8004dfe <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004d70:	b2db      	uxtb	r3, r3
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d106      	bne.n	8004d84 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	2200      	movs	r2, #0
 8004d7a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004d7e:	6878      	ldr	r0, [r7, #4]
 8004d80:	f7fd fa36 	bl	80021f0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	2202      	movs	r2, #2
 8004d88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681a      	ldr	r2, [r3, #0]
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	3304      	adds	r3, #4
 8004d94:	4619      	mov	r1, r3
 8004d96:	4610      	mov	r0, r2
 8004d98:	f001 f818 	bl	8005dcc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	2201      	movs	r2, #1
 8004da0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	2201      	movs	r2, #1
 8004da8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	2201      	movs	r2, #1
 8004db0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	2201      	movs	r2, #1
 8004db8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	2201      	movs	r2, #1
 8004dc0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	2201      	movs	r2, #1
 8004dc8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	2201      	movs	r2, #1
 8004dd0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	2201      	movs	r2, #1
 8004dd8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	2201      	movs	r2, #1
 8004de0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	2201      	movs	r2, #1
 8004de8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	2201      	movs	r2, #1
 8004df0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	2201      	movs	r2, #1
 8004df8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004dfc:	2300      	movs	r3, #0
}
 8004dfe:	4618      	mov	r0, r3
 8004e00:	3708      	adds	r7, #8
 8004e02:	46bd      	mov	sp, r7
 8004e04:	bd80      	pop	{r7, pc}
	...

08004e08 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004e08:	b480      	push	{r7}
 8004e0a:	b085      	sub	sp, #20
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004e16:	b2db      	uxtb	r3, r3
 8004e18:	2b01      	cmp	r3, #1
 8004e1a:	d001      	beq.n	8004e20 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004e1c:	2301      	movs	r3, #1
 8004e1e:	e054      	b.n	8004eca <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	2202      	movs	r2, #2
 8004e24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	68da      	ldr	r2, [r3, #12]
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f042 0201 	orr.w	r2, r2, #1
 8004e36:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	4a26      	ldr	r2, [pc, #152]	@ (8004ed8 <HAL_TIM_Base_Start_IT+0xd0>)
 8004e3e:	4293      	cmp	r3, r2
 8004e40:	d022      	beq.n	8004e88 <HAL_TIM_Base_Start_IT+0x80>
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004e4a:	d01d      	beq.n	8004e88 <HAL_TIM_Base_Start_IT+0x80>
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	4a22      	ldr	r2, [pc, #136]	@ (8004edc <HAL_TIM_Base_Start_IT+0xd4>)
 8004e52:	4293      	cmp	r3, r2
 8004e54:	d018      	beq.n	8004e88 <HAL_TIM_Base_Start_IT+0x80>
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	4a21      	ldr	r2, [pc, #132]	@ (8004ee0 <HAL_TIM_Base_Start_IT+0xd8>)
 8004e5c:	4293      	cmp	r3, r2
 8004e5e:	d013      	beq.n	8004e88 <HAL_TIM_Base_Start_IT+0x80>
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	4a1f      	ldr	r2, [pc, #124]	@ (8004ee4 <HAL_TIM_Base_Start_IT+0xdc>)
 8004e66:	4293      	cmp	r3, r2
 8004e68:	d00e      	beq.n	8004e88 <HAL_TIM_Base_Start_IT+0x80>
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	4a1e      	ldr	r2, [pc, #120]	@ (8004ee8 <HAL_TIM_Base_Start_IT+0xe0>)
 8004e70:	4293      	cmp	r3, r2
 8004e72:	d009      	beq.n	8004e88 <HAL_TIM_Base_Start_IT+0x80>
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	4a1c      	ldr	r2, [pc, #112]	@ (8004eec <HAL_TIM_Base_Start_IT+0xe4>)
 8004e7a:	4293      	cmp	r3, r2
 8004e7c:	d004      	beq.n	8004e88 <HAL_TIM_Base_Start_IT+0x80>
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	4a1b      	ldr	r2, [pc, #108]	@ (8004ef0 <HAL_TIM_Base_Start_IT+0xe8>)
 8004e84:	4293      	cmp	r3, r2
 8004e86:	d115      	bne.n	8004eb4 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	689a      	ldr	r2, [r3, #8]
 8004e8e:	4b19      	ldr	r3, [pc, #100]	@ (8004ef4 <HAL_TIM_Base_Start_IT+0xec>)
 8004e90:	4013      	ands	r3, r2
 8004e92:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	2b06      	cmp	r3, #6
 8004e98:	d015      	beq.n	8004ec6 <HAL_TIM_Base_Start_IT+0xbe>
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004ea0:	d011      	beq.n	8004ec6 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	681a      	ldr	r2, [r3, #0]
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	f042 0201 	orr.w	r2, r2, #1
 8004eb0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004eb2:	e008      	b.n	8004ec6 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	681a      	ldr	r2, [r3, #0]
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	f042 0201 	orr.w	r2, r2, #1
 8004ec2:	601a      	str	r2, [r3, #0]
 8004ec4:	e000      	b.n	8004ec8 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ec6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004ec8:	2300      	movs	r3, #0
}
 8004eca:	4618      	mov	r0, r3
 8004ecc:	3714      	adds	r7, #20
 8004ece:	46bd      	mov	sp, r7
 8004ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed4:	4770      	bx	lr
 8004ed6:	bf00      	nop
 8004ed8:	40010000 	.word	0x40010000
 8004edc:	40000400 	.word	0x40000400
 8004ee0:	40000800 	.word	0x40000800
 8004ee4:	40000c00 	.word	0x40000c00
 8004ee8:	40010400 	.word	0x40010400
 8004eec:	40014000 	.word	0x40014000
 8004ef0:	40001800 	.word	0x40001800
 8004ef4:	00010007 	.word	0x00010007

08004ef8 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8004ef8:	b580      	push	{r7, lr}
 8004efa:	b082      	sub	sp, #8
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d101      	bne.n	8004f0a <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8004f06:	2301      	movs	r3, #1
 8004f08:	e049      	b.n	8004f9e <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004f10:	b2db      	uxtb	r3, r3
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d106      	bne.n	8004f24 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	2200      	movs	r2, #0
 8004f1a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8004f1e:	6878      	ldr	r0, [r7, #4]
 8004f20:	f000 f841 	bl	8004fa6 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	2202      	movs	r2, #2
 8004f28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681a      	ldr	r2, [r3, #0]
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	3304      	adds	r3, #4
 8004f34:	4619      	mov	r1, r3
 8004f36:	4610      	mov	r0, r2
 8004f38:	f000 ff48 	bl	8005dcc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	2201      	movs	r2, #1
 8004f40:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	2201      	movs	r2, #1
 8004f48:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	2201      	movs	r2, #1
 8004f50:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	2201      	movs	r2, #1
 8004f58:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	2201      	movs	r2, #1
 8004f60:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	2201      	movs	r2, #1
 8004f68:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	2201      	movs	r2, #1
 8004f70:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	2201      	movs	r2, #1
 8004f78:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	2201      	movs	r2, #1
 8004f80:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	2201      	movs	r2, #1
 8004f88:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	2201      	movs	r2, #1
 8004f90:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2201      	movs	r2, #1
 8004f98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004f9c:	2300      	movs	r3, #0
}
 8004f9e:	4618      	mov	r0, r3
 8004fa0:	3708      	adds	r7, #8
 8004fa2:	46bd      	mov	sp, r7
 8004fa4:	bd80      	pop	{r7, pc}

08004fa6 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8004fa6:	b480      	push	{r7}
 8004fa8:	b083      	sub	sp, #12
 8004faa:	af00      	add	r7, sp, #0
 8004fac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8004fae:	bf00      	nop
 8004fb0:	370c      	adds	r7, #12
 8004fb2:	46bd      	mov	sp, r7
 8004fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb8:	4770      	bx	lr
	...

08004fbc <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004fbc:	b580      	push	{r7, lr}
 8004fbe:	b084      	sub	sp, #16
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	6078      	str	r0, [r7, #4]
 8004fc4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004fc6:	2300      	movs	r3, #0
 8004fc8:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004fca:	683b      	ldr	r3, [r7, #0]
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d109      	bne.n	8004fe4 <HAL_TIM_OC_Start_IT+0x28>
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004fd6:	b2db      	uxtb	r3, r3
 8004fd8:	2b01      	cmp	r3, #1
 8004fda:	bf14      	ite	ne
 8004fdc:	2301      	movne	r3, #1
 8004fde:	2300      	moveq	r3, #0
 8004fe0:	b2db      	uxtb	r3, r3
 8004fe2:	e03c      	b.n	800505e <HAL_TIM_OC_Start_IT+0xa2>
 8004fe4:	683b      	ldr	r3, [r7, #0]
 8004fe6:	2b04      	cmp	r3, #4
 8004fe8:	d109      	bne.n	8004ffe <HAL_TIM_OC_Start_IT+0x42>
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004ff0:	b2db      	uxtb	r3, r3
 8004ff2:	2b01      	cmp	r3, #1
 8004ff4:	bf14      	ite	ne
 8004ff6:	2301      	movne	r3, #1
 8004ff8:	2300      	moveq	r3, #0
 8004ffa:	b2db      	uxtb	r3, r3
 8004ffc:	e02f      	b.n	800505e <HAL_TIM_OC_Start_IT+0xa2>
 8004ffe:	683b      	ldr	r3, [r7, #0]
 8005000:	2b08      	cmp	r3, #8
 8005002:	d109      	bne.n	8005018 <HAL_TIM_OC_Start_IT+0x5c>
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800500a:	b2db      	uxtb	r3, r3
 800500c:	2b01      	cmp	r3, #1
 800500e:	bf14      	ite	ne
 8005010:	2301      	movne	r3, #1
 8005012:	2300      	moveq	r3, #0
 8005014:	b2db      	uxtb	r3, r3
 8005016:	e022      	b.n	800505e <HAL_TIM_OC_Start_IT+0xa2>
 8005018:	683b      	ldr	r3, [r7, #0]
 800501a:	2b0c      	cmp	r3, #12
 800501c:	d109      	bne.n	8005032 <HAL_TIM_OC_Start_IT+0x76>
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005024:	b2db      	uxtb	r3, r3
 8005026:	2b01      	cmp	r3, #1
 8005028:	bf14      	ite	ne
 800502a:	2301      	movne	r3, #1
 800502c:	2300      	moveq	r3, #0
 800502e:	b2db      	uxtb	r3, r3
 8005030:	e015      	b.n	800505e <HAL_TIM_OC_Start_IT+0xa2>
 8005032:	683b      	ldr	r3, [r7, #0]
 8005034:	2b10      	cmp	r3, #16
 8005036:	d109      	bne.n	800504c <HAL_TIM_OC_Start_IT+0x90>
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800503e:	b2db      	uxtb	r3, r3
 8005040:	2b01      	cmp	r3, #1
 8005042:	bf14      	ite	ne
 8005044:	2301      	movne	r3, #1
 8005046:	2300      	moveq	r3, #0
 8005048:	b2db      	uxtb	r3, r3
 800504a:	e008      	b.n	800505e <HAL_TIM_OC_Start_IT+0xa2>
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8005052:	b2db      	uxtb	r3, r3
 8005054:	2b01      	cmp	r3, #1
 8005056:	bf14      	ite	ne
 8005058:	2301      	movne	r3, #1
 800505a:	2300      	moveq	r3, #0
 800505c:	b2db      	uxtb	r3, r3
 800505e:	2b00      	cmp	r3, #0
 8005060:	d001      	beq.n	8005066 <HAL_TIM_OC_Start_IT+0xaa>
  {
    return HAL_ERROR;
 8005062:	2301      	movs	r3, #1
 8005064:	e0dd      	b.n	8005222 <HAL_TIM_OC_Start_IT+0x266>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005066:	683b      	ldr	r3, [r7, #0]
 8005068:	2b00      	cmp	r3, #0
 800506a:	d104      	bne.n	8005076 <HAL_TIM_OC_Start_IT+0xba>
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	2202      	movs	r2, #2
 8005070:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005074:	e023      	b.n	80050be <HAL_TIM_OC_Start_IT+0x102>
 8005076:	683b      	ldr	r3, [r7, #0]
 8005078:	2b04      	cmp	r3, #4
 800507a:	d104      	bne.n	8005086 <HAL_TIM_OC_Start_IT+0xca>
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	2202      	movs	r2, #2
 8005080:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005084:	e01b      	b.n	80050be <HAL_TIM_OC_Start_IT+0x102>
 8005086:	683b      	ldr	r3, [r7, #0]
 8005088:	2b08      	cmp	r3, #8
 800508a:	d104      	bne.n	8005096 <HAL_TIM_OC_Start_IT+0xda>
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	2202      	movs	r2, #2
 8005090:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005094:	e013      	b.n	80050be <HAL_TIM_OC_Start_IT+0x102>
 8005096:	683b      	ldr	r3, [r7, #0]
 8005098:	2b0c      	cmp	r3, #12
 800509a:	d104      	bne.n	80050a6 <HAL_TIM_OC_Start_IT+0xea>
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	2202      	movs	r2, #2
 80050a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80050a4:	e00b      	b.n	80050be <HAL_TIM_OC_Start_IT+0x102>
 80050a6:	683b      	ldr	r3, [r7, #0]
 80050a8:	2b10      	cmp	r3, #16
 80050aa:	d104      	bne.n	80050b6 <HAL_TIM_OC_Start_IT+0xfa>
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	2202      	movs	r2, #2
 80050b0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80050b4:	e003      	b.n	80050be <HAL_TIM_OC_Start_IT+0x102>
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	2202      	movs	r2, #2
 80050ba:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  switch (Channel)
 80050be:	683b      	ldr	r3, [r7, #0]
 80050c0:	2b0c      	cmp	r3, #12
 80050c2:	d841      	bhi.n	8005148 <HAL_TIM_OC_Start_IT+0x18c>
 80050c4:	a201      	add	r2, pc, #4	@ (adr r2, 80050cc <HAL_TIM_OC_Start_IT+0x110>)
 80050c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050ca:	bf00      	nop
 80050cc:	08005101 	.word	0x08005101
 80050d0:	08005149 	.word	0x08005149
 80050d4:	08005149 	.word	0x08005149
 80050d8:	08005149 	.word	0x08005149
 80050dc:	08005113 	.word	0x08005113
 80050e0:	08005149 	.word	0x08005149
 80050e4:	08005149 	.word	0x08005149
 80050e8:	08005149 	.word	0x08005149
 80050ec:	08005125 	.word	0x08005125
 80050f0:	08005149 	.word	0x08005149
 80050f4:	08005149 	.word	0x08005149
 80050f8:	08005149 	.word	0x08005149
 80050fc:	08005137 	.word	0x08005137
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	68da      	ldr	r2, [r3, #12]
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f042 0202 	orr.w	r2, r2, #2
 800510e:	60da      	str	r2, [r3, #12]
      break;
 8005110:	e01d      	b.n	800514e <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	68da      	ldr	r2, [r3, #12]
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	f042 0204 	orr.w	r2, r2, #4
 8005120:	60da      	str	r2, [r3, #12]
      break;
 8005122:	e014      	b.n	800514e <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	68da      	ldr	r2, [r3, #12]
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	f042 0208 	orr.w	r2, r2, #8
 8005132:	60da      	str	r2, [r3, #12]
      break;
 8005134:	e00b      	b.n	800514e <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	68da      	ldr	r2, [r3, #12]
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	f042 0210 	orr.w	r2, r2, #16
 8005144:	60da      	str	r2, [r3, #12]
      break;
 8005146:	e002      	b.n	800514e <HAL_TIM_OC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8005148:	2301      	movs	r3, #1
 800514a:	73fb      	strb	r3, [r7, #15]
      break;
 800514c:	bf00      	nop
  }

  if (status == HAL_OK)
 800514e:	7bfb      	ldrb	r3, [r7, #15]
 8005150:	2b00      	cmp	r3, #0
 8005152:	d165      	bne.n	8005220 <HAL_TIM_OC_Start_IT+0x264>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	2201      	movs	r2, #1
 800515a:	6839      	ldr	r1, [r7, #0]
 800515c:	4618      	mov	r0, r3
 800515e:	f001 f9cd 	bl	80064fc <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	4a31      	ldr	r2, [pc, #196]	@ (800522c <HAL_TIM_OC_Start_IT+0x270>)
 8005168:	4293      	cmp	r3, r2
 800516a:	d004      	beq.n	8005176 <HAL_TIM_OC_Start_IT+0x1ba>
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	4a2f      	ldr	r2, [pc, #188]	@ (8005230 <HAL_TIM_OC_Start_IT+0x274>)
 8005172:	4293      	cmp	r3, r2
 8005174:	d101      	bne.n	800517a <HAL_TIM_OC_Start_IT+0x1be>
 8005176:	2301      	movs	r3, #1
 8005178:	e000      	b.n	800517c <HAL_TIM_OC_Start_IT+0x1c0>
 800517a:	2300      	movs	r3, #0
 800517c:	2b00      	cmp	r3, #0
 800517e:	d007      	beq.n	8005190 <HAL_TIM_OC_Start_IT+0x1d4>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800518e:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	4a25      	ldr	r2, [pc, #148]	@ (800522c <HAL_TIM_OC_Start_IT+0x270>)
 8005196:	4293      	cmp	r3, r2
 8005198:	d022      	beq.n	80051e0 <HAL_TIM_OC_Start_IT+0x224>
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80051a2:	d01d      	beq.n	80051e0 <HAL_TIM_OC_Start_IT+0x224>
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	4a22      	ldr	r2, [pc, #136]	@ (8005234 <HAL_TIM_OC_Start_IT+0x278>)
 80051aa:	4293      	cmp	r3, r2
 80051ac:	d018      	beq.n	80051e0 <HAL_TIM_OC_Start_IT+0x224>
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	4a21      	ldr	r2, [pc, #132]	@ (8005238 <HAL_TIM_OC_Start_IT+0x27c>)
 80051b4:	4293      	cmp	r3, r2
 80051b6:	d013      	beq.n	80051e0 <HAL_TIM_OC_Start_IT+0x224>
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	4a1f      	ldr	r2, [pc, #124]	@ (800523c <HAL_TIM_OC_Start_IT+0x280>)
 80051be:	4293      	cmp	r3, r2
 80051c0:	d00e      	beq.n	80051e0 <HAL_TIM_OC_Start_IT+0x224>
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	4a1a      	ldr	r2, [pc, #104]	@ (8005230 <HAL_TIM_OC_Start_IT+0x274>)
 80051c8:	4293      	cmp	r3, r2
 80051ca:	d009      	beq.n	80051e0 <HAL_TIM_OC_Start_IT+0x224>
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	4a1b      	ldr	r2, [pc, #108]	@ (8005240 <HAL_TIM_OC_Start_IT+0x284>)
 80051d2:	4293      	cmp	r3, r2
 80051d4:	d004      	beq.n	80051e0 <HAL_TIM_OC_Start_IT+0x224>
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	4a1a      	ldr	r2, [pc, #104]	@ (8005244 <HAL_TIM_OC_Start_IT+0x288>)
 80051dc:	4293      	cmp	r3, r2
 80051de:	d115      	bne.n	800520c <HAL_TIM_OC_Start_IT+0x250>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	689a      	ldr	r2, [r3, #8]
 80051e6:	4b18      	ldr	r3, [pc, #96]	@ (8005248 <HAL_TIM_OC_Start_IT+0x28c>)
 80051e8:	4013      	ands	r3, r2
 80051ea:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051ec:	68bb      	ldr	r3, [r7, #8]
 80051ee:	2b06      	cmp	r3, #6
 80051f0:	d015      	beq.n	800521e <HAL_TIM_OC_Start_IT+0x262>
 80051f2:	68bb      	ldr	r3, [r7, #8]
 80051f4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80051f8:	d011      	beq.n	800521e <HAL_TIM_OC_Start_IT+0x262>
      {
        __HAL_TIM_ENABLE(htim);
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	681a      	ldr	r2, [r3, #0]
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	f042 0201 	orr.w	r2, r2, #1
 8005208:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800520a:	e008      	b.n	800521e <HAL_TIM_OC_Start_IT+0x262>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	681a      	ldr	r2, [r3, #0]
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	f042 0201 	orr.w	r2, r2, #1
 800521a:	601a      	str	r2, [r3, #0]
 800521c:	e000      	b.n	8005220 <HAL_TIM_OC_Start_IT+0x264>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800521e:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8005220:	7bfb      	ldrb	r3, [r7, #15]
}
 8005222:	4618      	mov	r0, r3
 8005224:	3710      	adds	r7, #16
 8005226:	46bd      	mov	sp, r7
 8005228:	bd80      	pop	{r7, pc}
 800522a:	bf00      	nop
 800522c:	40010000 	.word	0x40010000
 8005230:	40010400 	.word	0x40010400
 8005234:	40000400 	.word	0x40000400
 8005238:	40000800 	.word	0x40000800
 800523c:	40000c00 	.word	0x40000c00
 8005240:	40014000 	.word	0x40014000
 8005244:	40001800 	.word	0x40001800
 8005248:	00010007 	.word	0x00010007

0800524c <HAL_TIM_OC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800524c:	b580      	push	{r7, lr}
 800524e:	b084      	sub	sp, #16
 8005250:	af00      	add	r7, sp, #0
 8005252:	6078      	str	r0, [r7, #4]
 8005254:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005256:	2300      	movs	r3, #0
 8005258:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800525a:	683b      	ldr	r3, [r7, #0]
 800525c:	2b0c      	cmp	r3, #12
 800525e:	d841      	bhi.n	80052e4 <HAL_TIM_OC_Stop_IT+0x98>
 8005260:	a201      	add	r2, pc, #4	@ (adr r2, 8005268 <HAL_TIM_OC_Stop_IT+0x1c>)
 8005262:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005266:	bf00      	nop
 8005268:	0800529d 	.word	0x0800529d
 800526c:	080052e5 	.word	0x080052e5
 8005270:	080052e5 	.word	0x080052e5
 8005274:	080052e5 	.word	0x080052e5
 8005278:	080052af 	.word	0x080052af
 800527c:	080052e5 	.word	0x080052e5
 8005280:	080052e5 	.word	0x080052e5
 8005284:	080052e5 	.word	0x080052e5
 8005288:	080052c1 	.word	0x080052c1
 800528c:	080052e5 	.word	0x080052e5
 8005290:	080052e5 	.word	0x080052e5
 8005294:	080052e5 	.word	0x080052e5
 8005298:	080052d3 	.word	0x080052d3
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	68da      	ldr	r2, [r3, #12]
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	f022 0202 	bic.w	r2, r2, #2
 80052aa:	60da      	str	r2, [r3, #12]
      break;
 80052ac:	e01d      	b.n	80052ea <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	68da      	ldr	r2, [r3, #12]
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	f022 0204 	bic.w	r2, r2, #4
 80052bc:	60da      	str	r2, [r3, #12]
      break;
 80052be:	e014      	b.n	80052ea <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	68da      	ldr	r2, [r3, #12]
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	f022 0208 	bic.w	r2, r2, #8
 80052ce:	60da      	str	r2, [r3, #12]
      break;
 80052d0:	e00b      	b.n	80052ea <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	68da      	ldr	r2, [r3, #12]
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	f022 0210 	bic.w	r2, r2, #16
 80052e0:	60da      	str	r2, [r3, #12]
      break;
 80052e2:	e002      	b.n	80052ea <HAL_TIM_OC_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 80052e4:	2301      	movs	r3, #1
 80052e6:	73fb      	strb	r3, [r7, #15]
      break;
 80052e8:	bf00      	nop
  }

  if (status == HAL_OK)
 80052ea:	7bfb      	ldrb	r3, [r7, #15]
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d171      	bne.n	80053d4 <HAL_TIM_OC_Stop_IT+0x188>
  {
    /* Disable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	2200      	movs	r2, #0
 80052f6:	6839      	ldr	r1, [r7, #0]
 80052f8:	4618      	mov	r0, r3
 80052fa:	f001 f8ff 	bl	80064fc <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	4a37      	ldr	r2, [pc, #220]	@ (80053e0 <HAL_TIM_OC_Stop_IT+0x194>)
 8005304:	4293      	cmp	r3, r2
 8005306:	d004      	beq.n	8005312 <HAL_TIM_OC_Stop_IT+0xc6>
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	4a35      	ldr	r2, [pc, #212]	@ (80053e4 <HAL_TIM_OC_Stop_IT+0x198>)
 800530e:	4293      	cmp	r3, r2
 8005310:	d101      	bne.n	8005316 <HAL_TIM_OC_Stop_IT+0xca>
 8005312:	2301      	movs	r3, #1
 8005314:	e000      	b.n	8005318 <HAL_TIM_OC_Stop_IT+0xcc>
 8005316:	2300      	movs	r3, #0
 8005318:	2b00      	cmp	r3, #0
 800531a:	d017      	beq.n	800534c <HAL_TIM_OC_Stop_IT+0x100>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	6a1a      	ldr	r2, [r3, #32]
 8005322:	f241 1311 	movw	r3, #4369	@ 0x1111
 8005326:	4013      	ands	r3, r2
 8005328:	2b00      	cmp	r3, #0
 800532a:	d10f      	bne.n	800534c <HAL_TIM_OC_Stop_IT+0x100>
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	6a1a      	ldr	r2, [r3, #32]
 8005332:	f240 4344 	movw	r3, #1092	@ 0x444
 8005336:	4013      	ands	r3, r2
 8005338:	2b00      	cmp	r3, #0
 800533a:	d107      	bne.n	800534c <HAL_TIM_OC_Stop_IT+0x100>
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800534a:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	6a1a      	ldr	r2, [r3, #32]
 8005352:	f241 1311 	movw	r3, #4369	@ 0x1111
 8005356:	4013      	ands	r3, r2
 8005358:	2b00      	cmp	r3, #0
 800535a:	d10f      	bne.n	800537c <HAL_TIM_OC_Stop_IT+0x130>
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	6a1a      	ldr	r2, [r3, #32]
 8005362:	f240 4344 	movw	r3, #1092	@ 0x444
 8005366:	4013      	ands	r3, r2
 8005368:	2b00      	cmp	r3, #0
 800536a:	d107      	bne.n	800537c <HAL_TIM_OC_Stop_IT+0x130>
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	681a      	ldr	r2, [r3, #0]
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	f022 0201 	bic.w	r2, r2, #1
 800537a:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800537c:	683b      	ldr	r3, [r7, #0]
 800537e:	2b00      	cmp	r3, #0
 8005380:	d104      	bne.n	800538c <HAL_TIM_OC_Stop_IT+0x140>
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	2201      	movs	r2, #1
 8005386:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800538a:	e023      	b.n	80053d4 <HAL_TIM_OC_Stop_IT+0x188>
 800538c:	683b      	ldr	r3, [r7, #0]
 800538e:	2b04      	cmp	r3, #4
 8005390:	d104      	bne.n	800539c <HAL_TIM_OC_Stop_IT+0x150>
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	2201      	movs	r2, #1
 8005396:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800539a:	e01b      	b.n	80053d4 <HAL_TIM_OC_Stop_IT+0x188>
 800539c:	683b      	ldr	r3, [r7, #0]
 800539e:	2b08      	cmp	r3, #8
 80053a0:	d104      	bne.n	80053ac <HAL_TIM_OC_Stop_IT+0x160>
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	2201      	movs	r2, #1
 80053a6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80053aa:	e013      	b.n	80053d4 <HAL_TIM_OC_Stop_IT+0x188>
 80053ac:	683b      	ldr	r3, [r7, #0]
 80053ae:	2b0c      	cmp	r3, #12
 80053b0:	d104      	bne.n	80053bc <HAL_TIM_OC_Stop_IT+0x170>
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	2201      	movs	r2, #1
 80053b6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80053ba:	e00b      	b.n	80053d4 <HAL_TIM_OC_Stop_IT+0x188>
 80053bc:	683b      	ldr	r3, [r7, #0]
 80053be:	2b10      	cmp	r3, #16
 80053c0:	d104      	bne.n	80053cc <HAL_TIM_OC_Stop_IT+0x180>
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	2201      	movs	r2, #1
 80053c6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80053ca:	e003      	b.n	80053d4 <HAL_TIM_OC_Stop_IT+0x188>
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	2201      	movs	r2, #1
 80053d0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  }

  /* Return function status */
  return status;
 80053d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80053d6:	4618      	mov	r0, r3
 80053d8:	3710      	adds	r7, #16
 80053da:	46bd      	mov	sp, r7
 80053dc:	bd80      	pop	{r7, pc}
 80053de:	bf00      	nop
 80053e0:	40010000 	.word	0x40010000
 80053e4:	40010400 	.word	0x40010400

080053e8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80053e8:	b580      	push	{r7, lr}
 80053ea:	b082      	sub	sp, #8
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d101      	bne.n	80053fa <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80053f6:	2301      	movs	r3, #1
 80053f8:	e049      	b.n	800548e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005400:	b2db      	uxtb	r3, r3
 8005402:	2b00      	cmp	r3, #0
 8005404:	d106      	bne.n	8005414 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	2200      	movs	r2, #0
 800540a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800540e:	6878      	ldr	r0, [r7, #4]
 8005410:	f000 f841 	bl	8005496 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	2202      	movs	r2, #2
 8005418:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681a      	ldr	r2, [r3, #0]
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	3304      	adds	r3, #4
 8005424:	4619      	mov	r1, r3
 8005426:	4610      	mov	r0, r2
 8005428:	f000 fcd0 	bl	8005dcc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	2201      	movs	r2, #1
 8005430:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	2201      	movs	r2, #1
 8005438:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	2201      	movs	r2, #1
 8005440:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	2201      	movs	r2, #1
 8005448:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	2201      	movs	r2, #1
 8005450:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	2201      	movs	r2, #1
 8005458:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	2201      	movs	r2, #1
 8005460:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	2201      	movs	r2, #1
 8005468:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	2201      	movs	r2, #1
 8005470:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	2201      	movs	r2, #1
 8005478:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	2201      	movs	r2, #1
 8005480:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	2201      	movs	r2, #1
 8005488:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800548c:	2300      	movs	r3, #0
}
 800548e:	4618      	mov	r0, r3
 8005490:	3708      	adds	r7, #8
 8005492:	46bd      	mov	sp, r7
 8005494:	bd80      	pop	{r7, pc}

08005496 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005496:	b480      	push	{r7}
 8005498:	b083      	sub	sp, #12
 800549a:	af00      	add	r7, sp, #0
 800549c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800549e:	bf00      	nop
 80054a0:	370c      	adds	r7, #12
 80054a2:	46bd      	mov	sp, r7
 80054a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a8:	4770      	bx	lr
	...

080054ac <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80054ac:	b580      	push	{r7, lr}
 80054ae:	b084      	sub	sp, #16
 80054b0:	af00      	add	r7, sp, #0
 80054b2:	6078      	str	r0, [r7, #4]
 80054b4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80054b6:	683b      	ldr	r3, [r7, #0]
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d109      	bne.n	80054d0 <HAL_TIM_PWM_Start+0x24>
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80054c2:	b2db      	uxtb	r3, r3
 80054c4:	2b01      	cmp	r3, #1
 80054c6:	bf14      	ite	ne
 80054c8:	2301      	movne	r3, #1
 80054ca:	2300      	moveq	r3, #0
 80054cc:	b2db      	uxtb	r3, r3
 80054ce:	e03c      	b.n	800554a <HAL_TIM_PWM_Start+0x9e>
 80054d0:	683b      	ldr	r3, [r7, #0]
 80054d2:	2b04      	cmp	r3, #4
 80054d4:	d109      	bne.n	80054ea <HAL_TIM_PWM_Start+0x3e>
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80054dc:	b2db      	uxtb	r3, r3
 80054de:	2b01      	cmp	r3, #1
 80054e0:	bf14      	ite	ne
 80054e2:	2301      	movne	r3, #1
 80054e4:	2300      	moveq	r3, #0
 80054e6:	b2db      	uxtb	r3, r3
 80054e8:	e02f      	b.n	800554a <HAL_TIM_PWM_Start+0x9e>
 80054ea:	683b      	ldr	r3, [r7, #0]
 80054ec:	2b08      	cmp	r3, #8
 80054ee:	d109      	bne.n	8005504 <HAL_TIM_PWM_Start+0x58>
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80054f6:	b2db      	uxtb	r3, r3
 80054f8:	2b01      	cmp	r3, #1
 80054fa:	bf14      	ite	ne
 80054fc:	2301      	movne	r3, #1
 80054fe:	2300      	moveq	r3, #0
 8005500:	b2db      	uxtb	r3, r3
 8005502:	e022      	b.n	800554a <HAL_TIM_PWM_Start+0x9e>
 8005504:	683b      	ldr	r3, [r7, #0]
 8005506:	2b0c      	cmp	r3, #12
 8005508:	d109      	bne.n	800551e <HAL_TIM_PWM_Start+0x72>
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005510:	b2db      	uxtb	r3, r3
 8005512:	2b01      	cmp	r3, #1
 8005514:	bf14      	ite	ne
 8005516:	2301      	movne	r3, #1
 8005518:	2300      	moveq	r3, #0
 800551a:	b2db      	uxtb	r3, r3
 800551c:	e015      	b.n	800554a <HAL_TIM_PWM_Start+0x9e>
 800551e:	683b      	ldr	r3, [r7, #0]
 8005520:	2b10      	cmp	r3, #16
 8005522:	d109      	bne.n	8005538 <HAL_TIM_PWM_Start+0x8c>
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800552a:	b2db      	uxtb	r3, r3
 800552c:	2b01      	cmp	r3, #1
 800552e:	bf14      	ite	ne
 8005530:	2301      	movne	r3, #1
 8005532:	2300      	moveq	r3, #0
 8005534:	b2db      	uxtb	r3, r3
 8005536:	e008      	b.n	800554a <HAL_TIM_PWM_Start+0x9e>
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800553e:	b2db      	uxtb	r3, r3
 8005540:	2b01      	cmp	r3, #1
 8005542:	bf14      	ite	ne
 8005544:	2301      	movne	r3, #1
 8005546:	2300      	moveq	r3, #0
 8005548:	b2db      	uxtb	r3, r3
 800554a:	2b00      	cmp	r3, #0
 800554c:	d001      	beq.n	8005552 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800554e:	2301      	movs	r3, #1
 8005550:	e092      	b.n	8005678 <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005552:	683b      	ldr	r3, [r7, #0]
 8005554:	2b00      	cmp	r3, #0
 8005556:	d104      	bne.n	8005562 <HAL_TIM_PWM_Start+0xb6>
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	2202      	movs	r2, #2
 800555c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005560:	e023      	b.n	80055aa <HAL_TIM_PWM_Start+0xfe>
 8005562:	683b      	ldr	r3, [r7, #0]
 8005564:	2b04      	cmp	r3, #4
 8005566:	d104      	bne.n	8005572 <HAL_TIM_PWM_Start+0xc6>
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	2202      	movs	r2, #2
 800556c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005570:	e01b      	b.n	80055aa <HAL_TIM_PWM_Start+0xfe>
 8005572:	683b      	ldr	r3, [r7, #0]
 8005574:	2b08      	cmp	r3, #8
 8005576:	d104      	bne.n	8005582 <HAL_TIM_PWM_Start+0xd6>
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	2202      	movs	r2, #2
 800557c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005580:	e013      	b.n	80055aa <HAL_TIM_PWM_Start+0xfe>
 8005582:	683b      	ldr	r3, [r7, #0]
 8005584:	2b0c      	cmp	r3, #12
 8005586:	d104      	bne.n	8005592 <HAL_TIM_PWM_Start+0xe6>
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	2202      	movs	r2, #2
 800558c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005590:	e00b      	b.n	80055aa <HAL_TIM_PWM_Start+0xfe>
 8005592:	683b      	ldr	r3, [r7, #0]
 8005594:	2b10      	cmp	r3, #16
 8005596:	d104      	bne.n	80055a2 <HAL_TIM_PWM_Start+0xf6>
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	2202      	movs	r2, #2
 800559c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80055a0:	e003      	b.n	80055aa <HAL_TIM_PWM_Start+0xfe>
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	2202      	movs	r2, #2
 80055a6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	2201      	movs	r2, #1
 80055b0:	6839      	ldr	r1, [r7, #0]
 80055b2:	4618      	mov	r0, r3
 80055b4:	f000 ffa2 	bl	80064fc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	4a30      	ldr	r2, [pc, #192]	@ (8005680 <HAL_TIM_PWM_Start+0x1d4>)
 80055be:	4293      	cmp	r3, r2
 80055c0:	d004      	beq.n	80055cc <HAL_TIM_PWM_Start+0x120>
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	4a2f      	ldr	r2, [pc, #188]	@ (8005684 <HAL_TIM_PWM_Start+0x1d8>)
 80055c8:	4293      	cmp	r3, r2
 80055ca:	d101      	bne.n	80055d0 <HAL_TIM_PWM_Start+0x124>
 80055cc:	2301      	movs	r3, #1
 80055ce:	e000      	b.n	80055d2 <HAL_TIM_PWM_Start+0x126>
 80055d0:	2300      	movs	r3, #0
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d007      	beq.n	80055e6 <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80055e4:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	4a25      	ldr	r2, [pc, #148]	@ (8005680 <HAL_TIM_PWM_Start+0x1d4>)
 80055ec:	4293      	cmp	r3, r2
 80055ee:	d022      	beq.n	8005636 <HAL_TIM_PWM_Start+0x18a>
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80055f8:	d01d      	beq.n	8005636 <HAL_TIM_PWM_Start+0x18a>
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	4a22      	ldr	r2, [pc, #136]	@ (8005688 <HAL_TIM_PWM_Start+0x1dc>)
 8005600:	4293      	cmp	r3, r2
 8005602:	d018      	beq.n	8005636 <HAL_TIM_PWM_Start+0x18a>
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	4a20      	ldr	r2, [pc, #128]	@ (800568c <HAL_TIM_PWM_Start+0x1e0>)
 800560a:	4293      	cmp	r3, r2
 800560c:	d013      	beq.n	8005636 <HAL_TIM_PWM_Start+0x18a>
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	4a1f      	ldr	r2, [pc, #124]	@ (8005690 <HAL_TIM_PWM_Start+0x1e4>)
 8005614:	4293      	cmp	r3, r2
 8005616:	d00e      	beq.n	8005636 <HAL_TIM_PWM_Start+0x18a>
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	4a19      	ldr	r2, [pc, #100]	@ (8005684 <HAL_TIM_PWM_Start+0x1d8>)
 800561e:	4293      	cmp	r3, r2
 8005620:	d009      	beq.n	8005636 <HAL_TIM_PWM_Start+0x18a>
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	4a1b      	ldr	r2, [pc, #108]	@ (8005694 <HAL_TIM_PWM_Start+0x1e8>)
 8005628:	4293      	cmp	r3, r2
 800562a:	d004      	beq.n	8005636 <HAL_TIM_PWM_Start+0x18a>
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	4a19      	ldr	r2, [pc, #100]	@ (8005698 <HAL_TIM_PWM_Start+0x1ec>)
 8005632:	4293      	cmp	r3, r2
 8005634:	d115      	bne.n	8005662 <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	689a      	ldr	r2, [r3, #8]
 800563c:	4b17      	ldr	r3, [pc, #92]	@ (800569c <HAL_TIM_PWM_Start+0x1f0>)
 800563e:	4013      	ands	r3, r2
 8005640:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	2b06      	cmp	r3, #6
 8005646:	d015      	beq.n	8005674 <HAL_TIM_PWM_Start+0x1c8>
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800564e:	d011      	beq.n	8005674 <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	681a      	ldr	r2, [r3, #0]
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	f042 0201 	orr.w	r2, r2, #1
 800565e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005660:	e008      	b.n	8005674 <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	681a      	ldr	r2, [r3, #0]
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	f042 0201 	orr.w	r2, r2, #1
 8005670:	601a      	str	r2, [r3, #0]
 8005672:	e000      	b.n	8005676 <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005674:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005676:	2300      	movs	r3, #0
}
 8005678:	4618      	mov	r0, r3
 800567a:	3710      	adds	r7, #16
 800567c:	46bd      	mov	sp, r7
 800567e:	bd80      	pop	{r7, pc}
 8005680:	40010000 	.word	0x40010000
 8005684:	40010400 	.word	0x40010400
 8005688:	40000400 	.word	0x40000400
 800568c:	40000800 	.word	0x40000800
 8005690:	40000c00 	.word	0x40000c00
 8005694:	40014000 	.word	0x40014000
 8005698:	40001800 	.word	0x40001800
 800569c:	00010007 	.word	0x00010007

080056a0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80056a0:	b580      	push	{r7, lr}
 80056a2:	b082      	sub	sp, #8
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	691b      	ldr	r3, [r3, #16]
 80056ae:	f003 0302 	and.w	r3, r3, #2
 80056b2:	2b02      	cmp	r3, #2
 80056b4:	d122      	bne.n	80056fc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	68db      	ldr	r3, [r3, #12]
 80056bc:	f003 0302 	and.w	r3, r3, #2
 80056c0:	2b02      	cmp	r3, #2
 80056c2:	d11b      	bne.n	80056fc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	f06f 0202 	mvn.w	r2, #2
 80056cc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	2201      	movs	r2, #1
 80056d2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	699b      	ldr	r3, [r3, #24]
 80056da:	f003 0303 	and.w	r3, r3, #3
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d003      	beq.n	80056ea <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80056e2:	6878      	ldr	r0, [r7, #4]
 80056e4:	f000 fb54 	bl	8005d90 <HAL_TIM_IC_CaptureCallback>
 80056e8:	e005      	b.n	80056f6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80056ea:	6878      	ldr	r0, [r7, #4]
 80056ec:	f7fb fb78 	bl	8000de0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80056f0:	6878      	ldr	r0, [r7, #4]
 80056f2:	f000 fb57 	bl	8005da4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	2200      	movs	r2, #0
 80056fa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	691b      	ldr	r3, [r3, #16]
 8005702:	f003 0304 	and.w	r3, r3, #4
 8005706:	2b04      	cmp	r3, #4
 8005708:	d122      	bne.n	8005750 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	68db      	ldr	r3, [r3, #12]
 8005710:	f003 0304 	and.w	r3, r3, #4
 8005714:	2b04      	cmp	r3, #4
 8005716:	d11b      	bne.n	8005750 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	f06f 0204 	mvn.w	r2, #4
 8005720:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	2202      	movs	r2, #2
 8005726:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	699b      	ldr	r3, [r3, #24]
 800572e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005732:	2b00      	cmp	r3, #0
 8005734:	d003      	beq.n	800573e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005736:	6878      	ldr	r0, [r7, #4]
 8005738:	f000 fb2a 	bl	8005d90 <HAL_TIM_IC_CaptureCallback>
 800573c:	e005      	b.n	800574a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800573e:	6878      	ldr	r0, [r7, #4]
 8005740:	f7fb fb4e 	bl	8000de0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005744:	6878      	ldr	r0, [r7, #4]
 8005746:	f000 fb2d 	bl	8005da4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	2200      	movs	r2, #0
 800574e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	691b      	ldr	r3, [r3, #16]
 8005756:	f003 0308 	and.w	r3, r3, #8
 800575a:	2b08      	cmp	r3, #8
 800575c:	d122      	bne.n	80057a4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	68db      	ldr	r3, [r3, #12]
 8005764:	f003 0308 	and.w	r3, r3, #8
 8005768:	2b08      	cmp	r3, #8
 800576a:	d11b      	bne.n	80057a4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	f06f 0208 	mvn.w	r2, #8
 8005774:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	2204      	movs	r2, #4
 800577a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	69db      	ldr	r3, [r3, #28]
 8005782:	f003 0303 	and.w	r3, r3, #3
 8005786:	2b00      	cmp	r3, #0
 8005788:	d003      	beq.n	8005792 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800578a:	6878      	ldr	r0, [r7, #4]
 800578c:	f000 fb00 	bl	8005d90 <HAL_TIM_IC_CaptureCallback>
 8005790:	e005      	b.n	800579e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005792:	6878      	ldr	r0, [r7, #4]
 8005794:	f7fb fb24 	bl	8000de0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005798:	6878      	ldr	r0, [r7, #4]
 800579a:	f000 fb03 	bl	8005da4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	2200      	movs	r2, #0
 80057a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	691b      	ldr	r3, [r3, #16]
 80057aa:	f003 0310 	and.w	r3, r3, #16
 80057ae:	2b10      	cmp	r3, #16
 80057b0:	d122      	bne.n	80057f8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	68db      	ldr	r3, [r3, #12]
 80057b8:	f003 0310 	and.w	r3, r3, #16
 80057bc:	2b10      	cmp	r3, #16
 80057be:	d11b      	bne.n	80057f8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	f06f 0210 	mvn.w	r2, #16
 80057c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	2208      	movs	r2, #8
 80057ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	69db      	ldr	r3, [r3, #28]
 80057d6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d003      	beq.n	80057e6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80057de:	6878      	ldr	r0, [r7, #4]
 80057e0:	f000 fad6 	bl	8005d90 <HAL_TIM_IC_CaptureCallback>
 80057e4:	e005      	b.n	80057f2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80057e6:	6878      	ldr	r0, [r7, #4]
 80057e8:	f7fb fafa 	bl	8000de0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80057ec:	6878      	ldr	r0, [r7, #4]
 80057ee:	f000 fad9 	bl	8005da4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	2200      	movs	r2, #0
 80057f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	691b      	ldr	r3, [r3, #16]
 80057fe:	f003 0301 	and.w	r3, r3, #1
 8005802:	2b01      	cmp	r3, #1
 8005804:	d10e      	bne.n	8005824 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	68db      	ldr	r3, [r3, #12]
 800580c:	f003 0301 	and.w	r3, r3, #1
 8005810:	2b01      	cmp	r3, #1
 8005812:	d107      	bne.n	8005824 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	f06f 0201 	mvn.w	r2, #1
 800581c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800581e:	6878      	ldr	r0, [r7, #4]
 8005820:	f7fc fbac 	bl	8001f7c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	691b      	ldr	r3, [r3, #16]
 800582a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800582e:	2b80      	cmp	r3, #128	@ 0x80
 8005830:	d10e      	bne.n	8005850 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	68db      	ldr	r3, [r3, #12]
 8005838:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800583c:	2b80      	cmp	r3, #128	@ 0x80
 800583e:	d107      	bne.n	8005850 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005848:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800584a:	6878      	ldr	r0, [r7, #4]
 800584c:	f000 ff92 	bl	8006774 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	691b      	ldr	r3, [r3, #16]
 8005856:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800585a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800585e:	d10e      	bne.n	800587e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	68db      	ldr	r3, [r3, #12]
 8005866:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800586a:	2b80      	cmp	r3, #128	@ 0x80
 800586c:	d107      	bne.n	800587e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8005876:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005878:	6878      	ldr	r0, [r7, #4]
 800587a:	f000 ff85 	bl	8006788 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	691b      	ldr	r3, [r3, #16]
 8005884:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005888:	2b40      	cmp	r3, #64	@ 0x40
 800588a:	d10e      	bne.n	80058aa <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	68db      	ldr	r3, [r3, #12]
 8005892:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005896:	2b40      	cmp	r3, #64	@ 0x40
 8005898:	d107      	bne.n	80058aa <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80058a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80058a4:	6878      	ldr	r0, [r7, #4]
 80058a6:	f000 fa87 	bl	8005db8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	691b      	ldr	r3, [r3, #16]
 80058b0:	f003 0320 	and.w	r3, r3, #32
 80058b4:	2b20      	cmp	r3, #32
 80058b6:	d10e      	bne.n	80058d6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	68db      	ldr	r3, [r3, #12]
 80058be:	f003 0320 	and.w	r3, r3, #32
 80058c2:	2b20      	cmp	r3, #32
 80058c4:	d107      	bne.n	80058d6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	f06f 0220 	mvn.w	r2, #32
 80058ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80058d0:	6878      	ldr	r0, [r7, #4]
 80058d2:	f000 ff45 	bl	8006760 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80058d6:	bf00      	nop
 80058d8:	3708      	adds	r7, #8
 80058da:	46bd      	mov	sp, r7
 80058dc:	bd80      	pop	{r7, pc}
	...

080058e0 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80058e0:	b580      	push	{r7, lr}
 80058e2:	b086      	sub	sp, #24
 80058e4:	af00      	add	r7, sp, #0
 80058e6:	60f8      	str	r0, [r7, #12]
 80058e8:	60b9      	str	r1, [r7, #8]
 80058ea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80058ec:	2300      	movs	r3, #0
 80058ee:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80058f6:	2b01      	cmp	r3, #1
 80058f8:	d101      	bne.n	80058fe <HAL_TIM_OC_ConfigChannel+0x1e>
 80058fa:	2302      	movs	r3, #2
 80058fc:	e066      	b.n	80059cc <HAL_TIM_OC_ConfigChannel+0xec>
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	2201      	movs	r2, #1
 8005902:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	2b14      	cmp	r3, #20
 800590a:	d857      	bhi.n	80059bc <HAL_TIM_OC_ConfigChannel+0xdc>
 800590c:	a201      	add	r2, pc, #4	@ (adr r2, 8005914 <HAL_TIM_OC_ConfigChannel+0x34>)
 800590e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005912:	bf00      	nop
 8005914:	08005969 	.word	0x08005969
 8005918:	080059bd 	.word	0x080059bd
 800591c:	080059bd 	.word	0x080059bd
 8005920:	080059bd 	.word	0x080059bd
 8005924:	08005977 	.word	0x08005977
 8005928:	080059bd 	.word	0x080059bd
 800592c:	080059bd 	.word	0x080059bd
 8005930:	080059bd 	.word	0x080059bd
 8005934:	08005985 	.word	0x08005985
 8005938:	080059bd 	.word	0x080059bd
 800593c:	080059bd 	.word	0x080059bd
 8005940:	080059bd 	.word	0x080059bd
 8005944:	08005993 	.word	0x08005993
 8005948:	080059bd 	.word	0x080059bd
 800594c:	080059bd 	.word	0x080059bd
 8005950:	080059bd 	.word	0x080059bd
 8005954:	080059a1 	.word	0x080059a1
 8005958:	080059bd 	.word	0x080059bd
 800595c:	080059bd 	.word	0x080059bd
 8005960:	080059bd 	.word	0x080059bd
 8005964:	080059af 	.word	0x080059af
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	68b9      	ldr	r1, [r7, #8]
 800596e:	4618      	mov	r0, r3
 8005970:	f000 facc 	bl	8005f0c <TIM_OC1_SetConfig>
      break;
 8005974:	e025      	b.n	80059c2 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	68b9      	ldr	r1, [r7, #8]
 800597c:	4618      	mov	r0, r3
 800597e:	f000 fb37 	bl	8005ff0 <TIM_OC2_SetConfig>
      break;
 8005982:	e01e      	b.n	80059c2 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	68b9      	ldr	r1, [r7, #8]
 800598a:	4618      	mov	r0, r3
 800598c:	f000 fba8 	bl	80060e0 <TIM_OC3_SetConfig>
      break;
 8005990:	e017      	b.n	80059c2 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	68b9      	ldr	r1, [r7, #8]
 8005998:	4618      	mov	r0, r3
 800599a:	f000 fc17 	bl	80061cc <TIM_OC4_SetConfig>
      break;
 800599e:	e010      	b.n	80059c2 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	68b9      	ldr	r1, [r7, #8]
 80059a6:	4618      	mov	r0, r3
 80059a8:	f000 fc68 	bl	800627c <TIM_OC5_SetConfig>
      break;
 80059ac:	e009      	b.n	80059c2 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	68b9      	ldr	r1, [r7, #8]
 80059b4:	4618      	mov	r0, r3
 80059b6:	f000 fcb3 	bl	8006320 <TIM_OC6_SetConfig>
      break;
 80059ba:	e002      	b.n	80059c2 <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 80059bc:	2301      	movs	r3, #1
 80059be:	75fb      	strb	r3, [r7, #23]
      break;
 80059c0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	2200      	movs	r2, #0
 80059c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80059ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80059cc:	4618      	mov	r0, r3
 80059ce:	3718      	adds	r7, #24
 80059d0:	46bd      	mov	sp, r7
 80059d2:	bd80      	pop	{r7, pc}

080059d4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80059d4:	b580      	push	{r7, lr}
 80059d6:	b086      	sub	sp, #24
 80059d8:	af00      	add	r7, sp, #0
 80059da:	60f8      	str	r0, [r7, #12]
 80059dc:	60b9      	str	r1, [r7, #8]
 80059de:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80059e0:	2300      	movs	r3, #0
 80059e2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80059ea:	2b01      	cmp	r3, #1
 80059ec:	d101      	bne.n	80059f2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80059ee:	2302      	movs	r3, #2
 80059f0:	e0ff      	b.n	8005bf2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	2201      	movs	r2, #1
 80059f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	2b14      	cmp	r3, #20
 80059fe:	f200 80f0 	bhi.w	8005be2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005a02:	a201      	add	r2, pc, #4	@ (adr r2, 8005a08 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005a04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a08:	08005a5d 	.word	0x08005a5d
 8005a0c:	08005be3 	.word	0x08005be3
 8005a10:	08005be3 	.word	0x08005be3
 8005a14:	08005be3 	.word	0x08005be3
 8005a18:	08005a9d 	.word	0x08005a9d
 8005a1c:	08005be3 	.word	0x08005be3
 8005a20:	08005be3 	.word	0x08005be3
 8005a24:	08005be3 	.word	0x08005be3
 8005a28:	08005adf 	.word	0x08005adf
 8005a2c:	08005be3 	.word	0x08005be3
 8005a30:	08005be3 	.word	0x08005be3
 8005a34:	08005be3 	.word	0x08005be3
 8005a38:	08005b1f 	.word	0x08005b1f
 8005a3c:	08005be3 	.word	0x08005be3
 8005a40:	08005be3 	.word	0x08005be3
 8005a44:	08005be3 	.word	0x08005be3
 8005a48:	08005b61 	.word	0x08005b61
 8005a4c:	08005be3 	.word	0x08005be3
 8005a50:	08005be3 	.word	0x08005be3
 8005a54:	08005be3 	.word	0x08005be3
 8005a58:	08005ba1 	.word	0x08005ba1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	68b9      	ldr	r1, [r7, #8]
 8005a62:	4618      	mov	r0, r3
 8005a64:	f000 fa52 	bl	8005f0c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	699a      	ldr	r2, [r3, #24]
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	f042 0208 	orr.w	r2, r2, #8
 8005a76:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	699a      	ldr	r2, [r3, #24]
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	f022 0204 	bic.w	r2, r2, #4
 8005a86:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	6999      	ldr	r1, [r3, #24]
 8005a8e:	68bb      	ldr	r3, [r7, #8]
 8005a90:	691a      	ldr	r2, [r3, #16]
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	430a      	orrs	r2, r1
 8005a98:	619a      	str	r2, [r3, #24]
      break;
 8005a9a:	e0a5      	b.n	8005be8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	68b9      	ldr	r1, [r7, #8]
 8005aa2:	4618      	mov	r0, r3
 8005aa4:	f000 faa4 	bl	8005ff0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	699a      	ldr	r2, [r3, #24]
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005ab6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	699a      	ldr	r2, [r3, #24]
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005ac6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	6999      	ldr	r1, [r3, #24]
 8005ace:	68bb      	ldr	r3, [r7, #8]
 8005ad0:	691b      	ldr	r3, [r3, #16]
 8005ad2:	021a      	lsls	r2, r3, #8
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	430a      	orrs	r2, r1
 8005ada:	619a      	str	r2, [r3, #24]
      break;
 8005adc:	e084      	b.n	8005be8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	68b9      	ldr	r1, [r7, #8]
 8005ae4:	4618      	mov	r0, r3
 8005ae6:	f000 fafb 	bl	80060e0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	69da      	ldr	r2, [r3, #28]
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	f042 0208 	orr.w	r2, r2, #8
 8005af8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	69da      	ldr	r2, [r3, #28]
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	f022 0204 	bic.w	r2, r2, #4
 8005b08:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	69d9      	ldr	r1, [r3, #28]
 8005b10:	68bb      	ldr	r3, [r7, #8]
 8005b12:	691a      	ldr	r2, [r3, #16]
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	430a      	orrs	r2, r1
 8005b1a:	61da      	str	r2, [r3, #28]
      break;
 8005b1c:	e064      	b.n	8005be8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	68b9      	ldr	r1, [r7, #8]
 8005b24:	4618      	mov	r0, r3
 8005b26:	f000 fb51 	bl	80061cc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	69da      	ldr	r2, [r3, #28]
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005b38:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	69da      	ldr	r2, [r3, #28]
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005b48:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	69d9      	ldr	r1, [r3, #28]
 8005b50:	68bb      	ldr	r3, [r7, #8]
 8005b52:	691b      	ldr	r3, [r3, #16]
 8005b54:	021a      	lsls	r2, r3, #8
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	430a      	orrs	r2, r1
 8005b5c:	61da      	str	r2, [r3, #28]
      break;
 8005b5e:	e043      	b.n	8005be8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	68b9      	ldr	r1, [r7, #8]
 8005b66:	4618      	mov	r0, r3
 8005b68:	f000 fb88 	bl	800627c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	f042 0208 	orr.w	r2, r2, #8
 8005b7a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	f022 0204 	bic.w	r2, r2, #4
 8005b8a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8005b92:	68bb      	ldr	r3, [r7, #8]
 8005b94:	691a      	ldr	r2, [r3, #16]
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	430a      	orrs	r2, r1
 8005b9c:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8005b9e:	e023      	b.n	8005be8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	68b9      	ldr	r1, [r7, #8]
 8005ba6:	4618      	mov	r0, r3
 8005ba8:	f000 fbba 	bl	8006320 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005bba:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005bca:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8005bd2:	68bb      	ldr	r3, [r7, #8]
 8005bd4:	691b      	ldr	r3, [r3, #16]
 8005bd6:	021a      	lsls	r2, r3, #8
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	430a      	orrs	r2, r1
 8005bde:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8005be0:	e002      	b.n	8005be8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005be2:	2301      	movs	r3, #1
 8005be4:	75fb      	strb	r3, [r7, #23]
      break;
 8005be6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	2200      	movs	r2, #0
 8005bec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005bf0:	7dfb      	ldrb	r3, [r7, #23]
}
 8005bf2:	4618      	mov	r0, r3
 8005bf4:	3718      	adds	r7, #24
 8005bf6:	46bd      	mov	sp, r7
 8005bf8:	bd80      	pop	{r7, pc}
 8005bfa:	bf00      	nop

08005bfc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005bfc:	b580      	push	{r7, lr}
 8005bfe:	b084      	sub	sp, #16
 8005c00:	af00      	add	r7, sp, #0
 8005c02:	6078      	str	r0, [r7, #4]
 8005c04:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005c06:	2300      	movs	r3, #0
 8005c08:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005c10:	2b01      	cmp	r3, #1
 8005c12:	d101      	bne.n	8005c18 <HAL_TIM_ConfigClockSource+0x1c>
 8005c14:	2302      	movs	r3, #2
 8005c16:	e0b4      	b.n	8005d82 <HAL_TIM_ConfigClockSource+0x186>
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	2201      	movs	r2, #1
 8005c1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	2202      	movs	r2, #2
 8005c24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	689b      	ldr	r3, [r3, #8]
 8005c2e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005c30:	68ba      	ldr	r2, [r7, #8]
 8005c32:	4b56      	ldr	r3, [pc, #344]	@ (8005d8c <HAL_TIM_ConfigClockSource+0x190>)
 8005c34:	4013      	ands	r3, r2
 8005c36:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005c38:	68bb      	ldr	r3, [r7, #8]
 8005c3a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005c3e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	68ba      	ldr	r2, [r7, #8]
 8005c46:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005c48:	683b      	ldr	r3, [r7, #0]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005c50:	d03e      	beq.n	8005cd0 <HAL_TIM_ConfigClockSource+0xd4>
 8005c52:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005c56:	f200 8087 	bhi.w	8005d68 <HAL_TIM_ConfigClockSource+0x16c>
 8005c5a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005c5e:	f000 8086 	beq.w	8005d6e <HAL_TIM_ConfigClockSource+0x172>
 8005c62:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005c66:	d87f      	bhi.n	8005d68 <HAL_TIM_ConfigClockSource+0x16c>
 8005c68:	2b70      	cmp	r3, #112	@ 0x70
 8005c6a:	d01a      	beq.n	8005ca2 <HAL_TIM_ConfigClockSource+0xa6>
 8005c6c:	2b70      	cmp	r3, #112	@ 0x70
 8005c6e:	d87b      	bhi.n	8005d68 <HAL_TIM_ConfigClockSource+0x16c>
 8005c70:	2b60      	cmp	r3, #96	@ 0x60
 8005c72:	d050      	beq.n	8005d16 <HAL_TIM_ConfigClockSource+0x11a>
 8005c74:	2b60      	cmp	r3, #96	@ 0x60
 8005c76:	d877      	bhi.n	8005d68 <HAL_TIM_ConfigClockSource+0x16c>
 8005c78:	2b50      	cmp	r3, #80	@ 0x50
 8005c7a:	d03c      	beq.n	8005cf6 <HAL_TIM_ConfigClockSource+0xfa>
 8005c7c:	2b50      	cmp	r3, #80	@ 0x50
 8005c7e:	d873      	bhi.n	8005d68 <HAL_TIM_ConfigClockSource+0x16c>
 8005c80:	2b40      	cmp	r3, #64	@ 0x40
 8005c82:	d058      	beq.n	8005d36 <HAL_TIM_ConfigClockSource+0x13a>
 8005c84:	2b40      	cmp	r3, #64	@ 0x40
 8005c86:	d86f      	bhi.n	8005d68 <HAL_TIM_ConfigClockSource+0x16c>
 8005c88:	2b30      	cmp	r3, #48	@ 0x30
 8005c8a:	d064      	beq.n	8005d56 <HAL_TIM_ConfigClockSource+0x15a>
 8005c8c:	2b30      	cmp	r3, #48	@ 0x30
 8005c8e:	d86b      	bhi.n	8005d68 <HAL_TIM_ConfigClockSource+0x16c>
 8005c90:	2b20      	cmp	r3, #32
 8005c92:	d060      	beq.n	8005d56 <HAL_TIM_ConfigClockSource+0x15a>
 8005c94:	2b20      	cmp	r3, #32
 8005c96:	d867      	bhi.n	8005d68 <HAL_TIM_ConfigClockSource+0x16c>
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d05c      	beq.n	8005d56 <HAL_TIM_ConfigClockSource+0x15a>
 8005c9c:	2b10      	cmp	r3, #16
 8005c9e:	d05a      	beq.n	8005d56 <HAL_TIM_ConfigClockSource+0x15a>
 8005ca0:	e062      	b.n	8005d68 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005ca6:	683b      	ldr	r3, [r7, #0]
 8005ca8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005caa:	683b      	ldr	r3, [r7, #0]
 8005cac:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005cae:	683b      	ldr	r3, [r7, #0]
 8005cb0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005cb2:	f000 fc03 	bl	80064bc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	689b      	ldr	r3, [r3, #8]
 8005cbc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005cbe:	68bb      	ldr	r3, [r7, #8]
 8005cc0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005cc4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	68ba      	ldr	r2, [r7, #8]
 8005ccc:	609a      	str	r2, [r3, #8]
      break;
 8005cce:	e04f      	b.n	8005d70 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005cd4:	683b      	ldr	r3, [r7, #0]
 8005cd6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005cd8:	683b      	ldr	r3, [r7, #0]
 8005cda:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005cdc:	683b      	ldr	r3, [r7, #0]
 8005cde:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005ce0:	f000 fbec 	bl	80064bc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	689a      	ldr	r2, [r3, #8]
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005cf2:	609a      	str	r2, [r3, #8]
      break;
 8005cf4:	e03c      	b.n	8005d70 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005cfa:	683b      	ldr	r3, [r7, #0]
 8005cfc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005cfe:	683b      	ldr	r3, [r7, #0]
 8005d00:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d02:	461a      	mov	r2, r3
 8005d04:	f000 fb60 	bl	80063c8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	2150      	movs	r1, #80	@ 0x50
 8005d0e:	4618      	mov	r0, r3
 8005d10:	f000 fbb9 	bl	8006486 <TIM_ITRx_SetConfig>
      break;
 8005d14:	e02c      	b.n	8005d70 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005d1a:	683b      	ldr	r3, [r7, #0]
 8005d1c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005d1e:	683b      	ldr	r3, [r7, #0]
 8005d20:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005d22:	461a      	mov	r2, r3
 8005d24:	f000 fb7f 	bl	8006426 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	2160      	movs	r1, #96	@ 0x60
 8005d2e:	4618      	mov	r0, r3
 8005d30:	f000 fba9 	bl	8006486 <TIM_ITRx_SetConfig>
      break;
 8005d34:	e01c      	b.n	8005d70 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005d3a:	683b      	ldr	r3, [r7, #0]
 8005d3c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005d3e:	683b      	ldr	r3, [r7, #0]
 8005d40:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d42:	461a      	mov	r2, r3
 8005d44:	f000 fb40 	bl	80063c8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	2140      	movs	r1, #64	@ 0x40
 8005d4e:	4618      	mov	r0, r3
 8005d50:	f000 fb99 	bl	8006486 <TIM_ITRx_SetConfig>
      break;
 8005d54:	e00c      	b.n	8005d70 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681a      	ldr	r2, [r3, #0]
 8005d5a:	683b      	ldr	r3, [r7, #0]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	4619      	mov	r1, r3
 8005d60:	4610      	mov	r0, r2
 8005d62:	f000 fb90 	bl	8006486 <TIM_ITRx_SetConfig>
      break;
 8005d66:	e003      	b.n	8005d70 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005d68:	2301      	movs	r3, #1
 8005d6a:	73fb      	strb	r3, [r7, #15]
      break;
 8005d6c:	e000      	b.n	8005d70 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005d6e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	2201      	movs	r2, #1
 8005d74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	2200      	movs	r2, #0
 8005d7c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005d80:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d82:	4618      	mov	r0, r3
 8005d84:	3710      	adds	r7, #16
 8005d86:	46bd      	mov	sp, r7
 8005d88:	bd80      	pop	{r7, pc}
 8005d8a:	bf00      	nop
 8005d8c:	fffeff88 	.word	0xfffeff88

08005d90 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005d90:	b480      	push	{r7}
 8005d92:	b083      	sub	sp, #12
 8005d94:	af00      	add	r7, sp, #0
 8005d96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005d98:	bf00      	nop
 8005d9a:	370c      	adds	r7, #12
 8005d9c:	46bd      	mov	sp, r7
 8005d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da2:	4770      	bx	lr

08005da4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005da4:	b480      	push	{r7}
 8005da6:	b083      	sub	sp, #12
 8005da8:	af00      	add	r7, sp, #0
 8005daa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005dac:	bf00      	nop
 8005dae:	370c      	adds	r7, #12
 8005db0:	46bd      	mov	sp, r7
 8005db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db6:	4770      	bx	lr

08005db8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005db8:	b480      	push	{r7}
 8005dba:	b083      	sub	sp, #12
 8005dbc:	af00      	add	r7, sp, #0
 8005dbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005dc0:	bf00      	nop
 8005dc2:	370c      	adds	r7, #12
 8005dc4:	46bd      	mov	sp, r7
 8005dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dca:	4770      	bx	lr

08005dcc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005dcc:	b480      	push	{r7}
 8005dce:	b085      	sub	sp, #20
 8005dd0:	af00      	add	r7, sp, #0
 8005dd2:	6078      	str	r0, [r7, #4]
 8005dd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	4a40      	ldr	r2, [pc, #256]	@ (8005ee0 <TIM_Base_SetConfig+0x114>)
 8005de0:	4293      	cmp	r3, r2
 8005de2:	d013      	beq.n	8005e0c <TIM_Base_SetConfig+0x40>
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005dea:	d00f      	beq.n	8005e0c <TIM_Base_SetConfig+0x40>
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	4a3d      	ldr	r2, [pc, #244]	@ (8005ee4 <TIM_Base_SetConfig+0x118>)
 8005df0:	4293      	cmp	r3, r2
 8005df2:	d00b      	beq.n	8005e0c <TIM_Base_SetConfig+0x40>
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	4a3c      	ldr	r2, [pc, #240]	@ (8005ee8 <TIM_Base_SetConfig+0x11c>)
 8005df8:	4293      	cmp	r3, r2
 8005dfa:	d007      	beq.n	8005e0c <TIM_Base_SetConfig+0x40>
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	4a3b      	ldr	r2, [pc, #236]	@ (8005eec <TIM_Base_SetConfig+0x120>)
 8005e00:	4293      	cmp	r3, r2
 8005e02:	d003      	beq.n	8005e0c <TIM_Base_SetConfig+0x40>
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	4a3a      	ldr	r2, [pc, #232]	@ (8005ef0 <TIM_Base_SetConfig+0x124>)
 8005e08:	4293      	cmp	r3, r2
 8005e0a:	d108      	bne.n	8005e1e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005e12:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005e14:	683b      	ldr	r3, [r7, #0]
 8005e16:	685b      	ldr	r3, [r3, #4]
 8005e18:	68fa      	ldr	r2, [r7, #12]
 8005e1a:	4313      	orrs	r3, r2
 8005e1c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	4a2f      	ldr	r2, [pc, #188]	@ (8005ee0 <TIM_Base_SetConfig+0x114>)
 8005e22:	4293      	cmp	r3, r2
 8005e24:	d02b      	beq.n	8005e7e <TIM_Base_SetConfig+0xb2>
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005e2c:	d027      	beq.n	8005e7e <TIM_Base_SetConfig+0xb2>
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	4a2c      	ldr	r2, [pc, #176]	@ (8005ee4 <TIM_Base_SetConfig+0x118>)
 8005e32:	4293      	cmp	r3, r2
 8005e34:	d023      	beq.n	8005e7e <TIM_Base_SetConfig+0xb2>
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	4a2b      	ldr	r2, [pc, #172]	@ (8005ee8 <TIM_Base_SetConfig+0x11c>)
 8005e3a:	4293      	cmp	r3, r2
 8005e3c:	d01f      	beq.n	8005e7e <TIM_Base_SetConfig+0xb2>
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	4a2a      	ldr	r2, [pc, #168]	@ (8005eec <TIM_Base_SetConfig+0x120>)
 8005e42:	4293      	cmp	r3, r2
 8005e44:	d01b      	beq.n	8005e7e <TIM_Base_SetConfig+0xb2>
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	4a29      	ldr	r2, [pc, #164]	@ (8005ef0 <TIM_Base_SetConfig+0x124>)
 8005e4a:	4293      	cmp	r3, r2
 8005e4c:	d017      	beq.n	8005e7e <TIM_Base_SetConfig+0xb2>
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	4a28      	ldr	r2, [pc, #160]	@ (8005ef4 <TIM_Base_SetConfig+0x128>)
 8005e52:	4293      	cmp	r3, r2
 8005e54:	d013      	beq.n	8005e7e <TIM_Base_SetConfig+0xb2>
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	4a27      	ldr	r2, [pc, #156]	@ (8005ef8 <TIM_Base_SetConfig+0x12c>)
 8005e5a:	4293      	cmp	r3, r2
 8005e5c:	d00f      	beq.n	8005e7e <TIM_Base_SetConfig+0xb2>
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	4a26      	ldr	r2, [pc, #152]	@ (8005efc <TIM_Base_SetConfig+0x130>)
 8005e62:	4293      	cmp	r3, r2
 8005e64:	d00b      	beq.n	8005e7e <TIM_Base_SetConfig+0xb2>
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	4a25      	ldr	r2, [pc, #148]	@ (8005f00 <TIM_Base_SetConfig+0x134>)
 8005e6a:	4293      	cmp	r3, r2
 8005e6c:	d007      	beq.n	8005e7e <TIM_Base_SetConfig+0xb2>
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	4a24      	ldr	r2, [pc, #144]	@ (8005f04 <TIM_Base_SetConfig+0x138>)
 8005e72:	4293      	cmp	r3, r2
 8005e74:	d003      	beq.n	8005e7e <TIM_Base_SetConfig+0xb2>
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	4a23      	ldr	r2, [pc, #140]	@ (8005f08 <TIM_Base_SetConfig+0x13c>)
 8005e7a:	4293      	cmp	r3, r2
 8005e7c:	d108      	bne.n	8005e90 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005e84:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005e86:	683b      	ldr	r3, [r7, #0]
 8005e88:	68db      	ldr	r3, [r3, #12]
 8005e8a:	68fa      	ldr	r2, [r7, #12]
 8005e8c:	4313      	orrs	r3, r2
 8005e8e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005e96:	683b      	ldr	r3, [r7, #0]
 8005e98:	695b      	ldr	r3, [r3, #20]
 8005e9a:	4313      	orrs	r3, r2
 8005e9c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	68fa      	ldr	r2, [r7, #12]
 8005ea2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005ea4:	683b      	ldr	r3, [r7, #0]
 8005ea6:	689a      	ldr	r2, [r3, #8]
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005eac:	683b      	ldr	r3, [r7, #0]
 8005eae:	681a      	ldr	r2, [r3, #0]
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	4a0a      	ldr	r2, [pc, #40]	@ (8005ee0 <TIM_Base_SetConfig+0x114>)
 8005eb8:	4293      	cmp	r3, r2
 8005eba:	d003      	beq.n	8005ec4 <TIM_Base_SetConfig+0xf8>
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	4a0c      	ldr	r2, [pc, #48]	@ (8005ef0 <TIM_Base_SetConfig+0x124>)
 8005ec0:	4293      	cmp	r3, r2
 8005ec2:	d103      	bne.n	8005ecc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005ec4:	683b      	ldr	r3, [r7, #0]
 8005ec6:	691a      	ldr	r2, [r3, #16]
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	2201      	movs	r2, #1
 8005ed0:	615a      	str	r2, [r3, #20]
}
 8005ed2:	bf00      	nop
 8005ed4:	3714      	adds	r7, #20
 8005ed6:	46bd      	mov	sp, r7
 8005ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005edc:	4770      	bx	lr
 8005ede:	bf00      	nop
 8005ee0:	40010000 	.word	0x40010000
 8005ee4:	40000400 	.word	0x40000400
 8005ee8:	40000800 	.word	0x40000800
 8005eec:	40000c00 	.word	0x40000c00
 8005ef0:	40010400 	.word	0x40010400
 8005ef4:	40014000 	.word	0x40014000
 8005ef8:	40014400 	.word	0x40014400
 8005efc:	40014800 	.word	0x40014800
 8005f00:	40001800 	.word	0x40001800
 8005f04:	40001c00 	.word	0x40001c00
 8005f08:	40002000 	.word	0x40002000

08005f0c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005f0c:	b480      	push	{r7}
 8005f0e:	b087      	sub	sp, #28
 8005f10:	af00      	add	r7, sp, #0
 8005f12:	6078      	str	r0, [r7, #4]
 8005f14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	6a1b      	ldr	r3, [r3, #32]
 8005f1a:	f023 0201 	bic.w	r2, r3, #1
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	6a1b      	ldr	r3, [r3, #32]
 8005f26:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	685b      	ldr	r3, [r3, #4]
 8005f2c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	699b      	ldr	r3, [r3, #24]
 8005f32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005f34:	68fa      	ldr	r2, [r7, #12]
 8005f36:	4b2b      	ldr	r3, [pc, #172]	@ (8005fe4 <TIM_OC1_SetConfig+0xd8>)
 8005f38:	4013      	ands	r3, r2
 8005f3a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	f023 0303 	bic.w	r3, r3, #3
 8005f42:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005f44:	683b      	ldr	r3, [r7, #0]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	68fa      	ldr	r2, [r7, #12]
 8005f4a:	4313      	orrs	r3, r2
 8005f4c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005f4e:	697b      	ldr	r3, [r7, #20]
 8005f50:	f023 0302 	bic.w	r3, r3, #2
 8005f54:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005f56:	683b      	ldr	r3, [r7, #0]
 8005f58:	689b      	ldr	r3, [r3, #8]
 8005f5a:	697a      	ldr	r2, [r7, #20]
 8005f5c:	4313      	orrs	r3, r2
 8005f5e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	4a21      	ldr	r2, [pc, #132]	@ (8005fe8 <TIM_OC1_SetConfig+0xdc>)
 8005f64:	4293      	cmp	r3, r2
 8005f66:	d003      	beq.n	8005f70 <TIM_OC1_SetConfig+0x64>
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	4a20      	ldr	r2, [pc, #128]	@ (8005fec <TIM_OC1_SetConfig+0xe0>)
 8005f6c:	4293      	cmp	r3, r2
 8005f6e:	d10c      	bne.n	8005f8a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005f70:	697b      	ldr	r3, [r7, #20]
 8005f72:	f023 0308 	bic.w	r3, r3, #8
 8005f76:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005f78:	683b      	ldr	r3, [r7, #0]
 8005f7a:	68db      	ldr	r3, [r3, #12]
 8005f7c:	697a      	ldr	r2, [r7, #20]
 8005f7e:	4313      	orrs	r3, r2
 8005f80:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005f82:	697b      	ldr	r3, [r7, #20]
 8005f84:	f023 0304 	bic.w	r3, r3, #4
 8005f88:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	4a16      	ldr	r2, [pc, #88]	@ (8005fe8 <TIM_OC1_SetConfig+0xdc>)
 8005f8e:	4293      	cmp	r3, r2
 8005f90:	d003      	beq.n	8005f9a <TIM_OC1_SetConfig+0x8e>
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	4a15      	ldr	r2, [pc, #84]	@ (8005fec <TIM_OC1_SetConfig+0xe0>)
 8005f96:	4293      	cmp	r3, r2
 8005f98:	d111      	bne.n	8005fbe <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005f9a:	693b      	ldr	r3, [r7, #16]
 8005f9c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005fa0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005fa2:	693b      	ldr	r3, [r7, #16]
 8005fa4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005fa8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005faa:	683b      	ldr	r3, [r7, #0]
 8005fac:	695b      	ldr	r3, [r3, #20]
 8005fae:	693a      	ldr	r2, [r7, #16]
 8005fb0:	4313      	orrs	r3, r2
 8005fb2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005fb4:	683b      	ldr	r3, [r7, #0]
 8005fb6:	699b      	ldr	r3, [r3, #24]
 8005fb8:	693a      	ldr	r2, [r7, #16]
 8005fba:	4313      	orrs	r3, r2
 8005fbc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	693a      	ldr	r2, [r7, #16]
 8005fc2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	68fa      	ldr	r2, [r7, #12]
 8005fc8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005fca:	683b      	ldr	r3, [r7, #0]
 8005fcc:	685a      	ldr	r2, [r3, #4]
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	697a      	ldr	r2, [r7, #20]
 8005fd6:	621a      	str	r2, [r3, #32]
}
 8005fd8:	bf00      	nop
 8005fda:	371c      	adds	r7, #28
 8005fdc:	46bd      	mov	sp, r7
 8005fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe2:	4770      	bx	lr
 8005fe4:	fffeff8f 	.word	0xfffeff8f
 8005fe8:	40010000 	.word	0x40010000
 8005fec:	40010400 	.word	0x40010400

08005ff0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005ff0:	b480      	push	{r7}
 8005ff2:	b087      	sub	sp, #28
 8005ff4:	af00      	add	r7, sp, #0
 8005ff6:	6078      	str	r0, [r7, #4]
 8005ff8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	6a1b      	ldr	r3, [r3, #32]
 8005ffe:	f023 0210 	bic.w	r2, r3, #16
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	6a1b      	ldr	r3, [r3, #32]
 800600a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	685b      	ldr	r3, [r3, #4]
 8006010:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	699b      	ldr	r3, [r3, #24]
 8006016:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006018:	68fa      	ldr	r2, [r7, #12]
 800601a:	4b2e      	ldr	r3, [pc, #184]	@ (80060d4 <TIM_OC2_SetConfig+0xe4>)
 800601c:	4013      	ands	r3, r2
 800601e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006026:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006028:	683b      	ldr	r3, [r7, #0]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	021b      	lsls	r3, r3, #8
 800602e:	68fa      	ldr	r2, [r7, #12]
 8006030:	4313      	orrs	r3, r2
 8006032:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006034:	697b      	ldr	r3, [r7, #20]
 8006036:	f023 0320 	bic.w	r3, r3, #32
 800603a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800603c:	683b      	ldr	r3, [r7, #0]
 800603e:	689b      	ldr	r3, [r3, #8]
 8006040:	011b      	lsls	r3, r3, #4
 8006042:	697a      	ldr	r2, [r7, #20]
 8006044:	4313      	orrs	r3, r2
 8006046:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	4a23      	ldr	r2, [pc, #140]	@ (80060d8 <TIM_OC2_SetConfig+0xe8>)
 800604c:	4293      	cmp	r3, r2
 800604e:	d003      	beq.n	8006058 <TIM_OC2_SetConfig+0x68>
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	4a22      	ldr	r2, [pc, #136]	@ (80060dc <TIM_OC2_SetConfig+0xec>)
 8006054:	4293      	cmp	r3, r2
 8006056:	d10d      	bne.n	8006074 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006058:	697b      	ldr	r3, [r7, #20]
 800605a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800605e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006060:	683b      	ldr	r3, [r7, #0]
 8006062:	68db      	ldr	r3, [r3, #12]
 8006064:	011b      	lsls	r3, r3, #4
 8006066:	697a      	ldr	r2, [r7, #20]
 8006068:	4313      	orrs	r3, r2
 800606a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800606c:	697b      	ldr	r3, [r7, #20]
 800606e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006072:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	4a18      	ldr	r2, [pc, #96]	@ (80060d8 <TIM_OC2_SetConfig+0xe8>)
 8006078:	4293      	cmp	r3, r2
 800607a:	d003      	beq.n	8006084 <TIM_OC2_SetConfig+0x94>
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	4a17      	ldr	r2, [pc, #92]	@ (80060dc <TIM_OC2_SetConfig+0xec>)
 8006080:	4293      	cmp	r3, r2
 8006082:	d113      	bne.n	80060ac <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006084:	693b      	ldr	r3, [r7, #16]
 8006086:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800608a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800608c:	693b      	ldr	r3, [r7, #16]
 800608e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006092:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006094:	683b      	ldr	r3, [r7, #0]
 8006096:	695b      	ldr	r3, [r3, #20]
 8006098:	009b      	lsls	r3, r3, #2
 800609a:	693a      	ldr	r2, [r7, #16]
 800609c:	4313      	orrs	r3, r2
 800609e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80060a0:	683b      	ldr	r3, [r7, #0]
 80060a2:	699b      	ldr	r3, [r3, #24]
 80060a4:	009b      	lsls	r3, r3, #2
 80060a6:	693a      	ldr	r2, [r7, #16]
 80060a8:	4313      	orrs	r3, r2
 80060aa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	693a      	ldr	r2, [r7, #16]
 80060b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	68fa      	ldr	r2, [r7, #12]
 80060b6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80060b8:	683b      	ldr	r3, [r7, #0]
 80060ba:	685a      	ldr	r2, [r3, #4]
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	697a      	ldr	r2, [r7, #20]
 80060c4:	621a      	str	r2, [r3, #32]
}
 80060c6:	bf00      	nop
 80060c8:	371c      	adds	r7, #28
 80060ca:	46bd      	mov	sp, r7
 80060cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d0:	4770      	bx	lr
 80060d2:	bf00      	nop
 80060d4:	feff8fff 	.word	0xfeff8fff
 80060d8:	40010000 	.word	0x40010000
 80060dc:	40010400 	.word	0x40010400

080060e0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80060e0:	b480      	push	{r7}
 80060e2:	b087      	sub	sp, #28
 80060e4:	af00      	add	r7, sp, #0
 80060e6:	6078      	str	r0, [r7, #4]
 80060e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	6a1b      	ldr	r3, [r3, #32]
 80060ee:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	6a1b      	ldr	r3, [r3, #32]
 80060fa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	685b      	ldr	r3, [r3, #4]
 8006100:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	69db      	ldr	r3, [r3, #28]
 8006106:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006108:	68fa      	ldr	r2, [r7, #12]
 800610a:	4b2d      	ldr	r3, [pc, #180]	@ (80061c0 <TIM_OC3_SetConfig+0xe0>)
 800610c:	4013      	ands	r3, r2
 800610e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	f023 0303 	bic.w	r3, r3, #3
 8006116:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006118:	683b      	ldr	r3, [r7, #0]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	68fa      	ldr	r2, [r7, #12]
 800611e:	4313      	orrs	r3, r2
 8006120:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006122:	697b      	ldr	r3, [r7, #20]
 8006124:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006128:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800612a:	683b      	ldr	r3, [r7, #0]
 800612c:	689b      	ldr	r3, [r3, #8]
 800612e:	021b      	lsls	r3, r3, #8
 8006130:	697a      	ldr	r2, [r7, #20]
 8006132:	4313      	orrs	r3, r2
 8006134:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	4a22      	ldr	r2, [pc, #136]	@ (80061c4 <TIM_OC3_SetConfig+0xe4>)
 800613a:	4293      	cmp	r3, r2
 800613c:	d003      	beq.n	8006146 <TIM_OC3_SetConfig+0x66>
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	4a21      	ldr	r2, [pc, #132]	@ (80061c8 <TIM_OC3_SetConfig+0xe8>)
 8006142:	4293      	cmp	r3, r2
 8006144:	d10d      	bne.n	8006162 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006146:	697b      	ldr	r3, [r7, #20]
 8006148:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800614c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800614e:	683b      	ldr	r3, [r7, #0]
 8006150:	68db      	ldr	r3, [r3, #12]
 8006152:	021b      	lsls	r3, r3, #8
 8006154:	697a      	ldr	r2, [r7, #20]
 8006156:	4313      	orrs	r3, r2
 8006158:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800615a:	697b      	ldr	r3, [r7, #20]
 800615c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006160:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	4a17      	ldr	r2, [pc, #92]	@ (80061c4 <TIM_OC3_SetConfig+0xe4>)
 8006166:	4293      	cmp	r3, r2
 8006168:	d003      	beq.n	8006172 <TIM_OC3_SetConfig+0x92>
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	4a16      	ldr	r2, [pc, #88]	@ (80061c8 <TIM_OC3_SetConfig+0xe8>)
 800616e:	4293      	cmp	r3, r2
 8006170:	d113      	bne.n	800619a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006172:	693b      	ldr	r3, [r7, #16]
 8006174:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006178:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800617a:	693b      	ldr	r3, [r7, #16]
 800617c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006180:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006182:	683b      	ldr	r3, [r7, #0]
 8006184:	695b      	ldr	r3, [r3, #20]
 8006186:	011b      	lsls	r3, r3, #4
 8006188:	693a      	ldr	r2, [r7, #16]
 800618a:	4313      	orrs	r3, r2
 800618c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800618e:	683b      	ldr	r3, [r7, #0]
 8006190:	699b      	ldr	r3, [r3, #24]
 8006192:	011b      	lsls	r3, r3, #4
 8006194:	693a      	ldr	r2, [r7, #16]
 8006196:	4313      	orrs	r3, r2
 8006198:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	693a      	ldr	r2, [r7, #16]
 800619e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	68fa      	ldr	r2, [r7, #12]
 80061a4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80061a6:	683b      	ldr	r3, [r7, #0]
 80061a8:	685a      	ldr	r2, [r3, #4]
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	697a      	ldr	r2, [r7, #20]
 80061b2:	621a      	str	r2, [r3, #32]
}
 80061b4:	bf00      	nop
 80061b6:	371c      	adds	r7, #28
 80061b8:	46bd      	mov	sp, r7
 80061ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061be:	4770      	bx	lr
 80061c0:	fffeff8f 	.word	0xfffeff8f
 80061c4:	40010000 	.word	0x40010000
 80061c8:	40010400 	.word	0x40010400

080061cc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80061cc:	b480      	push	{r7}
 80061ce:	b087      	sub	sp, #28
 80061d0:	af00      	add	r7, sp, #0
 80061d2:	6078      	str	r0, [r7, #4]
 80061d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	6a1b      	ldr	r3, [r3, #32]
 80061da:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	6a1b      	ldr	r3, [r3, #32]
 80061e6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	685b      	ldr	r3, [r3, #4]
 80061ec:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	69db      	ldr	r3, [r3, #28]
 80061f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80061f4:	68fa      	ldr	r2, [r7, #12]
 80061f6:	4b1e      	ldr	r3, [pc, #120]	@ (8006270 <TIM_OC4_SetConfig+0xa4>)
 80061f8:	4013      	ands	r3, r2
 80061fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006202:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006204:	683b      	ldr	r3, [r7, #0]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	021b      	lsls	r3, r3, #8
 800620a:	68fa      	ldr	r2, [r7, #12]
 800620c:	4313      	orrs	r3, r2
 800620e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006210:	693b      	ldr	r3, [r7, #16]
 8006212:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006216:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006218:	683b      	ldr	r3, [r7, #0]
 800621a:	689b      	ldr	r3, [r3, #8]
 800621c:	031b      	lsls	r3, r3, #12
 800621e:	693a      	ldr	r2, [r7, #16]
 8006220:	4313      	orrs	r3, r2
 8006222:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	4a13      	ldr	r2, [pc, #76]	@ (8006274 <TIM_OC4_SetConfig+0xa8>)
 8006228:	4293      	cmp	r3, r2
 800622a:	d003      	beq.n	8006234 <TIM_OC4_SetConfig+0x68>
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	4a12      	ldr	r2, [pc, #72]	@ (8006278 <TIM_OC4_SetConfig+0xac>)
 8006230:	4293      	cmp	r3, r2
 8006232:	d109      	bne.n	8006248 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006234:	697b      	ldr	r3, [r7, #20]
 8006236:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800623a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800623c:	683b      	ldr	r3, [r7, #0]
 800623e:	695b      	ldr	r3, [r3, #20]
 8006240:	019b      	lsls	r3, r3, #6
 8006242:	697a      	ldr	r2, [r7, #20]
 8006244:	4313      	orrs	r3, r2
 8006246:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	697a      	ldr	r2, [r7, #20]
 800624c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	68fa      	ldr	r2, [r7, #12]
 8006252:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006254:	683b      	ldr	r3, [r7, #0]
 8006256:	685a      	ldr	r2, [r3, #4]
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	693a      	ldr	r2, [r7, #16]
 8006260:	621a      	str	r2, [r3, #32]
}
 8006262:	bf00      	nop
 8006264:	371c      	adds	r7, #28
 8006266:	46bd      	mov	sp, r7
 8006268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800626c:	4770      	bx	lr
 800626e:	bf00      	nop
 8006270:	feff8fff 	.word	0xfeff8fff
 8006274:	40010000 	.word	0x40010000
 8006278:	40010400 	.word	0x40010400

0800627c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800627c:	b480      	push	{r7}
 800627e:	b087      	sub	sp, #28
 8006280:	af00      	add	r7, sp, #0
 8006282:	6078      	str	r0, [r7, #4]
 8006284:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	6a1b      	ldr	r3, [r3, #32]
 800628a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	6a1b      	ldr	r3, [r3, #32]
 8006296:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	685b      	ldr	r3, [r3, #4]
 800629c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80062a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80062a4:	68fa      	ldr	r2, [r7, #12]
 80062a6:	4b1b      	ldr	r3, [pc, #108]	@ (8006314 <TIM_OC5_SetConfig+0x98>)
 80062a8:	4013      	ands	r3, r2
 80062aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80062ac:	683b      	ldr	r3, [r7, #0]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	68fa      	ldr	r2, [r7, #12]
 80062b2:	4313      	orrs	r3, r2
 80062b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80062b6:	693b      	ldr	r3, [r7, #16]
 80062b8:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80062bc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80062be:	683b      	ldr	r3, [r7, #0]
 80062c0:	689b      	ldr	r3, [r3, #8]
 80062c2:	041b      	lsls	r3, r3, #16
 80062c4:	693a      	ldr	r2, [r7, #16]
 80062c6:	4313      	orrs	r3, r2
 80062c8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	4a12      	ldr	r2, [pc, #72]	@ (8006318 <TIM_OC5_SetConfig+0x9c>)
 80062ce:	4293      	cmp	r3, r2
 80062d0:	d003      	beq.n	80062da <TIM_OC5_SetConfig+0x5e>
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	4a11      	ldr	r2, [pc, #68]	@ (800631c <TIM_OC5_SetConfig+0xa0>)
 80062d6:	4293      	cmp	r3, r2
 80062d8:	d109      	bne.n	80062ee <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80062da:	697b      	ldr	r3, [r7, #20]
 80062dc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80062e0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80062e2:	683b      	ldr	r3, [r7, #0]
 80062e4:	695b      	ldr	r3, [r3, #20]
 80062e6:	021b      	lsls	r3, r3, #8
 80062e8:	697a      	ldr	r2, [r7, #20]
 80062ea:	4313      	orrs	r3, r2
 80062ec:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	697a      	ldr	r2, [r7, #20]
 80062f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	68fa      	ldr	r2, [r7, #12]
 80062f8:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80062fa:	683b      	ldr	r3, [r7, #0]
 80062fc:	685a      	ldr	r2, [r3, #4]
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	693a      	ldr	r2, [r7, #16]
 8006306:	621a      	str	r2, [r3, #32]
}
 8006308:	bf00      	nop
 800630a:	371c      	adds	r7, #28
 800630c:	46bd      	mov	sp, r7
 800630e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006312:	4770      	bx	lr
 8006314:	fffeff8f 	.word	0xfffeff8f
 8006318:	40010000 	.word	0x40010000
 800631c:	40010400 	.word	0x40010400

08006320 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006320:	b480      	push	{r7}
 8006322:	b087      	sub	sp, #28
 8006324:	af00      	add	r7, sp, #0
 8006326:	6078      	str	r0, [r7, #4]
 8006328:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	6a1b      	ldr	r3, [r3, #32]
 800632e:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	6a1b      	ldr	r3, [r3, #32]
 800633a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	685b      	ldr	r3, [r3, #4]
 8006340:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006346:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006348:	68fa      	ldr	r2, [r7, #12]
 800634a:	4b1c      	ldr	r3, [pc, #112]	@ (80063bc <TIM_OC6_SetConfig+0x9c>)
 800634c:	4013      	ands	r3, r2
 800634e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006350:	683b      	ldr	r3, [r7, #0]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	021b      	lsls	r3, r3, #8
 8006356:	68fa      	ldr	r2, [r7, #12]
 8006358:	4313      	orrs	r3, r2
 800635a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800635c:	693b      	ldr	r3, [r7, #16]
 800635e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006362:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006364:	683b      	ldr	r3, [r7, #0]
 8006366:	689b      	ldr	r3, [r3, #8]
 8006368:	051b      	lsls	r3, r3, #20
 800636a:	693a      	ldr	r2, [r7, #16]
 800636c:	4313      	orrs	r3, r2
 800636e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	4a13      	ldr	r2, [pc, #76]	@ (80063c0 <TIM_OC6_SetConfig+0xa0>)
 8006374:	4293      	cmp	r3, r2
 8006376:	d003      	beq.n	8006380 <TIM_OC6_SetConfig+0x60>
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	4a12      	ldr	r2, [pc, #72]	@ (80063c4 <TIM_OC6_SetConfig+0xa4>)
 800637c:	4293      	cmp	r3, r2
 800637e:	d109      	bne.n	8006394 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006380:	697b      	ldr	r3, [r7, #20]
 8006382:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006386:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006388:	683b      	ldr	r3, [r7, #0]
 800638a:	695b      	ldr	r3, [r3, #20]
 800638c:	029b      	lsls	r3, r3, #10
 800638e:	697a      	ldr	r2, [r7, #20]
 8006390:	4313      	orrs	r3, r2
 8006392:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	697a      	ldr	r2, [r7, #20]
 8006398:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	68fa      	ldr	r2, [r7, #12]
 800639e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80063a0:	683b      	ldr	r3, [r7, #0]
 80063a2:	685a      	ldr	r2, [r3, #4]
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	693a      	ldr	r2, [r7, #16]
 80063ac:	621a      	str	r2, [r3, #32]
}
 80063ae:	bf00      	nop
 80063b0:	371c      	adds	r7, #28
 80063b2:	46bd      	mov	sp, r7
 80063b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b8:	4770      	bx	lr
 80063ba:	bf00      	nop
 80063bc:	feff8fff 	.word	0xfeff8fff
 80063c0:	40010000 	.word	0x40010000
 80063c4:	40010400 	.word	0x40010400

080063c8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80063c8:	b480      	push	{r7}
 80063ca:	b087      	sub	sp, #28
 80063cc:	af00      	add	r7, sp, #0
 80063ce:	60f8      	str	r0, [r7, #12]
 80063d0:	60b9      	str	r1, [r7, #8]
 80063d2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	6a1b      	ldr	r3, [r3, #32]
 80063d8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	6a1b      	ldr	r3, [r3, #32]
 80063de:	f023 0201 	bic.w	r2, r3, #1
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	699b      	ldr	r3, [r3, #24]
 80063ea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80063ec:	693b      	ldr	r3, [r7, #16]
 80063ee:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80063f2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	011b      	lsls	r3, r3, #4
 80063f8:	693a      	ldr	r2, [r7, #16]
 80063fa:	4313      	orrs	r3, r2
 80063fc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80063fe:	697b      	ldr	r3, [r7, #20]
 8006400:	f023 030a 	bic.w	r3, r3, #10
 8006404:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006406:	697a      	ldr	r2, [r7, #20]
 8006408:	68bb      	ldr	r3, [r7, #8]
 800640a:	4313      	orrs	r3, r2
 800640c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	693a      	ldr	r2, [r7, #16]
 8006412:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	697a      	ldr	r2, [r7, #20]
 8006418:	621a      	str	r2, [r3, #32]
}
 800641a:	bf00      	nop
 800641c:	371c      	adds	r7, #28
 800641e:	46bd      	mov	sp, r7
 8006420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006424:	4770      	bx	lr

08006426 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006426:	b480      	push	{r7}
 8006428:	b087      	sub	sp, #28
 800642a:	af00      	add	r7, sp, #0
 800642c:	60f8      	str	r0, [r7, #12]
 800642e:	60b9      	str	r1, [r7, #8]
 8006430:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	6a1b      	ldr	r3, [r3, #32]
 8006436:	f023 0210 	bic.w	r2, r3, #16
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	699b      	ldr	r3, [r3, #24]
 8006442:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	6a1b      	ldr	r3, [r3, #32]
 8006448:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800644a:	697b      	ldr	r3, [r7, #20]
 800644c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006450:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	031b      	lsls	r3, r3, #12
 8006456:	697a      	ldr	r2, [r7, #20]
 8006458:	4313      	orrs	r3, r2
 800645a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800645c:	693b      	ldr	r3, [r7, #16]
 800645e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006462:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006464:	68bb      	ldr	r3, [r7, #8]
 8006466:	011b      	lsls	r3, r3, #4
 8006468:	693a      	ldr	r2, [r7, #16]
 800646a:	4313      	orrs	r3, r2
 800646c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	697a      	ldr	r2, [r7, #20]
 8006472:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	693a      	ldr	r2, [r7, #16]
 8006478:	621a      	str	r2, [r3, #32]
}
 800647a:	bf00      	nop
 800647c:	371c      	adds	r7, #28
 800647e:	46bd      	mov	sp, r7
 8006480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006484:	4770      	bx	lr

08006486 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006486:	b480      	push	{r7}
 8006488:	b085      	sub	sp, #20
 800648a:	af00      	add	r7, sp, #0
 800648c:	6078      	str	r0, [r7, #4]
 800648e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	689b      	ldr	r3, [r3, #8]
 8006494:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800649c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800649e:	683a      	ldr	r2, [r7, #0]
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	4313      	orrs	r3, r2
 80064a4:	f043 0307 	orr.w	r3, r3, #7
 80064a8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	68fa      	ldr	r2, [r7, #12]
 80064ae:	609a      	str	r2, [r3, #8]
}
 80064b0:	bf00      	nop
 80064b2:	3714      	adds	r7, #20
 80064b4:	46bd      	mov	sp, r7
 80064b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ba:	4770      	bx	lr

080064bc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80064bc:	b480      	push	{r7}
 80064be:	b087      	sub	sp, #28
 80064c0:	af00      	add	r7, sp, #0
 80064c2:	60f8      	str	r0, [r7, #12]
 80064c4:	60b9      	str	r1, [r7, #8]
 80064c6:	607a      	str	r2, [r7, #4]
 80064c8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	689b      	ldr	r3, [r3, #8]
 80064ce:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80064d0:	697b      	ldr	r3, [r7, #20]
 80064d2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80064d6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80064d8:	683b      	ldr	r3, [r7, #0]
 80064da:	021a      	lsls	r2, r3, #8
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	431a      	orrs	r2, r3
 80064e0:	68bb      	ldr	r3, [r7, #8]
 80064e2:	4313      	orrs	r3, r2
 80064e4:	697a      	ldr	r2, [r7, #20]
 80064e6:	4313      	orrs	r3, r2
 80064e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	697a      	ldr	r2, [r7, #20]
 80064ee:	609a      	str	r2, [r3, #8]
}
 80064f0:	bf00      	nop
 80064f2:	371c      	adds	r7, #28
 80064f4:	46bd      	mov	sp, r7
 80064f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064fa:	4770      	bx	lr

080064fc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80064fc:	b480      	push	{r7}
 80064fe:	b087      	sub	sp, #28
 8006500:	af00      	add	r7, sp, #0
 8006502:	60f8      	str	r0, [r7, #12]
 8006504:	60b9      	str	r1, [r7, #8]
 8006506:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006508:	68bb      	ldr	r3, [r7, #8]
 800650a:	f003 031f 	and.w	r3, r3, #31
 800650e:	2201      	movs	r2, #1
 8006510:	fa02 f303 	lsl.w	r3, r2, r3
 8006514:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	6a1a      	ldr	r2, [r3, #32]
 800651a:	697b      	ldr	r3, [r7, #20]
 800651c:	43db      	mvns	r3, r3
 800651e:	401a      	ands	r2, r3
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	6a1a      	ldr	r2, [r3, #32]
 8006528:	68bb      	ldr	r3, [r7, #8]
 800652a:	f003 031f 	and.w	r3, r3, #31
 800652e:	6879      	ldr	r1, [r7, #4]
 8006530:	fa01 f303 	lsl.w	r3, r1, r3
 8006534:	431a      	orrs	r2, r3
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	621a      	str	r2, [r3, #32]
}
 800653a:	bf00      	nop
 800653c:	371c      	adds	r7, #28
 800653e:	46bd      	mov	sp, r7
 8006540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006544:	4770      	bx	lr
	...

08006548 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006548:	b480      	push	{r7}
 800654a:	b085      	sub	sp, #20
 800654c:	af00      	add	r7, sp, #0
 800654e:	6078      	str	r0, [r7, #4]
 8006550:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006558:	2b01      	cmp	r3, #1
 800655a:	d101      	bne.n	8006560 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800655c:	2302      	movs	r3, #2
 800655e:	e06d      	b.n	800663c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	2201      	movs	r2, #1
 8006564:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	2202      	movs	r2, #2
 800656c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	685b      	ldr	r3, [r3, #4]
 8006576:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	689b      	ldr	r3, [r3, #8]
 800657e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	4a30      	ldr	r2, [pc, #192]	@ (8006648 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006586:	4293      	cmp	r3, r2
 8006588:	d004      	beq.n	8006594 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	4a2f      	ldr	r2, [pc, #188]	@ (800664c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006590:	4293      	cmp	r3, r2
 8006592:	d108      	bne.n	80065a6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800659a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800659c:	683b      	ldr	r3, [r7, #0]
 800659e:	685b      	ldr	r3, [r3, #4]
 80065a0:	68fa      	ldr	r2, [r7, #12]
 80065a2:	4313      	orrs	r3, r2
 80065a4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80065ac:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80065ae:	683b      	ldr	r3, [r7, #0]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	68fa      	ldr	r2, [r7, #12]
 80065b4:	4313      	orrs	r3, r2
 80065b6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	68fa      	ldr	r2, [r7, #12]
 80065be:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	4a20      	ldr	r2, [pc, #128]	@ (8006648 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80065c6:	4293      	cmp	r3, r2
 80065c8:	d022      	beq.n	8006610 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80065d2:	d01d      	beq.n	8006610 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	4a1d      	ldr	r2, [pc, #116]	@ (8006650 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80065da:	4293      	cmp	r3, r2
 80065dc:	d018      	beq.n	8006610 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	4a1c      	ldr	r2, [pc, #112]	@ (8006654 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80065e4:	4293      	cmp	r3, r2
 80065e6:	d013      	beq.n	8006610 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	4a1a      	ldr	r2, [pc, #104]	@ (8006658 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80065ee:	4293      	cmp	r3, r2
 80065f0:	d00e      	beq.n	8006610 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	4a15      	ldr	r2, [pc, #84]	@ (800664c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80065f8:	4293      	cmp	r3, r2
 80065fa:	d009      	beq.n	8006610 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	4a16      	ldr	r2, [pc, #88]	@ (800665c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006602:	4293      	cmp	r3, r2
 8006604:	d004      	beq.n	8006610 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	4a15      	ldr	r2, [pc, #84]	@ (8006660 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800660c:	4293      	cmp	r3, r2
 800660e:	d10c      	bne.n	800662a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006610:	68bb      	ldr	r3, [r7, #8]
 8006612:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006616:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006618:	683b      	ldr	r3, [r7, #0]
 800661a:	689b      	ldr	r3, [r3, #8]
 800661c:	68ba      	ldr	r2, [r7, #8]
 800661e:	4313      	orrs	r3, r2
 8006620:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	68ba      	ldr	r2, [r7, #8]
 8006628:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	2201      	movs	r2, #1
 800662e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	2200      	movs	r2, #0
 8006636:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800663a:	2300      	movs	r3, #0
}
 800663c:	4618      	mov	r0, r3
 800663e:	3714      	adds	r7, #20
 8006640:	46bd      	mov	sp, r7
 8006642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006646:	4770      	bx	lr
 8006648:	40010000 	.word	0x40010000
 800664c:	40010400 	.word	0x40010400
 8006650:	40000400 	.word	0x40000400
 8006654:	40000800 	.word	0x40000800
 8006658:	40000c00 	.word	0x40000c00
 800665c:	40014000 	.word	0x40014000
 8006660:	40001800 	.word	0x40001800

08006664 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006664:	b480      	push	{r7}
 8006666:	b085      	sub	sp, #20
 8006668:	af00      	add	r7, sp, #0
 800666a:	6078      	str	r0, [r7, #4]
 800666c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800666e:	2300      	movs	r3, #0
 8006670:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006678:	2b01      	cmp	r3, #1
 800667a:	d101      	bne.n	8006680 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800667c:	2302      	movs	r3, #2
 800667e:	e065      	b.n	800674c <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	2201      	movs	r2, #1
 8006684:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800668e:	683b      	ldr	r3, [r7, #0]
 8006690:	68db      	ldr	r3, [r3, #12]
 8006692:	4313      	orrs	r3, r2
 8006694:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800669c:	683b      	ldr	r3, [r7, #0]
 800669e:	689b      	ldr	r3, [r3, #8]
 80066a0:	4313      	orrs	r3, r2
 80066a2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80066aa:	683b      	ldr	r3, [r7, #0]
 80066ac:	685b      	ldr	r3, [r3, #4]
 80066ae:	4313      	orrs	r3, r2
 80066b0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80066b8:	683b      	ldr	r3, [r7, #0]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	4313      	orrs	r3, r2
 80066be:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80066c6:	683b      	ldr	r3, [r7, #0]
 80066c8:	691b      	ldr	r3, [r3, #16]
 80066ca:	4313      	orrs	r3, r2
 80066cc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80066d4:	683b      	ldr	r3, [r7, #0]
 80066d6:	695b      	ldr	r3, [r3, #20]
 80066d8:	4313      	orrs	r3, r2
 80066da:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80066e2:	683b      	ldr	r3, [r7, #0]
 80066e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80066e6:	4313      	orrs	r3, r2
 80066e8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 80066f0:	683b      	ldr	r3, [r7, #0]
 80066f2:	699b      	ldr	r3, [r3, #24]
 80066f4:	041b      	lsls	r3, r3, #16
 80066f6:	4313      	orrs	r3, r2
 80066f8:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	4a16      	ldr	r2, [pc, #88]	@ (8006758 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8006700:	4293      	cmp	r3, r2
 8006702:	d004      	beq.n	800670e <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	4a14      	ldr	r2, [pc, #80]	@ (800675c <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800670a:	4293      	cmp	r3, r2
 800670c:	d115      	bne.n	800673a <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8006714:	683b      	ldr	r3, [r7, #0]
 8006716:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006718:	051b      	lsls	r3, r3, #20
 800671a:	4313      	orrs	r3, r2
 800671c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8006724:	683b      	ldr	r3, [r7, #0]
 8006726:	69db      	ldr	r3, [r3, #28]
 8006728:	4313      	orrs	r3, r2
 800672a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8006732:	683b      	ldr	r3, [r7, #0]
 8006734:	6a1b      	ldr	r3, [r3, #32]
 8006736:	4313      	orrs	r3, r2
 8006738:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	68fa      	ldr	r2, [r7, #12]
 8006740:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	2200      	movs	r2, #0
 8006746:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800674a:	2300      	movs	r3, #0
}
 800674c:	4618      	mov	r0, r3
 800674e:	3714      	adds	r7, #20
 8006750:	46bd      	mov	sp, r7
 8006752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006756:	4770      	bx	lr
 8006758:	40010000 	.word	0x40010000
 800675c:	40010400 	.word	0x40010400

08006760 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006760:	b480      	push	{r7}
 8006762:	b083      	sub	sp, #12
 8006764:	af00      	add	r7, sp, #0
 8006766:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006768:	bf00      	nop
 800676a:	370c      	adds	r7, #12
 800676c:	46bd      	mov	sp, r7
 800676e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006772:	4770      	bx	lr

08006774 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006774:	b480      	push	{r7}
 8006776:	b083      	sub	sp, #12
 8006778:	af00      	add	r7, sp, #0
 800677a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800677c:	bf00      	nop
 800677e:	370c      	adds	r7, #12
 8006780:	46bd      	mov	sp, r7
 8006782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006786:	4770      	bx	lr

08006788 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006788:	b480      	push	{r7}
 800678a:	b083      	sub	sp, #12
 800678c:	af00      	add	r7, sp, #0
 800678e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006790:	bf00      	nop
 8006792:	370c      	adds	r7, #12
 8006794:	46bd      	mov	sp, r7
 8006796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800679a:	4770      	bx	lr

0800679c <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800679c:	b480      	push	{r7}
 800679e:	b083      	sub	sp, #12
 80067a0:	af00      	add	r7, sp, #0
 80067a2:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	f103 0208 	add.w	r2, r3, #8
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	f04f 32ff 	mov.w	r2, #4294967295
 80067b4:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	f103 0208 	add.w	r2, r3, #8
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	f103 0208 	add.w	r2, r3, #8
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	2200      	movs	r2, #0
 80067ce:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80067d0:	bf00      	nop
 80067d2:	370c      	adds	r7, #12
 80067d4:	46bd      	mov	sp, r7
 80067d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067da:	4770      	bx	lr

080067dc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80067dc:	b480      	push	{r7}
 80067de:	b083      	sub	sp, #12
 80067e0:	af00      	add	r7, sp, #0
 80067e2:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	2200      	movs	r2, #0
 80067e8:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80067ea:	bf00      	nop
 80067ec:	370c      	adds	r7, #12
 80067ee:	46bd      	mov	sp, r7
 80067f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f4:	4770      	bx	lr

080067f6 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 80067f6:	b480      	push	{r7}
 80067f8:	b085      	sub	sp, #20
 80067fa:	af00      	add	r7, sp, #0
 80067fc:	6078      	str	r0, [r7, #4]
 80067fe:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006800:	683b      	ldr	r3, [r7, #0]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8006806:	68bb      	ldr	r3, [r7, #8]
 8006808:	f1b3 3fff 	cmp.w	r3, #4294967295
 800680c:	d103      	bne.n	8006816 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	691b      	ldr	r3, [r3, #16]
 8006812:	60fb      	str	r3, [r7, #12]
 8006814:	e00c      	b.n	8006830 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	3308      	adds	r3, #8
 800681a:	60fb      	str	r3, [r7, #12]
 800681c:	e002      	b.n	8006824 <vListInsert+0x2e>
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	685b      	ldr	r3, [r3, #4]
 8006822:	60fb      	str	r3, [r7, #12]
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	685b      	ldr	r3, [r3, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	68ba      	ldr	r2, [r7, #8]
 800682c:	429a      	cmp	r2, r3
 800682e:	d2f6      	bcs.n	800681e <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	685a      	ldr	r2, [r3, #4]
 8006834:	683b      	ldr	r3, [r7, #0]
 8006836:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006838:	683b      	ldr	r3, [r7, #0]
 800683a:	685b      	ldr	r3, [r3, #4]
 800683c:	683a      	ldr	r2, [r7, #0]
 800683e:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8006840:	683b      	ldr	r3, [r7, #0]
 8006842:	68fa      	ldr	r2, [r7, #12]
 8006844:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	683a      	ldr	r2, [r7, #0]
 800684a:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 800684c:	683b      	ldr	r3, [r7, #0]
 800684e:	687a      	ldr	r2, [r7, #4]
 8006850:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	1c5a      	adds	r2, r3, #1
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	601a      	str	r2, [r3, #0]
}
 800685c:	bf00      	nop
 800685e:	3714      	adds	r7, #20
 8006860:	46bd      	mov	sp, r7
 8006862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006866:	4770      	bx	lr

08006868 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006868:	b480      	push	{r7}
 800686a:	b085      	sub	sp, #20
 800686c:	af00      	add	r7, sp, #0
 800686e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	691b      	ldr	r3, [r3, #16]
 8006874:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	685b      	ldr	r3, [r3, #4]
 800687a:	687a      	ldr	r2, [r7, #4]
 800687c:	6892      	ldr	r2, [r2, #8]
 800687e:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	689b      	ldr	r3, [r3, #8]
 8006884:	687a      	ldr	r2, [r7, #4]
 8006886:	6852      	ldr	r2, [r2, #4]
 8006888:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	685b      	ldr	r3, [r3, #4]
 800688e:	687a      	ldr	r2, [r7, #4]
 8006890:	429a      	cmp	r2, r3
 8006892:	d103      	bne.n	800689c <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	689a      	ldr	r2, [r3, #8]
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	2200      	movs	r2, #0
 80068a0:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	1e5a      	subs	r2, r3, #1
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	681b      	ldr	r3, [r3, #0]
}
 80068b0:	4618      	mov	r0, r3
 80068b2:	3714      	adds	r7, #20
 80068b4:	46bd      	mov	sp, r7
 80068b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ba:	4770      	bx	lr

080068bc <xQueueGenericReset>:
    }
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 80068bc:	b580      	push	{r7, lr}
 80068be:	b086      	sub	sp, #24
 80068c0:	af00      	add	r7, sp, #0
 80068c2:	6078      	str	r0, [r7, #4]
 80068c4:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 80068c6:	2301      	movs	r3, #1
 80068c8:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 80068ce:	693b      	ldr	r3, [r7, #16]
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d10d      	bne.n	80068f0 <xQueueGenericReset+0x34>
        __asm volatile
 80068d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068d8:	b672      	cpsid	i
 80068da:	f383 8811 	msr	BASEPRI, r3
 80068de:	f3bf 8f6f 	isb	sy
 80068e2:	f3bf 8f4f 	dsb	sy
 80068e6:	b662      	cpsie	i
 80068e8:	60fb      	str	r3, [r7, #12]
    }
 80068ea:	bf00      	nop
 80068ec:	bf00      	nop
 80068ee:	e7fd      	b.n	80068ec <xQueueGenericReset+0x30>

    if( ( pxQueue != NULL ) &&
 80068f0:	693b      	ldr	r3, [r7, #16]
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d05d      	beq.n	80069b2 <xQueueGenericReset+0xf6>
        ( pxQueue->uxLength >= 1U ) &&
 80068f6:	693b      	ldr	r3, [r7, #16]
 80068f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    if( ( pxQueue != NULL ) &&
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d059      	beq.n	80069b2 <xQueueGenericReset+0xf6>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 80068fe:	693b      	ldr	r3, [r7, #16]
 8006900:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006902:	693b      	ldr	r3, [r7, #16]
 8006904:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006906:	2100      	movs	r1, #0
 8006908:	fba3 2302 	umull	r2, r3, r3, r2
 800690c:	2b00      	cmp	r3, #0
 800690e:	d000      	beq.n	8006912 <xQueueGenericReset+0x56>
 8006910:	2101      	movs	r1, #1
 8006912:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 8006914:	2b00      	cmp	r3, #0
 8006916:	d14c      	bne.n	80069b2 <xQueueGenericReset+0xf6>
    {
        taskENTER_CRITICAL();
 8006918:	f002 fa22 	bl	8008d60 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800691c:	693b      	ldr	r3, [r7, #16]
 800691e:	681a      	ldr	r2, [r3, #0]
 8006920:	693b      	ldr	r3, [r7, #16]
 8006922:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006924:	6939      	ldr	r1, [r7, #16]
 8006926:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8006928:	fb01 f303 	mul.w	r3, r1, r3
 800692c:	441a      	add	r2, r3
 800692e:	693b      	ldr	r3, [r7, #16]
 8006930:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006932:	693b      	ldr	r3, [r7, #16]
 8006934:	2200      	movs	r2, #0
 8006936:	639a      	str	r2, [r3, #56]	@ 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8006938:	693b      	ldr	r3, [r7, #16]
 800693a:	681a      	ldr	r2, [r3, #0]
 800693c:	693b      	ldr	r3, [r7, #16]
 800693e:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006940:	693b      	ldr	r3, [r7, #16]
 8006942:	681a      	ldr	r2, [r3, #0]
 8006944:	693b      	ldr	r3, [r7, #16]
 8006946:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006948:	3b01      	subs	r3, #1
 800694a:	6939      	ldr	r1, [r7, #16]
 800694c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800694e:	fb01 f303 	mul.w	r3, r1, r3
 8006952:	441a      	add	r2, r3
 8006954:	693b      	ldr	r3, [r7, #16]
 8006956:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 8006958:	693b      	ldr	r3, [r7, #16]
 800695a:	22ff      	movs	r2, #255	@ 0xff
 800695c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 8006960:	693b      	ldr	r3, [r7, #16]
 8006962:	22ff      	movs	r2, #255	@ 0xff
 8006964:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

            if( xNewQueue == pdFALSE )
 8006968:	683b      	ldr	r3, [r7, #0]
 800696a:	2b00      	cmp	r3, #0
 800696c:	d114      	bne.n	8006998 <xQueueGenericReset+0xdc>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800696e:	693b      	ldr	r3, [r7, #16]
 8006970:	691b      	ldr	r3, [r3, #16]
 8006972:	2b00      	cmp	r3, #0
 8006974:	d01a      	beq.n	80069ac <xQueueGenericReset+0xf0>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006976:	693b      	ldr	r3, [r7, #16]
 8006978:	3310      	adds	r3, #16
 800697a:	4618      	mov	r0, r3
 800697c:	f001 fa3e 	bl	8007dfc <xTaskRemoveFromEventList>
 8006980:	4603      	mov	r3, r0
 8006982:	2b00      	cmp	r3, #0
 8006984:	d012      	beq.n	80069ac <xQueueGenericReset+0xf0>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8006986:	4b17      	ldr	r3, [pc, #92]	@ (80069e4 <xQueueGenericReset+0x128>)
 8006988:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800698c:	601a      	str	r2, [r3, #0]
 800698e:	f3bf 8f4f 	dsb	sy
 8006992:	f3bf 8f6f 	isb	sy
 8006996:	e009      	b.n	80069ac <xQueueGenericReset+0xf0>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006998:	693b      	ldr	r3, [r7, #16]
 800699a:	3310      	adds	r3, #16
 800699c:	4618      	mov	r0, r3
 800699e:	f7ff fefd 	bl	800679c <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80069a2:	693b      	ldr	r3, [r7, #16]
 80069a4:	3324      	adds	r3, #36	@ 0x24
 80069a6:	4618      	mov	r0, r3
 80069a8:	f7ff fef8 	bl	800679c <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 80069ac:	f002 fa0e 	bl	8008dcc <vPortExitCritical>
 80069b0:	e001      	b.n	80069b6 <xQueueGenericReset+0xfa>
    }
    else
    {
        xReturn = pdFAIL;
 80069b2:	2300      	movs	r3, #0
 80069b4:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 80069b6:	697b      	ldr	r3, [r7, #20]
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d10d      	bne.n	80069d8 <xQueueGenericReset+0x11c>
        __asm volatile
 80069bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069c0:	b672      	cpsid	i
 80069c2:	f383 8811 	msr	BASEPRI, r3
 80069c6:	f3bf 8f6f 	isb	sy
 80069ca:	f3bf 8f4f 	dsb	sy
 80069ce:	b662      	cpsie	i
 80069d0:	60bb      	str	r3, [r7, #8]
    }
 80069d2:	bf00      	nop
 80069d4:	bf00      	nop
 80069d6:	e7fd      	b.n	80069d4 <xQueueGenericReset+0x118>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 80069d8:	697b      	ldr	r3, [r7, #20]
}
 80069da:	4618      	mov	r0, r3
 80069dc:	3718      	adds	r7, #24
 80069de:	46bd      	mov	sp, r7
 80069e0:	bd80      	pop	{r7, pc}
 80069e2:	bf00      	nop
 80069e4:	e000ed04 	.word	0xe000ed04

080069e8 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 80069e8:	b580      	push	{r7, lr}
 80069ea:	b08a      	sub	sp, #40	@ 0x28
 80069ec:	af02      	add	r7, sp, #8
 80069ee:	60f8      	str	r0, [r7, #12]
 80069f0:	60b9      	str	r1, [r7, #8]
 80069f2:	4613      	mov	r3, r2
 80069f4:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 80069f6:	2300      	movs	r3, #0
 80069f8:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d02e      	beq.n	8006a5e <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8006a00:	2100      	movs	r1, #0
 8006a02:	68ba      	ldr	r2, [r7, #8]
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	fba3 2302 	umull	r2, r3, r3, r2
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d000      	beq.n	8006a10 <xQueueGenericCreate+0x28>
 8006a0e:	2101      	movs	r1, #1
 8006a10:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d123      	bne.n	8006a5e <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	68ba      	ldr	r2, [r7, #8]
 8006a1a:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8006a1e:	f113 0f49 	cmn.w	r3, #73	@ 0x49
 8006a22:	d81c      	bhi.n	8006a5e <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	68ba      	ldr	r2, [r7, #8]
 8006a28:	fb02 f303 	mul.w	r3, r2, r3
 8006a2c:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8006a2e:	69bb      	ldr	r3, [r7, #24]
 8006a30:	3348      	adds	r3, #72	@ 0x48
 8006a32:	4618      	mov	r0, r3
 8006a34:	f002 faca 	bl	8008fcc <pvPortMalloc>
 8006a38:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 8006a3a:	69fb      	ldr	r3, [r7, #28]
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d01f      	beq.n	8006a80 <xQueueGenericCreate+0x98>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8006a40:	69fb      	ldr	r3, [r7, #28]
 8006a42:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006a44:	697b      	ldr	r3, [r7, #20]
 8006a46:	3348      	adds	r3, #72	@ 0x48
 8006a48:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006a4a:	79fa      	ldrb	r2, [r7, #7]
 8006a4c:	69fb      	ldr	r3, [r7, #28]
 8006a4e:	9300      	str	r3, [sp, #0]
 8006a50:	4613      	mov	r3, r2
 8006a52:	697a      	ldr	r2, [r7, #20]
 8006a54:	68b9      	ldr	r1, [r7, #8]
 8006a56:	68f8      	ldr	r0, [r7, #12]
 8006a58:	f000 f817 	bl	8006a8a <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 8006a5c:	e010      	b.n	8006a80 <xQueueGenericCreate+0x98>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 8006a5e:	69fb      	ldr	r3, [r7, #28]
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d10d      	bne.n	8006a80 <xQueueGenericCreate+0x98>
        __asm volatile
 8006a64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a68:	b672      	cpsid	i
 8006a6a:	f383 8811 	msr	BASEPRI, r3
 8006a6e:	f3bf 8f6f 	isb	sy
 8006a72:	f3bf 8f4f 	dsb	sy
 8006a76:	b662      	cpsie	i
 8006a78:	613b      	str	r3, [r7, #16]
    }
 8006a7a:	bf00      	nop
 8006a7c:	bf00      	nop
 8006a7e:	e7fd      	b.n	8006a7c <xQueueGenericCreate+0x94>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8006a80:	69fb      	ldr	r3, [r7, #28]
    }
 8006a82:	4618      	mov	r0, r3
 8006a84:	3720      	adds	r7, #32
 8006a86:	46bd      	mov	sp, r7
 8006a88:	bd80      	pop	{r7, pc}

08006a8a <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8006a8a:	b580      	push	{r7, lr}
 8006a8c:	b084      	sub	sp, #16
 8006a8e:	af00      	add	r7, sp, #0
 8006a90:	60f8      	str	r0, [r7, #12]
 8006a92:	60b9      	str	r1, [r7, #8]
 8006a94:	607a      	str	r2, [r7, #4]
 8006a96:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8006a98:	68bb      	ldr	r3, [r7, #8]
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d103      	bne.n	8006aa6 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006a9e:	69bb      	ldr	r3, [r7, #24]
 8006aa0:	69ba      	ldr	r2, [r7, #24]
 8006aa2:	601a      	str	r2, [r3, #0]
 8006aa4:	e002      	b.n	8006aac <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006aa6:	69bb      	ldr	r3, [r7, #24]
 8006aa8:	687a      	ldr	r2, [r7, #4]
 8006aaa:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8006aac:	69bb      	ldr	r3, [r7, #24]
 8006aae:	68fa      	ldr	r2, [r7, #12]
 8006ab0:	63da      	str	r2, [r3, #60]	@ 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8006ab2:	69bb      	ldr	r3, [r7, #24]
 8006ab4:	68ba      	ldr	r2, [r7, #8]
 8006ab6:	641a      	str	r2, [r3, #64]	@ 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006ab8:	2101      	movs	r1, #1
 8006aba:	69b8      	ldr	r0, [r7, #24]
 8006abc:	f7ff fefe 	bl	80068bc <xQueueGenericReset>
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 8006ac0:	bf00      	nop
 8006ac2:	3710      	adds	r7, #16
 8006ac4:	46bd      	mov	sp, r7
 8006ac6:	bd80      	pop	{r7, pc}

08006ac8 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 8006ac8:	b580      	push	{r7, lr}
 8006aca:	b08e      	sub	sp, #56	@ 0x38
 8006acc:	af00      	add	r7, sp, #0
 8006ace:	60f8      	str	r0, [r7, #12]
 8006ad0:	60b9      	str	r1, [r7, #8]
 8006ad2:	607a      	str	r2, [r7, #4]
 8006ad4:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006ad6:	2300      	movs	r3, #0
 8006ad8:	637b      	str	r3, [r7, #52]	@ 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	633b      	str	r3, [r7, #48]	@ 0x30

    configASSERT( pxQueue );
 8006ade:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d10d      	bne.n	8006b00 <xQueueGenericSend+0x38>
        __asm volatile
 8006ae4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ae8:	b672      	cpsid	i
 8006aea:	f383 8811 	msr	BASEPRI, r3
 8006aee:	f3bf 8f6f 	isb	sy
 8006af2:	f3bf 8f4f 	dsb	sy
 8006af6:	b662      	cpsie	i
 8006af8:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
 8006afa:	bf00      	nop
 8006afc:	bf00      	nop
 8006afe:	e7fd      	b.n	8006afc <xQueueGenericSend+0x34>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006b00:	68bb      	ldr	r3, [r7, #8]
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d103      	bne.n	8006b0e <xQueueGenericSend+0x46>
 8006b06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d101      	bne.n	8006b12 <xQueueGenericSend+0x4a>
 8006b0e:	2301      	movs	r3, #1
 8006b10:	e000      	b.n	8006b14 <xQueueGenericSend+0x4c>
 8006b12:	2300      	movs	r3, #0
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d10d      	bne.n	8006b34 <xQueueGenericSend+0x6c>
        __asm volatile
 8006b18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b1c:	b672      	cpsid	i
 8006b1e:	f383 8811 	msr	BASEPRI, r3
 8006b22:	f3bf 8f6f 	isb	sy
 8006b26:	f3bf 8f4f 	dsb	sy
 8006b2a:	b662      	cpsie	i
 8006b2c:	627b      	str	r3, [r7, #36]	@ 0x24
    }
 8006b2e:	bf00      	nop
 8006b30:	bf00      	nop
 8006b32:	e7fd      	b.n	8006b30 <xQueueGenericSend+0x68>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006b34:	683b      	ldr	r3, [r7, #0]
 8006b36:	2b02      	cmp	r3, #2
 8006b38:	d103      	bne.n	8006b42 <xQueueGenericSend+0x7a>
 8006b3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b3c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006b3e:	2b01      	cmp	r3, #1
 8006b40:	d101      	bne.n	8006b46 <xQueueGenericSend+0x7e>
 8006b42:	2301      	movs	r3, #1
 8006b44:	e000      	b.n	8006b48 <xQueueGenericSend+0x80>
 8006b46:	2300      	movs	r3, #0
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d10d      	bne.n	8006b68 <xQueueGenericSend+0xa0>
        __asm volatile
 8006b4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b50:	b672      	cpsid	i
 8006b52:	f383 8811 	msr	BASEPRI, r3
 8006b56:	f3bf 8f6f 	isb	sy
 8006b5a:	f3bf 8f4f 	dsb	sy
 8006b5e:	b662      	cpsie	i
 8006b60:	623b      	str	r3, [r7, #32]
    }
 8006b62:	bf00      	nop
 8006b64:	bf00      	nop
 8006b66:	e7fd      	b.n	8006b64 <xQueueGenericSend+0x9c>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006b68:	f001 fb64 	bl	8008234 <xTaskGetSchedulerState>
 8006b6c:	4603      	mov	r3, r0
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d102      	bne.n	8006b78 <xQueueGenericSend+0xb0>
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d101      	bne.n	8006b7c <xQueueGenericSend+0xb4>
 8006b78:	2301      	movs	r3, #1
 8006b7a:	e000      	b.n	8006b7e <xQueueGenericSend+0xb6>
 8006b7c:	2300      	movs	r3, #0
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d10d      	bne.n	8006b9e <xQueueGenericSend+0xd6>
        __asm volatile
 8006b82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b86:	b672      	cpsid	i
 8006b88:	f383 8811 	msr	BASEPRI, r3
 8006b8c:	f3bf 8f6f 	isb	sy
 8006b90:	f3bf 8f4f 	dsb	sy
 8006b94:	b662      	cpsie	i
 8006b96:	61fb      	str	r3, [r7, #28]
    }
 8006b98:	bf00      	nop
 8006b9a:	bf00      	nop
 8006b9c:	e7fd      	b.n	8006b9a <xQueueGenericSend+0xd2>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8006b9e:	f002 f8df 	bl	8008d60 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006ba2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ba4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006ba6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ba8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006baa:	429a      	cmp	r2, r3
 8006bac:	d302      	bcc.n	8006bb4 <xQueueGenericSend+0xec>
 8006bae:	683b      	ldr	r3, [r7, #0]
 8006bb0:	2b02      	cmp	r3, #2
 8006bb2:	d129      	bne.n	8006c08 <xQueueGenericSend+0x140>
                        }
                    }
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006bb4:	683a      	ldr	r2, [r7, #0]
 8006bb6:	68b9      	ldr	r1, [r7, #8]
 8006bb8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006bba:	f000 fa37 	bl	800702c <prvCopyDataToQueue>
 8006bbe:	62f8      	str	r0, [r7, #44]	@ 0x2c

                    /* If there was a task waiting for data to arrive on the
                     * queue then unblock it now. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006bc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d010      	beq.n	8006bea <xQueueGenericSend+0x122>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006bc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bca:	3324      	adds	r3, #36	@ 0x24
 8006bcc:	4618      	mov	r0, r3
 8006bce:	f001 f915 	bl	8007dfc <xTaskRemoveFromEventList>
 8006bd2:	4603      	mov	r3, r0
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d013      	beq.n	8006c00 <xQueueGenericSend+0x138>
                        {
                            /* The unblocked task has a priority higher than
                             * our own so yield immediately.  Yes it is ok to do
                             * this from within the critical section - the kernel
                             * takes care of that. */
                            queueYIELD_IF_USING_PREEMPTION();
 8006bd8:	4b3f      	ldr	r3, [pc, #252]	@ (8006cd8 <xQueueGenericSend+0x210>)
 8006bda:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006bde:	601a      	str	r2, [r3, #0]
 8006be0:	f3bf 8f4f 	dsb	sy
 8006be4:	f3bf 8f6f 	isb	sy
 8006be8:	e00a      	b.n	8006c00 <xQueueGenericSend+0x138>
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                    else if( xYieldRequired != pdFALSE )
 8006bea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d007      	beq.n	8006c00 <xQueueGenericSend+0x138>
                    {
                        /* This path is a special case that will only get
                         * executed if the task was holding multiple mutexes and
                         * the mutexes were given back in an order that is
                         * different to that in which they were taken. */
                        queueYIELD_IF_USING_PREEMPTION();
 8006bf0:	4b39      	ldr	r3, [pc, #228]	@ (8006cd8 <xQueueGenericSend+0x210>)
 8006bf2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006bf6:	601a      	str	r2, [r3, #0]
 8006bf8:	f3bf 8f4f 	dsb	sy
 8006bfc:	f3bf 8f6f 	isb	sy
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8006c00:	f002 f8e4 	bl	8008dcc <vPortExitCritical>
                return pdPASS;
 8006c04:	2301      	movs	r3, #1
 8006c06:	e063      	b.n	8006cd0 <xQueueGenericSend+0x208>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d103      	bne.n	8006c16 <xQueueGenericSend+0x14e>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8006c0e:	f002 f8dd 	bl	8008dcc <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    return errQUEUE_FULL;
 8006c12:	2300      	movs	r3, #0
 8006c14:	e05c      	b.n	8006cd0 <xQueueGenericSend+0x208>
                }
                else if( xEntryTimeSet == pdFALSE )
 8006c16:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d106      	bne.n	8006c2a <xQueueGenericSend+0x162>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8006c1c:	f107 0314 	add.w	r3, r7, #20
 8006c20:	4618      	mov	r0, r3
 8006c22:	f001 f9c5 	bl	8007fb0 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8006c26:	2301      	movs	r3, #1
 8006c28:	637b      	str	r3, [r7, #52]	@ 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8006c2a:	f002 f8cf 	bl	8008dcc <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8006c2e:	f000 fdd5 	bl	80077dc <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8006c32:	f002 f895 	bl	8008d60 <vPortEnterCritical>
 8006c36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c38:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006c3c:	b25b      	sxtb	r3, r3
 8006c3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c42:	d103      	bne.n	8006c4c <xQueueGenericSend+0x184>
 8006c44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c46:	2200      	movs	r2, #0
 8006c48:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006c4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c4e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006c52:	b25b      	sxtb	r3, r3
 8006c54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c58:	d103      	bne.n	8006c62 <xQueueGenericSend+0x19a>
 8006c5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c5c:	2200      	movs	r2, #0
 8006c5e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006c62:	f002 f8b3 	bl	8008dcc <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006c66:	1d3a      	adds	r2, r7, #4
 8006c68:	f107 0314 	add.w	r3, r7, #20
 8006c6c:	4611      	mov	r1, r2
 8006c6e:	4618      	mov	r0, r3
 8006c70:	f001 f9b4 	bl	8007fdc <xTaskCheckForTimeOut>
 8006c74:	4603      	mov	r3, r0
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d124      	bne.n	8006cc4 <xQueueGenericSend+0x1fc>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006c7a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006c7c:	f000 face 	bl	800721c <prvIsQueueFull>
 8006c80:	4603      	mov	r3, r0
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d018      	beq.n	8006cb8 <xQueueGenericSend+0x1f0>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006c86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c88:	3310      	adds	r3, #16
 8006c8a:	687a      	ldr	r2, [r7, #4]
 8006c8c:	4611      	mov	r1, r2
 8006c8e:	4618      	mov	r0, r3
 8006c90:	f001 f844 	bl	8007d1c <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list. It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready list instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8006c94:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006c96:	f000 fa59 	bl	800714c <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in the ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 8006c9a:	f000 fdad 	bl	80077f8 <xTaskResumeAll>
 8006c9e:	4603      	mov	r3, r0
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	f47f af7c 	bne.w	8006b9e <xQueueGenericSend+0xd6>
                {
                    portYIELD_WITHIN_API();
 8006ca6:	4b0c      	ldr	r3, [pc, #48]	@ (8006cd8 <xQueueGenericSend+0x210>)
 8006ca8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006cac:	601a      	str	r2, [r3, #0]
 8006cae:	f3bf 8f4f 	dsb	sy
 8006cb2:	f3bf 8f6f 	isb	sy
 8006cb6:	e772      	b.n	8006b9e <xQueueGenericSend+0xd6>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8006cb8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006cba:	f000 fa47 	bl	800714c <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8006cbe:	f000 fd9b 	bl	80077f8 <xTaskResumeAll>
 8006cc2:	e76c      	b.n	8006b9e <xQueueGenericSend+0xd6>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8006cc4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006cc6:	f000 fa41 	bl	800714c <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8006cca:	f000 fd95 	bl	80077f8 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            return errQUEUE_FULL;
 8006cce:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 8006cd0:	4618      	mov	r0, r3
 8006cd2:	3738      	adds	r7, #56	@ 0x38
 8006cd4:	46bd      	mov	sp, r7
 8006cd6:	bd80      	pop	{r7, pc}
 8006cd8:	e000ed04 	.word	0xe000ed04

08006cdc <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 8006cdc:	b580      	push	{r7, lr}
 8006cde:	b092      	sub	sp, #72	@ 0x48
 8006ce0:	af00      	add	r7, sp, #0
 8006ce2:	60f8      	str	r0, [r7, #12]
 8006ce4:	60b9      	str	r1, [r7, #8]
 8006ce6:	607a      	str	r2, [r7, #4]
 8006ce8:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	643b      	str	r3, [r7, #64]	@ 0x40

    configASSERT( pxQueue );
 8006cee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d10d      	bne.n	8006d10 <xQueueGenericSendFromISR+0x34>
        __asm volatile
 8006cf4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006cf8:	b672      	cpsid	i
 8006cfa:	f383 8811 	msr	BASEPRI, r3
 8006cfe:	f3bf 8f6f 	isb	sy
 8006d02:	f3bf 8f4f 	dsb	sy
 8006d06:	b662      	cpsie	i
 8006d08:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
 8006d0a:	bf00      	nop
 8006d0c:	bf00      	nop
 8006d0e:	e7fd      	b.n	8006d0c <xQueueGenericSendFromISR+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006d10:	68bb      	ldr	r3, [r7, #8]
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d103      	bne.n	8006d1e <xQueueGenericSendFromISR+0x42>
 8006d16:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006d18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d101      	bne.n	8006d22 <xQueueGenericSendFromISR+0x46>
 8006d1e:	2301      	movs	r3, #1
 8006d20:	e000      	b.n	8006d24 <xQueueGenericSendFromISR+0x48>
 8006d22:	2300      	movs	r3, #0
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d10d      	bne.n	8006d44 <xQueueGenericSendFromISR+0x68>
        __asm volatile
 8006d28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d2c:	b672      	cpsid	i
 8006d2e:	f383 8811 	msr	BASEPRI, r3
 8006d32:	f3bf 8f6f 	isb	sy
 8006d36:	f3bf 8f4f 	dsb	sy
 8006d3a:	b662      	cpsie	i
 8006d3c:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
 8006d3e:	bf00      	nop
 8006d40:	bf00      	nop
 8006d42:	e7fd      	b.n	8006d40 <xQueueGenericSendFromISR+0x64>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006d44:	683b      	ldr	r3, [r7, #0]
 8006d46:	2b02      	cmp	r3, #2
 8006d48:	d103      	bne.n	8006d52 <xQueueGenericSendFromISR+0x76>
 8006d4a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006d4c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006d4e:	2b01      	cmp	r3, #1
 8006d50:	d101      	bne.n	8006d56 <xQueueGenericSendFromISR+0x7a>
 8006d52:	2301      	movs	r3, #1
 8006d54:	e000      	b.n	8006d58 <xQueueGenericSendFromISR+0x7c>
 8006d56:	2300      	movs	r3, #0
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d10d      	bne.n	8006d78 <xQueueGenericSendFromISR+0x9c>
        __asm volatile
 8006d5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d60:	b672      	cpsid	i
 8006d62:	f383 8811 	msr	BASEPRI, r3
 8006d66:	f3bf 8f6f 	isb	sy
 8006d6a:	f3bf 8f4f 	dsb	sy
 8006d6e:	b662      	cpsie	i
 8006d70:	627b      	str	r3, [r7, #36]	@ 0x24
    }
 8006d72:	bf00      	nop
 8006d74:	bf00      	nop
 8006d76:	e7fd      	b.n	8006d74 <xQueueGenericSendFromISR+0x98>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006d78:	f002 f8e2 	bl	8008f40 <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 8006d7c:	f3ef 8211 	mrs	r2, BASEPRI
 8006d80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d84:	b672      	cpsid	i
 8006d86:	f383 8811 	msr	BASEPRI, r3
 8006d8a:	f3bf 8f6f 	isb	sy
 8006d8e:	f3bf 8f4f 	dsb	sy
 8006d92:	b662      	cpsie	i
 8006d94:	623a      	str	r2, [r7, #32]
 8006d96:	61fb      	str	r3, [r7, #28]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 8006d98:	6a3b      	ldr	r3, [r7, #32]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006d9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006d9c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006d9e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006da0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006da2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006da4:	429a      	cmp	r2, r3
 8006da6:	d302      	bcc.n	8006dae <xQueueGenericSendFromISR+0xd2>
 8006da8:	683b      	ldr	r3, [r7, #0]
 8006daa:	2b02      	cmp	r3, #2
 8006dac:	d149      	bne.n	8006e42 <xQueueGenericSendFromISR+0x166>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 8006dae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006db0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006db4:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006db8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006dba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006dbc:	637b      	str	r3, [r7, #52]	@ 0x34
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006dbe:	683a      	ldr	r2, [r7, #0]
 8006dc0:	68b9      	ldr	r1, [r7, #8]
 8006dc2:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8006dc4:	f000 f932 	bl	800702c <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 8006dc8:	f997 303b 	ldrsb.w	r3, [r7, #59]	@ 0x3b
 8006dcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006dd0:	d112      	bne.n	8006df8 <xQueueGenericSendFromISR+0x11c>
                        }
                    }
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006dd2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006dd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d030      	beq.n	8006e3c <xQueueGenericSendFromISR+0x160>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006dda:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006ddc:	3324      	adds	r3, #36	@ 0x24
 8006dde:	4618      	mov	r0, r3
 8006de0:	f001 f80c 	bl	8007dfc <xTaskRemoveFromEventList>
 8006de4:	4603      	mov	r3, r0
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d028      	beq.n	8006e3c <xQueueGenericSendFromISR+0x160>
                        {
                            /* The task waiting has a higher priority so record that a
                             * context switch is required. */
                            if( pxHigherPriorityTaskWoken != NULL )
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d025      	beq.n	8006e3c <xQueueGenericSendFromISR+0x160>
                            {
                                *pxHigherPriorityTaskWoken = pdTRUE;
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	2201      	movs	r2, #1
 8006df4:	601a      	str	r2, [r3, #0]
 8006df6:	e021      	b.n	8006e3c <xQueueGenericSendFromISR+0x160>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                prvIncrementQueueTxLock( pxQueue, cTxLock );
 8006df8:	f000 fe0c 	bl	8007a14 <uxTaskGetNumberOfTasks>
 8006dfc:	6338      	str	r0, [r7, #48]	@ 0x30
 8006dfe:	f997 303b 	ldrsb.w	r3, [r7, #59]	@ 0x3b
 8006e02:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006e04:	429a      	cmp	r2, r3
 8006e06:	d919      	bls.n	8006e3c <xQueueGenericSendFromISR+0x160>
 8006e08:	f997 303b 	ldrsb.w	r3, [r7, #59]	@ 0x3b
 8006e0c:	2b7f      	cmp	r3, #127	@ 0x7f
 8006e0e:	d10d      	bne.n	8006e2c <xQueueGenericSendFromISR+0x150>
        __asm volatile
 8006e10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e14:	b672      	cpsid	i
 8006e16:	f383 8811 	msr	BASEPRI, r3
 8006e1a:	f3bf 8f6f 	isb	sy
 8006e1e:	f3bf 8f4f 	dsb	sy
 8006e22:	b662      	cpsie	i
 8006e24:	61bb      	str	r3, [r7, #24]
    }
 8006e26:	bf00      	nop
 8006e28:	bf00      	nop
 8006e2a:	e7fd      	b.n	8006e28 <xQueueGenericSendFromISR+0x14c>
 8006e2c:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8006e30:	3301      	adds	r3, #1
 8006e32:	b2db      	uxtb	r3, r3
 8006e34:	b25a      	sxtb	r2, r3
 8006e36:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006e38:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
            }

            xReturn = pdPASS;
 8006e3c:	2301      	movs	r3, #1
 8006e3e:	647b      	str	r3, [r7, #68]	@ 0x44
        {
 8006e40:	e001      	b.n	8006e46 <xQueueGenericSendFromISR+0x16a>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
            xReturn = errQUEUE_FULL;
 8006e42:	2300      	movs	r3, #0
 8006e44:	647b      	str	r3, [r7, #68]	@ 0x44
 8006e46:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006e48:	617b      	str	r3, [r7, #20]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8006e4a:	697b      	ldr	r3, [r7, #20]
 8006e4c:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8006e50:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8006e52:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
}
 8006e54:	4618      	mov	r0, r3
 8006e56:	3748      	adds	r7, #72	@ 0x48
 8006e58:	46bd      	mov	sp, r7
 8006e5a:	bd80      	pop	{r7, pc}

08006e5c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8006e5c:	b580      	push	{r7, lr}
 8006e5e:	b08c      	sub	sp, #48	@ 0x30
 8006e60:	af00      	add	r7, sp, #0
 8006e62:	60f8      	str	r0, [r7, #12]
 8006e64:	60b9      	str	r1, [r7, #8]
 8006e66:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8006e68:	2300      	movs	r3, #0
 8006e6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	62bb      	str	r3, [r7, #40]	@ 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8006e70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d10d      	bne.n	8006e92 <xQueueReceive+0x36>
        __asm volatile
 8006e76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e7a:	b672      	cpsid	i
 8006e7c:	f383 8811 	msr	BASEPRI, r3
 8006e80:	f3bf 8f6f 	isb	sy
 8006e84:	f3bf 8f4f 	dsb	sy
 8006e88:	b662      	cpsie	i
 8006e8a:	623b      	str	r3, [r7, #32]
    }
 8006e8c:	bf00      	nop
 8006e8e:	bf00      	nop
 8006e90:	e7fd      	b.n	8006e8e <xQueueReceive+0x32>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006e92:	68bb      	ldr	r3, [r7, #8]
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d103      	bne.n	8006ea0 <xQueueReceive+0x44>
 8006e98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d101      	bne.n	8006ea4 <xQueueReceive+0x48>
 8006ea0:	2301      	movs	r3, #1
 8006ea2:	e000      	b.n	8006ea6 <xQueueReceive+0x4a>
 8006ea4:	2300      	movs	r3, #0
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d10d      	bne.n	8006ec6 <xQueueReceive+0x6a>
        __asm volatile
 8006eaa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006eae:	b672      	cpsid	i
 8006eb0:	f383 8811 	msr	BASEPRI, r3
 8006eb4:	f3bf 8f6f 	isb	sy
 8006eb8:	f3bf 8f4f 	dsb	sy
 8006ebc:	b662      	cpsie	i
 8006ebe:	61fb      	str	r3, [r7, #28]
    }
 8006ec0:	bf00      	nop
 8006ec2:	bf00      	nop
 8006ec4:	e7fd      	b.n	8006ec2 <xQueueReceive+0x66>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006ec6:	f001 f9b5 	bl	8008234 <xTaskGetSchedulerState>
 8006eca:	4603      	mov	r3, r0
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d102      	bne.n	8006ed6 <xQueueReceive+0x7a>
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d101      	bne.n	8006eda <xQueueReceive+0x7e>
 8006ed6:	2301      	movs	r3, #1
 8006ed8:	e000      	b.n	8006edc <xQueueReceive+0x80>
 8006eda:	2300      	movs	r3, #0
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d10d      	bne.n	8006efc <xQueueReceive+0xa0>
        __asm volatile
 8006ee0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ee4:	b672      	cpsid	i
 8006ee6:	f383 8811 	msr	BASEPRI, r3
 8006eea:	f3bf 8f6f 	isb	sy
 8006eee:	f3bf 8f4f 	dsb	sy
 8006ef2:	b662      	cpsie	i
 8006ef4:	61bb      	str	r3, [r7, #24]
    }
 8006ef6:	bf00      	nop
 8006ef8:	bf00      	nop
 8006efa:	e7fd      	b.n	8006ef8 <xQueueReceive+0x9c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8006efc:	f001 ff30 	bl	8008d60 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006f00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f04:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006f06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d01f      	beq.n	8006f4c <xQueueReceive+0xf0>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006f0c:	68b9      	ldr	r1, [r7, #8]
 8006f0e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006f10:	f000 f8f6 	bl	8007100 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006f14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f16:	1e5a      	subs	r2, r3, #1
 8006f18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f1a:	639a      	str	r2, [r3, #56]	@ 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006f1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f1e:	691b      	ldr	r3, [r3, #16]
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d00f      	beq.n	8006f44 <xQueueReceive+0xe8>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006f24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f26:	3310      	adds	r3, #16
 8006f28:	4618      	mov	r0, r3
 8006f2a:	f000 ff67 	bl	8007dfc <xTaskRemoveFromEventList>
 8006f2e:	4603      	mov	r3, r0
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d007      	beq.n	8006f44 <xQueueReceive+0xe8>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8006f34:	4b3c      	ldr	r3, [pc, #240]	@ (8007028 <xQueueReceive+0x1cc>)
 8006f36:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006f3a:	601a      	str	r2, [r3, #0]
 8006f3c:	f3bf 8f4f 	dsb	sy
 8006f40:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8006f44:	f001 ff42 	bl	8008dcc <vPortExitCritical>
                return pdPASS;
 8006f48:	2301      	movs	r3, #1
 8006f4a:	e069      	b.n	8007020 <xQueueReceive+0x1c4>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d103      	bne.n	8006f5a <xQueueReceive+0xfe>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8006f52:	f001 ff3b 	bl	8008dcc <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 8006f56:	2300      	movs	r3, #0
 8006f58:	e062      	b.n	8007020 <xQueueReceive+0x1c4>
                }
                else if( xEntryTimeSet == pdFALSE )
 8006f5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d106      	bne.n	8006f6e <xQueueReceive+0x112>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8006f60:	f107 0310 	add.w	r3, r7, #16
 8006f64:	4618      	mov	r0, r3
 8006f66:	f001 f823 	bl	8007fb0 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8006f6a:	2301      	movs	r3, #1
 8006f6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8006f6e:	f001 ff2d 	bl	8008dcc <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8006f72:	f000 fc33 	bl	80077dc <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8006f76:	f001 fef3 	bl	8008d60 <vPortEnterCritical>
 8006f7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f7c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006f80:	b25b      	sxtb	r3, r3
 8006f82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f86:	d103      	bne.n	8006f90 <xQueueReceive+0x134>
 8006f88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f8a:	2200      	movs	r2, #0
 8006f8c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006f90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f92:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006f96:	b25b      	sxtb	r3, r3
 8006f98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f9c:	d103      	bne.n	8006fa6 <xQueueReceive+0x14a>
 8006f9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006fa0:	2200      	movs	r2, #0
 8006fa2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006fa6:	f001 ff11 	bl	8008dcc <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006faa:	1d3a      	adds	r2, r7, #4
 8006fac:	f107 0310 	add.w	r3, r7, #16
 8006fb0:	4611      	mov	r1, r2
 8006fb2:	4618      	mov	r0, r3
 8006fb4:	f001 f812 	bl	8007fdc <xTaskCheckForTimeOut>
 8006fb8:	4603      	mov	r3, r0
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d123      	bne.n	8007006 <xQueueReceive+0x1aa>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006fbe:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006fc0:	f000 f916 	bl	80071f0 <prvIsQueueEmpty>
 8006fc4:	4603      	mov	r3, r0
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d017      	beq.n	8006ffa <xQueueReceive+0x19e>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006fca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006fcc:	3324      	adds	r3, #36	@ 0x24
 8006fce:	687a      	ldr	r2, [r7, #4]
 8006fd0:	4611      	mov	r1, r2
 8006fd2:	4618      	mov	r0, r3
 8006fd4:	f000 fea2 	bl	8007d1c <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8006fd8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006fda:	f000 f8b7 	bl	800714c <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8006fde:	f000 fc0b 	bl	80077f8 <xTaskResumeAll>
 8006fe2:	4603      	mov	r3, r0
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d189      	bne.n	8006efc <xQueueReceive+0xa0>
                {
                    portYIELD_WITHIN_API();
 8006fe8:	4b0f      	ldr	r3, [pc, #60]	@ (8007028 <xQueueReceive+0x1cc>)
 8006fea:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006fee:	601a      	str	r2, [r3, #0]
 8006ff0:	f3bf 8f4f 	dsb	sy
 8006ff4:	f3bf 8f6f 	isb	sy
 8006ff8:	e780      	b.n	8006efc <xQueueReceive+0xa0>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8006ffa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006ffc:	f000 f8a6 	bl	800714c <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8007000:	f000 fbfa 	bl	80077f8 <xTaskResumeAll>
 8007004:	e77a      	b.n	8006efc <xQueueReceive+0xa0>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8007006:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007008:	f000 f8a0 	bl	800714c <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 800700c:	f000 fbf4 	bl	80077f8 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007010:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007012:	f000 f8ed 	bl	80071f0 <prvIsQueueEmpty>
 8007016:	4603      	mov	r3, r0
 8007018:	2b00      	cmp	r3, #0
 800701a:	f43f af6f 	beq.w	8006efc <xQueueReceive+0xa0>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 800701e:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8007020:	4618      	mov	r0, r3
 8007022:	3730      	adds	r7, #48	@ 0x30
 8007024:	46bd      	mov	sp, r7
 8007026:	bd80      	pop	{r7, pc}
 8007028:	e000ed04 	.word	0xe000ed04

0800702c <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 800702c:	b580      	push	{r7, lr}
 800702e:	b086      	sub	sp, #24
 8007030:	af00      	add	r7, sp, #0
 8007032:	60f8      	str	r0, [r7, #12]
 8007034:	60b9      	str	r1, [r7, #8]
 8007036:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8007038:	2300      	movs	r3, #0
 800703a:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007040:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007046:	2b00      	cmp	r3, #0
 8007048:	d10d      	bne.n	8007066 <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
        {
            if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	2b00      	cmp	r3, #0
 8007050:	d14d      	bne.n	80070ee <prvCopyDataToQueue+0xc2>
            {
                /* The mutex is no longer being held. */
                xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	689b      	ldr	r3, [r3, #8]
 8007056:	4618      	mov	r0, r3
 8007058:	f001 f90a 	bl	8008270 <xTaskPriorityDisinherit>
 800705c:	6178      	str	r0, [r7, #20]
                pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	2200      	movs	r2, #0
 8007062:	609a      	str	r2, [r3, #8]
 8007064:	e043      	b.n	80070ee <prvCopyDataToQueue+0xc2>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	2b00      	cmp	r3, #0
 800706a:	d119      	bne.n	80070a0 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	6858      	ldr	r0, [r3, #4]
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007074:	461a      	mov	r2, r3
 8007076:	68b9      	ldr	r1, [r7, #8]
 8007078:	f002 f9ac 	bl	80093d4 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	685a      	ldr	r2, [r3, #4]
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007084:	441a      	add	r2, r3
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	685a      	ldr	r2, [r3, #4]
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	689b      	ldr	r3, [r3, #8]
 8007092:	429a      	cmp	r2, r3
 8007094:	d32b      	bcc.n	80070ee <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	681a      	ldr	r2, [r3, #0]
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	605a      	str	r2, [r3, #4]
 800709e:	e026      	b.n	80070ee <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	68d8      	ldr	r0, [r3, #12]
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80070a8:	461a      	mov	r2, r3
 80070aa:	68b9      	ldr	r1, [r7, #8]
 80070ac:	f002 f992 	bl	80093d4 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	68da      	ldr	r2, [r3, #12]
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80070b8:	425b      	negs	r3, r3
 80070ba:	441a      	add	r2, r3
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	68da      	ldr	r2, [r3, #12]
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	429a      	cmp	r2, r3
 80070ca:	d207      	bcs.n	80070dc <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	689a      	ldr	r2, [r3, #8]
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80070d4:	425b      	negs	r3, r3
 80070d6:	441a      	add	r2, r3
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	2b02      	cmp	r3, #2
 80070e0:	d105      	bne.n	80070ee <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80070e2:	693b      	ldr	r3, [r7, #16]
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d002      	beq.n	80070ee <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 80070e8:	693b      	ldr	r3, [r7, #16]
 80070ea:	3b01      	subs	r3, #1
 80070ec:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80070ee:	693b      	ldr	r3, [r7, #16]
 80070f0:	1c5a      	adds	r2, r3, #1
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	639a      	str	r2, [r3, #56]	@ 0x38

    return xReturn;
 80070f6:	697b      	ldr	r3, [r7, #20]
}
 80070f8:	4618      	mov	r0, r3
 80070fa:	3718      	adds	r7, #24
 80070fc:	46bd      	mov	sp, r7
 80070fe:	bd80      	pop	{r7, pc}

08007100 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8007100:	b580      	push	{r7, lr}
 8007102:	b082      	sub	sp, #8
 8007104:	af00      	add	r7, sp, #0
 8007106:	6078      	str	r0, [r7, #4]
 8007108:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800710e:	2b00      	cmp	r3, #0
 8007110:	d018      	beq.n	8007144 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	68da      	ldr	r2, [r3, #12]
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800711a:	441a      	add	r2, r3
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	68da      	ldr	r2, [r3, #12]
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	689b      	ldr	r3, [r3, #8]
 8007128:	429a      	cmp	r2, r3
 800712a:	d303      	bcc.n	8007134 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681a      	ldr	r2, [r3, #0]
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	68d9      	ldr	r1, [r3, #12]
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800713c:	461a      	mov	r2, r3
 800713e:	6838      	ldr	r0, [r7, #0]
 8007140:	f002 f948 	bl	80093d4 <memcpy>
    }
}
 8007144:	bf00      	nop
 8007146:	3708      	adds	r7, #8
 8007148:	46bd      	mov	sp, r7
 800714a:	bd80      	pop	{r7, pc}

0800714c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800714c:	b580      	push	{r7, lr}
 800714e:	b084      	sub	sp, #16
 8007150:	af00      	add	r7, sp, #0
 8007152:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8007154:	f001 fe04 	bl	8008d60 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800715e:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8007160:	e011      	b.n	8007186 <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007166:	2b00      	cmp	r3, #0
 8007168:	d012      	beq.n	8007190 <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	3324      	adds	r3, #36	@ 0x24
 800716e:	4618      	mov	r0, r3
 8007170:	f000 fe44 	bl	8007dfc <xTaskRemoveFromEventList>
 8007174:	4603      	mov	r3, r0
 8007176:	2b00      	cmp	r3, #0
 8007178:	d001      	beq.n	800717e <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 800717a:	f000 ff9b 	bl	80080b4 <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 800717e:	7bfb      	ldrb	r3, [r7, #15]
 8007180:	3b01      	subs	r3, #1
 8007182:	b2db      	uxtb	r3, r3
 8007184:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8007186:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800718a:	2b00      	cmp	r3, #0
 800718c:	dce9      	bgt.n	8007162 <prvUnlockQueue+0x16>
 800718e:	e000      	b.n	8007192 <prvUnlockQueue+0x46>
                    break;
 8007190:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	22ff      	movs	r2, #255	@ 0xff
 8007196:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
    taskEXIT_CRITICAL();
 800719a:	f001 fe17 	bl	8008dcc <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 800719e:	f001 fddf 	bl	8008d60 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80071a8:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 80071aa:	e011      	b.n	80071d0 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	691b      	ldr	r3, [r3, #16]
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d012      	beq.n	80071da <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	3310      	adds	r3, #16
 80071b8:	4618      	mov	r0, r3
 80071ba:	f000 fe1f 	bl	8007dfc <xTaskRemoveFromEventList>
 80071be:	4603      	mov	r3, r0
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d001      	beq.n	80071c8 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 80071c4:	f000 ff76 	bl	80080b4 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 80071c8:	7bbb      	ldrb	r3, [r7, #14]
 80071ca:	3b01      	subs	r3, #1
 80071cc:	b2db      	uxtb	r3, r3
 80071ce:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 80071d0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	dce9      	bgt.n	80071ac <prvUnlockQueue+0x60>
 80071d8:	e000      	b.n	80071dc <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 80071da:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	22ff      	movs	r2, #255	@ 0xff
 80071e0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    }
    taskEXIT_CRITICAL();
 80071e4:	f001 fdf2 	bl	8008dcc <vPortExitCritical>
}
 80071e8:	bf00      	nop
 80071ea:	3710      	adds	r7, #16
 80071ec:	46bd      	mov	sp, r7
 80071ee:	bd80      	pop	{r7, pc}

080071f0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 80071f0:	b580      	push	{r7, lr}
 80071f2:	b084      	sub	sp, #16
 80071f4:	af00      	add	r7, sp, #0
 80071f6:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 80071f8:	f001 fdb2 	bl	8008d60 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007200:	2b00      	cmp	r3, #0
 8007202:	d102      	bne.n	800720a <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8007204:	2301      	movs	r3, #1
 8007206:	60fb      	str	r3, [r7, #12]
 8007208:	e001      	b.n	800720e <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 800720a:	2300      	movs	r3, #0
 800720c:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 800720e:	f001 fddd 	bl	8008dcc <vPortExitCritical>

    return xReturn;
 8007212:	68fb      	ldr	r3, [r7, #12]
}
 8007214:	4618      	mov	r0, r3
 8007216:	3710      	adds	r7, #16
 8007218:	46bd      	mov	sp, r7
 800721a:	bd80      	pop	{r7, pc}

0800721c <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 800721c:	b580      	push	{r7, lr}
 800721e:	b084      	sub	sp, #16
 8007220:	af00      	add	r7, sp, #0
 8007222:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8007224:	f001 fd9c 	bl	8008d60 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007230:	429a      	cmp	r2, r3
 8007232:	d102      	bne.n	800723a <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8007234:	2301      	movs	r3, #1
 8007236:	60fb      	str	r3, [r7, #12]
 8007238:	e001      	b.n	800723e <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 800723a:	2300      	movs	r3, #0
 800723c:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 800723e:	f001 fdc5 	bl	8008dcc <vPortExitCritical>

    return xReturn;
 8007242:	68fb      	ldr	r3, [r7, #12]
}
 8007244:	4618      	mov	r0, r3
 8007246:	3710      	adds	r7, #16
 8007248:	46bd      	mov	sp, r7
 800724a:	bd80      	pop	{r7, pc}

0800724c <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 800724c:	b480      	push	{r7}
 800724e:	b087      	sub	sp, #28
 8007250:	af00      	add	r7, sp, #0
 8007252:	6078      	str	r0, [r7, #4]
 8007254:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 8007256:	2300      	movs	r3, #0
 8007258:	613b      	str	r3, [r7, #16]

        configASSERT( xQueue );
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	2b00      	cmp	r3, #0
 800725e:	d10d      	bne.n	800727c <vQueueAddToRegistry+0x30>
        __asm volatile
 8007260:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007264:	b672      	cpsid	i
 8007266:	f383 8811 	msr	BASEPRI, r3
 800726a:	f3bf 8f6f 	isb	sy
 800726e:	f3bf 8f4f 	dsb	sy
 8007272:	b662      	cpsie	i
 8007274:	60fb      	str	r3, [r7, #12]
    }
 8007276:	bf00      	nop
 8007278:	bf00      	nop
 800727a:	e7fd      	b.n	8007278 <vQueueAddToRegistry+0x2c>

        if( pcQueueName != NULL )
 800727c:	683b      	ldr	r3, [r7, #0]
 800727e:	2b00      	cmp	r3, #0
 8007280:	d024      	beq.n	80072cc <vQueueAddToRegistry+0x80>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007282:	2300      	movs	r3, #0
 8007284:	617b      	str	r3, [r7, #20]
 8007286:	e01e      	b.n	80072c6 <vQueueAddToRegistry+0x7a>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 8007288:	4a18      	ldr	r2, [pc, #96]	@ (80072ec <vQueueAddToRegistry+0xa0>)
 800728a:	697b      	ldr	r3, [r7, #20]
 800728c:	00db      	lsls	r3, r3, #3
 800728e:	4413      	add	r3, r2
 8007290:	685b      	ldr	r3, [r3, #4]
 8007292:	687a      	ldr	r2, [r7, #4]
 8007294:	429a      	cmp	r2, r3
 8007296:	d105      	bne.n	80072a4 <vQueueAddToRegistry+0x58>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8007298:	697b      	ldr	r3, [r7, #20]
 800729a:	00db      	lsls	r3, r3, #3
 800729c:	4a13      	ldr	r2, [pc, #76]	@ (80072ec <vQueueAddToRegistry+0xa0>)
 800729e:	4413      	add	r3, r2
 80072a0:	613b      	str	r3, [r7, #16]
                    break;
 80072a2:	e013      	b.n	80072cc <vQueueAddToRegistry+0x80>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 80072a4:	693b      	ldr	r3, [r7, #16]
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d10a      	bne.n	80072c0 <vQueueAddToRegistry+0x74>
 80072aa:	4a10      	ldr	r2, [pc, #64]	@ (80072ec <vQueueAddToRegistry+0xa0>)
 80072ac:	697b      	ldr	r3, [r7, #20]
 80072ae:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d104      	bne.n	80072c0 <vQueueAddToRegistry+0x74>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 80072b6:	697b      	ldr	r3, [r7, #20]
 80072b8:	00db      	lsls	r3, r3, #3
 80072ba:	4a0c      	ldr	r2, [pc, #48]	@ (80072ec <vQueueAddToRegistry+0xa0>)
 80072bc:	4413      	add	r3, r2
 80072be:	613b      	str	r3, [r7, #16]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80072c0:	697b      	ldr	r3, [r7, #20]
 80072c2:	3301      	adds	r3, #1
 80072c4:	617b      	str	r3, [r7, #20]
 80072c6:	697b      	ldr	r3, [r7, #20]
 80072c8:	2b07      	cmp	r3, #7
 80072ca:	d9dd      	bls.n	8007288 <vQueueAddToRegistry+0x3c>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 80072cc:	693b      	ldr	r3, [r7, #16]
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d005      	beq.n	80072de <vQueueAddToRegistry+0x92>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 80072d2:	693b      	ldr	r3, [r7, #16]
 80072d4:	683a      	ldr	r2, [r7, #0]
 80072d6:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 80072d8:	693b      	ldr	r3, [r7, #16]
 80072da:	687a      	ldr	r2, [r7, #4]
 80072dc:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
        }
    }
 80072de:	bf00      	nop
 80072e0:	371c      	adds	r7, #28
 80072e2:	46bd      	mov	sp, r7
 80072e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e8:	4770      	bx	lr
 80072ea:	bf00      	nop
 80072ec:	200002fc 	.word	0x200002fc

080072f0 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 80072f0:	b580      	push	{r7, lr}
 80072f2:	b086      	sub	sp, #24
 80072f4:	af00      	add	r7, sp, #0
 80072f6:	60f8      	str	r0, [r7, #12]
 80072f8:	60b9      	str	r1, [r7, #8]
 80072fa:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8007300:	f001 fd2e 	bl	8008d60 <vPortEnterCritical>
 8007304:	697b      	ldr	r3, [r7, #20]
 8007306:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800730a:	b25b      	sxtb	r3, r3
 800730c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007310:	d103      	bne.n	800731a <vQueueWaitForMessageRestricted+0x2a>
 8007312:	697b      	ldr	r3, [r7, #20]
 8007314:	2200      	movs	r2, #0
 8007316:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800731a:	697b      	ldr	r3, [r7, #20]
 800731c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007320:	b25b      	sxtb	r3, r3
 8007322:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007326:	d103      	bne.n	8007330 <vQueueWaitForMessageRestricted+0x40>
 8007328:	697b      	ldr	r3, [r7, #20]
 800732a:	2200      	movs	r2, #0
 800732c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007330:	f001 fd4c 	bl	8008dcc <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007334:	697b      	ldr	r3, [r7, #20]
 8007336:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007338:	2b00      	cmp	r3, #0
 800733a:	d106      	bne.n	800734a <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800733c:	697b      	ldr	r3, [r7, #20]
 800733e:	3324      	adds	r3, #36	@ 0x24
 8007340:	687a      	ldr	r2, [r7, #4]
 8007342:	68b9      	ldr	r1, [r7, #8]
 8007344:	4618      	mov	r0, r3
 8007346:	f000 fd11 	bl	8007d6c <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 800734a:	6978      	ldr	r0, [r7, #20]
 800734c:	f7ff fefe 	bl	800714c <prvUnlockQueue>
    }
 8007350:	bf00      	nop
 8007352:	3718      	adds	r7, #24
 8007354:	46bd      	mov	sp, r7
 8007356:	bd80      	pop	{r7, pc}

08007358 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8007358:	b580      	push	{r7, lr}
 800735a:	b08c      	sub	sp, #48	@ 0x30
 800735c:	af04      	add	r7, sp, #16
 800735e:	60f8      	str	r0, [r7, #12]
 8007360:	60b9      	str	r1, [r7, #8]
 8007362:	603b      	str	r3, [r7, #0]
 8007364:	4613      	mov	r3, r2
 8007366:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007368:	88fb      	ldrh	r3, [r7, #6]
 800736a:	009b      	lsls	r3, r3, #2
 800736c:	4618      	mov	r0, r3
 800736e:	f001 fe2d 	bl	8008fcc <pvPortMalloc>
 8007372:	6178      	str	r0, [r7, #20]

            if( pxStack != NULL )
 8007374:	697b      	ldr	r3, [r7, #20]
 8007376:	2b00      	cmp	r3, #0
 8007378:	d013      	beq.n	80073a2 <xTaskCreate+0x4a>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800737a:	2054      	movs	r0, #84	@ 0x54
 800737c:	f001 fe26 	bl	8008fcc <pvPortMalloc>
 8007380:	61f8      	str	r0, [r7, #28]

                if( pxNewTCB != NULL )
 8007382:	69fb      	ldr	r3, [r7, #28]
 8007384:	2b00      	cmp	r3, #0
 8007386:	d008      	beq.n	800739a <xTaskCreate+0x42>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8007388:	2254      	movs	r2, #84	@ 0x54
 800738a:	2100      	movs	r1, #0
 800738c:	69f8      	ldr	r0, [r7, #28]
 800738e:	f001 fff5 	bl	800937c <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 8007392:	69fb      	ldr	r3, [r7, #28]
 8007394:	697a      	ldr	r2, [r7, #20]
 8007396:	631a      	str	r2, [r3, #48]	@ 0x30
 8007398:	e005      	b.n	80073a6 <xTaskCreate+0x4e>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 800739a:	6978      	ldr	r0, [r7, #20]
 800739c:	f001 fed6 	bl	800914c <vPortFree>
 80073a0:	e001      	b.n	80073a6 <xTaskCreate+0x4e>
                }
            }
            else
            {
                pxNewTCB = NULL;
 80073a2:	2300      	movs	r3, #0
 80073a4:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 80073a6:	69fb      	ldr	r3, [r7, #28]
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d013      	beq.n	80073d4 <xTaskCreate+0x7c>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80073ac:	88fa      	ldrh	r2, [r7, #6]
 80073ae:	2300      	movs	r3, #0
 80073b0:	9303      	str	r3, [sp, #12]
 80073b2:	69fb      	ldr	r3, [r7, #28]
 80073b4:	9302      	str	r3, [sp, #8]
 80073b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80073b8:	9301      	str	r3, [sp, #4]
 80073ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80073bc:	9300      	str	r3, [sp, #0]
 80073be:	683b      	ldr	r3, [r7, #0]
 80073c0:	68b9      	ldr	r1, [r7, #8]
 80073c2:	68f8      	ldr	r0, [r7, #12]
 80073c4:	f000 f80e 	bl	80073e4 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 80073c8:	69f8      	ldr	r0, [r7, #28]
 80073ca:	f000 f897 	bl	80074fc <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 80073ce:	2301      	movs	r3, #1
 80073d0:	61bb      	str	r3, [r7, #24]
 80073d2:	e002      	b.n	80073da <xTaskCreate+0x82>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80073d4:	f04f 33ff 	mov.w	r3, #4294967295
 80073d8:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 80073da:	69bb      	ldr	r3, [r7, #24]
    }
 80073dc:	4618      	mov	r0, r3
 80073de:	3720      	adds	r7, #32
 80073e0:	46bd      	mov	sp, r7
 80073e2:	bd80      	pop	{r7, pc}

080073e4 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 80073e4:	b580      	push	{r7, lr}
 80073e6:	b088      	sub	sp, #32
 80073e8:	af00      	add	r7, sp, #0
 80073ea:	60f8      	str	r0, [r7, #12]
 80073ec:	60b9      	str	r1, [r7, #8]
 80073ee:	607a      	str	r2, [r7, #4]
 80073f0:	603b      	str	r3, [r7, #0]
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80073f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073f4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80073f6:	6879      	ldr	r1, [r7, #4]
 80073f8:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 80073fc:	440b      	add	r3, r1
 80073fe:	009b      	lsls	r3, r3, #2
 8007400:	4413      	add	r3, r2
 8007402:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007404:	69bb      	ldr	r3, [r7, #24]
 8007406:	f023 0307 	bic.w	r3, r3, #7
 800740a:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800740c:	69bb      	ldr	r3, [r7, #24]
 800740e:	f003 0307 	and.w	r3, r3, #7
 8007412:	2b00      	cmp	r3, #0
 8007414:	d00d      	beq.n	8007432 <prvInitialiseNewTask+0x4e>
        __asm volatile
 8007416:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800741a:	b672      	cpsid	i
 800741c:	f383 8811 	msr	BASEPRI, r3
 8007420:	f3bf 8f6f 	isb	sy
 8007424:	f3bf 8f4f 	dsb	sy
 8007428:	b662      	cpsie	i
 800742a:	617b      	str	r3, [r7, #20]
    }
 800742c:	bf00      	nop
 800742e:	bf00      	nop
 8007430:	e7fd      	b.n	800742e <prvInitialiseNewTask+0x4a>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8007432:	68bb      	ldr	r3, [r7, #8]
 8007434:	2b00      	cmp	r3, #0
 8007436:	d01e      	beq.n	8007476 <prvInitialiseNewTask+0x92>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007438:	2300      	movs	r3, #0
 800743a:	61fb      	str	r3, [r7, #28]
 800743c:	e012      	b.n	8007464 <prvInitialiseNewTask+0x80>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800743e:	68ba      	ldr	r2, [r7, #8]
 8007440:	69fb      	ldr	r3, [r7, #28]
 8007442:	4413      	add	r3, r2
 8007444:	7819      	ldrb	r1, [r3, #0]
 8007446:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007448:	69fb      	ldr	r3, [r7, #28]
 800744a:	4413      	add	r3, r2
 800744c:	3334      	adds	r3, #52	@ 0x34
 800744e:	460a      	mov	r2, r1
 8007450:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8007452:	68ba      	ldr	r2, [r7, #8]
 8007454:	69fb      	ldr	r3, [r7, #28]
 8007456:	4413      	add	r3, r2
 8007458:	781b      	ldrb	r3, [r3, #0]
 800745a:	2b00      	cmp	r3, #0
 800745c:	d006      	beq.n	800746c <prvInitialiseNewTask+0x88>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800745e:	69fb      	ldr	r3, [r7, #28]
 8007460:	3301      	adds	r3, #1
 8007462:	61fb      	str	r3, [r7, #28]
 8007464:	69fb      	ldr	r3, [r7, #28]
 8007466:	2b0f      	cmp	r3, #15
 8007468:	d9e9      	bls.n	800743e <prvInitialiseNewTask+0x5a>
 800746a:	e000      	b.n	800746e <prvInitialiseNewTask+0x8a>
            {
                break;
 800746c:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800746e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007470:	2200      	movs	r2, #0
 8007472:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8007476:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007478:	2b04      	cmp	r3, #4
 800747a:	d90d      	bls.n	8007498 <prvInitialiseNewTask+0xb4>
        __asm volatile
 800747c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007480:	b672      	cpsid	i
 8007482:	f383 8811 	msr	BASEPRI, r3
 8007486:	f3bf 8f6f 	isb	sy
 800748a:	f3bf 8f4f 	dsb	sy
 800748e:	b662      	cpsie	i
 8007490:	613b      	str	r3, [r7, #16]
    }
 8007492:	bf00      	nop
 8007494:	bf00      	nop
 8007496:	e7fd      	b.n	8007494 <prvInitialiseNewTask+0xb0>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007498:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800749a:	2b04      	cmp	r3, #4
 800749c:	d901      	bls.n	80074a2 <prvInitialiseNewTask+0xbe>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800749e:	2304      	movs	r3, #4
 80074a0:	62bb      	str	r3, [r7, #40]	@ 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 80074a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074a4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80074a6:	62da      	str	r2, [r3, #44]	@ 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 80074a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074aa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80074ac:	645a      	str	r2, [r3, #68]	@ 0x44
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80074ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074b0:	3304      	adds	r3, #4
 80074b2:	4618      	mov	r0, r3
 80074b4:	f7ff f992 	bl	80067dc <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80074b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074ba:	3318      	adds	r3, #24
 80074bc:	4618      	mov	r0, r3
 80074be:	f7ff f98d 	bl	80067dc <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80074c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074c4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80074c6:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80074c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074ca:	f1c3 0205 	rsb	r2, r3, #5
 80074ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074d0:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80074d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074d4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80074d6:	625a      	str	r2, [r3, #36]	@ 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80074d8:	683a      	ldr	r2, [r7, #0]
 80074da:	68f9      	ldr	r1, [r7, #12]
 80074dc:	69b8      	ldr	r0, [r7, #24]
 80074de:	f001 fb2d 	bl	8008b3c <pxPortInitialiseStack>
 80074e2:	4602      	mov	r2, r0
 80074e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074e6:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 80074e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d002      	beq.n	80074f4 <prvInitialiseNewTask+0x110>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80074ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80074f0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80074f2:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80074f4:	bf00      	nop
 80074f6:	3720      	adds	r7, #32
 80074f8:	46bd      	mov	sp, r7
 80074fa:	bd80      	pop	{r7, pc}

080074fc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 80074fc:	b580      	push	{r7, lr}
 80074fe:	b084      	sub	sp, #16
 8007500:	af00      	add	r7, sp, #0
 8007502:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8007504:	f001 fc2c 	bl	8008d60 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8007508:	4b3e      	ldr	r3, [pc, #248]	@ (8007604 <prvAddNewTaskToReadyList+0x108>)
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	3301      	adds	r3, #1
 800750e:	4a3d      	ldr	r2, [pc, #244]	@ (8007604 <prvAddNewTaskToReadyList+0x108>)
 8007510:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8007512:	4b3d      	ldr	r3, [pc, #244]	@ (8007608 <prvAddNewTaskToReadyList+0x10c>)
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	2b00      	cmp	r3, #0
 8007518:	d109      	bne.n	800752e <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 800751a:	4a3b      	ldr	r2, [pc, #236]	@ (8007608 <prvAddNewTaskToReadyList+0x10c>)
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007520:	4b38      	ldr	r3, [pc, #224]	@ (8007604 <prvAddNewTaskToReadyList+0x108>)
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	2b01      	cmp	r3, #1
 8007526:	d110      	bne.n	800754a <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8007528:	f000 fdea 	bl	8008100 <prvInitialiseTaskLists>
 800752c:	e00d      	b.n	800754a <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 800752e:	4b37      	ldr	r3, [pc, #220]	@ (800760c <prvAddNewTaskToReadyList+0x110>)
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	2b00      	cmp	r3, #0
 8007534:	d109      	bne.n	800754a <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007536:	4b34      	ldr	r3, [pc, #208]	@ (8007608 <prvAddNewTaskToReadyList+0x10c>)
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007540:	429a      	cmp	r2, r3
 8007542:	d802      	bhi.n	800754a <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8007544:	4a30      	ldr	r2, [pc, #192]	@ (8007608 <prvAddNewTaskToReadyList+0x10c>)
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 800754a:	4b31      	ldr	r3, [pc, #196]	@ (8007610 <prvAddNewTaskToReadyList+0x114>)
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	3301      	adds	r3, #1
 8007550:	4a2f      	ldr	r2, [pc, #188]	@ (8007610 <prvAddNewTaskToReadyList+0x114>)
 8007552:	6013      	str	r3, [r2, #0]
            pxNewTCB->uxTCBNumber = uxTaskNumber;
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007558:	2201      	movs	r2, #1
 800755a:	409a      	lsls	r2, r3
 800755c:	4b2d      	ldr	r3, [pc, #180]	@ (8007614 <prvAddNewTaskToReadyList+0x118>)
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	4313      	orrs	r3, r2
 8007562:	4a2c      	ldr	r2, [pc, #176]	@ (8007614 <prvAddNewTaskToReadyList+0x118>)
 8007564:	6013      	str	r3, [r2, #0]
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800756a:	492b      	ldr	r1, [pc, #172]	@ (8007618 <prvAddNewTaskToReadyList+0x11c>)
 800756c:	4613      	mov	r3, r2
 800756e:	009b      	lsls	r3, r3, #2
 8007570:	4413      	add	r3, r2
 8007572:	009b      	lsls	r3, r3, #2
 8007574:	440b      	add	r3, r1
 8007576:	3304      	adds	r3, #4
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	60fb      	str	r3, [r7, #12]
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	68fa      	ldr	r2, [r7, #12]
 8007580:	609a      	str	r2, [r3, #8]
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	689a      	ldr	r2, [r3, #8]
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	60da      	str	r2, [r3, #12]
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	689b      	ldr	r3, [r3, #8]
 800758e:	687a      	ldr	r2, [r7, #4]
 8007590:	3204      	adds	r2, #4
 8007592:	605a      	str	r2, [r3, #4]
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	1d1a      	adds	r2, r3, #4
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	609a      	str	r2, [r3, #8]
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80075a0:	4613      	mov	r3, r2
 80075a2:	009b      	lsls	r3, r3, #2
 80075a4:	4413      	add	r3, r2
 80075a6:	009b      	lsls	r3, r3, #2
 80075a8:	4a1b      	ldr	r2, [pc, #108]	@ (8007618 <prvAddNewTaskToReadyList+0x11c>)
 80075aa:	441a      	add	r2, r3
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	615a      	str	r2, [r3, #20]
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80075b4:	4918      	ldr	r1, [pc, #96]	@ (8007618 <prvAddNewTaskToReadyList+0x11c>)
 80075b6:	4613      	mov	r3, r2
 80075b8:	009b      	lsls	r3, r3, #2
 80075ba:	4413      	add	r3, r2
 80075bc:	009b      	lsls	r3, r3, #2
 80075be:	440b      	add	r3, r1
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	1c59      	adds	r1, r3, #1
 80075c4:	4814      	ldr	r0, [pc, #80]	@ (8007618 <prvAddNewTaskToReadyList+0x11c>)
 80075c6:	4613      	mov	r3, r2
 80075c8:	009b      	lsls	r3, r3, #2
 80075ca:	4413      	add	r3, r2
 80075cc:	009b      	lsls	r3, r3, #2
 80075ce:	4403      	add	r3, r0
 80075d0:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 80075d2:	f001 fbfb 	bl	8008dcc <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 80075d6:	4b0d      	ldr	r3, [pc, #52]	@ (800760c <prvAddNewTaskToReadyList+0x110>)
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d00e      	beq.n	80075fc <prvAddNewTaskToReadyList+0x100>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80075de:	4b0a      	ldr	r3, [pc, #40]	@ (8007608 <prvAddNewTaskToReadyList+0x10c>)
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075e8:	429a      	cmp	r2, r3
 80075ea:	d207      	bcs.n	80075fc <prvAddNewTaskToReadyList+0x100>
        {
            taskYIELD_IF_USING_PREEMPTION();
 80075ec:	4b0b      	ldr	r3, [pc, #44]	@ (800761c <prvAddNewTaskToReadyList+0x120>)
 80075ee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80075f2:	601a      	str	r2, [r3, #0]
 80075f4:	f3bf 8f4f 	dsb	sy
 80075f8:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80075fc:	bf00      	nop
 80075fe:	3710      	adds	r7, #16
 8007600:	46bd      	mov	sp, r7
 8007602:	bd80      	pop	{r7, pc}
 8007604:	20000414 	.word	0x20000414
 8007608:	2000033c 	.word	0x2000033c
 800760c:	20000420 	.word	0x20000420
 8007610:	20000430 	.word	0x20000430
 8007614:	2000041c 	.word	0x2000041c
 8007618:	20000340 	.word	0x20000340
 800761c:	e000ed04 	.word	0xe000ed04

08007620 <xTaskDelayUntil>:

#if ( INCLUDE_xTaskDelayUntil == 1 )

    BaseType_t xTaskDelayUntil( TickType_t * const pxPreviousWakeTime,
                                const TickType_t xTimeIncrement )
    {
 8007620:	b580      	push	{r7, lr}
 8007622:	b08a      	sub	sp, #40	@ 0x28
 8007624:	af00      	add	r7, sp, #0
 8007626:	6078      	str	r0, [r7, #4]
 8007628:	6039      	str	r1, [r7, #0]
        TickType_t xTimeToWake;
        BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 800762a:	2300      	movs	r3, #0
 800762c:	627b      	str	r3, [r7, #36]	@ 0x24

        configASSERT( pxPreviousWakeTime );
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	2b00      	cmp	r3, #0
 8007632:	d10d      	bne.n	8007650 <xTaskDelayUntil+0x30>
        __asm volatile
 8007634:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007638:	b672      	cpsid	i
 800763a:	f383 8811 	msr	BASEPRI, r3
 800763e:	f3bf 8f6f 	isb	sy
 8007642:	f3bf 8f4f 	dsb	sy
 8007646:	b662      	cpsie	i
 8007648:	617b      	str	r3, [r7, #20]
    }
 800764a:	bf00      	nop
 800764c:	bf00      	nop
 800764e:	e7fd      	b.n	800764c <xTaskDelayUntil+0x2c>
        configASSERT( ( xTimeIncrement > 0U ) );
 8007650:	683b      	ldr	r3, [r7, #0]
 8007652:	2b00      	cmp	r3, #0
 8007654:	d10d      	bne.n	8007672 <xTaskDelayUntil+0x52>
        __asm volatile
 8007656:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800765a:	b672      	cpsid	i
 800765c:	f383 8811 	msr	BASEPRI, r3
 8007660:	f3bf 8f6f 	isb	sy
 8007664:	f3bf 8f4f 	dsb	sy
 8007668:	b662      	cpsie	i
 800766a:	613b      	str	r3, [r7, #16]
    }
 800766c:	bf00      	nop
 800766e:	bf00      	nop
 8007670:	e7fd      	b.n	800766e <xTaskDelayUntil+0x4e>
        configASSERT( uxSchedulerSuspended == 0 );
 8007672:	4b2c      	ldr	r3, [pc, #176]	@ (8007724 <xTaskDelayUntil+0x104>)
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	2b00      	cmp	r3, #0
 8007678:	d00d      	beq.n	8007696 <xTaskDelayUntil+0x76>
        __asm volatile
 800767a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800767e:	b672      	cpsid	i
 8007680:	f383 8811 	msr	BASEPRI, r3
 8007684:	f3bf 8f6f 	isb	sy
 8007688:	f3bf 8f4f 	dsb	sy
 800768c:	b662      	cpsie	i
 800768e:	60fb      	str	r3, [r7, #12]
    }
 8007690:	bf00      	nop
 8007692:	bf00      	nop
 8007694:	e7fd      	b.n	8007692 <xTaskDelayUntil+0x72>

        vTaskSuspendAll();
 8007696:	f000 f8a1 	bl	80077dc <vTaskSuspendAll>
        {
            /* Minor optimisation.  The tick count cannot change in this
             * block. */
            const TickType_t xConstTickCount = xTickCount;
 800769a:	4b23      	ldr	r3, [pc, #140]	@ (8007728 <xTaskDelayUntil+0x108>)
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	623b      	str	r3, [r7, #32]

            /* Generate the tick time at which the task wants to wake. */
            xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	683a      	ldr	r2, [r7, #0]
 80076a6:	4413      	add	r3, r2
 80076a8:	61fb      	str	r3, [r7, #28]

            if( xConstTickCount < *pxPreviousWakeTime )
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	6a3a      	ldr	r2, [r7, #32]
 80076b0:	429a      	cmp	r2, r3
 80076b2:	d20b      	bcs.n	80076cc <xTaskDelayUntil+0xac>
                /* The tick count has overflowed since this function was
                 * lasted called.  In this case the only time we should ever
                 * actually delay is if the wake time has also  overflowed,
                 * and the wake time is greater than the tick time.  When this
                 * is the case it is as if neither time had overflowed. */
                if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	69fa      	ldr	r2, [r7, #28]
 80076ba:	429a      	cmp	r2, r3
 80076bc:	d211      	bcs.n	80076e2 <xTaskDelayUntil+0xc2>
 80076be:	69fa      	ldr	r2, [r7, #28]
 80076c0:	6a3b      	ldr	r3, [r7, #32]
 80076c2:	429a      	cmp	r2, r3
 80076c4:	d90d      	bls.n	80076e2 <xTaskDelayUntil+0xc2>
                {
                    xShouldDelay = pdTRUE;
 80076c6:	2301      	movs	r3, #1
 80076c8:	627b      	str	r3, [r7, #36]	@ 0x24
 80076ca:	e00a      	b.n	80076e2 <xTaskDelayUntil+0xc2>
            else
            {
                /* The tick time has not overflowed.  In this case we will
                 * delay if either the wake time has overflowed, and/or the
                 * tick time is less than the wake time. */
                if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	69fa      	ldr	r2, [r7, #28]
 80076d2:	429a      	cmp	r2, r3
 80076d4:	d303      	bcc.n	80076de <xTaskDelayUntil+0xbe>
 80076d6:	69fa      	ldr	r2, [r7, #28]
 80076d8:	6a3b      	ldr	r3, [r7, #32]
 80076da:	429a      	cmp	r2, r3
 80076dc:	d901      	bls.n	80076e2 <xTaskDelayUntil+0xc2>
                {
                    xShouldDelay = pdTRUE;
 80076de:	2301      	movs	r3, #1
 80076e0:	627b      	str	r3, [r7, #36]	@ 0x24
                    mtCOVERAGE_TEST_MARKER();
                }
            }

            /* Update the wake time ready for the next call. */
            *pxPreviousWakeTime = xTimeToWake;
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	69fa      	ldr	r2, [r7, #28]
 80076e6:	601a      	str	r2, [r3, #0]

            if( xShouldDelay != pdFALSE )
 80076e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d006      	beq.n	80076fc <xTaskDelayUntil+0xdc>
            {
                traceTASK_DELAY_UNTIL( xTimeToWake );

                /* prvAddCurrentTaskToDelayedList() needs the block time, not
                 * the time to wake, so subtract the current tick count. */
                prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 80076ee:	69fa      	ldr	r2, [r7, #28]
 80076f0:	6a3b      	ldr	r3, [r7, #32]
 80076f2:	1ad3      	subs	r3, r2, r3
 80076f4:	2100      	movs	r1, #0
 80076f6:	4618      	mov	r0, r3
 80076f8:	f000 fe64 	bl	80083c4 <prvAddCurrentTaskToDelayedList>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        xAlreadyYielded = xTaskResumeAll();
 80076fc:	f000 f87c 	bl	80077f8 <xTaskResumeAll>
 8007700:	61b8      	str	r0, [r7, #24]

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8007702:	69bb      	ldr	r3, [r7, #24]
 8007704:	2b00      	cmp	r3, #0
 8007706:	d107      	bne.n	8007718 <xTaskDelayUntil+0xf8>
        {
            portYIELD_WITHIN_API();
 8007708:	4b08      	ldr	r3, [pc, #32]	@ (800772c <xTaskDelayUntil+0x10c>)
 800770a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800770e:	601a      	str	r2, [r3, #0]
 8007710:	f3bf 8f4f 	dsb	sy
 8007714:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xShouldDelay;
 8007718:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
 800771a:	4618      	mov	r0, r3
 800771c:	3728      	adds	r7, #40	@ 0x28
 800771e:	46bd      	mov	sp, r7
 8007720:	bd80      	pop	{r7, pc}
 8007722:	bf00      	nop
 8007724:	2000043c 	.word	0x2000043c
 8007728:	20000418 	.word	0x20000418
 800772c:	e000ed04 	.word	0xe000ed04

08007730 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007730:	b580      	push	{r7, lr}
 8007732:	b086      	sub	sp, #24
 8007734:	af02      	add	r7, sp, #8
        }
    }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
    {
        /* The Idle task is being created using dynamically allocated RAM. */
        xReturn = xTaskCreate( prvIdleTask,
 8007736:	4b22      	ldr	r3, [pc, #136]	@ (80077c0 <vTaskStartScheduler+0x90>)
 8007738:	9301      	str	r3, [sp, #4]
 800773a:	2300      	movs	r3, #0
 800773c:	9300      	str	r3, [sp, #0]
 800773e:	2300      	movs	r3, #0
 8007740:	2280      	movs	r2, #128	@ 0x80
 8007742:	4920      	ldr	r1, [pc, #128]	@ (80077c4 <vTaskStartScheduler+0x94>)
 8007744:	4820      	ldr	r0, [pc, #128]	@ (80077c8 <vTaskStartScheduler+0x98>)
 8007746:	f7ff fe07 	bl	8007358 <xTaskCreate>
 800774a:	60f8      	str	r0, [r7, #12]
    }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	2b01      	cmp	r3, #1
 8007750:	d102      	bne.n	8007758 <vTaskStartScheduler+0x28>
        {
            xReturn = xTimerCreateTimerTask();
 8007752:	f000 feb7 	bl	80084c4 <xTimerCreateTimerTask>
 8007756:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	2b01      	cmp	r3, #1
 800775c:	d118      	bne.n	8007790 <vTaskStartScheduler+0x60>
        __asm volatile
 800775e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007762:	b672      	cpsid	i
 8007764:	f383 8811 	msr	BASEPRI, r3
 8007768:	f3bf 8f6f 	isb	sy
 800776c:	f3bf 8f4f 	dsb	sy
 8007770:	b662      	cpsie	i
 8007772:	60bb      	str	r3, [r7, #8]
    }
 8007774:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 8007776:	4b15      	ldr	r3, [pc, #84]	@ (80077cc <vTaskStartScheduler+0x9c>)
 8007778:	f04f 32ff 	mov.w	r2, #4294967295
 800777c:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 800777e:	4b14      	ldr	r3, [pc, #80]	@ (80077d0 <vTaskStartScheduler+0xa0>)
 8007780:	2201      	movs	r2, #1
 8007782:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007784:	4b13      	ldr	r3, [pc, #76]	@ (80077d4 <vTaskStartScheduler+0xa4>)
 8007786:	2200      	movs	r2, #0
 8007788:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 800778a:	f001 fa6b 	bl	8008c64 <xPortStartScheduler>
 800778e:	e011      	b.n	80077b4 <vTaskStartScheduler+0x84>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007796:	d10d      	bne.n	80077b4 <vTaskStartScheduler+0x84>
        __asm volatile
 8007798:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800779c:	b672      	cpsid	i
 800779e:	f383 8811 	msr	BASEPRI, r3
 80077a2:	f3bf 8f6f 	isb	sy
 80077a6:	f3bf 8f4f 	dsb	sy
 80077aa:	b662      	cpsie	i
 80077ac:	607b      	str	r3, [r7, #4]
    }
 80077ae:	bf00      	nop
 80077b0:	bf00      	nop
 80077b2:	e7fd      	b.n	80077b0 <vTaskStartScheduler+0x80>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 80077b4:	4b08      	ldr	r3, [pc, #32]	@ (80077d8 <vTaskStartScheduler+0xa8>)
 80077b6:	681b      	ldr	r3, [r3, #0]
}
 80077b8:	bf00      	nop
 80077ba:	3710      	adds	r7, #16
 80077bc:	46bd      	mov	sp, r7
 80077be:	bd80      	pop	{r7, pc}
 80077c0:	20000438 	.word	0x20000438
 80077c4:	08009488 	.word	0x08009488
 80077c8:	080080cd 	.word	0x080080cd
 80077cc:	20000434 	.word	0x20000434
 80077d0:	20000420 	.word	0x20000420
 80077d4:	20000418 	.word	0x20000418
 80077d8:	20000028 	.word	0x20000028

080077dc <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80077dc:	b480      	push	{r7}
 80077de:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 80077e0:	4b04      	ldr	r3, [pc, #16]	@ (80077f4 <vTaskSuspendAll+0x18>)
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	3301      	adds	r3, #1
 80077e6:	4a03      	ldr	r2, [pc, #12]	@ (80077f4 <vTaskSuspendAll+0x18>)
 80077e8:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 80077ea:	bf00      	nop
 80077ec:	46bd      	mov	sp, r7
 80077ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f2:	4770      	bx	lr
 80077f4:	2000043c 	.word	0x2000043c

080077f8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80077f8:	b580      	push	{r7, lr}
 80077fa:	b088      	sub	sp, #32
 80077fc:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 80077fe:	2300      	movs	r3, #0
 8007800:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 8007802:	2300      	movs	r3, #0
 8007804:	61bb      	str	r3, [r7, #24]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8007806:	4b72      	ldr	r3, [pc, #456]	@ (80079d0 <xTaskResumeAll+0x1d8>)
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	2b00      	cmp	r3, #0
 800780c:	d10d      	bne.n	800782a <xTaskResumeAll+0x32>
        __asm volatile
 800780e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007812:	b672      	cpsid	i
 8007814:	f383 8811 	msr	BASEPRI, r3
 8007818:	f3bf 8f6f 	isb	sy
 800781c:	f3bf 8f4f 	dsb	sy
 8007820:	b662      	cpsie	i
 8007822:	607b      	str	r3, [r7, #4]
    }
 8007824:	bf00      	nop
 8007826:	bf00      	nop
 8007828:	e7fd      	b.n	8007826 <xTaskResumeAll+0x2e>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 800782a:	f001 fa99 	bl	8008d60 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 800782e:	4b68      	ldr	r3, [pc, #416]	@ (80079d0 <xTaskResumeAll+0x1d8>)
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	3b01      	subs	r3, #1
 8007834:	4a66      	ldr	r2, [pc, #408]	@ (80079d0 <xTaskResumeAll+0x1d8>)
 8007836:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007838:	4b65      	ldr	r3, [pc, #404]	@ (80079d0 <xTaskResumeAll+0x1d8>)
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	2b00      	cmp	r3, #0
 800783e:	f040 80c0 	bne.w	80079c2 <xTaskResumeAll+0x1ca>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007842:	4b64      	ldr	r3, [pc, #400]	@ (80079d4 <xTaskResumeAll+0x1dc>)
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	2b00      	cmp	r3, #0
 8007848:	f000 80bb 	beq.w	80079c2 <xTaskResumeAll+0x1ca>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800784c:	e08a      	b.n	8007964 <xTaskResumeAll+0x16c>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800784e:	4b62      	ldr	r3, [pc, #392]	@ (80079d8 <xTaskResumeAll+0x1e0>)
 8007850:	68db      	ldr	r3, [r3, #12]
 8007852:	68db      	ldr	r3, [r3, #12]
 8007854:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8007856:	69fb      	ldr	r3, [r7, #28]
 8007858:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800785a:	613b      	str	r3, [r7, #16]
 800785c:	69fb      	ldr	r3, [r7, #28]
 800785e:	69db      	ldr	r3, [r3, #28]
 8007860:	69fa      	ldr	r2, [r7, #28]
 8007862:	6a12      	ldr	r2, [r2, #32]
 8007864:	609a      	str	r2, [r3, #8]
 8007866:	69fb      	ldr	r3, [r7, #28]
 8007868:	6a1b      	ldr	r3, [r3, #32]
 800786a:	69fa      	ldr	r2, [r7, #28]
 800786c:	69d2      	ldr	r2, [r2, #28]
 800786e:	605a      	str	r2, [r3, #4]
 8007870:	693b      	ldr	r3, [r7, #16]
 8007872:	685a      	ldr	r2, [r3, #4]
 8007874:	69fb      	ldr	r3, [r7, #28]
 8007876:	3318      	adds	r3, #24
 8007878:	429a      	cmp	r2, r3
 800787a:	d103      	bne.n	8007884 <xTaskResumeAll+0x8c>
 800787c:	69fb      	ldr	r3, [r7, #28]
 800787e:	6a1a      	ldr	r2, [r3, #32]
 8007880:	693b      	ldr	r3, [r7, #16]
 8007882:	605a      	str	r2, [r3, #4]
 8007884:	69fb      	ldr	r3, [r7, #28]
 8007886:	2200      	movs	r2, #0
 8007888:	629a      	str	r2, [r3, #40]	@ 0x28
 800788a:	693b      	ldr	r3, [r7, #16]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	1e5a      	subs	r2, r3, #1
 8007890:	693b      	ldr	r3, [r7, #16]
 8007892:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8007894:	69fb      	ldr	r3, [r7, #28]
 8007896:	695b      	ldr	r3, [r3, #20]
 8007898:	60fb      	str	r3, [r7, #12]
 800789a:	69fb      	ldr	r3, [r7, #28]
 800789c:	689b      	ldr	r3, [r3, #8]
 800789e:	69fa      	ldr	r2, [r7, #28]
 80078a0:	68d2      	ldr	r2, [r2, #12]
 80078a2:	609a      	str	r2, [r3, #8]
 80078a4:	69fb      	ldr	r3, [r7, #28]
 80078a6:	68db      	ldr	r3, [r3, #12]
 80078a8:	69fa      	ldr	r2, [r7, #28]
 80078aa:	6892      	ldr	r2, [r2, #8]
 80078ac:	605a      	str	r2, [r3, #4]
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	685a      	ldr	r2, [r3, #4]
 80078b2:	69fb      	ldr	r3, [r7, #28]
 80078b4:	3304      	adds	r3, #4
 80078b6:	429a      	cmp	r2, r3
 80078b8:	d103      	bne.n	80078c2 <xTaskResumeAll+0xca>
 80078ba:	69fb      	ldr	r3, [r7, #28]
 80078bc:	68da      	ldr	r2, [r3, #12]
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	605a      	str	r2, [r3, #4]
 80078c2:	69fb      	ldr	r3, [r7, #28]
 80078c4:	2200      	movs	r2, #0
 80078c6:	615a      	str	r2, [r3, #20]
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	1e5a      	subs	r2, r3, #1
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 80078d2:	69fb      	ldr	r3, [r7, #28]
 80078d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078d6:	2201      	movs	r2, #1
 80078d8:	409a      	lsls	r2, r3
 80078da:	4b40      	ldr	r3, [pc, #256]	@ (80079dc <xTaskResumeAll+0x1e4>)
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	4313      	orrs	r3, r2
 80078e0:	4a3e      	ldr	r2, [pc, #248]	@ (80079dc <xTaskResumeAll+0x1e4>)
 80078e2:	6013      	str	r3, [r2, #0]
 80078e4:	69fb      	ldr	r3, [r7, #28]
 80078e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80078e8:	493d      	ldr	r1, [pc, #244]	@ (80079e0 <xTaskResumeAll+0x1e8>)
 80078ea:	4613      	mov	r3, r2
 80078ec:	009b      	lsls	r3, r3, #2
 80078ee:	4413      	add	r3, r2
 80078f0:	009b      	lsls	r3, r3, #2
 80078f2:	440b      	add	r3, r1
 80078f4:	3304      	adds	r3, #4
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	60bb      	str	r3, [r7, #8]
 80078fa:	69fb      	ldr	r3, [r7, #28]
 80078fc:	68ba      	ldr	r2, [r7, #8]
 80078fe:	609a      	str	r2, [r3, #8]
 8007900:	68bb      	ldr	r3, [r7, #8]
 8007902:	689a      	ldr	r2, [r3, #8]
 8007904:	69fb      	ldr	r3, [r7, #28]
 8007906:	60da      	str	r2, [r3, #12]
 8007908:	68bb      	ldr	r3, [r7, #8]
 800790a:	689b      	ldr	r3, [r3, #8]
 800790c:	69fa      	ldr	r2, [r7, #28]
 800790e:	3204      	adds	r2, #4
 8007910:	605a      	str	r2, [r3, #4]
 8007912:	69fb      	ldr	r3, [r7, #28]
 8007914:	1d1a      	adds	r2, r3, #4
 8007916:	68bb      	ldr	r3, [r7, #8]
 8007918:	609a      	str	r2, [r3, #8]
 800791a:	69fb      	ldr	r3, [r7, #28]
 800791c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800791e:	4613      	mov	r3, r2
 8007920:	009b      	lsls	r3, r3, #2
 8007922:	4413      	add	r3, r2
 8007924:	009b      	lsls	r3, r3, #2
 8007926:	4a2e      	ldr	r2, [pc, #184]	@ (80079e0 <xTaskResumeAll+0x1e8>)
 8007928:	441a      	add	r2, r3
 800792a:	69fb      	ldr	r3, [r7, #28]
 800792c:	615a      	str	r2, [r3, #20]
 800792e:	69fb      	ldr	r3, [r7, #28]
 8007930:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007932:	492b      	ldr	r1, [pc, #172]	@ (80079e0 <xTaskResumeAll+0x1e8>)
 8007934:	4613      	mov	r3, r2
 8007936:	009b      	lsls	r3, r3, #2
 8007938:	4413      	add	r3, r2
 800793a:	009b      	lsls	r3, r3, #2
 800793c:	440b      	add	r3, r1
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	1c59      	adds	r1, r3, #1
 8007942:	4827      	ldr	r0, [pc, #156]	@ (80079e0 <xTaskResumeAll+0x1e8>)
 8007944:	4613      	mov	r3, r2
 8007946:	009b      	lsls	r3, r3, #2
 8007948:	4413      	add	r3, r2
 800794a:	009b      	lsls	r3, r3, #2
 800794c:	4403      	add	r3, r0
 800794e:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007950:	69fb      	ldr	r3, [r7, #28]
 8007952:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007954:	4b23      	ldr	r3, [pc, #140]	@ (80079e4 <xTaskResumeAll+0x1ec>)
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800795a:	429a      	cmp	r2, r3
 800795c:	d302      	bcc.n	8007964 <xTaskResumeAll+0x16c>
                    {
                        xYieldPending = pdTRUE;
 800795e:	4b22      	ldr	r3, [pc, #136]	@ (80079e8 <xTaskResumeAll+0x1f0>)
 8007960:	2201      	movs	r2, #1
 8007962:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007964:	4b1c      	ldr	r3, [pc, #112]	@ (80079d8 <xTaskResumeAll+0x1e0>)
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	2b00      	cmp	r3, #0
 800796a:	f47f af70 	bne.w	800784e <xTaskResumeAll+0x56>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 800796e:	69fb      	ldr	r3, [r7, #28]
 8007970:	2b00      	cmp	r3, #0
 8007972:	d001      	beq.n	8007978 <xTaskResumeAll+0x180>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8007974:	f000 fc42 	bl	80081fc <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8007978:	4b1c      	ldr	r3, [pc, #112]	@ (80079ec <xTaskResumeAll+0x1f4>)
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	617b      	str	r3, [r7, #20]

                    if( xPendedCounts > ( TickType_t ) 0U )
 800797e:	697b      	ldr	r3, [r7, #20]
 8007980:	2b00      	cmp	r3, #0
 8007982:	d010      	beq.n	80079a6 <xTaskResumeAll+0x1ae>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8007984:	f000 f852 	bl	8007a2c <xTaskIncrementTick>
 8007988:	4603      	mov	r3, r0
 800798a:	2b00      	cmp	r3, #0
 800798c:	d002      	beq.n	8007994 <xTaskResumeAll+0x19c>
                            {
                                xYieldPending = pdTRUE;
 800798e:	4b16      	ldr	r3, [pc, #88]	@ (80079e8 <xTaskResumeAll+0x1f0>)
 8007990:	2201      	movs	r2, #1
 8007992:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8007994:	697b      	ldr	r3, [r7, #20]
 8007996:	3b01      	subs	r3, #1
 8007998:	617b      	str	r3, [r7, #20]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 800799a:	697b      	ldr	r3, [r7, #20]
 800799c:	2b00      	cmp	r3, #0
 800799e:	d1f1      	bne.n	8007984 <xTaskResumeAll+0x18c>

                        xPendedTicks = 0;
 80079a0:	4b12      	ldr	r3, [pc, #72]	@ (80079ec <xTaskResumeAll+0x1f4>)
 80079a2:	2200      	movs	r2, #0
 80079a4:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 80079a6:	4b10      	ldr	r3, [pc, #64]	@ (80079e8 <xTaskResumeAll+0x1f0>)
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d009      	beq.n	80079c2 <xTaskResumeAll+0x1ca>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                    {
                        xAlreadyYielded = pdTRUE;
 80079ae:	2301      	movs	r3, #1
 80079b0:	61bb      	str	r3, [r7, #24]
                    }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 80079b2:	4b0f      	ldr	r3, [pc, #60]	@ (80079f0 <xTaskResumeAll+0x1f8>)
 80079b4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80079b8:	601a      	str	r2, [r3, #0]
 80079ba:	f3bf 8f4f 	dsb	sy
 80079be:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 80079c2:	f001 fa03 	bl	8008dcc <vPortExitCritical>

    return xAlreadyYielded;
 80079c6:	69bb      	ldr	r3, [r7, #24]
}
 80079c8:	4618      	mov	r0, r3
 80079ca:	3720      	adds	r7, #32
 80079cc:	46bd      	mov	sp, r7
 80079ce:	bd80      	pop	{r7, pc}
 80079d0:	2000043c 	.word	0x2000043c
 80079d4:	20000414 	.word	0x20000414
 80079d8:	200003d4 	.word	0x200003d4
 80079dc:	2000041c 	.word	0x2000041c
 80079e0:	20000340 	.word	0x20000340
 80079e4:	2000033c 	.word	0x2000033c
 80079e8:	20000428 	.word	0x20000428
 80079ec:	20000424 	.word	0x20000424
 80079f0:	e000ed04 	.word	0xe000ed04

080079f4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80079f4:	b480      	push	{r7}
 80079f6:	b083      	sub	sp, #12
 80079f8:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 80079fa:	4b05      	ldr	r3, [pc, #20]	@ (8007a10 <xTaskGetTickCount+0x1c>)
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8007a00:	687b      	ldr	r3, [r7, #4]
}
 8007a02:	4618      	mov	r0, r3
 8007a04:	370c      	adds	r7, #12
 8007a06:	46bd      	mov	sp, r7
 8007a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a0c:	4770      	bx	lr
 8007a0e:	bf00      	nop
 8007a10:	20000418 	.word	0x20000418

08007a14 <uxTaskGetNumberOfTasks>:
    return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxTaskGetNumberOfTasks( void )
{
 8007a14:	b480      	push	{r7}
 8007a16:	af00      	add	r7, sp, #0
    /* A critical section is not required because the variables are of type
     * BaseType_t. */
    return uxCurrentNumberOfTasks;
 8007a18:	4b03      	ldr	r3, [pc, #12]	@ (8007a28 <uxTaskGetNumberOfTasks+0x14>)
 8007a1a:	681b      	ldr	r3, [r3, #0]
}
 8007a1c:	4618      	mov	r0, r3
 8007a1e:	46bd      	mov	sp, r7
 8007a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a24:	4770      	bx	lr
 8007a26:	bf00      	nop
 8007a28:	20000414 	.word	0x20000414

08007a2c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007a2c:	b580      	push	{r7, lr}
 8007a2e:	b08a      	sub	sp, #40	@ 0x28
 8007a30:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8007a32:	2300      	movs	r3, #0
 8007a34:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007a36:	4b7f      	ldr	r3, [pc, #508]	@ (8007c34 <xTaskIncrementTick+0x208>)
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	f040 80ef 	bne.w	8007c1e <xTaskIncrementTick+0x1f2>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007a40:	4b7d      	ldr	r3, [pc, #500]	@ (8007c38 <xTaskIncrementTick+0x20c>)
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	3301      	adds	r3, #1
 8007a46:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8007a48:	4a7b      	ldr	r2, [pc, #492]	@ (8007c38 <xTaskIncrementTick+0x20c>)
 8007a4a:	6a3b      	ldr	r3, [r7, #32]
 8007a4c:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007a4e:	6a3b      	ldr	r3, [r7, #32]
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d123      	bne.n	8007a9c <xTaskIncrementTick+0x70>
        {
            taskSWITCH_DELAYED_LISTS();
 8007a54:	4b79      	ldr	r3, [pc, #484]	@ (8007c3c <xTaskIncrementTick+0x210>)
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d00d      	beq.n	8007a7a <xTaskIncrementTick+0x4e>
        __asm volatile
 8007a5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a62:	b672      	cpsid	i
 8007a64:	f383 8811 	msr	BASEPRI, r3
 8007a68:	f3bf 8f6f 	isb	sy
 8007a6c:	f3bf 8f4f 	dsb	sy
 8007a70:	b662      	cpsie	i
 8007a72:	607b      	str	r3, [r7, #4]
    }
 8007a74:	bf00      	nop
 8007a76:	bf00      	nop
 8007a78:	e7fd      	b.n	8007a76 <xTaskIncrementTick+0x4a>
 8007a7a:	4b70      	ldr	r3, [pc, #448]	@ (8007c3c <xTaskIncrementTick+0x210>)
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	61fb      	str	r3, [r7, #28]
 8007a80:	4b6f      	ldr	r3, [pc, #444]	@ (8007c40 <xTaskIncrementTick+0x214>)
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	4a6d      	ldr	r2, [pc, #436]	@ (8007c3c <xTaskIncrementTick+0x210>)
 8007a86:	6013      	str	r3, [r2, #0]
 8007a88:	4a6d      	ldr	r2, [pc, #436]	@ (8007c40 <xTaskIncrementTick+0x214>)
 8007a8a:	69fb      	ldr	r3, [r7, #28]
 8007a8c:	6013      	str	r3, [r2, #0]
 8007a8e:	4b6d      	ldr	r3, [pc, #436]	@ (8007c44 <xTaskIncrementTick+0x218>)
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	3301      	adds	r3, #1
 8007a94:	4a6b      	ldr	r2, [pc, #428]	@ (8007c44 <xTaskIncrementTick+0x218>)
 8007a96:	6013      	str	r3, [r2, #0]
 8007a98:	f000 fbb0 	bl	80081fc <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8007a9c:	4b6a      	ldr	r3, [pc, #424]	@ (8007c48 <xTaskIncrementTick+0x21c>)
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	6a3a      	ldr	r2, [r7, #32]
 8007aa2:	429a      	cmp	r2, r3
 8007aa4:	f0c0 80a6 	bcc.w	8007bf4 <xTaskIncrementTick+0x1c8>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007aa8:	4b64      	ldr	r3, [pc, #400]	@ (8007c3c <xTaskIncrementTick+0x210>)
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d104      	bne.n	8007abc <xTaskIncrementTick+0x90>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007ab2:	4b65      	ldr	r3, [pc, #404]	@ (8007c48 <xTaskIncrementTick+0x21c>)
 8007ab4:	f04f 32ff 	mov.w	r2, #4294967295
 8007ab8:	601a      	str	r2, [r3, #0]
                    break;
 8007aba:	e09b      	b.n	8007bf4 <xTaskIncrementTick+0x1c8>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007abc:	4b5f      	ldr	r3, [pc, #380]	@ (8007c3c <xTaskIncrementTick+0x210>)
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	68db      	ldr	r3, [r3, #12]
 8007ac2:	68db      	ldr	r3, [r3, #12]
 8007ac4:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007ac6:	69bb      	ldr	r3, [r7, #24]
 8007ac8:	685b      	ldr	r3, [r3, #4]
 8007aca:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 8007acc:	6a3a      	ldr	r2, [r7, #32]
 8007ace:	697b      	ldr	r3, [r7, #20]
 8007ad0:	429a      	cmp	r2, r3
 8007ad2:	d203      	bcs.n	8007adc <xTaskIncrementTick+0xb0>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8007ad4:	4a5c      	ldr	r2, [pc, #368]	@ (8007c48 <xTaskIncrementTick+0x21c>)
 8007ad6:	697b      	ldr	r3, [r7, #20]
 8007ad8:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 8007ada:	e08b      	b.n	8007bf4 <xTaskIncrementTick+0x1c8>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8007adc:	69bb      	ldr	r3, [r7, #24]
 8007ade:	695b      	ldr	r3, [r3, #20]
 8007ae0:	613b      	str	r3, [r7, #16]
 8007ae2:	69bb      	ldr	r3, [r7, #24]
 8007ae4:	689b      	ldr	r3, [r3, #8]
 8007ae6:	69ba      	ldr	r2, [r7, #24]
 8007ae8:	68d2      	ldr	r2, [r2, #12]
 8007aea:	609a      	str	r2, [r3, #8]
 8007aec:	69bb      	ldr	r3, [r7, #24]
 8007aee:	68db      	ldr	r3, [r3, #12]
 8007af0:	69ba      	ldr	r2, [r7, #24]
 8007af2:	6892      	ldr	r2, [r2, #8]
 8007af4:	605a      	str	r2, [r3, #4]
 8007af6:	693b      	ldr	r3, [r7, #16]
 8007af8:	685a      	ldr	r2, [r3, #4]
 8007afa:	69bb      	ldr	r3, [r7, #24]
 8007afc:	3304      	adds	r3, #4
 8007afe:	429a      	cmp	r2, r3
 8007b00:	d103      	bne.n	8007b0a <xTaskIncrementTick+0xde>
 8007b02:	69bb      	ldr	r3, [r7, #24]
 8007b04:	68da      	ldr	r2, [r3, #12]
 8007b06:	693b      	ldr	r3, [r7, #16]
 8007b08:	605a      	str	r2, [r3, #4]
 8007b0a:	69bb      	ldr	r3, [r7, #24]
 8007b0c:	2200      	movs	r2, #0
 8007b0e:	615a      	str	r2, [r3, #20]
 8007b10:	693b      	ldr	r3, [r7, #16]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	1e5a      	subs	r2, r3, #1
 8007b16:	693b      	ldr	r3, [r7, #16]
 8007b18:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007b1a:	69bb      	ldr	r3, [r7, #24]
 8007b1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d01e      	beq.n	8007b60 <xTaskIncrementTick+0x134>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8007b22:	69bb      	ldr	r3, [r7, #24]
 8007b24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b26:	60fb      	str	r3, [r7, #12]
 8007b28:	69bb      	ldr	r3, [r7, #24]
 8007b2a:	69db      	ldr	r3, [r3, #28]
 8007b2c:	69ba      	ldr	r2, [r7, #24]
 8007b2e:	6a12      	ldr	r2, [r2, #32]
 8007b30:	609a      	str	r2, [r3, #8]
 8007b32:	69bb      	ldr	r3, [r7, #24]
 8007b34:	6a1b      	ldr	r3, [r3, #32]
 8007b36:	69ba      	ldr	r2, [r7, #24]
 8007b38:	69d2      	ldr	r2, [r2, #28]
 8007b3a:	605a      	str	r2, [r3, #4]
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	685a      	ldr	r2, [r3, #4]
 8007b40:	69bb      	ldr	r3, [r7, #24]
 8007b42:	3318      	adds	r3, #24
 8007b44:	429a      	cmp	r2, r3
 8007b46:	d103      	bne.n	8007b50 <xTaskIncrementTick+0x124>
 8007b48:	69bb      	ldr	r3, [r7, #24]
 8007b4a:	6a1a      	ldr	r2, [r3, #32]
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	605a      	str	r2, [r3, #4]
 8007b50:	69bb      	ldr	r3, [r7, #24]
 8007b52:	2200      	movs	r2, #0
 8007b54:	629a      	str	r2, [r3, #40]	@ 0x28
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	1e5a      	subs	r2, r3, #1
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8007b60:	69bb      	ldr	r3, [r7, #24]
 8007b62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b64:	2201      	movs	r2, #1
 8007b66:	409a      	lsls	r2, r3
 8007b68:	4b38      	ldr	r3, [pc, #224]	@ (8007c4c <xTaskIncrementTick+0x220>)
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	4313      	orrs	r3, r2
 8007b6e:	4a37      	ldr	r2, [pc, #220]	@ (8007c4c <xTaskIncrementTick+0x220>)
 8007b70:	6013      	str	r3, [r2, #0]
 8007b72:	69bb      	ldr	r3, [r7, #24]
 8007b74:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007b76:	4936      	ldr	r1, [pc, #216]	@ (8007c50 <xTaskIncrementTick+0x224>)
 8007b78:	4613      	mov	r3, r2
 8007b7a:	009b      	lsls	r3, r3, #2
 8007b7c:	4413      	add	r3, r2
 8007b7e:	009b      	lsls	r3, r3, #2
 8007b80:	440b      	add	r3, r1
 8007b82:	3304      	adds	r3, #4
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	60bb      	str	r3, [r7, #8]
 8007b88:	69bb      	ldr	r3, [r7, #24]
 8007b8a:	68ba      	ldr	r2, [r7, #8]
 8007b8c:	609a      	str	r2, [r3, #8]
 8007b8e:	68bb      	ldr	r3, [r7, #8]
 8007b90:	689a      	ldr	r2, [r3, #8]
 8007b92:	69bb      	ldr	r3, [r7, #24]
 8007b94:	60da      	str	r2, [r3, #12]
 8007b96:	68bb      	ldr	r3, [r7, #8]
 8007b98:	689b      	ldr	r3, [r3, #8]
 8007b9a:	69ba      	ldr	r2, [r7, #24]
 8007b9c:	3204      	adds	r2, #4
 8007b9e:	605a      	str	r2, [r3, #4]
 8007ba0:	69bb      	ldr	r3, [r7, #24]
 8007ba2:	1d1a      	adds	r2, r3, #4
 8007ba4:	68bb      	ldr	r3, [r7, #8]
 8007ba6:	609a      	str	r2, [r3, #8]
 8007ba8:	69bb      	ldr	r3, [r7, #24]
 8007baa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007bac:	4613      	mov	r3, r2
 8007bae:	009b      	lsls	r3, r3, #2
 8007bb0:	4413      	add	r3, r2
 8007bb2:	009b      	lsls	r3, r3, #2
 8007bb4:	4a26      	ldr	r2, [pc, #152]	@ (8007c50 <xTaskIncrementTick+0x224>)
 8007bb6:	441a      	add	r2, r3
 8007bb8:	69bb      	ldr	r3, [r7, #24]
 8007bba:	615a      	str	r2, [r3, #20]
 8007bbc:	69bb      	ldr	r3, [r7, #24]
 8007bbe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007bc0:	4923      	ldr	r1, [pc, #140]	@ (8007c50 <xTaskIncrementTick+0x224>)
 8007bc2:	4613      	mov	r3, r2
 8007bc4:	009b      	lsls	r3, r3, #2
 8007bc6:	4413      	add	r3, r2
 8007bc8:	009b      	lsls	r3, r3, #2
 8007bca:	440b      	add	r3, r1
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	1c59      	adds	r1, r3, #1
 8007bd0:	481f      	ldr	r0, [pc, #124]	@ (8007c50 <xTaskIncrementTick+0x224>)
 8007bd2:	4613      	mov	r3, r2
 8007bd4:	009b      	lsls	r3, r3, #2
 8007bd6:	4413      	add	r3, r2
 8007bd8:	009b      	lsls	r3, r3, #2
 8007bda:	4403      	add	r3, r0
 8007bdc:	6019      	str	r1, [r3, #0]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007bde:	69bb      	ldr	r3, [r7, #24]
 8007be0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007be2:	4b1c      	ldr	r3, [pc, #112]	@ (8007c54 <xTaskIncrementTick+0x228>)
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007be8:	429a      	cmp	r2, r3
 8007bea:	f67f af5d 	bls.w	8007aa8 <xTaskIncrementTick+0x7c>
                        {
                            xSwitchRequired = pdTRUE;
 8007bee:	2301      	movs	r3, #1
 8007bf0:	627b      	str	r3, [r7, #36]	@ 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007bf2:	e759      	b.n	8007aa8 <xTaskIncrementTick+0x7c>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007bf4:	4b17      	ldr	r3, [pc, #92]	@ (8007c54 <xTaskIncrementTick+0x228>)
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007bfa:	4915      	ldr	r1, [pc, #84]	@ (8007c50 <xTaskIncrementTick+0x224>)
 8007bfc:	4613      	mov	r3, r2
 8007bfe:	009b      	lsls	r3, r3, #2
 8007c00:	4413      	add	r3, r2
 8007c02:	009b      	lsls	r3, r3, #2
 8007c04:	440b      	add	r3, r1
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	2b01      	cmp	r3, #1
 8007c0a:	d901      	bls.n	8007c10 <xTaskIncrementTick+0x1e4>
            {
                xSwitchRequired = pdTRUE;
 8007c0c:	2301      	movs	r3, #1
 8007c0e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 8007c10:	4b11      	ldr	r3, [pc, #68]	@ (8007c58 <xTaskIncrementTick+0x22c>)
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d007      	beq.n	8007c28 <xTaskIncrementTick+0x1fc>
            {
                xSwitchRequired = pdTRUE;
 8007c18:	2301      	movs	r3, #1
 8007c1a:	627b      	str	r3, [r7, #36]	@ 0x24
 8007c1c:	e004      	b.n	8007c28 <xTaskIncrementTick+0x1fc>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8007c1e:	4b0f      	ldr	r3, [pc, #60]	@ (8007c5c <xTaskIncrementTick+0x230>)
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	3301      	adds	r3, #1
 8007c24:	4a0d      	ldr	r2, [pc, #52]	@ (8007c5c <xTaskIncrementTick+0x230>)
 8007c26:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 8007c28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8007c2a:	4618      	mov	r0, r3
 8007c2c:	3728      	adds	r7, #40	@ 0x28
 8007c2e:	46bd      	mov	sp, r7
 8007c30:	bd80      	pop	{r7, pc}
 8007c32:	bf00      	nop
 8007c34:	2000043c 	.word	0x2000043c
 8007c38:	20000418 	.word	0x20000418
 8007c3c:	200003cc 	.word	0x200003cc
 8007c40:	200003d0 	.word	0x200003d0
 8007c44:	2000042c 	.word	0x2000042c
 8007c48:	20000434 	.word	0x20000434
 8007c4c:	2000041c 	.word	0x2000041c
 8007c50:	20000340 	.word	0x20000340
 8007c54:	2000033c 	.word	0x2000033c
 8007c58:	20000428 	.word	0x20000428
 8007c5c:	20000424 	.word	0x20000424

08007c60 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007c60:	b480      	push	{r7}
 8007c62:	b087      	sub	sp, #28
 8007c64:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007c66:	4b28      	ldr	r3, [pc, #160]	@ (8007d08 <vTaskSwitchContext+0xa8>)
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d003      	beq.n	8007c76 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8007c6e:	4b27      	ldr	r3, [pc, #156]	@ (8007d0c <vTaskSwitchContext+0xac>)
 8007c70:	2201      	movs	r2, #1
 8007c72:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 8007c74:	e042      	b.n	8007cfc <vTaskSwitchContext+0x9c>
        xYieldPending = pdFALSE;
 8007c76:	4b25      	ldr	r3, [pc, #148]	@ (8007d0c <vTaskSwitchContext+0xac>)
 8007c78:	2200      	movs	r2, #0
 8007c7a:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007c7c:	4b24      	ldr	r3, [pc, #144]	@ (8007d10 <vTaskSwitchContext+0xb0>)
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	fab3 f383 	clz	r3, r3
 8007c88:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8007c8a:	7afb      	ldrb	r3, [r7, #11]
 8007c8c:	f1c3 031f 	rsb	r3, r3, #31
 8007c90:	617b      	str	r3, [r7, #20]
 8007c92:	4920      	ldr	r1, [pc, #128]	@ (8007d14 <vTaskSwitchContext+0xb4>)
 8007c94:	697a      	ldr	r2, [r7, #20]
 8007c96:	4613      	mov	r3, r2
 8007c98:	009b      	lsls	r3, r3, #2
 8007c9a:	4413      	add	r3, r2
 8007c9c:	009b      	lsls	r3, r3, #2
 8007c9e:	440b      	add	r3, r1
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d10d      	bne.n	8007cc2 <vTaskSwitchContext+0x62>
        __asm volatile
 8007ca6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007caa:	b672      	cpsid	i
 8007cac:	f383 8811 	msr	BASEPRI, r3
 8007cb0:	f3bf 8f6f 	isb	sy
 8007cb4:	f3bf 8f4f 	dsb	sy
 8007cb8:	b662      	cpsie	i
 8007cba:	607b      	str	r3, [r7, #4]
    }
 8007cbc:	bf00      	nop
 8007cbe:	bf00      	nop
 8007cc0:	e7fd      	b.n	8007cbe <vTaskSwitchContext+0x5e>
 8007cc2:	697a      	ldr	r2, [r7, #20]
 8007cc4:	4613      	mov	r3, r2
 8007cc6:	009b      	lsls	r3, r3, #2
 8007cc8:	4413      	add	r3, r2
 8007cca:	009b      	lsls	r3, r3, #2
 8007ccc:	4a11      	ldr	r2, [pc, #68]	@ (8007d14 <vTaskSwitchContext+0xb4>)
 8007cce:	4413      	add	r3, r2
 8007cd0:	613b      	str	r3, [r7, #16]
 8007cd2:	693b      	ldr	r3, [r7, #16]
 8007cd4:	685b      	ldr	r3, [r3, #4]
 8007cd6:	685a      	ldr	r2, [r3, #4]
 8007cd8:	693b      	ldr	r3, [r7, #16]
 8007cda:	605a      	str	r2, [r3, #4]
 8007cdc:	693b      	ldr	r3, [r7, #16]
 8007cde:	685a      	ldr	r2, [r3, #4]
 8007ce0:	693b      	ldr	r3, [r7, #16]
 8007ce2:	3308      	adds	r3, #8
 8007ce4:	429a      	cmp	r2, r3
 8007ce6:	d104      	bne.n	8007cf2 <vTaskSwitchContext+0x92>
 8007ce8:	693b      	ldr	r3, [r7, #16]
 8007cea:	685b      	ldr	r3, [r3, #4]
 8007cec:	685a      	ldr	r2, [r3, #4]
 8007cee:	693b      	ldr	r3, [r7, #16]
 8007cf0:	605a      	str	r2, [r3, #4]
 8007cf2:	693b      	ldr	r3, [r7, #16]
 8007cf4:	685b      	ldr	r3, [r3, #4]
 8007cf6:	68db      	ldr	r3, [r3, #12]
 8007cf8:	4a07      	ldr	r2, [pc, #28]	@ (8007d18 <vTaskSwitchContext+0xb8>)
 8007cfa:	6013      	str	r3, [r2, #0]
}
 8007cfc:	bf00      	nop
 8007cfe:	371c      	adds	r7, #28
 8007d00:	46bd      	mov	sp, r7
 8007d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d06:	4770      	bx	lr
 8007d08:	2000043c 	.word	0x2000043c
 8007d0c:	20000428 	.word	0x20000428
 8007d10:	2000041c 	.word	0x2000041c
 8007d14:	20000340 	.word	0x20000340
 8007d18:	2000033c 	.word	0x2000033c

08007d1c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8007d1c:	b580      	push	{r7, lr}
 8007d1e:	b084      	sub	sp, #16
 8007d20:	af00      	add	r7, sp, #0
 8007d22:	6078      	str	r0, [r7, #4]
 8007d24:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d10d      	bne.n	8007d48 <vTaskPlaceOnEventList+0x2c>
        __asm volatile
 8007d2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d30:	b672      	cpsid	i
 8007d32:	f383 8811 	msr	BASEPRI, r3
 8007d36:	f3bf 8f6f 	isb	sy
 8007d3a:	f3bf 8f4f 	dsb	sy
 8007d3e:	b662      	cpsie	i
 8007d40:	60fb      	str	r3, [r7, #12]
    }
 8007d42:	bf00      	nop
 8007d44:	bf00      	nop
 8007d46:	e7fd      	b.n	8007d44 <vTaskPlaceOnEventList+0x28>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007d48:	4b07      	ldr	r3, [pc, #28]	@ (8007d68 <vTaskPlaceOnEventList+0x4c>)
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	3318      	adds	r3, #24
 8007d4e:	4619      	mov	r1, r3
 8007d50:	6878      	ldr	r0, [r7, #4]
 8007d52:	f7fe fd50 	bl	80067f6 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007d56:	2101      	movs	r1, #1
 8007d58:	6838      	ldr	r0, [r7, #0]
 8007d5a:	f000 fb33 	bl	80083c4 <prvAddCurrentTaskToDelayedList>
}
 8007d5e:	bf00      	nop
 8007d60:	3710      	adds	r7, #16
 8007d62:	46bd      	mov	sp, r7
 8007d64:	bd80      	pop	{r7, pc}
 8007d66:	bf00      	nop
 8007d68:	2000033c 	.word	0x2000033c

08007d6c <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8007d6c:	b580      	push	{r7, lr}
 8007d6e:	b086      	sub	sp, #24
 8007d70:	af00      	add	r7, sp, #0
 8007d72:	60f8      	str	r0, [r7, #12]
 8007d74:	60b9      	str	r1, [r7, #8]
 8007d76:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d10d      	bne.n	8007d9a <vTaskPlaceOnEventListRestricted+0x2e>
        __asm volatile
 8007d7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d82:	b672      	cpsid	i
 8007d84:	f383 8811 	msr	BASEPRI, r3
 8007d88:	f3bf 8f6f 	isb	sy
 8007d8c:	f3bf 8f4f 	dsb	sy
 8007d90:	b662      	cpsie	i
 8007d92:	613b      	str	r3, [r7, #16]
    }
 8007d94:	bf00      	nop
 8007d96:	bf00      	nop
 8007d98:	e7fd      	b.n	8007d96 <vTaskPlaceOnEventListRestricted+0x2a>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	685b      	ldr	r3, [r3, #4]
 8007d9e:	617b      	str	r3, [r7, #20]
 8007da0:	4b15      	ldr	r3, [pc, #84]	@ (8007df8 <vTaskPlaceOnEventListRestricted+0x8c>)
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	697a      	ldr	r2, [r7, #20]
 8007da6:	61da      	str	r2, [r3, #28]
 8007da8:	4b13      	ldr	r3, [pc, #76]	@ (8007df8 <vTaskPlaceOnEventListRestricted+0x8c>)
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	697a      	ldr	r2, [r7, #20]
 8007dae:	6892      	ldr	r2, [r2, #8]
 8007db0:	621a      	str	r2, [r3, #32]
 8007db2:	4b11      	ldr	r3, [pc, #68]	@ (8007df8 <vTaskPlaceOnEventListRestricted+0x8c>)
 8007db4:	681a      	ldr	r2, [r3, #0]
 8007db6:	697b      	ldr	r3, [r7, #20]
 8007db8:	689b      	ldr	r3, [r3, #8]
 8007dba:	3218      	adds	r2, #24
 8007dbc:	605a      	str	r2, [r3, #4]
 8007dbe:	4b0e      	ldr	r3, [pc, #56]	@ (8007df8 <vTaskPlaceOnEventListRestricted+0x8c>)
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	f103 0218 	add.w	r2, r3, #24
 8007dc6:	697b      	ldr	r3, [r7, #20]
 8007dc8:	609a      	str	r2, [r3, #8]
 8007dca:	4b0b      	ldr	r3, [pc, #44]	@ (8007df8 <vTaskPlaceOnEventListRestricted+0x8c>)
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	68fa      	ldr	r2, [r7, #12]
 8007dd0:	629a      	str	r2, [r3, #40]	@ 0x28
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	1c5a      	adds	r2, r3, #1
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d002      	beq.n	8007de8 <vTaskPlaceOnEventListRestricted+0x7c>
        {
            xTicksToWait = portMAX_DELAY;
 8007de2:	f04f 33ff 	mov.w	r3, #4294967295
 8007de6:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007de8:	6879      	ldr	r1, [r7, #4]
 8007dea:	68b8      	ldr	r0, [r7, #8]
 8007dec:	f000 faea 	bl	80083c4 <prvAddCurrentTaskToDelayedList>
    }
 8007df0:	bf00      	nop
 8007df2:	3718      	adds	r7, #24
 8007df4:	46bd      	mov	sp, r7
 8007df6:	bd80      	pop	{r7, pc}
 8007df8:	2000033c 	.word	0x2000033c

08007dfc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007dfc:	b480      	push	{r7}
 8007dfe:	b08b      	sub	sp, #44	@ 0x2c
 8007e00:	af00      	add	r7, sp, #0
 8007e02:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	68db      	ldr	r3, [r3, #12]
 8007e08:	68db      	ldr	r3, [r3, #12]
 8007e0a:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 8007e0c:	6a3b      	ldr	r3, [r7, #32]
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d10d      	bne.n	8007e2e <xTaskRemoveFromEventList+0x32>
        __asm volatile
 8007e12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e16:	b672      	cpsid	i
 8007e18:	f383 8811 	msr	BASEPRI, r3
 8007e1c:	f3bf 8f6f 	isb	sy
 8007e20:	f3bf 8f4f 	dsb	sy
 8007e24:	b662      	cpsie	i
 8007e26:	60fb      	str	r3, [r7, #12]
    }
 8007e28:	bf00      	nop
 8007e2a:	bf00      	nop
 8007e2c:	e7fd      	b.n	8007e2a <xTaskRemoveFromEventList+0x2e>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 8007e2e:	6a3b      	ldr	r3, [r7, #32]
 8007e30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e32:	61fb      	str	r3, [r7, #28]
 8007e34:	6a3b      	ldr	r3, [r7, #32]
 8007e36:	69db      	ldr	r3, [r3, #28]
 8007e38:	6a3a      	ldr	r2, [r7, #32]
 8007e3a:	6a12      	ldr	r2, [r2, #32]
 8007e3c:	609a      	str	r2, [r3, #8]
 8007e3e:	6a3b      	ldr	r3, [r7, #32]
 8007e40:	6a1b      	ldr	r3, [r3, #32]
 8007e42:	6a3a      	ldr	r2, [r7, #32]
 8007e44:	69d2      	ldr	r2, [r2, #28]
 8007e46:	605a      	str	r2, [r3, #4]
 8007e48:	69fb      	ldr	r3, [r7, #28]
 8007e4a:	685a      	ldr	r2, [r3, #4]
 8007e4c:	6a3b      	ldr	r3, [r7, #32]
 8007e4e:	3318      	adds	r3, #24
 8007e50:	429a      	cmp	r2, r3
 8007e52:	d103      	bne.n	8007e5c <xTaskRemoveFromEventList+0x60>
 8007e54:	6a3b      	ldr	r3, [r7, #32]
 8007e56:	6a1a      	ldr	r2, [r3, #32]
 8007e58:	69fb      	ldr	r3, [r7, #28]
 8007e5a:	605a      	str	r2, [r3, #4]
 8007e5c:	6a3b      	ldr	r3, [r7, #32]
 8007e5e:	2200      	movs	r2, #0
 8007e60:	629a      	str	r2, [r3, #40]	@ 0x28
 8007e62:	69fb      	ldr	r3, [r7, #28]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	1e5a      	subs	r2, r3, #1
 8007e68:	69fb      	ldr	r3, [r7, #28]
 8007e6a:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007e6c:	4b4a      	ldr	r3, [pc, #296]	@ (8007f98 <xTaskRemoveFromEventList+0x19c>)
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d15e      	bne.n	8007f32 <xTaskRemoveFromEventList+0x136>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 8007e74:	6a3b      	ldr	r3, [r7, #32]
 8007e76:	695b      	ldr	r3, [r3, #20]
 8007e78:	617b      	str	r3, [r7, #20]
 8007e7a:	6a3b      	ldr	r3, [r7, #32]
 8007e7c:	689b      	ldr	r3, [r3, #8]
 8007e7e:	6a3a      	ldr	r2, [r7, #32]
 8007e80:	68d2      	ldr	r2, [r2, #12]
 8007e82:	609a      	str	r2, [r3, #8]
 8007e84:	6a3b      	ldr	r3, [r7, #32]
 8007e86:	68db      	ldr	r3, [r3, #12]
 8007e88:	6a3a      	ldr	r2, [r7, #32]
 8007e8a:	6892      	ldr	r2, [r2, #8]
 8007e8c:	605a      	str	r2, [r3, #4]
 8007e8e:	697b      	ldr	r3, [r7, #20]
 8007e90:	685a      	ldr	r2, [r3, #4]
 8007e92:	6a3b      	ldr	r3, [r7, #32]
 8007e94:	3304      	adds	r3, #4
 8007e96:	429a      	cmp	r2, r3
 8007e98:	d103      	bne.n	8007ea2 <xTaskRemoveFromEventList+0xa6>
 8007e9a:	6a3b      	ldr	r3, [r7, #32]
 8007e9c:	68da      	ldr	r2, [r3, #12]
 8007e9e:	697b      	ldr	r3, [r7, #20]
 8007ea0:	605a      	str	r2, [r3, #4]
 8007ea2:	6a3b      	ldr	r3, [r7, #32]
 8007ea4:	2200      	movs	r2, #0
 8007ea6:	615a      	str	r2, [r3, #20]
 8007ea8:	697b      	ldr	r3, [r7, #20]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	1e5a      	subs	r2, r3, #1
 8007eae:	697b      	ldr	r3, [r7, #20]
 8007eb0:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 8007eb2:	6a3b      	ldr	r3, [r7, #32]
 8007eb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007eb6:	2201      	movs	r2, #1
 8007eb8:	409a      	lsls	r2, r3
 8007eba:	4b38      	ldr	r3, [pc, #224]	@ (8007f9c <xTaskRemoveFromEventList+0x1a0>)
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	4313      	orrs	r3, r2
 8007ec0:	4a36      	ldr	r2, [pc, #216]	@ (8007f9c <xTaskRemoveFromEventList+0x1a0>)
 8007ec2:	6013      	str	r3, [r2, #0]
 8007ec4:	6a3b      	ldr	r3, [r7, #32]
 8007ec6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007ec8:	4935      	ldr	r1, [pc, #212]	@ (8007fa0 <xTaskRemoveFromEventList+0x1a4>)
 8007eca:	4613      	mov	r3, r2
 8007ecc:	009b      	lsls	r3, r3, #2
 8007ece:	4413      	add	r3, r2
 8007ed0:	009b      	lsls	r3, r3, #2
 8007ed2:	440b      	add	r3, r1
 8007ed4:	3304      	adds	r3, #4
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	613b      	str	r3, [r7, #16]
 8007eda:	6a3b      	ldr	r3, [r7, #32]
 8007edc:	693a      	ldr	r2, [r7, #16]
 8007ede:	609a      	str	r2, [r3, #8]
 8007ee0:	693b      	ldr	r3, [r7, #16]
 8007ee2:	689a      	ldr	r2, [r3, #8]
 8007ee4:	6a3b      	ldr	r3, [r7, #32]
 8007ee6:	60da      	str	r2, [r3, #12]
 8007ee8:	693b      	ldr	r3, [r7, #16]
 8007eea:	689b      	ldr	r3, [r3, #8]
 8007eec:	6a3a      	ldr	r2, [r7, #32]
 8007eee:	3204      	adds	r2, #4
 8007ef0:	605a      	str	r2, [r3, #4]
 8007ef2:	6a3b      	ldr	r3, [r7, #32]
 8007ef4:	1d1a      	adds	r2, r3, #4
 8007ef6:	693b      	ldr	r3, [r7, #16]
 8007ef8:	609a      	str	r2, [r3, #8]
 8007efa:	6a3b      	ldr	r3, [r7, #32]
 8007efc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007efe:	4613      	mov	r3, r2
 8007f00:	009b      	lsls	r3, r3, #2
 8007f02:	4413      	add	r3, r2
 8007f04:	009b      	lsls	r3, r3, #2
 8007f06:	4a26      	ldr	r2, [pc, #152]	@ (8007fa0 <xTaskRemoveFromEventList+0x1a4>)
 8007f08:	441a      	add	r2, r3
 8007f0a:	6a3b      	ldr	r3, [r7, #32]
 8007f0c:	615a      	str	r2, [r3, #20]
 8007f0e:	6a3b      	ldr	r3, [r7, #32]
 8007f10:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007f12:	4923      	ldr	r1, [pc, #140]	@ (8007fa0 <xTaskRemoveFromEventList+0x1a4>)
 8007f14:	4613      	mov	r3, r2
 8007f16:	009b      	lsls	r3, r3, #2
 8007f18:	4413      	add	r3, r2
 8007f1a:	009b      	lsls	r3, r3, #2
 8007f1c:	440b      	add	r3, r1
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	1c59      	adds	r1, r3, #1
 8007f22:	481f      	ldr	r0, [pc, #124]	@ (8007fa0 <xTaskRemoveFromEventList+0x1a4>)
 8007f24:	4613      	mov	r3, r2
 8007f26:	009b      	lsls	r3, r3, #2
 8007f28:	4413      	add	r3, r2
 8007f2a:	009b      	lsls	r3, r3, #2
 8007f2c:	4403      	add	r3, r0
 8007f2e:	6019      	str	r1, [r3, #0]
 8007f30:	e01b      	b.n	8007f6a <xTaskRemoveFromEventList+0x16e>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007f32:	4b1c      	ldr	r3, [pc, #112]	@ (8007fa4 <xTaskRemoveFromEventList+0x1a8>)
 8007f34:	685b      	ldr	r3, [r3, #4]
 8007f36:	61bb      	str	r3, [r7, #24]
 8007f38:	6a3b      	ldr	r3, [r7, #32]
 8007f3a:	69ba      	ldr	r2, [r7, #24]
 8007f3c:	61da      	str	r2, [r3, #28]
 8007f3e:	69bb      	ldr	r3, [r7, #24]
 8007f40:	689a      	ldr	r2, [r3, #8]
 8007f42:	6a3b      	ldr	r3, [r7, #32]
 8007f44:	621a      	str	r2, [r3, #32]
 8007f46:	69bb      	ldr	r3, [r7, #24]
 8007f48:	689b      	ldr	r3, [r3, #8]
 8007f4a:	6a3a      	ldr	r2, [r7, #32]
 8007f4c:	3218      	adds	r2, #24
 8007f4e:	605a      	str	r2, [r3, #4]
 8007f50:	6a3b      	ldr	r3, [r7, #32]
 8007f52:	f103 0218 	add.w	r2, r3, #24
 8007f56:	69bb      	ldr	r3, [r7, #24]
 8007f58:	609a      	str	r2, [r3, #8]
 8007f5a:	6a3b      	ldr	r3, [r7, #32]
 8007f5c:	4a11      	ldr	r2, [pc, #68]	@ (8007fa4 <xTaskRemoveFromEventList+0x1a8>)
 8007f5e:	629a      	str	r2, [r3, #40]	@ 0x28
 8007f60:	4b10      	ldr	r3, [pc, #64]	@ (8007fa4 <xTaskRemoveFromEventList+0x1a8>)
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	3301      	adds	r3, #1
 8007f66:	4a0f      	ldr	r2, [pc, #60]	@ (8007fa4 <xTaskRemoveFromEventList+0x1a8>)
 8007f68:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007f6a:	6a3b      	ldr	r3, [r7, #32]
 8007f6c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007f6e:	4b0e      	ldr	r3, [pc, #56]	@ (8007fa8 <xTaskRemoveFromEventList+0x1ac>)
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f74:	429a      	cmp	r2, r3
 8007f76:	d905      	bls.n	8007f84 <xTaskRemoveFromEventList+0x188>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8007f78:	2301      	movs	r3, #1
 8007f7a:	627b      	str	r3, [r7, #36]	@ 0x24

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8007f7c:	4b0b      	ldr	r3, [pc, #44]	@ (8007fac <xTaskRemoveFromEventList+0x1b0>)
 8007f7e:	2201      	movs	r2, #1
 8007f80:	601a      	str	r2, [r3, #0]
 8007f82:	e001      	b.n	8007f88 <xTaskRemoveFromEventList+0x18c>
    }
    else
    {
        xReturn = pdFALSE;
 8007f84:	2300      	movs	r3, #0
 8007f86:	627b      	str	r3, [r7, #36]	@ 0x24
    }

    return xReturn;
 8007f88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8007f8a:	4618      	mov	r0, r3
 8007f8c:	372c      	adds	r7, #44	@ 0x2c
 8007f8e:	46bd      	mov	sp, r7
 8007f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f94:	4770      	bx	lr
 8007f96:	bf00      	nop
 8007f98:	2000043c 	.word	0x2000043c
 8007f9c:	2000041c 	.word	0x2000041c
 8007fa0:	20000340 	.word	0x20000340
 8007fa4:	200003d4 	.word	0x200003d4
 8007fa8:	2000033c 	.word	0x2000033c
 8007fac:	20000428 	.word	0x20000428

08007fb0 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007fb0:	b480      	push	{r7}
 8007fb2:	b083      	sub	sp, #12
 8007fb4:	af00      	add	r7, sp, #0
 8007fb6:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007fb8:	4b06      	ldr	r3, [pc, #24]	@ (8007fd4 <vTaskInternalSetTimeOutState+0x24>)
 8007fba:	681a      	ldr	r2, [r3, #0]
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8007fc0:	4b05      	ldr	r3, [pc, #20]	@ (8007fd8 <vTaskInternalSetTimeOutState+0x28>)
 8007fc2:	681a      	ldr	r2, [r3, #0]
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	605a      	str	r2, [r3, #4]
}
 8007fc8:	bf00      	nop
 8007fca:	370c      	adds	r7, #12
 8007fcc:	46bd      	mov	sp, r7
 8007fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fd2:	4770      	bx	lr
 8007fd4:	2000042c 	.word	0x2000042c
 8007fd8:	20000418 	.word	0x20000418

08007fdc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8007fdc:	b580      	push	{r7, lr}
 8007fde:	b088      	sub	sp, #32
 8007fe0:	af00      	add	r7, sp, #0
 8007fe2:	6078      	str	r0, [r7, #4]
 8007fe4:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d10d      	bne.n	8008008 <xTaskCheckForTimeOut+0x2c>
        __asm volatile
 8007fec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ff0:	b672      	cpsid	i
 8007ff2:	f383 8811 	msr	BASEPRI, r3
 8007ff6:	f3bf 8f6f 	isb	sy
 8007ffa:	f3bf 8f4f 	dsb	sy
 8007ffe:	b662      	cpsie	i
 8008000:	613b      	str	r3, [r7, #16]
    }
 8008002:	bf00      	nop
 8008004:	bf00      	nop
 8008006:	e7fd      	b.n	8008004 <xTaskCheckForTimeOut+0x28>
    configASSERT( pxTicksToWait );
 8008008:	683b      	ldr	r3, [r7, #0]
 800800a:	2b00      	cmp	r3, #0
 800800c:	d10d      	bne.n	800802a <xTaskCheckForTimeOut+0x4e>
        __asm volatile
 800800e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008012:	b672      	cpsid	i
 8008014:	f383 8811 	msr	BASEPRI, r3
 8008018:	f3bf 8f6f 	isb	sy
 800801c:	f3bf 8f4f 	dsb	sy
 8008020:	b662      	cpsie	i
 8008022:	60fb      	str	r3, [r7, #12]
    }
 8008024:	bf00      	nop
 8008026:	bf00      	nop
 8008028:	e7fd      	b.n	8008026 <xTaskCheckForTimeOut+0x4a>

    taskENTER_CRITICAL();
 800802a:	f000 fe99 	bl	8008d60 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 800802e:	4b1f      	ldr	r3, [pc, #124]	@ (80080ac <xTaskCheckForTimeOut+0xd0>)
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	685b      	ldr	r3, [r3, #4]
 8008038:	69ba      	ldr	r2, [r7, #24]
 800803a:	1ad3      	subs	r3, r2, r3
 800803c:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 800803e:	683b      	ldr	r3, [r7, #0]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008046:	d102      	bne.n	800804e <xTaskCheckForTimeOut+0x72>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8008048:	2300      	movs	r3, #0
 800804a:	61fb      	str	r3, [r7, #28]
 800804c:	e026      	b.n	800809c <xTaskCheckForTimeOut+0xc0>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	681a      	ldr	r2, [r3, #0]
 8008052:	4b17      	ldr	r3, [pc, #92]	@ (80080b0 <xTaskCheckForTimeOut+0xd4>)
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	429a      	cmp	r2, r3
 8008058:	d00a      	beq.n	8008070 <xTaskCheckForTimeOut+0x94>
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	685b      	ldr	r3, [r3, #4]
 800805e:	69ba      	ldr	r2, [r7, #24]
 8008060:	429a      	cmp	r2, r3
 8008062:	d305      	bcc.n	8008070 <xTaskCheckForTimeOut+0x94>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8008064:	2301      	movs	r3, #1
 8008066:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8008068:	683b      	ldr	r3, [r7, #0]
 800806a:	2200      	movs	r2, #0
 800806c:	601a      	str	r2, [r3, #0]
 800806e:	e015      	b.n	800809c <xTaskCheckForTimeOut+0xc0>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008070:	683b      	ldr	r3, [r7, #0]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	697a      	ldr	r2, [r7, #20]
 8008076:	429a      	cmp	r2, r3
 8008078:	d20b      	bcs.n	8008092 <xTaskCheckForTimeOut+0xb6>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 800807a:	683b      	ldr	r3, [r7, #0]
 800807c:	681a      	ldr	r2, [r3, #0]
 800807e:	697b      	ldr	r3, [r7, #20]
 8008080:	1ad2      	subs	r2, r2, r3
 8008082:	683b      	ldr	r3, [r7, #0]
 8008084:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8008086:	6878      	ldr	r0, [r7, #4]
 8008088:	f7ff ff92 	bl	8007fb0 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 800808c:	2300      	movs	r3, #0
 800808e:	61fb      	str	r3, [r7, #28]
 8008090:	e004      	b.n	800809c <xTaskCheckForTimeOut+0xc0>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8008092:	683b      	ldr	r3, [r7, #0]
 8008094:	2200      	movs	r2, #0
 8008096:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8008098:	2301      	movs	r3, #1
 800809a:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 800809c:	f000 fe96 	bl	8008dcc <vPortExitCritical>

    return xReturn;
 80080a0:	69fb      	ldr	r3, [r7, #28]
}
 80080a2:	4618      	mov	r0, r3
 80080a4:	3720      	adds	r7, #32
 80080a6:	46bd      	mov	sp, r7
 80080a8:	bd80      	pop	{r7, pc}
 80080aa:	bf00      	nop
 80080ac:	20000418 	.word	0x20000418
 80080b0:	2000042c 	.word	0x2000042c

080080b4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80080b4:	b480      	push	{r7}
 80080b6:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 80080b8:	4b03      	ldr	r3, [pc, #12]	@ (80080c8 <vTaskMissedYield+0x14>)
 80080ba:	2201      	movs	r2, #1
 80080bc:	601a      	str	r2, [r3, #0]
}
 80080be:	bf00      	nop
 80080c0:	46bd      	mov	sp, r7
 80080c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080c6:	4770      	bx	lr
 80080c8:	20000428 	.word	0x20000428

080080cc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80080cc:	b580      	push	{r7, lr}
 80080ce:	b082      	sub	sp, #8
 80080d0:	af00      	add	r7, sp, #0
 80080d2:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 80080d4:	f000 f854 	bl	8008180 <prvCheckTasksWaitingTermination>
             *
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains more than one task
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80080d8:	4b07      	ldr	r3, [pc, #28]	@ (80080f8 <prvIdleTask+0x2c>)
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	2b01      	cmp	r3, #1
 80080de:	d907      	bls.n	80080f0 <prvIdleTask+0x24>
            {
                taskYIELD();
 80080e0:	4b06      	ldr	r3, [pc, #24]	@ (80080fc <prvIdleTask+0x30>)
 80080e2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80080e6:	601a      	str	r2, [r3, #0]
 80080e8:	f3bf 8f4f 	dsb	sy
 80080ec:	f3bf 8f6f 	isb	sy
            /* Call the user defined function from within the idle task.  This
             * allows the application designer to add background functionality
             * without the overhead of a separate task.
             * NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
             * CALL A FUNCTION THAT MIGHT BLOCK. */
            vApplicationIdleHook();
 80080f0:	f7f9 fbce 	bl	8001890 <vApplicationIdleHook>
        prvCheckTasksWaitingTermination();
 80080f4:	e7ee      	b.n	80080d4 <prvIdleTask+0x8>
 80080f6:	bf00      	nop
 80080f8:	20000340 	.word	0x20000340
 80080fc:	e000ed04 	.word	0xe000ed04

08008100 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008100:	b580      	push	{r7, lr}
 8008102:	b082      	sub	sp, #8
 8008104:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008106:	2300      	movs	r3, #0
 8008108:	607b      	str	r3, [r7, #4]
 800810a:	e00c      	b.n	8008126 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800810c:	687a      	ldr	r2, [r7, #4]
 800810e:	4613      	mov	r3, r2
 8008110:	009b      	lsls	r3, r3, #2
 8008112:	4413      	add	r3, r2
 8008114:	009b      	lsls	r3, r3, #2
 8008116:	4a12      	ldr	r2, [pc, #72]	@ (8008160 <prvInitialiseTaskLists+0x60>)
 8008118:	4413      	add	r3, r2
 800811a:	4618      	mov	r0, r3
 800811c:	f7fe fb3e 	bl	800679c <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	3301      	adds	r3, #1
 8008124:	607b      	str	r3, [r7, #4]
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	2b04      	cmp	r3, #4
 800812a:	d9ef      	bls.n	800810c <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 800812c:	480d      	ldr	r0, [pc, #52]	@ (8008164 <prvInitialiseTaskLists+0x64>)
 800812e:	f7fe fb35 	bl	800679c <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8008132:	480d      	ldr	r0, [pc, #52]	@ (8008168 <prvInitialiseTaskLists+0x68>)
 8008134:	f7fe fb32 	bl	800679c <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8008138:	480c      	ldr	r0, [pc, #48]	@ (800816c <prvInitialiseTaskLists+0x6c>)
 800813a:	f7fe fb2f 	bl	800679c <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 800813e:	480c      	ldr	r0, [pc, #48]	@ (8008170 <prvInitialiseTaskLists+0x70>)
 8008140:	f7fe fb2c 	bl	800679c <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 8008144:	480b      	ldr	r0, [pc, #44]	@ (8008174 <prvInitialiseTaskLists+0x74>)
 8008146:	f7fe fb29 	bl	800679c <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 800814a:	4b0b      	ldr	r3, [pc, #44]	@ (8008178 <prvInitialiseTaskLists+0x78>)
 800814c:	4a05      	ldr	r2, [pc, #20]	@ (8008164 <prvInitialiseTaskLists+0x64>)
 800814e:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008150:	4b0a      	ldr	r3, [pc, #40]	@ (800817c <prvInitialiseTaskLists+0x7c>)
 8008152:	4a05      	ldr	r2, [pc, #20]	@ (8008168 <prvInitialiseTaskLists+0x68>)
 8008154:	601a      	str	r2, [r3, #0]
}
 8008156:	bf00      	nop
 8008158:	3708      	adds	r7, #8
 800815a:	46bd      	mov	sp, r7
 800815c:	bd80      	pop	{r7, pc}
 800815e:	bf00      	nop
 8008160:	20000340 	.word	0x20000340
 8008164:	200003a4 	.word	0x200003a4
 8008168:	200003b8 	.word	0x200003b8
 800816c:	200003d4 	.word	0x200003d4
 8008170:	200003e8 	.word	0x200003e8
 8008174:	20000400 	.word	0x20000400
 8008178:	200003cc 	.word	0x200003cc
 800817c:	200003d0 	.word	0x200003d0

08008180 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008180:	b580      	push	{r7, lr}
 8008182:	b082      	sub	sp, #8
 8008184:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008186:	e019      	b.n	80081bc <prvCheckTasksWaitingTermination+0x3c>
        {
            taskENTER_CRITICAL();
 8008188:	f000 fdea 	bl	8008d60 <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800818c:	4b10      	ldr	r3, [pc, #64]	@ (80081d0 <prvCheckTasksWaitingTermination+0x50>)
 800818e:	68db      	ldr	r3, [r3, #12]
 8008190:	68db      	ldr	r3, [r3, #12]
 8008192:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	3304      	adds	r3, #4
 8008198:	4618      	mov	r0, r3
 800819a:	f7fe fb65 	bl	8006868 <uxListRemove>
                --uxCurrentNumberOfTasks;
 800819e:	4b0d      	ldr	r3, [pc, #52]	@ (80081d4 <prvCheckTasksWaitingTermination+0x54>)
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	3b01      	subs	r3, #1
 80081a4:	4a0b      	ldr	r2, [pc, #44]	@ (80081d4 <prvCheckTasksWaitingTermination+0x54>)
 80081a6:	6013      	str	r3, [r2, #0]
                --uxDeletedTasksWaitingCleanUp;
 80081a8:	4b0b      	ldr	r3, [pc, #44]	@ (80081d8 <prvCheckTasksWaitingTermination+0x58>)
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	3b01      	subs	r3, #1
 80081ae:	4a0a      	ldr	r2, [pc, #40]	@ (80081d8 <prvCheckTasksWaitingTermination+0x58>)
 80081b0:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
 80081b2:	f000 fe0b 	bl	8008dcc <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 80081b6:	6878      	ldr	r0, [r7, #4]
 80081b8:	f000 f810 	bl	80081dc <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80081bc:	4b06      	ldr	r3, [pc, #24]	@ (80081d8 <prvCheckTasksWaitingTermination+0x58>)
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d1e1      	bne.n	8008188 <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 80081c4:	bf00      	nop
 80081c6:	bf00      	nop
 80081c8:	3708      	adds	r7, #8
 80081ca:	46bd      	mov	sp, r7
 80081cc:	bd80      	pop	{r7, pc}
 80081ce:	bf00      	nop
 80081d0:	200003e8 	.word	0x200003e8
 80081d4:	20000414 	.word	0x20000414
 80081d8:	200003fc 	.word	0x200003fc

080081dc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 80081dc:	b580      	push	{r7, lr}
 80081de:	b082      	sub	sp, #8
 80081e0:	af00      	add	r7, sp, #0
 80081e2:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80081e8:	4618      	mov	r0, r3
 80081ea:	f000 ffaf 	bl	800914c <vPortFree>
            vPortFree( pxTCB );
 80081ee:	6878      	ldr	r0, [r7, #4]
 80081f0:	f000 ffac 	bl	800914c <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 80081f4:	bf00      	nop
 80081f6:	3708      	adds	r7, #8
 80081f8:	46bd      	mov	sp, r7
 80081fa:	bd80      	pop	{r7, pc}

080081fc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80081fc:	b480      	push	{r7}
 80081fe:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008200:	4b0a      	ldr	r3, [pc, #40]	@ (800822c <prvResetNextTaskUnblockTime+0x30>)
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	2b00      	cmp	r3, #0
 8008208:	d104      	bne.n	8008214 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 800820a:	4b09      	ldr	r3, [pc, #36]	@ (8008230 <prvResetNextTaskUnblockTime+0x34>)
 800820c:	f04f 32ff 	mov.w	r2, #4294967295
 8008210:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8008212:	e005      	b.n	8008220 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8008214:	4b05      	ldr	r3, [pc, #20]	@ (800822c <prvResetNextTaskUnblockTime+0x30>)
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	68db      	ldr	r3, [r3, #12]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	4a04      	ldr	r2, [pc, #16]	@ (8008230 <prvResetNextTaskUnblockTime+0x34>)
 800821e:	6013      	str	r3, [r2, #0]
}
 8008220:	bf00      	nop
 8008222:	46bd      	mov	sp, r7
 8008224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008228:	4770      	bx	lr
 800822a:	bf00      	nop
 800822c:	200003cc 	.word	0x200003cc
 8008230:	20000434 	.word	0x20000434

08008234 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8008234:	b480      	push	{r7}
 8008236:	b083      	sub	sp, #12
 8008238:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 800823a:	4b0b      	ldr	r3, [pc, #44]	@ (8008268 <xTaskGetSchedulerState+0x34>)
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	2b00      	cmp	r3, #0
 8008240:	d102      	bne.n	8008248 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8008242:	2301      	movs	r3, #1
 8008244:	607b      	str	r3, [r7, #4]
 8008246:	e008      	b.n	800825a <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008248:	4b08      	ldr	r3, [pc, #32]	@ (800826c <xTaskGetSchedulerState+0x38>)
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	2b00      	cmp	r3, #0
 800824e:	d102      	bne.n	8008256 <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8008250:	2302      	movs	r3, #2
 8008252:	607b      	str	r3, [r7, #4]
 8008254:	e001      	b.n	800825a <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8008256:	2300      	movs	r3, #0
 8008258:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 800825a:	687b      	ldr	r3, [r7, #4]
    }
 800825c:	4618      	mov	r0, r3
 800825e:	370c      	adds	r7, #12
 8008260:	46bd      	mov	sp, r7
 8008262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008266:	4770      	bx	lr
 8008268:	20000420 	.word	0x20000420
 800826c:	2000043c 	.word	0x2000043c

08008270 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8008270:	b580      	push	{r7, lr}
 8008272:	b088      	sub	sp, #32
 8008274:	af00      	add	r7, sp, #0
 8008276:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	61bb      	str	r3, [r7, #24]
        BaseType_t xReturn = pdFALSE;
 800827c:	2300      	movs	r3, #0
 800827e:	61fb      	str	r3, [r7, #28]

        if( pxMutexHolder != NULL )
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	2b00      	cmp	r3, #0
 8008284:	f000 8092 	beq.w	80083ac <xTaskPriorityDisinherit+0x13c>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 8008288:	4b4b      	ldr	r3, [pc, #300]	@ (80083b8 <xTaskPriorityDisinherit+0x148>)
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	69ba      	ldr	r2, [r7, #24]
 800828e:	429a      	cmp	r2, r3
 8008290:	d00d      	beq.n	80082ae <xTaskPriorityDisinherit+0x3e>
        __asm volatile
 8008292:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008296:	b672      	cpsid	i
 8008298:	f383 8811 	msr	BASEPRI, r3
 800829c:	f3bf 8f6f 	isb	sy
 80082a0:	f3bf 8f4f 	dsb	sy
 80082a4:	b662      	cpsie	i
 80082a6:	613b      	str	r3, [r7, #16]
    }
 80082a8:	bf00      	nop
 80082aa:	bf00      	nop
 80082ac:	e7fd      	b.n	80082aa <xTaskPriorityDisinherit+0x3a>
            configASSERT( pxTCB->uxMutexesHeld );
 80082ae:	69bb      	ldr	r3, [r7, #24]
 80082b0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d10d      	bne.n	80082d2 <xTaskPriorityDisinherit+0x62>
        __asm volatile
 80082b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80082ba:	b672      	cpsid	i
 80082bc:	f383 8811 	msr	BASEPRI, r3
 80082c0:	f3bf 8f6f 	isb	sy
 80082c4:	f3bf 8f4f 	dsb	sy
 80082c8:	b662      	cpsie	i
 80082ca:	60fb      	str	r3, [r7, #12]
    }
 80082cc:	bf00      	nop
 80082ce:	bf00      	nop
 80082d0:	e7fd      	b.n	80082ce <xTaskPriorityDisinherit+0x5e>
            ( pxTCB->uxMutexesHeld )--;
 80082d2:	69bb      	ldr	r3, [r7, #24]
 80082d4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80082d6:	1e5a      	subs	r2, r3, #1
 80082d8:	69bb      	ldr	r3, [r7, #24]
 80082da:	649a      	str	r2, [r3, #72]	@ 0x48

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80082dc:	69bb      	ldr	r3, [r7, #24]
 80082de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80082e0:	69bb      	ldr	r3, [r7, #24]
 80082e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80082e4:	429a      	cmp	r2, r3
 80082e6:	d061      	beq.n	80083ac <xTaskPriorityDisinherit+0x13c>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80082e8:	69bb      	ldr	r3, [r7, #24]
 80082ea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d15d      	bne.n	80083ac <xTaskPriorityDisinherit+0x13c>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80082f0:	69bb      	ldr	r3, [r7, #24]
 80082f2:	3304      	adds	r3, #4
 80082f4:	4618      	mov	r0, r3
 80082f6:	f7fe fab7 	bl	8006868 <uxListRemove>
 80082fa:	4603      	mov	r3, r0
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d10a      	bne.n	8008316 <xTaskPriorityDisinherit+0xa6>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8008300:	69bb      	ldr	r3, [r7, #24]
 8008302:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008304:	2201      	movs	r2, #1
 8008306:	fa02 f303 	lsl.w	r3, r2, r3
 800830a:	43da      	mvns	r2, r3
 800830c:	4b2b      	ldr	r3, [pc, #172]	@ (80083bc <xTaskPriorityDisinherit+0x14c>)
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	4013      	ands	r3, r2
 8008312:	4a2a      	ldr	r2, [pc, #168]	@ (80083bc <xTaskPriorityDisinherit+0x14c>)
 8008314:	6013      	str	r3, [r2, #0]
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008316:	69bb      	ldr	r3, [r7, #24]
 8008318:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800831a:	69bb      	ldr	r3, [r7, #24]
 800831c:	62da      	str	r2, [r3, #44]	@ 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800831e:	69bb      	ldr	r3, [r7, #24]
 8008320:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008322:	f1c3 0205 	rsb	r2, r3, #5
 8008326:	69bb      	ldr	r3, [r7, #24]
 8008328:	619a      	str	r2, [r3, #24]
                    prvAddTaskToReadyList( pxTCB );
 800832a:	69bb      	ldr	r3, [r7, #24]
 800832c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800832e:	2201      	movs	r2, #1
 8008330:	409a      	lsls	r2, r3
 8008332:	4b22      	ldr	r3, [pc, #136]	@ (80083bc <xTaskPriorityDisinherit+0x14c>)
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	4313      	orrs	r3, r2
 8008338:	4a20      	ldr	r2, [pc, #128]	@ (80083bc <xTaskPriorityDisinherit+0x14c>)
 800833a:	6013      	str	r3, [r2, #0]
 800833c:	69bb      	ldr	r3, [r7, #24]
 800833e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008340:	491f      	ldr	r1, [pc, #124]	@ (80083c0 <xTaskPriorityDisinherit+0x150>)
 8008342:	4613      	mov	r3, r2
 8008344:	009b      	lsls	r3, r3, #2
 8008346:	4413      	add	r3, r2
 8008348:	009b      	lsls	r3, r3, #2
 800834a:	440b      	add	r3, r1
 800834c:	3304      	adds	r3, #4
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	617b      	str	r3, [r7, #20]
 8008352:	69bb      	ldr	r3, [r7, #24]
 8008354:	697a      	ldr	r2, [r7, #20]
 8008356:	609a      	str	r2, [r3, #8]
 8008358:	697b      	ldr	r3, [r7, #20]
 800835a:	689a      	ldr	r2, [r3, #8]
 800835c:	69bb      	ldr	r3, [r7, #24]
 800835e:	60da      	str	r2, [r3, #12]
 8008360:	697b      	ldr	r3, [r7, #20]
 8008362:	689b      	ldr	r3, [r3, #8]
 8008364:	69ba      	ldr	r2, [r7, #24]
 8008366:	3204      	adds	r2, #4
 8008368:	605a      	str	r2, [r3, #4]
 800836a:	69bb      	ldr	r3, [r7, #24]
 800836c:	1d1a      	adds	r2, r3, #4
 800836e:	697b      	ldr	r3, [r7, #20]
 8008370:	609a      	str	r2, [r3, #8]
 8008372:	69bb      	ldr	r3, [r7, #24]
 8008374:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008376:	4613      	mov	r3, r2
 8008378:	009b      	lsls	r3, r3, #2
 800837a:	4413      	add	r3, r2
 800837c:	009b      	lsls	r3, r3, #2
 800837e:	4a10      	ldr	r2, [pc, #64]	@ (80083c0 <xTaskPriorityDisinherit+0x150>)
 8008380:	441a      	add	r2, r3
 8008382:	69bb      	ldr	r3, [r7, #24]
 8008384:	615a      	str	r2, [r3, #20]
 8008386:	69bb      	ldr	r3, [r7, #24]
 8008388:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800838a:	490d      	ldr	r1, [pc, #52]	@ (80083c0 <xTaskPriorityDisinherit+0x150>)
 800838c:	4613      	mov	r3, r2
 800838e:	009b      	lsls	r3, r3, #2
 8008390:	4413      	add	r3, r2
 8008392:	009b      	lsls	r3, r3, #2
 8008394:	440b      	add	r3, r1
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	1c59      	adds	r1, r3, #1
 800839a:	4809      	ldr	r0, [pc, #36]	@ (80083c0 <xTaskPriorityDisinherit+0x150>)
 800839c:	4613      	mov	r3, r2
 800839e:	009b      	lsls	r3, r3, #2
 80083a0:	4413      	add	r3, r2
 80083a2:	009b      	lsls	r3, r3, #2
 80083a4:	4403      	add	r3, r0
 80083a6:	6019      	str	r1, [r3, #0]
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 80083a8:	2301      	movs	r3, #1
 80083aa:	61fb      	str	r3, [r7, #28]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 80083ac:	69fb      	ldr	r3, [r7, #28]
    }
 80083ae:	4618      	mov	r0, r3
 80083b0:	3720      	adds	r7, #32
 80083b2:	46bd      	mov	sp, r7
 80083b4:	bd80      	pop	{r7, pc}
 80083b6:	bf00      	nop
 80083b8:	2000033c 	.word	0x2000033c
 80083bc:	2000041c 	.word	0x2000041c
 80083c0:	20000340 	.word	0x20000340

080083c4 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 80083c4:	b580      	push	{r7, lr}
 80083c6:	b086      	sub	sp, #24
 80083c8:	af00      	add	r7, sp, #0
 80083ca:	6078      	str	r0, [r7, #4]
 80083cc:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 80083ce:	4b36      	ldr	r3, [pc, #216]	@ (80084a8 <prvAddCurrentTaskToDelayedList+0xe4>)
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80083d4:	4b35      	ldr	r3, [pc, #212]	@ (80084ac <prvAddCurrentTaskToDelayedList+0xe8>)
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	3304      	adds	r3, #4
 80083da:	4618      	mov	r0, r3
 80083dc:	f7fe fa44 	bl	8006868 <uxListRemove>
 80083e0:	4603      	mov	r3, r0
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d10b      	bne.n	80083fe <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80083e6:	4b31      	ldr	r3, [pc, #196]	@ (80084ac <prvAddCurrentTaskToDelayedList+0xe8>)
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80083ec:	2201      	movs	r2, #1
 80083ee:	fa02 f303 	lsl.w	r3, r2, r3
 80083f2:	43da      	mvns	r2, r3
 80083f4:	4b2e      	ldr	r3, [pc, #184]	@ (80084b0 <prvAddCurrentTaskToDelayedList+0xec>)
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	4013      	ands	r3, r2
 80083fa:	4a2d      	ldr	r2, [pc, #180]	@ (80084b0 <prvAddCurrentTaskToDelayedList+0xec>)
 80083fc:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008404:	d124      	bne.n	8008450 <prvAddCurrentTaskToDelayedList+0x8c>
 8008406:	683b      	ldr	r3, [r7, #0]
 8008408:	2b00      	cmp	r3, #0
 800840a:	d021      	beq.n	8008450 <prvAddCurrentTaskToDelayedList+0x8c>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800840c:	4b29      	ldr	r3, [pc, #164]	@ (80084b4 <prvAddCurrentTaskToDelayedList+0xf0>)
 800840e:	685b      	ldr	r3, [r3, #4]
 8008410:	613b      	str	r3, [r7, #16]
 8008412:	4b26      	ldr	r3, [pc, #152]	@ (80084ac <prvAddCurrentTaskToDelayedList+0xe8>)
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	693a      	ldr	r2, [r7, #16]
 8008418:	609a      	str	r2, [r3, #8]
 800841a:	4b24      	ldr	r3, [pc, #144]	@ (80084ac <prvAddCurrentTaskToDelayedList+0xe8>)
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	693a      	ldr	r2, [r7, #16]
 8008420:	6892      	ldr	r2, [r2, #8]
 8008422:	60da      	str	r2, [r3, #12]
 8008424:	4b21      	ldr	r3, [pc, #132]	@ (80084ac <prvAddCurrentTaskToDelayedList+0xe8>)
 8008426:	681a      	ldr	r2, [r3, #0]
 8008428:	693b      	ldr	r3, [r7, #16]
 800842a:	689b      	ldr	r3, [r3, #8]
 800842c:	3204      	adds	r2, #4
 800842e:	605a      	str	r2, [r3, #4]
 8008430:	4b1e      	ldr	r3, [pc, #120]	@ (80084ac <prvAddCurrentTaskToDelayedList+0xe8>)
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	1d1a      	adds	r2, r3, #4
 8008436:	693b      	ldr	r3, [r7, #16]
 8008438:	609a      	str	r2, [r3, #8]
 800843a:	4b1c      	ldr	r3, [pc, #112]	@ (80084ac <prvAddCurrentTaskToDelayedList+0xe8>)
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	4a1d      	ldr	r2, [pc, #116]	@ (80084b4 <prvAddCurrentTaskToDelayedList+0xf0>)
 8008440:	615a      	str	r2, [r3, #20]
 8008442:	4b1c      	ldr	r3, [pc, #112]	@ (80084b4 <prvAddCurrentTaskToDelayedList+0xf0>)
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	3301      	adds	r3, #1
 8008448:	4a1a      	ldr	r2, [pc, #104]	@ (80084b4 <prvAddCurrentTaskToDelayedList+0xf0>)
 800844a:	6013      	str	r3, [r2, #0]
 800844c:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 800844e:	e026      	b.n	800849e <prvAddCurrentTaskToDelayedList+0xda>
            xTimeToWake = xConstTickCount + xTicksToWait;
 8008450:	697a      	ldr	r2, [r7, #20]
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	4413      	add	r3, r2
 8008456:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008458:	4b14      	ldr	r3, [pc, #80]	@ (80084ac <prvAddCurrentTaskToDelayedList+0xe8>)
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	68fa      	ldr	r2, [r7, #12]
 800845e:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 8008460:	68fa      	ldr	r2, [r7, #12]
 8008462:	697b      	ldr	r3, [r7, #20]
 8008464:	429a      	cmp	r2, r3
 8008466:	d209      	bcs.n	800847c <prvAddCurrentTaskToDelayedList+0xb8>
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008468:	4b13      	ldr	r3, [pc, #76]	@ (80084b8 <prvAddCurrentTaskToDelayedList+0xf4>)
 800846a:	681a      	ldr	r2, [r3, #0]
 800846c:	4b0f      	ldr	r3, [pc, #60]	@ (80084ac <prvAddCurrentTaskToDelayedList+0xe8>)
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	3304      	adds	r3, #4
 8008472:	4619      	mov	r1, r3
 8008474:	4610      	mov	r0, r2
 8008476:	f7fe f9be 	bl	80067f6 <vListInsert>
}
 800847a:	e010      	b.n	800849e <prvAddCurrentTaskToDelayedList+0xda>
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800847c:	4b0f      	ldr	r3, [pc, #60]	@ (80084bc <prvAddCurrentTaskToDelayedList+0xf8>)
 800847e:	681a      	ldr	r2, [r3, #0]
 8008480:	4b0a      	ldr	r3, [pc, #40]	@ (80084ac <prvAddCurrentTaskToDelayedList+0xe8>)
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	3304      	adds	r3, #4
 8008486:	4619      	mov	r1, r3
 8008488:	4610      	mov	r0, r2
 800848a:	f7fe f9b4 	bl	80067f6 <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 800848e:	4b0c      	ldr	r3, [pc, #48]	@ (80084c0 <prvAddCurrentTaskToDelayedList+0xfc>)
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	68fa      	ldr	r2, [r7, #12]
 8008494:	429a      	cmp	r2, r3
 8008496:	d202      	bcs.n	800849e <prvAddCurrentTaskToDelayedList+0xda>
                    xNextTaskUnblockTime = xTimeToWake;
 8008498:	4a09      	ldr	r2, [pc, #36]	@ (80084c0 <prvAddCurrentTaskToDelayedList+0xfc>)
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	6013      	str	r3, [r2, #0]
}
 800849e:	bf00      	nop
 80084a0:	3718      	adds	r7, #24
 80084a2:	46bd      	mov	sp, r7
 80084a4:	bd80      	pop	{r7, pc}
 80084a6:	bf00      	nop
 80084a8:	20000418 	.word	0x20000418
 80084ac:	2000033c 	.word	0x2000033c
 80084b0:	2000041c 	.word	0x2000041c
 80084b4:	20000400 	.word	0x20000400
 80084b8:	200003d0 	.word	0x200003d0
 80084bc:	200003cc 	.word	0x200003cc
 80084c0:	20000434 	.word	0x20000434

080084c4 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 80084c4:	b580      	push	{r7, lr}
 80084c6:	b084      	sub	sp, #16
 80084c8:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 80084ca:	2300      	movs	r3, #0
 80084cc:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 80084ce:	f000 faff 	bl	8008ad0 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 80084d2:	4b13      	ldr	r3, [pc, #76]	@ (8008520 <xTimerCreateTimerTask+0x5c>)
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d00b      	beq.n	80084f2 <xTimerCreateTimerTask+0x2e>
                    xReturn = pdPASS;
                }
            }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
            {
                xReturn = xTaskCreate( prvTimerTask,
 80084da:	4b12      	ldr	r3, [pc, #72]	@ (8008524 <xTimerCreateTimerTask+0x60>)
 80084dc:	9301      	str	r3, [sp, #4]
 80084de:	2302      	movs	r3, #2
 80084e0:	9300      	str	r3, [sp, #0]
 80084e2:	2300      	movs	r3, #0
 80084e4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80084e8:	490f      	ldr	r1, [pc, #60]	@ (8008528 <xTimerCreateTimerTask+0x64>)
 80084ea:	4810      	ldr	r0, [pc, #64]	@ (800852c <xTimerCreateTimerTask+0x68>)
 80084ec:	f7fe ff34 	bl	8007358 <xTaskCreate>
 80084f0:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d10d      	bne.n	8008514 <xTimerCreateTimerTask+0x50>
        __asm volatile
 80084f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80084fc:	b672      	cpsid	i
 80084fe:	f383 8811 	msr	BASEPRI, r3
 8008502:	f3bf 8f6f 	isb	sy
 8008506:	f3bf 8f4f 	dsb	sy
 800850a:	b662      	cpsie	i
 800850c:	603b      	str	r3, [r7, #0]
    }
 800850e:	bf00      	nop
 8008510:	bf00      	nop
 8008512:	e7fd      	b.n	8008510 <xTimerCreateTimerTask+0x4c>
        return xReturn;
 8008514:	687b      	ldr	r3, [r7, #4]
    }
 8008516:	4618      	mov	r0, r3
 8008518:	3708      	adds	r7, #8
 800851a:	46bd      	mov	sp, r7
 800851c:	bd80      	pop	{r7, pc}
 800851e:	bf00      	nop
 8008520:	20000470 	.word	0x20000470
 8008524:	20000474 	.word	0x20000474
 8008528:	08009490 	.word	0x08009490
 800852c:	0800872d 	.word	0x0800872d

08008530 <xTimerCreate>:
        TimerHandle_t xTimerCreate( const char * const pcTimerName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                                    const TickType_t xTimerPeriodInTicks,
                                    const BaseType_t xAutoReload,
                                    void * const pvTimerID,
                                    TimerCallbackFunction_t pxCallbackFunction )
        {
 8008530:	b580      	push	{r7, lr}
 8008532:	b088      	sub	sp, #32
 8008534:	af02      	add	r7, sp, #8
 8008536:	60f8      	str	r0, [r7, #12]
 8008538:	60b9      	str	r1, [r7, #8]
 800853a:	607a      	str	r2, [r7, #4]
 800853c:	603b      	str	r3, [r7, #0]
            Timer_t * pxNewTimer;

            pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 800853e:	2028      	movs	r0, #40	@ 0x28
 8008540:	f000 fd44 	bl	8008fcc <pvPortMalloc>
 8008544:	6178      	str	r0, [r7, #20]

            if( pxNewTimer != NULL )
 8008546:	697b      	ldr	r3, [r7, #20]
 8008548:	2b00      	cmp	r3, #0
 800854a:	d00d      	beq.n	8008568 <xTimerCreate+0x38>
            {
                /* Status is thus far zero as the timer is not created statically
                 * and has not been started.  The auto-reload bit may get set in
                 * prvInitialiseNewTimer. */
                pxNewTimer->ucStatus = 0x00;
 800854c:	697b      	ldr	r3, [r7, #20]
 800854e:	2200      	movs	r2, #0
 8008550:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
                prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, xAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8008554:	697b      	ldr	r3, [r7, #20]
 8008556:	9301      	str	r3, [sp, #4]
 8008558:	6a3b      	ldr	r3, [r7, #32]
 800855a:	9300      	str	r3, [sp, #0]
 800855c:	683b      	ldr	r3, [r7, #0]
 800855e:	687a      	ldr	r2, [r7, #4]
 8008560:	68b9      	ldr	r1, [r7, #8]
 8008562:	68f8      	ldr	r0, [r7, #12]
 8008564:	f000 f805 	bl	8008572 <prvInitialiseNewTimer>
            }

            return pxNewTimer;
 8008568:	697b      	ldr	r3, [r7, #20]
        }
 800856a:	4618      	mov	r0, r3
 800856c:	3718      	adds	r7, #24
 800856e:	46bd      	mov	sp, r7
 8008570:	bd80      	pop	{r7, pc}

08008572 <prvInitialiseNewTimer>:
                                       const TickType_t xTimerPeriodInTicks,
                                       const BaseType_t xAutoReload,
                                       void * const pvTimerID,
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer )
    {
 8008572:	b580      	push	{r7, lr}
 8008574:	b086      	sub	sp, #24
 8008576:	af00      	add	r7, sp, #0
 8008578:	60f8      	str	r0, [r7, #12]
 800857a:	60b9      	str	r1, [r7, #8]
 800857c:	607a      	str	r2, [r7, #4]
 800857e:	603b      	str	r3, [r7, #0]
        /* 0 is not a valid value for xTimerPeriodInTicks. */
        configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8008580:	68bb      	ldr	r3, [r7, #8]
 8008582:	2b00      	cmp	r3, #0
 8008584:	d10d      	bne.n	80085a2 <prvInitialiseNewTimer+0x30>
        __asm volatile
 8008586:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800858a:	b672      	cpsid	i
 800858c:	f383 8811 	msr	BASEPRI, r3
 8008590:	f3bf 8f6f 	isb	sy
 8008594:	f3bf 8f4f 	dsb	sy
 8008598:	b662      	cpsie	i
 800859a:	617b      	str	r3, [r7, #20]
    }
 800859c:	bf00      	nop
 800859e:	bf00      	nop
 80085a0:	e7fd      	b.n	800859e <prvInitialiseNewTimer+0x2c>

        /* Ensure the infrastructure used by the timer service task has been
         * created/initialised. */
        prvCheckForValidListAndQueue();
 80085a2:	f000 fa95 	bl	8008ad0 <prvCheckForValidListAndQueue>

        /* Initialise the timer structure members using the function
         * parameters. */
        pxNewTimer->pcTimerName = pcTimerName;
 80085a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085a8:	68fa      	ldr	r2, [r7, #12]
 80085aa:	601a      	str	r2, [r3, #0]
        pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 80085ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085ae:	68ba      	ldr	r2, [r7, #8]
 80085b0:	619a      	str	r2, [r3, #24]
        pxNewTimer->pvTimerID = pvTimerID;
 80085b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085b4:	683a      	ldr	r2, [r7, #0]
 80085b6:	61da      	str	r2, [r3, #28]
        pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 80085b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085ba:	6a3a      	ldr	r2, [r7, #32]
 80085bc:	621a      	str	r2, [r3, #32]
        vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 80085be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085c0:	3304      	adds	r3, #4
 80085c2:	4618      	mov	r0, r3
 80085c4:	f7fe f90a 	bl	80067dc <vListInitialiseItem>

        if( xAutoReload != pdFALSE )
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d008      	beq.n	80085e0 <prvInitialiseNewTimer+0x6e>
        {
            pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 80085ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085d0:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80085d4:	f043 0304 	orr.w	r3, r3, #4
 80085d8:	b2da      	uxtb	r2, r3
 80085da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085dc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        traceTIMER_CREATE( pxNewTimer );
    }
 80085e0:	bf00      	nop
 80085e2:	3718      	adds	r7, #24
 80085e4:	46bd      	mov	sp, r7
 80085e6:	bd80      	pop	{r7, pc}

080085e8 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 80085e8:	b580      	push	{r7, lr}
 80085ea:	b08a      	sub	sp, #40	@ 0x28
 80085ec:	af00      	add	r7, sp, #0
 80085ee:	60f8      	str	r0, [r7, #12]
 80085f0:	60b9      	str	r1, [r7, #8]
 80085f2:	607a      	str	r2, [r7, #4]
 80085f4:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 80085f6:	2300      	movs	r3, #0
 80085f8:	627b      	str	r3, [r7, #36]	@ 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d10d      	bne.n	800861c <xTimerGenericCommand+0x34>
        __asm volatile
 8008600:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008604:	b672      	cpsid	i
 8008606:	f383 8811 	msr	BASEPRI, r3
 800860a:	f3bf 8f6f 	isb	sy
 800860e:	f3bf 8f4f 	dsb	sy
 8008612:	b662      	cpsie	i
 8008614:	623b      	str	r3, [r7, #32]
    }
 8008616:	bf00      	nop
 8008618:	bf00      	nop
 800861a:	e7fd      	b.n	8008618 <xTimerGenericCommand+0x30>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 800861c:	4b19      	ldr	r3, [pc, #100]	@ (8008684 <xTimerGenericCommand+0x9c>)
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	2b00      	cmp	r3, #0
 8008622:	d02a      	beq.n	800867a <xTimerGenericCommand+0x92>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 8008624:	68bb      	ldr	r3, [r7, #8]
 8008626:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8008630:	68bb      	ldr	r3, [r7, #8]
 8008632:	2b05      	cmp	r3, #5
 8008634:	dc18      	bgt.n	8008668 <xTimerGenericCommand+0x80>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8008636:	f7ff fdfd 	bl	8008234 <xTaskGetSchedulerState>
 800863a:	4603      	mov	r3, r0
 800863c:	2b02      	cmp	r3, #2
 800863e:	d109      	bne.n	8008654 <xTimerGenericCommand+0x6c>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8008640:	4b10      	ldr	r3, [pc, #64]	@ (8008684 <xTimerGenericCommand+0x9c>)
 8008642:	6818      	ldr	r0, [r3, #0]
 8008644:	f107 0114 	add.w	r1, r7, #20
 8008648:	2300      	movs	r3, #0
 800864a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800864c:	f7fe fa3c 	bl	8006ac8 <xQueueGenericSend>
 8008650:	6278      	str	r0, [r7, #36]	@ 0x24
 8008652:	e012      	b.n	800867a <xTimerGenericCommand+0x92>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8008654:	4b0b      	ldr	r3, [pc, #44]	@ (8008684 <xTimerGenericCommand+0x9c>)
 8008656:	6818      	ldr	r0, [r3, #0]
 8008658:	f107 0114 	add.w	r1, r7, #20
 800865c:	2300      	movs	r3, #0
 800865e:	2200      	movs	r2, #0
 8008660:	f7fe fa32 	bl	8006ac8 <xQueueGenericSend>
 8008664:	6278      	str	r0, [r7, #36]	@ 0x24
 8008666:	e008      	b.n	800867a <xTimerGenericCommand+0x92>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8008668:	4b06      	ldr	r3, [pc, #24]	@ (8008684 <xTimerGenericCommand+0x9c>)
 800866a:	6818      	ldr	r0, [r3, #0]
 800866c:	f107 0114 	add.w	r1, r7, #20
 8008670:	2300      	movs	r3, #0
 8008672:	683a      	ldr	r2, [r7, #0]
 8008674:	f7fe fb32 	bl	8006cdc <xQueueGenericSendFromISR>
 8008678:	6278      	str	r0, [r7, #36]	@ 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 800867a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
 800867c:	4618      	mov	r0, r3
 800867e:	3728      	adds	r7, #40	@ 0x28
 8008680:	46bd      	mov	sp, r7
 8008682:	bd80      	pop	{r7, pc}
 8008684:	20000470 	.word	0x20000470

08008688 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 8008688:	b580      	push	{r7, lr}
 800868a:	b084      	sub	sp, #16
 800868c:	af00      	add	r7, sp, #0
 800868e:	60f8      	str	r0, [r7, #12]
 8008690:	60b9      	str	r1, [r7, #8]
 8008692:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8008694:	e008      	b.n	80086a8 <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	699b      	ldr	r3, [r3, #24]
 800869a:	68ba      	ldr	r2, [r7, #8]
 800869c:	4413      	add	r3, r2
 800869e:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	6a1b      	ldr	r3, [r3, #32]
 80086a4:	68f8      	ldr	r0, [r7, #12]
 80086a6:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	699a      	ldr	r2, [r3, #24]
 80086ac:	68bb      	ldr	r3, [r7, #8]
 80086ae:	18d1      	adds	r1, r2, r3
 80086b0:	68bb      	ldr	r3, [r7, #8]
 80086b2:	687a      	ldr	r2, [r7, #4]
 80086b4:	68f8      	ldr	r0, [r7, #12]
 80086b6:	f000 f8df 	bl	8008878 <prvInsertTimerInActiveList>
 80086ba:	4603      	mov	r3, r0
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d1ea      	bne.n	8008696 <prvReloadTimer+0xe>
        }
    }
 80086c0:	bf00      	nop
 80086c2:	bf00      	nop
 80086c4:	3710      	adds	r7, #16
 80086c6:	46bd      	mov	sp, r7
 80086c8:	bd80      	pop	{r7, pc}
	...

080086cc <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 80086cc:	b580      	push	{r7, lr}
 80086ce:	b084      	sub	sp, #16
 80086d0:	af00      	add	r7, sp, #0
 80086d2:	6078      	str	r0, [r7, #4]
 80086d4:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80086d6:	4b14      	ldr	r3, [pc, #80]	@ (8008728 <prvProcessExpiredTimer+0x5c>)
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	68db      	ldr	r3, [r3, #12]
 80086dc:	68db      	ldr	r3, [r3, #12]
 80086de:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	3304      	adds	r3, #4
 80086e4:	4618      	mov	r0, r3
 80086e6:	f7fe f8bf 	bl	8006868 <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80086f0:	f003 0304 	and.w	r3, r3, #4
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d005      	beq.n	8008704 <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 80086f8:	683a      	ldr	r2, [r7, #0]
 80086fa:	6879      	ldr	r1, [r7, #4]
 80086fc:	68f8      	ldr	r0, [r7, #12]
 80086fe:	f7ff ffc3 	bl	8008688 <prvReloadTimer>
 8008702:	e008      	b.n	8008716 <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800870a:	f023 0301 	bic.w	r3, r3, #1
 800870e:	b2da      	uxtb	r2, r3
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	6a1b      	ldr	r3, [r3, #32]
 800871a:	68f8      	ldr	r0, [r7, #12]
 800871c:	4798      	blx	r3
    }
 800871e:	bf00      	nop
 8008720:	3710      	adds	r7, #16
 8008722:	46bd      	mov	sp, r7
 8008724:	bd80      	pop	{r7, pc}
 8008726:	bf00      	nop
 8008728:	20000468 	.word	0x20000468

0800872c <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 800872c:	b580      	push	{r7, lr}
 800872e:	b084      	sub	sp, #16
 8008730:	af00      	add	r7, sp, #0
 8008732:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008734:	f107 0308 	add.w	r3, r7, #8
 8008738:	4618      	mov	r0, r3
 800873a:	f000 f859 	bl	80087f0 <prvGetNextExpireTime>
 800873e:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8008740:	68bb      	ldr	r3, [r7, #8]
 8008742:	4619      	mov	r1, r3
 8008744:	68f8      	ldr	r0, [r7, #12]
 8008746:	f000 f805 	bl	8008754 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 800874a:	f000 f8d7 	bl	80088fc <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800874e:	bf00      	nop
 8008750:	e7f0      	b.n	8008734 <prvTimerTask+0x8>
	...

08008754 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8008754:	b580      	push	{r7, lr}
 8008756:	b084      	sub	sp, #16
 8008758:	af00      	add	r7, sp, #0
 800875a:	6078      	str	r0, [r7, #4]
 800875c:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 800875e:	f7ff f83d 	bl	80077dc <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008762:	f107 0308 	add.w	r3, r7, #8
 8008766:	4618      	mov	r0, r3
 8008768:	f000 f866 	bl	8008838 <prvSampleTimeNow>
 800876c:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 800876e:	68bb      	ldr	r3, [r7, #8]
 8008770:	2b00      	cmp	r3, #0
 8008772:	d130      	bne.n	80087d6 <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008774:	683b      	ldr	r3, [r7, #0]
 8008776:	2b00      	cmp	r3, #0
 8008778:	d10a      	bne.n	8008790 <prvProcessTimerOrBlockTask+0x3c>
 800877a:	687a      	ldr	r2, [r7, #4]
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	429a      	cmp	r2, r3
 8008780:	d806      	bhi.n	8008790 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8008782:	f7ff f839 	bl	80077f8 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8008786:	68f9      	ldr	r1, [r7, #12]
 8008788:	6878      	ldr	r0, [r7, #4]
 800878a:	f7ff ff9f 	bl	80086cc <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 800878e:	e024      	b.n	80087da <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8008790:	683b      	ldr	r3, [r7, #0]
 8008792:	2b00      	cmp	r3, #0
 8008794:	d008      	beq.n	80087a8 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8008796:	4b13      	ldr	r3, [pc, #76]	@ (80087e4 <prvProcessTimerOrBlockTask+0x90>)
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	2b00      	cmp	r3, #0
 800879e:	d101      	bne.n	80087a4 <prvProcessTimerOrBlockTask+0x50>
 80087a0:	2301      	movs	r3, #1
 80087a2:	e000      	b.n	80087a6 <prvProcessTimerOrBlockTask+0x52>
 80087a4:	2300      	movs	r3, #0
 80087a6:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80087a8:	4b0f      	ldr	r3, [pc, #60]	@ (80087e8 <prvProcessTimerOrBlockTask+0x94>)
 80087aa:	6818      	ldr	r0, [r3, #0]
 80087ac:	687a      	ldr	r2, [r7, #4]
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	1ad3      	subs	r3, r2, r3
 80087b2:	683a      	ldr	r2, [r7, #0]
 80087b4:	4619      	mov	r1, r3
 80087b6:	f7fe fd9b 	bl	80072f0 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 80087ba:	f7ff f81d 	bl	80077f8 <xTaskResumeAll>
 80087be:	4603      	mov	r3, r0
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	d10a      	bne.n	80087da <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 80087c4:	4b09      	ldr	r3, [pc, #36]	@ (80087ec <prvProcessTimerOrBlockTask+0x98>)
 80087c6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80087ca:	601a      	str	r2, [r3, #0]
 80087cc:	f3bf 8f4f 	dsb	sy
 80087d0:	f3bf 8f6f 	isb	sy
    }
 80087d4:	e001      	b.n	80087da <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 80087d6:	f7ff f80f 	bl	80077f8 <xTaskResumeAll>
    }
 80087da:	bf00      	nop
 80087dc:	3710      	adds	r7, #16
 80087de:	46bd      	mov	sp, r7
 80087e0:	bd80      	pop	{r7, pc}
 80087e2:	bf00      	nop
 80087e4:	2000046c 	.word	0x2000046c
 80087e8:	20000470 	.word	0x20000470
 80087ec:	e000ed04 	.word	0xe000ed04

080087f0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 80087f0:	b480      	push	{r7}
 80087f2:	b085      	sub	sp, #20
 80087f4:	af00      	add	r7, sp, #0
 80087f6:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80087f8:	4b0e      	ldr	r3, [pc, #56]	@ (8008834 <prvGetNextExpireTime+0x44>)
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d101      	bne.n	8008806 <prvGetNextExpireTime+0x16>
 8008802:	2201      	movs	r2, #1
 8008804:	e000      	b.n	8008808 <prvGetNextExpireTime+0x18>
 8008806:	2200      	movs	r2, #0
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	2b00      	cmp	r3, #0
 8008812:	d105      	bne.n	8008820 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008814:	4b07      	ldr	r3, [pc, #28]	@ (8008834 <prvGetNextExpireTime+0x44>)
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	68db      	ldr	r3, [r3, #12]
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	60fb      	str	r3, [r7, #12]
 800881e:	e001      	b.n	8008824 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8008820:	2300      	movs	r3, #0
 8008822:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8008824:	68fb      	ldr	r3, [r7, #12]
    }
 8008826:	4618      	mov	r0, r3
 8008828:	3714      	adds	r7, #20
 800882a:	46bd      	mov	sp, r7
 800882c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008830:	4770      	bx	lr
 8008832:	bf00      	nop
 8008834:	20000468 	.word	0x20000468

08008838 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8008838:	b580      	push	{r7, lr}
 800883a:	b084      	sub	sp, #16
 800883c:	af00      	add	r7, sp, #0
 800883e:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8008840:	f7ff f8d8 	bl	80079f4 <xTaskGetTickCount>
 8008844:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8008846:	4b0b      	ldr	r3, [pc, #44]	@ (8008874 <prvSampleTimeNow+0x3c>)
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	68fa      	ldr	r2, [r7, #12]
 800884c:	429a      	cmp	r2, r3
 800884e:	d205      	bcs.n	800885c <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8008850:	f000 f918 	bl	8008a84 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	2201      	movs	r2, #1
 8008858:	601a      	str	r2, [r3, #0]
 800885a:	e002      	b.n	8008862 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	2200      	movs	r2, #0
 8008860:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8008862:	4a04      	ldr	r2, [pc, #16]	@ (8008874 <prvSampleTimeNow+0x3c>)
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8008868:	68fb      	ldr	r3, [r7, #12]
    }
 800886a:	4618      	mov	r0, r3
 800886c:	3710      	adds	r7, #16
 800886e:	46bd      	mov	sp, r7
 8008870:	bd80      	pop	{r7, pc}
 8008872:	bf00      	nop
 8008874:	20000478 	.word	0x20000478

08008878 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8008878:	b580      	push	{r7, lr}
 800887a:	b086      	sub	sp, #24
 800887c:	af00      	add	r7, sp, #0
 800887e:	60f8      	str	r0, [r7, #12]
 8008880:	60b9      	str	r1, [r7, #8]
 8008882:	607a      	str	r2, [r7, #4]
 8008884:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8008886:	2300      	movs	r3, #0
 8008888:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	68ba      	ldr	r2, [r7, #8]
 800888e:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	68fa      	ldr	r2, [r7, #12]
 8008894:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8008896:	68ba      	ldr	r2, [r7, #8]
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	429a      	cmp	r2, r3
 800889c:	d812      	bhi.n	80088c4 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800889e:	687a      	ldr	r2, [r7, #4]
 80088a0:	683b      	ldr	r3, [r7, #0]
 80088a2:	1ad2      	subs	r2, r2, r3
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	699b      	ldr	r3, [r3, #24]
 80088a8:	429a      	cmp	r2, r3
 80088aa:	d302      	bcc.n	80088b2 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 80088ac:	2301      	movs	r3, #1
 80088ae:	617b      	str	r3, [r7, #20]
 80088b0:	e01b      	b.n	80088ea <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80088b2:	4b10      	ldr	r3, [pc, #64]	@ (80088f4 <prvInsertTimerInActiveList+0x7c>)
 80088b4:	681a      	ldr	r2, [r3, #0]
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	3304      	adds	r3, #4
 80088ba:	4619      	mov	r1, r3
 80088bc:	4610      	mov	r0, r2
 80088be:	f7fd ff9a 	bl	80067f6 <vListInsert>
 80088c2:	e012      	b.n	80088ea <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80088c4:	687a      	ldr	r2, [r7, #4]
 80088c6:	683b      	ldr	r3, [r7, #0]
 80088c8:	429a      	cmp	r2, r3
 80088ca:	d206      	bcs.n	80088da <prvInsertTimerInActiveList+0x62>
 80088cc:	68ba      	ldr	r2, [r7, #8]
 80088ce:	683b      	ldr	r3, [r7, #0]
 80088d0:	429a      	cmp	r2, r3
 80088d2:	d302      	bcc.n	80088da <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 80088d4:	2301      	movs	r3, #1
 80088d6:	617b      	str	r3, [r7, #20]
 80088d8:	e007      	b.n	80088ea <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80088da:	4b07      	ldr	r3, [pc, #28]	@ (80088f8 <prvInsertTimerInActiveList+0x80>)
 80088dc:	681a      	ldr	r2, [r3, #0]
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	3304      	adds	r3, #4
 80088e2:	4619      	mov	r1, r3
 80088e4:	4610      	mov	r0, r2
 80088e6:	f7fd ff86 	bl	80067f6 <vListInsert>
            }
        }

        return xProcessTimerNow;
 80088ea:	697b      	ldr	r3, [r7, #20]
    }
 80088ec:	4618      	mov	r0, r3
 80088ee:	3718      	adds	r7, #24
 80088f0:	46bd      	mov	sp, r7
 80088f2:	bd80      	pop	{r7, pc}
 80088f4:	2000046c 	.word	0x2000046c
 80088f8:	20000468 	.word	0x20000468

080088fc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 80088fc:	b580      	push	{r7, lr}
 80088fe:	b088      	sub	sp, #32
 8008900:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008902:	e0ab      	b.n	8008a5c <prvProcessReceivedCommands+0x160>
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008904:	68bb      	ldr	r3, [r7, #8]
 8008906:	2b00      	cmp	r3, #0
 8008908:	f2c0 80a8 	blt.w	8008a5c <prvProcessReceivedCommands+0x160>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800890c:	693b      	ldr	r3, [r7, #16]
 800890e:	61fb      	str	r3, [r7, #28]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8008910:	69fb      	ldr	r3, [r7, #28]
 8008912:	695b      	ldr	r3, [r3, #20]
 8008914:	2b00      	cmp	r3, #0
 8008916:	d004      	beq.n	8008922 <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008918:	69fb      	ldr	r3, [r7, #28]
 800891a:	3304      	adds	r3, #4
 800891c:	4618      	mov	r0, r3
 800891e:	f7fd ffa3 	bl	8006868 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008922:	1d3b      	adds	r3, r7, #4
 8008924:	4618      	mov	r0, r3
 8008926:	f7ff ff87 	bl	8008838 <prvSampleTimeNow>
 800892a:	61b8      	str	r0, [r7, #24]

                switch( xMessage.xMessageID )
 800892c:	68bb      	ldr	r3, [r7, #8]
 800892e:	3b01      	subs	r3, #1
 8008930:	2b08      	cmp	r3, #8
 8008932:	f200 8090 	bhi.w	8008a56 <prvProcessReceivedCommands+0x15a>
 8008936:	a201      	add	r2, pc, #4	@ (adr r2, 800893c <prvProcessReceivedCommands+0x40>)
 8008938:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800893c:	08008961 	.word	0x08008961
 8008940:	08008961 	.word	0x08008961
 8008944:	080089c9 	.word	0x080089c9
 8008948:	080089dd 	.word	0x080089dd
 800894c:	08008a2d 	.word	0x08008a2d
 8008950:	08008961 	.word	0x08008961
 8008954:	08008961 	.word	0x08008961
 8008958:	080089c9 	.word	0x080089c9
 800895c:	080089dd 	.word	0x080089dd
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008960:	69fb      	ldr	r3, [r7, #28]
 8008962:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8008966:	f043 0301 	orr.w	r3, r3, #1
 800896a:	b2da      	uxtb	r2, r3
 800896c:	69fb      	ldr	r3, [r7, #28]
 800896e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8008972:	68fa      	ldr	r2, [r7, #12]
 8008974:	69fb      	ldr	r3, [r7, #28]
 8008976:	699b      	ldr	r3, [r3, #24]
 8008978:	18d1      	adds	r1, r2, r3
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	69ba      	ldr	r2, [r7, #24]
 800897e:	69f8      	ldr	r0, [r7, #28]
 8008980:	f7ff ff7a 	bl	8008878 <prvInsertTimerInActiveList>
 8008984:	4603      	mov	r3, r0
 8008986:	2b00      	cmp	r3, #0
 8008988:	d067      	beq.n	8008a5a <prvProcessReceivedCommands+0x15e>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800898a:	69fb      	ldr	r3, [r7, #28]
 800898c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8008990:	f003 0304 	and.w	r3, r3, #4
 8008994:	2b00      	cmp	r3, #0
 8008996:	d009      	beq.n	80089ac <prvProcessReceivedCommands+0xb0>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 8008998:	68fa      	ldr	r2, [r7, #12]
 800899a:	69fb      	ldr	r3, [r7, #28]
 800899c:	699b      	ldr	r3, [r3, #24]
 800899e:	4413      	add	r3, r2
 80089a0:	69ba      	ldr	r2, [r7, #24]
 80089a2:	4619      	mov	r1, r3
 80089a4:	69f8      	ldr	r0, [r7, #28]
 80089a6:	f7ff fe6f 	bl	8008688 <prvReloadTimer>
 80089aa:	e008      	b.n	80089be <prvProcessReceivedCommands+0xc2>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80089ac:	69fb      	ldr	r3, [r7, #28]
 80089ae:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80089b2:	f023 0301 	bic.w	r3, r3, #1
 80089b6:	b2da      	uxtb	r2, r3
 80089b8:	69fb      	ldr	r3, [r7, #28]
 80089ba:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80089be:	69fb      	ldr	r3, [r7, #28]
 80089c0:	6a1b      	ldr	r3, [r3, #32]
 80089c2:	69f8      	ldr	r0, [r7, #28]
 80089c4:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 80089c6:	e048      	b.n	8008a5a <prvProcessReceivedCommands+0x15e>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80089c8:	69fb      	ldr	r3, [r7, #28]
 80089ca:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80089ce:	f023 0301 	bic.w	r3, r3, #1
 80089d2:	b2da      	uxtb	r2, r3
 80089d4:	69fb      	ldr	r3, [r7, #28]
 80089d6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
                        break;
 80089da:	e03f      	b.n	8008a5c <prvProcessReceivedCommands+0x160>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80089dc:	69fb      	ldr	r3, [r7, #28]
 80089de:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80089e2:	f043 0301 	orr.w	r3, r3, #1
 80089e6:	b2da      	uxtb	r2, r3
 80089e8:	69fb      	ldr	r3, [r7, #28]
 80089ea:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80089ee:	68fa      	ldr	r2, [r7, #12]
 80089f0:	69fb      	ldr	r3, [r7, #28]
 80089f2:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80089f4:	69fb      	ldr	r3, [r7, #28]
 80089f6:	699b      	ldr	r3, [r3, #24]
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	d10d      	bne.n	8008a18 <prvProcessReceivedCommands+0x11c>
        __asm volatile
 80089fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a00:	b672      	cpsid	i
 8008a02:	f383 8811 	msr	BASEPRI, r3
 8008a06:	f3bf 8f6f 	isb	sy
 8008a0a:	f3bf 8f4f 	dsb	sy
 8008a0e:	b662      	cpsie	i
 8008a10:	617b      	str	r3, [r7, #20]
    }
 8008a12:	bf00      	nop
 8008a14:	bf00      	nop
 8008a16:	e7fd      	b.n	8008a14 <prvProcessReceivedCommands+0x118>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8008a18:	69fb      	ldr	r3, [r7, #28]
 8008a1a:	699a      	ldr	r2, [r3, #24]
 8008a1c:	69bb      	ldr	r3, [r7, #24]
 8008a1e:	18d1      	adds	r1, r2, r3
 8008a20:	69bb      	ldr	r3, [r7, #24]
 8008a22:	69ba      	ldr	r2, [r7, #24]
 8008a24:	69f8      	ldr	r0, [r7, #28]
 8008a26:	f7ff ff27 	bl	8008878 <prvInsertTimerInActiveList>
                        break;
 8008a2a:	e017      	b.n	8008a5c <prvProcessReceivedCommands+0x160>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8008a2c:	69fb      	ldr	r3, [r7, #28]
 8008a2e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8008a32:	f003 0302 	and.w	r3, r3, #2
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d103      	bne.n	8008a42 <prvProcessReceivedCommands+0x146>
                            {
                                vPortFree( pxTimer );
 8008a3a:	69f8      	ldr	r0, [r7, #28]
 8008a3c:	f000 fb86 	bl	800914c <vPortFree>
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8008a40:	e00c      	b.n	8008a5c <prvProcessReceivedCommands+0x160>
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8008a42:	69fb      	ldr	r3, [r7, #28]
 8008a44:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8008a48:	f023 0301 	bic.w	r3, r3, #1
 8008a4c:	b2da      	uxtb	r2, r3
 8008a4e:	69fb      	ldr	r3, [r7, #28]
 8008a50:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
                        break;
 8008a54:	e002      	b.n	8008a5c <prvProcessReceivedCommands+0x160>

                    default:
                        /* Don't expect to get here. */
                        break;
 8008a56:	bf00      	nop
 8008a58:	e000      	b.n	8008a5c <prvProcessReceivedCommands+0x160>
                        break;
 8008a5a:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008a5c:	4b08      	ldr	r3, [pc, #32]	@ (8008a80 <prvProcessReceivedCommands+0x184>)
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	f107 0108 	add.w	r1, r7, #8
 8008a64:	2200      	movs	r2, #0
 8008a66:	4618      	mov	r0, r3
 8008a68:	f7fe f9f8 	bl	8006e5c <xQueueReceive>
 8008a6c:	4603      	mov	r3, r0
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	f47f af48 	bne.w	8008904 <prvProcessReceivedCommands+0x8>
                }
            }
        }
    }
 8008a74:	bf00      	nop
 8008a76:	bf00      	nop
 8008a78:	3720      	adds	r7, #32
 8008a7a:	46bd      	mov	sp, r7
 8008a7c:	bd80      	pop	{r7, pc}
 8008a7e:	bf00      	nop
 8008a80:	20000470 	.word	0x20000470

08008a84 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8008a84:	b580      	push	{r7, lr}
 8008a86:	b082      	sub	sp, #8
 8008a88:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008a8a:	e009      	b.n	8008aa0 <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008a8c:	4b0e      	ldr	r3, [pc, #56]	@ (8008ac8 <prvSwitchTimerLists+0x44>)
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	68db      	ldr	r3, [r3, #12]
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 8008a96:	f04f 31ff 	mov.w	r1, #4294967295
 8008a9a:	6838      	ldr	r0, [r7, #0]
 8008a9c:	f7ff fe16 	bl	80086cc <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008aa0:	4b09      	ldr	r3, [pc, #36]	@ (8008ac8 <prvSwitchTimerLists+0x44>)
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	d1f0      	bne.n	8008a8c <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 8008aaa:	4b07      	ldr	r3, [pc, #28]	@ (8008ac8 <prvSwitchTimerLists+0x44>)
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 8008ab0:	4b06      	ldr	r3, [pc, #24]	@ (8008acc <prvSwitchTimerLists+0x48>)
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	4a04      	ldr	r2, [pc, #16]	@ (8008ac8 <prvSwitchTimerLists+0x44>)
 8008ab6:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8008ab8:	4a04      	ldr	r2, [pc, #16]	@ (8008acc <prvSwitchTimerLists+0x48>)
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	6013      	str	r3, [r2, #0]
    }
 8008abe:	bf00      	nop
 8008ac0:	3708      	adds	r7, #8
 8008ac2:	46bd      	mov	sp, r7
 8008ac4:	bd80      	pop	{r7, pc}
 8008ac6:	bf00      	nop
 8008ac8:	20000468 	.word	0x20000468
 8008acc:	2000046c 	.word	0x2000046c

08008ad0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8008ad0:	b580      	push	{r7, lr}
 8008ad2:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8008ad4:	f000 f944 	bl	8008d60 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8008ad8:	4b12      	ldr	r3, [pc, #72]	@ (8008b24 <prvCheckForValidListAndQueue+0x54>)
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d11d      	bne.n	8008b1c <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8008ae0:	4811      	ldr	r0, [pc, #68]	@ (8008b28 <prvCheckForValidListAndQueue+0x58>)
 8008ae2:	f7fd fe5b 	bl	800679c <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8008ae6:	4811      	ldr	r0, [pc, #68]	@ (8008b2c <prvCheckForValidListAndQueue+0x5c>)
 8008ae8:	f7fd fe58 	bl	800679c <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8008aec:	4b10      	ldr	r3, [pc, #64]	@ (8008b30 <prvCheckForValidListAndQueue+0x60>)
 8008aee:	4a0e      	ldr	r2, [pc, #56]	@ (8008b28 <prvCheckForValidListAndQueue+0x58>)
 8008af0:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8008af2:	4b10      	ldr	r3, [pc, #64]	@ (8008b34 <prvCheckForValidListAndQueue+0x64>)
 8008af4:	4a0d      	ldr	r2, [pc, #52]	@ (8008b2c <prvCheckForValidListAndQueue+0x5c>)
 8008af6:	601a      	str	r2, [r3, #0]

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                }
                #else
                {
                    xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8008af8:	2200      	movs	r2, #0
 8008afa:	210c      	movs	r1, #12
 8008afc:	200a      	movs	r0, #10
 8008afe:	f7fd ff73 	bl	80069e8 <xQueueGenericCreate>
 8008b02:	4603      	mov	r3, r0
 8008b04:	4a07      	ldr	r2, [pc, #28]	@ (8008b24 <prvCheckForValidListAndQueue+0x54>)
 8008b06:	6013      	str	r3, [r2, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 8008b08:	4b06      	ldr	r3, [pc, #24]	@ (8008b24 <prvCheckForValidListAndQueue+0x54>)
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d005      	beq.n	8008b1c <prvCheckForValidListAndQueue+0x4c>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008b10:	4b04      	ldr	r3, [pc, #16]	@ (8008b24 <prvCheckForValidListAndQueue+0x54>)
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	4908      	ldr	r1, [pc, #32]	@ (8008b38 <prvCheckForValidListAndQueue+0x68>)
 8008b16:	4618      	mov	r0, r3
 8008b18:	f7fe fb98 	bl	800724c <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8008b1c:	f000 f956 	bl	8008dcc <vPortExitCritical>
    }
 8008b20:	bf00      	nop
 8008b22:	bd80      	pop	{r7, pc}
 8008b24:	20000470 	.word	0x20000470
 8008b28:	20000440 	.word	0x20000440
 8008b2c:	20000454 	.word	0x20000454
 8008b30:	20000468 	.word	0x20000468
 8008b34:	2000046c 	.word	0x2000046c
 8008b38:	08009498 	.word	0x08009498

08008b3c <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8008b3c:	b480      	push	{r7}
 8008b3e:	b085      	sub	sp, #20
 8008b40:	af00      	add	r7, sp, #0
 8008b42:	60f8      	str	r0, [r7, #12]
 8008b44:	60b9      	str	r1, [r7, #8]
 8008b46:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	3b04      	subs	r3, #4
 8008b4c:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8008b4e:	68fb      	ldr	r3, [r7, #12]
 8008b50:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8008b54:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	3b04      	subs	r3, #4
 8008b5a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8008b5c:	68bb      	ldr	r3, [r7, #8]
 8008b5e:	f023 0201 	bic.w	r2, r3, #1
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	3b04      	subs	r3, #4
 8008b6a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8008b6c:	4a0c      	ldr	r2, [pc, #48]	@ (8008ba0 <pxPortInitialiseStack+0x64>)
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	3b14      	subs	r3, #20
 8008b76:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8008b78:	687a      	ldr	r2, [r7, #4]
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	3b04      	subs	r3, #4
 8008b82:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	f06f 0202 	mvn.w	r2, #2
 8008b8a:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	3b20      	subs	r3, #32
 8008b90:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8008b92:	68fb      	ldr	r3, [r7, #12]
}
 8008b94:	4618      	mov	r0, r3
 8008b96:	3714      	adds	r7, #20
 8008b98:	46bd      	mov	sp, r7
 8008b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b9e:	4770      	bx	lr
 8008ba0:	08008ba5 	.word	0x08008ba5

08008ba4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008ba4:	b480      	push	{r7}
 8008ba6:	b085      	sub	sp, #20
 8008ba8:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8008baa:	2300      	movs	r3, #0
 8008bac:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8008bae:	4b15      	ldr	r3, [pc, #84]	@ (8008c04 <prvTaskExitError+0x60>)
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008bb6:	d00d      	beq.n	8008bd4 <prvTaskExitError+0x30>
        __asm volatile
 8008bb8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008bbc:	b672      	cpsid	i
 8008bbe:	f383 8811 	msr	BASEPRI, r3
 8008bc2:	f3bf 8f6f 	isb	sy
 8008bc6:	f3bf 8f4f 	dsb	sy
 8008bca:	b662      	cpsie	i
 8008bcc:	60fb      	str	r3, [r7, #12]
    }
 8008bce:	bf00      	nop
 8008bd0:	bf00      	nop
 8008bd2:	e7fd      	b.n	8008bd0 <prvTaskExitError+0x2c>
        __asm volatile
 8008bd4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008bd8:	b672      	cpsid	i
 8008bda:	f383 8811 	msr	BASEPRI, r3
 8008bde:	f3bf 8f6f 	isb	sy
 8008be2:	f3bf 8f4f 	dsb	sy
 8008be6:	b662      	cpsie	i
 8008be8:	60bb      	str	r3, [r7, #8]
    }
 8008bea:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8008bec:	bf00      	nop
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d0fc      	beq.n	8008bee <prvTaskExitError+0x4a>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8008bf4:	bf00      	nop
 8008bf6:	bf00      	nop
 8008bf8:	3714      	adds	r7, #20
 8008bfa:	46bd      	mov	sp, r7
 8008bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c00:	4770      	bx	lr
 8008c02:	bf00      	nop
 8008c04:	2000002c 	.word	0x2000002c
	...

08008c10 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8008c10:	4b07      	ldr	r3, [pc, #28]	@ (8008c30 <pxCurrentTCBConst2>)
 8008c12:	6819      	ldr	r1, [r3, #0]
 8008c14:	6808      	ldr	r0, [r1, #0]
 8008c16:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c1a:	f380 8809 	msr	PSP, r0
 8008c1e:	f3bf 8f6f 	isb	sy
 8008c22:	f04f 0000 	mov.w	r0, #0
 8008c26:	f380 8811 	msr	BASEPRI, r0
 8008c2a:	4770      	bx	lr
 8008c2c:	f3af 8000 	nop.w

08008c30 <pxCurrentTCBConst2>:
 8008c30:	2000033c 	.word	0x2000033c
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8008c34:	bf00      	nop
 8008c36:	bf00      	nop

08008c38 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8008c38:	4808      	ldr	r0, [pc, #32]	@ (8008c5c <prvPortStartFirstTask+0x24>)
 8008c3a:	6800      	ldr	r0, [r0, #0]
 8008c3c:	6800      	ldr	r0, [r0, #0]
 8008c3e:	f380 8808 	msr	MSP, r0
 8008c42:	f04f 0000 	mov.w	r0, #0
 8008c46:	f380 8814 	msr	CONTROL, r0
 8008c4a:	b662      	cpsie	i
 8008c4c:	b661      	cpsie	f
 8008c4e:	f3bf 8f4f 	dsb	sy
 8008c52:	f3bf 8f6f 	isb	sy
 8008c56:	df00      	svc	0
 8008c58:	bf00      	nop
 8008c5a:	0000      	.short	0x0000
 8008c5c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8008c60:	bf00      	nop
 8008c62:	bf00      	nop

08008c64 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008c64:	b580      	push	{r7, lr}
 8008c66:	b084      	sub	sp, #16
 8008c68:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint32_t ulOriginalPriority;
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008c6a:	4b37      	ldr	r3, [pc, #220]	@ (8008d48 <xPortStartScheduler+0xe4>)
 8008c6c:	60fb      	str	r3, [r7, #12]
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	781b      	ldrb	r3, [r3, #0]
 8008c72:	b2db      	uxtb	r3, r3
 8008c74:	607b      	str	r3, [r7, #4]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	22ff      	movs	r2, #255	@ 0xff
 8008c7a:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	781b      	ldrb	r3, [r3, #0]
 8008c80:	b2db      	uxtb	r3, r3
 8008c82:	70fb      	strb	r3, [r7, #3]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008c84:	78fb      	ldrb	r3, [r7, #3]
 8008c86:	b2db      	uxtb	r3, r3
 8008c88:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8008c8c:	b2da      	uxtb	r2, r3
 8008c8e:	4b2f      	ldr	r3, [pc, #188]	@ (8008d4c <xPortStartScheduler+0xe8>)
 8008c90:	701a      	strb	r2, [r3, #0]

        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */
        ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008c92:	4b2f      	ldr	r3, [pc, #188]	@ (8008d50 <xPortStartScheduler+0xec>)
 8008c94:	2207      	movs	r2, #7
 8008c96:	601a      	str	r2, [r3, #0]

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008c98:	e009      	b.n	8008cae <xPortStartScheduler+0x4a>
        {
            ulMaxPRIGROUPValue--;
 8008c9a:	4b2d      	ldr	r3, [pc, #180]	@ (8008d50 <xPortStartScheduler+0xec>)
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	3b01      	subs	r3, #1
 8008ca0:	4a2b      	ldr	r2, [pc, #172]	@ (8008d50 <xPortStartScheduler+0xec>)
 8008ca2:	6013      	str	r3, [r2, #0]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008ca4:	78fb      	ldrb	r3, [r7, #3]
 8008ca6:	b2db      	uxtb	r3, r3
 8008ca8:	005b      	lsls	r3, r3, #1
 8008caa:	b2db      	uxtb	r3, r3
 8008cac:	70fb      	strb	r3, [r7, #3]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008cae:	78fb      	ldrb	r3, [r7, #3]
 8008cb0:	b2db      	uxtb	r3, r3
 8008cb2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008cb6:	2b80      	cmp	r3, #128	@ 0x80
 8008cb8:	d0ef      	beq.n	8008c9a <xPortStartScheduler+0x36>
        #ifdef configPRIO_BITS
        {
            /* Check the FreeRTOS configuration that defines the number of
             * priority bits matches the number of priority bits actually queried
             * from the hardware. */
            configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008cba:	4b25      	ldr	r3, [pc, #148]	@ (8008d50 <xPortStartScheduler+0xec>)
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	f1c3 0307 	rsb	r3, r3, #7
 8008cc2:	2b04      	cmp	r3, #4
 8008cc4:	d00d      	beq.n	8008ce2 <xPortStartScheduler+0x7e>
        __asm volatile
 8008cc6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008cca:	b672      	cpsid	i
 8008ccc:	f383 8811 	msr	BASEPRI, r3
 8008cd0:	f3bf 8f6f 	isb	sy
 8008cd4:	f3bf 8f4f 	dsb	sy
 8008cd8:	b662      	cpsie	i
 8008cda:	60bb      	str	r3, [r7, #8]
    }
 8008cdc:	bf00      	nop
 8008cde:	bf00      	nop
 8008ce0:	e7fd      	b.n	8008cde <xPortStartScheduler+0x7a>
        }
        #endif

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008ce2:	4b1b      	ldr	r3, [pc, #108]	@ (8008d50 <xPortStartScheduler+0xec>)
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	021b      	lsls	r3, r3, #8
 8008ce8:	4a19      	ldr	r2, [pc, #100]	@ (8008d50 <xPortStartScheduler+0xec>)
 8008cea:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008cec:	4b18      	ldr	r3, [pc, #96]	@ (8008d50 <xPortStartScheduler+0xec>)
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008cf4:	4a16      	ldr	r2, [pc, #88]	@ (8008d50 <xPortStartScheduler+0xec>)
 8008cf6:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ulOriginalPriority;
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	b2da      	uxtb	r2, r3
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8008d00:	4b14      	ldr	r3, [pc, #80]	@ (8008d54 <xPortStartScheduler+0xf0>)
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	4a13      	ldr	r2, [pc, #76]	@ (8008d54 <xPortStartScheduler+0xf0>)
 8008d06:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8008d0a:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8008d0c:	4b11      	ldr	r3, [pc, #68]	@ (8008d54 <xPortStartScheduler+0xf0>)
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	4a10      	ldr	r2, [pc, #64]	@ (8008d54 <xPortStartScheduler+0xf0>)
 8008d12:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8008d16:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8008d18:	f000 f8e2 	bl	8008ee0 <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8008d1c:	4b0e      	ldr	r3, [pc, #56]	@ (8008d58 <xPortStartScheduler+0xf4>)
 8008d1e:	2200      	movs	r2, #0
 8008d20:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8008d22:	f000 f901 	bl	8008f28 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008d26:	4b0d      	ldr	r3, [pc, #52]	@ (8008d5c <xPortStartScheduler+0xf8>)
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	4a0c      	ldr	r2, [pc, #48]	@ (8008d5c <xPortStartScheduler+0xf8>)
 8008d2c:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8008d30:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8008d32:	f7ff ff81 	bl	8008c38 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8008d36:	f7fe ff93 	bl	8007c60 <vTaskSwitchContext>
    prvTaskExitError();
 8008d3a:	f7ff ff33 	bl	8008ba4 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8008d3e:	2300      	movs	r3, #0
}
 8008d40:	4618      	mov	r0, r3
 8008d42:	3710      	adds	r7, #16
 8008d44:	46bd      	mov	sp, r7
 8008d46:	bd80      	pop	{r7, pc}
 8008d48:	e000e400 	.word	0xe000e400
 8008d4c:	2000047c 	.word	0x2000047c
 8008d50:	20000480 	.word	0x20000480
 8008d54:	e000ed20 	.word	0xe000ed20
 8008d58:	2000002c 	.word	0x2000002c
 8008d5c:	e000ef34 	.word	0xe000ef34

08008d60 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008d60:	b480      	push	{r7}
 8008d62:	b083      	sub	sp, #12
 8008d64:	af00      	add	r7, sp, #0
        __asm volatile
 8008d66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d6a:	b672      	cpsid	i
 8008d6c:	f383 8811 	msr	BASEPRI, r3
 8008d70:	f3bf 8f6f 	isb	sy
 8008d74:	f3bf 8f4f 	dsb	sy
 8008d78:	b662      	cpsie	i
 8008d7a:	607b      	str	r3, [r7, #4]
    }
 8008d7c:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8008d7e:	4b11      	ldr	r3, [pc, #68]	@ (8008dc4 <vPortEnterCritical+0x64>)
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	3301      	adds	r3, #1
 8008d84:	4a0f      	ldr	r2, [pc, #60]	@ (8008dc4 <vPortEnterCritical+0x64>)
 8008d86:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8008d88:	4b0e      	ldr	r3, [pc, #56]	@ (8008dc4 <vPortEnterCritical+0x64>)
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	2b01      	cmp	r3, #1
 8008d8e:	d112      	bne.n	8008db6 <vPortEnterCritical+0x56>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008d90:	4b0d      	ldr	r3, [pc, #52]	@ (8008dc8 <vPortEnterCritical+0x68>)
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	b2db      	uxtb	r3, r3
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	d00d      	beq.n	8008db6 <vPortEnterCritical+0x56>
        __asm volatile
 8008d9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d9e:	b672      	cpsid	i
 8008da0:	f383 8811 	msr	BASEPRI, r3
 8008da4:	f3bf 8f6f 	isb	sy
 8008da8:	f3bf 8f4f 	dsb	sy
 8008dac:	b662      	cpsie	i
 8008dae:	603b      	str	r3, [r7, #0]
    }
 8008db0:	bf00      	nop
 8008db2:	bf00      	nop
 8008db4:	e7fd      	b.n	8008db2 <vPortEnterCritical+0x52>
    }
}
 8008db6:	bf00      	nop
 8008db8:	370c      	adds	r7, #12
 8008dba:	46bd      	mov	sp, r7
 8008dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dc0:	4770      	bx	lr
 8008dc2:	bf00      	nop
 8008dc4:	2000002c 	.word	0x2000002c
 8008dc8:	e000ed04 	.word	0xe000ed04

08008dcc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008dcc:	b480      	push	{r7}
 8008dce:	b083      	sub	sp, #12
 8008dd0:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8008dd2:	4b13      	ldr	r3, [pc, #76]	@ (8008e20 <vPortExitCritical+0x54>)
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d10d      	bne.n	8008df6 <vPortExitCritical+0x2a>
        __asm volatile
 8008dda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008dde:	b672      	cpsid	i
 8008de0:	f383 8811 	msr	BASEPRI, r3
 8008de4:	f3bf 8f6f 	isb	sy
 8008de8:	f3bf 8f4f 	dsb	sy
 8008dec:	b662      	cpsie	i
 8008dee:	607b      	str	r3, [r7, #4]
    }
 8008df0:	bf00      	nop
 8008df2:	bf00      	nop
 8008df4:	e7fd      	b.n	8008df2 <vPortExitCritical+0x26>
    uxCriticalNesting--;
 8008df6:	4b0a      	ldr	r3, [pc, #40]	@ (8008e20 <vPortExitCritical+0x54>)
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	3b01      	subs	r3, #1
 8008dfc:	4a08      	ldr	r2, [pc, #32]	@ (8008e20 <vPortExitCritical+0x54>)
 8008dfe:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8008e00:	4b07      	ldr	r3, [pc, #28]	@ (8008e20 <vPortExitCritical+0x54>)
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	d105      	bne.n	8008e14 <vPortExitCritical+0x48>
 8008e08:	2300      	movs	r3, #0
 8008e0a:	603b      	str	r3, [r7, #0]
        __asm volatile
 8008e0c:	683b      	ldr	r3, [r7, #0]
 8008e0e:	f383 8811 	msr	BASEPRI, r3
    }
 8008e12:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8008e14:	bf00      	nop
 8008e16:	370c      	adds	r7, #12
 8008e18:	46bd      	mov	sp, r7
 8008e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e1e:	4770      	bx	lr
 8008e20:	2000002c 	.word	0x2000002c
	...

08008e30 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8008e30:	f3ef 8009 	mrs	r0, PSP
 8008e34:	f3bf 8f6f 	isb	sy
 8008e38:	4b15      	ldr	r3, [pc, #84]	@ (8008e90 <pxCurrentTCBConst>)
 8008e3a:	681a      	ldr	r2, [r3, #0]
 8008e3c:	f01e 0f10 	tst.w	lr, #16
 8008e40:	bf08      	it	eq
 8008e42:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008e46:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e4a:	6010      	str	r0, [r2, #0]
 8008e4c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008e50:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8008e54:	b672      	cpsid	i
 8008e56:	f380 8811 	msr	BASEPRI, r0
 8008e5a:	f3bf 8f4f 	dsb	sy
 8008e5e:	f3bf 8f6f 	isb	sy
 8008e62:	b662      	cpsie	i
 8008e64:	f7fe fefc 	bl	8007c60 <vTaskSwitchContext>
 8008e68:	f04f 0000 	mov.w	r0, #0
 8008e6c:	f380 8811 	msr	BASEPRI, r0
 8008e70:	bc09      	pop	{r0, r3}
 8008e72:	6819      	ldr	r1, [r3, #0]
 8008e74:	6808      	ldr	r0, [r1, #0]
 8008e76:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e7a:	f01e 0f10 	tst.w	lr, #16
 8008e7e:	bf08      	it	eq
 8008e80:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008e84:	f380 8809 	msr	PSP, r0
 8008e88:	f3bf 8f6f 	isb	sy
 8008e8c:	4770      	bx	lr
 8008e8e:	bf00      	nop

08008e90 <pxCurrentTCBConst>:
 8008e90:	2000033c 	.word	0x2000033c
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8008e94:	bf00      	nop
 8008e96:	bf00      	nop

08008e98 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008e98:	b580      	push	{r7, lr}
 8008e9a:	b082      	sub	sp, #8
 8008e9c:	af00      	add	r7, sp, #0
        __asm volatile
 8008e9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ea2:	b672      	cpsid	i
 8008ea4:	f383 8811 	msr	BASEPRI, r3
 8008ea8:	f3bf 8f6f 	isb	sy
 8008eac:	f3bf 8f4f 	dsb	sy
 8008eb0:	b662      	cpsie	i
 8008eb2:	607b      	str	r3, [r7, #4]
    }
 8008eb4:	bf00      	nop
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8008eb6:	f7fe fdb9 	bl	8007a2c <xTaskIncrementTick>
 8008eba:	4603      	mov	r3, r0
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	d003      	beq.n	8008ec8 <SysTick_Handler+0x30>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008ec0:	4b06      	ldr	r3, [pc, #24]	@ (8008edc <SysTick_Handler+0x44>)
 8008ec2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008ec6:	601a      	str	r2, [r3, #0]
 8008ec8:	2300      	movs	r3, #0
 8008eca:	603b      	str	r3, [r7, #0]
        __asm volatile
 8008ecc:	683b      	ldr	r3, [r7, #0]
 8008ece:	f383 8811 	msr	BASEPRI, r3
    }
 8008ed2:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 8008ed4:	bf00      	nop
 8008ed6:	3708      	adds	r7, #8
 8008ed8:	46bd      	mov	sp, r7
 8008eda:	bd80      	pop	{r7, pc}
 8008edc:	e000ed04 	.word	0xe000ed04

08008ee0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8008ee0:	b480      	push	{r7}
 8008ee2:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008ee4:	4b0b      	ldr	r3, [pc, #44]	@ (8008f14 <vPortSetupTimerInterrupt+0x34>)
 8008ee6:	2200      	movs	r2, #0
 8008ee8:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008eea:	4b0b      	ldr	r3, [pc, #44]	@ (8008f18 <vPortSetupTimerInterrupt+0x38>)
 8008eec:	2200      	movs	r2, #0
 8008eee:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008ef0:	4b0a      	ldr	r3, [pc, #40]	@ (8008f1c <vPortSetupTimerInterrupt+0x3c>)
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	4a0a      	ldr	r2, [pc, #40]	@ (8008f20 <vPortSetupTimerInterrupt+0x40>)
 8008ef6:	fba2 2303 	umull	r2, r3, r2, r3
 8008efa:	099b      	lsrs	r3, r3, #6
 8008efc:	4a09      	ldr	r2, [pc, #36]	@ (8008f24 <vPortSetupTimerInterrupt+0x44>)
 8008efe:	3b01      	subs	r3, #1
 8008f00:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008f02:	4b04      	ldr	r3, [pc, #16]	@ (8008f14 <vPortSetupTimerInterrupt+0x34>)
 8008f04:	2207      	movs	r2, #7
 8008f06:	601a      	str	r2, [r3, #0]
}
 8008f08:	bf00      	nop
 8008f0a:	46bd      	mov	sp, r7
 8008f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f10:	4770      	bx	lr
 8008f12:	bf00      	nop
 8008f14:	e000e010 	.word	0xe000e010
 8008f18:	e000e018 	.word	0xe000e018
 8008f1c:	2000001c 	.word	0x2000001c
 8008f20:	10624dd3 	.word	0x10624dd3
 8008f24:	e000e014 	.word	0xe000e014

08008f28 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8008f28:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8008f38 <vPortEnableVFP+0x10>
 8008f2c:	6801      	ldr	r1, [r0, #0]
 8008f2e:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8008f32:	6001      	str	r1, [r0, #0]
 8008f34:	4770      	bx	lr
 8008f36:	0000      	.short	0x0000
 8008f38:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8008f3c:	bf00      	nop
 8008f3e:	bf00      	nop

08008f40 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 8008f40:	b480      	push	{r7}
 8008f42:	b085      	sub	sp, #20
 8008f44:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8008f46:	f3ef 8305 	mrs	r3, IPSR
 8008f4a:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	2b0f      	cmp	r3, #15
 8008f50:	d917      	bls.n	8008f82 <vPortValidateInterruptPriority+0x42>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8008f52:	4a1a      	ldr	r2, [pc, #104]	@ (8008fbc <vPortValidateInterruptPriority+0x7c>)
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	4413      	add	r3, r2
 8008f58:	781b      	ldrb	r3, [r3, #0]
 8008f5a:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008f5c:	4b18      	ldr	r3, [pc, #96]	@ (8008fc0 <vPortValidateInterruptPriority+0x80>)
 8008f5e:	781b      	ldrb	r3, [r3, #0]
 8008f60:	7afa      	ldrb	r2, [r7, #11]
 8008f62:	429a      	cmp	r2, r3
 8008f64:	d20d      	bcs.n	8008f82 <vPortValidateInterruptPriority+0x42>
        __asm volatile
 8008f66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f6a:	b672      	cpsid	i
 8008f6c:	f383 8811 	msr	BASEPRI, r3
 8008f70:	f3bf 8f6f 	isb	sy
 8008f74:	f3bf 8f4f 	dsb	sy
 8008f78:	b662      	cpsie	i
 8008f7a:	607b      	str	r3, [r7, #4]
    }
 8008f7c:	bf00      	nop
 8008f7e:	bf00      	nop
 8008f80:	e7fd      	b.n	8008f7e <vPortValidateInterruptPriority+0x3e>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008f82:	4b10      	ldr	r3, [pc, #64]	@ (8008fc4 <vPortValidateInterruptPriority+0x84>)
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8008f8a:	4b0f      	ldr	r3, [pc, #60]	@ (8008fc8 <vPortValidateInterruptPriority+0x88>)
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	429a      	cmp	r2, r3
 8008f90:	d90d      	bls.n	8008fae <vPortValidateInterruptPriority+0x6e>
        __asm volatile
 8008f92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f96:	b672      	cpsid	i
 8008f98:	f383 8811 	msr	BASEPRI, r3
 8008f9c:	f3bf 8f6f 	isb	sy
 8008fa0:	f3bf 8f4f 	dsb	sy
 8008fa4:	b662      	cpsie	i
 8008fa6:	603b      	str	r3, [r7, #0]
    }
 8008fa8:	bf00      	nop
 8008faa:	bf00      	nop
 8008fac:	e7fd      	b.n	8008faa <vPortValidateInterruptPriority+0x6a>
    }
 8008fae:	bf00      	nop
 8008fb0:	3714      	adds	r7, #20
 8008fb2:	46bd      	mov	sp, r7
 8008fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fb8:	4770      	bx	lr
 8008fba:	bf00      	nop
 8008fbc:	e000e3f0 	.word	0xe000e3f0
 8008fc0:	2000047c 	.word	0x2000047c
 8008fc4:	e000ed0c 	.word	0xe000ed0c
 8008fc8:	20000480 	.word	0x20000480

08008fcc <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8008fcc:	b580      	push	{r7, lr}
 8008fce:	b08a      	sub	sp, #40	@ 0x28
 8008fd0:	af00      	add	r7, sp, #0
 8008fd2:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 8008fd4:	2300      	movs	r3, #0
 8008fd6:	61fb      	str	r3, [r7, #28]
    size_t xAdditionalRequiredSize;

    vTaskSuspendAll();
 8008fd8:	f7fe fc00 	bl	80077dc <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8008fdc:	4b56      	ldr	r3, [pc, #344]	@ (8009138 <pvPortMalloc+0x16c>)
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	d101      	bne.n	8008fe8 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8008fe4:	f000 f914 	bl	8009210 <prvHeapInit>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xWantedSize > 0 )
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d012      	beq.n	8009014 <pvPortMalloc+0x48>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. Some
             * additional increment may also be needed for alignment. */
            xAdditionalRequiredSize = xHeapStructSize + portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 8008fee:	2208      	movs	r2, #8
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	f003 0307 	and.w	r3, r3, #7
 8008ff6:	1ad3      	subs	r3, r2, r3
 8008ff8:	3308      	adds	r3, #8
 8008ffa:	61bb      	str	r3, [r7, #24]

            if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 8008ffc:	69bb      	ldr	r3, [r7, #24]
 8008ffe:	43db      	mvns	r3, r3
 8009000:	687a      	ldr	r2, [r7, #4]
 8009002:	429a      	cmp	r2, r3
 8009004:	d804      	bhi.n	8009010 <pvPortMalloc+0x44>
            {
                xWantedSize += xAdditionalRequiredSize;
 8009006:	687a      	ldr	r2, [r7, #4]
 8009008:	69bb      	ldr	r3, [r7, #24]
 800900a:	4413      	add	r3, r2
 800900c:	607b      	str	r3, [r7, #4]
 800900e:	e001      	b.n	8009014 <pvPortMalloc+0x48>
            }
            else
            {
                xWantedSize = 0;
 8009010:	2300      	movs	r3, #0
 8009012:	607b      	str	r3, [r7, #4]

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	2b00      	cmp	r3, #0
 8009018:	db73      	blt.n	8009102 <pvPortMalloc+0x136>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	2b00      	cmp	r3, #0
 800901e:	d070      	beq.n	8009102 <pvPortMalloc+0x136>
 8009020:	4b46      	ldr	r3, [pc, #280]	@ (800913c <pvPortMalloc+0x170>)
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	687a      	ldr	r2, [r7, #4]
 8009026:	429a      	cmp	r2, r3
 8009028:	d86b      	bhi.n	8009102 <pvPortMalloc+0x136>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 800902a:	4b45      	ldr	r3, [pc, #276]	@ (8009140 <pvPortMalloc+0x174>)
 800902c:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 800902e:	4b44      	ldr	r3, [pc, #272]	@ (8009140 <pvPortMalloc+0x174>)
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	627b      	str	r3, [r7, #36]	@ 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009034:	e004      	b.n	8009040 <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
 8009036:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009038:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 800903a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	627b      	str	r3, [r7, #36]	@ 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009040:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009042:	685b      	ldr	r3, [r3, #4]
 8009044:	687a      	ldr	r2, [r7, #4]
 8009046:	429a      	cmp	r2, r3
 8009048:	d903      	bls.n	8009052 <pvPortMalloc+0x86>
 800904a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	2b00      	cmp	r3, #0
 8009050:	d1f1      	bne.n	8009036 <pvPortMalloc+0x6a>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8009052:	4b39      	ldr	r3, [pc, #228]	@ (8009138 <pvPortMalloc+0x16c>)
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009058:	429a      	cmp	r2, r3
 800905a:	d052      	beq.n	8009102 <pvPortMalloc+0x136>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800905c:	6a3b      	ldr	r3, [r7, #32]
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	2208      	movs	r2, #8
 8009062:	4413      	add	r3, r2
 8009064:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009066:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009068:	681a      	ldr	r2, [r3, #0]
 800906a:	6a3b      	ldr	r3, [r7, #32]
 800906c:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800906e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009070:	685a      	ldr	r2, [r3, #4]
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	1ad2      	subs	r2, r2, r3
 8009076:	2308      	movs	r3, #8
 8009078:	005b      	lsls	r3, r3, #1
 800907a:	429a      	cmp	r2, r3
 800907c:	d922      	bls.n	80090c4 <pvPortMalloc+0xf8>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800907e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	4413      	add	r3, r2
 8009084:	617b      	str	r3, [r7, #20]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009086:	697b      	ldr	r3, [r7, #20]
 8009088:	f003 0307 	and.w	r3, r3, #7
 800908c:	2b00      	cmp	r3, #0
 800908e:	d00d      	beq.n	80090ac <pvPortMalloc+0xe0>
        __asm volatile
 8009090:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009094:	b672      	cpsid	i
 8009096:	f383 8811 	msr	BASEPRI, r3
 800909a:	f3bf 8f6f 	isb	sy
 800909e:	f3bf 8f4f 	dsb	sy
 80090a2:	b662      	cpsie	i
 80090a4:	613b      	str	r3, [r7, #16]
    }
 80090a6:	bf00      	nop
 80090a8:	bf00      	nop
 80090aa:	e7fd      	b.n	80090a8 <pvPortMalloc+0xdc>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80090ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090ae:	685a      	ldr	r2, [r3, #4]
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	1ad2      	subs	r2, r2, r3
 80090b4:	697b      	ldr	r3, [r7, #20]
 80090b6:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 80090b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090ba:	687a      	ldr	r2, [r7, #4]
 80090bc:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 80090be:	6978      	ldr	r0, [r7, #20]
 80090c0:	f000 f902 	bl	80092c8 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 80090c4:	4b1d      	ldr	r3, [pc, #116]	@ (800913c <pvPortMalloc+0x170>)
 80090c6:	681a      	ldr	r2, [r3, #0]
 80090c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090ca:	685b      	ldr	r3, [r3, #4]
 80090cc:	1ad3      	subs	r3, r2, r3
 80090ce:	4a1b      	ldr	r2, [pc, #108]	@ (800913c <pvPortMalloc+0x170>)
 80090d0:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80090d2:	4b1a      	ldr	r3, [pc, #104]	@ (800913c <pvPortMalloc+0x170>)
 80090d4:	681a      	ldr	r2, [r3, #0]
 80090d6:	4b1b      	ldr	r3, [pc, #108]	@ (8009144 <pvPortMalloc+0x178>)
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	429a      	cmp	r2, r3
 80090dc:	d203      	bcs.n	80090e6 <pvPortMalloc+0x11a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80090de:	4b17      	ldr	r3, [pc, #92]	@ (800913c <pvPortMalloc+0x170>)
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	4a18      	ldr	r2, [pc, #96]	@ (8009144 <pvPortMalloc+0x178>)
 80090e4:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 80090e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090e8:	685b      	ldr	r3, [r3, #4]
 80090ea:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80090ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090f0:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 80090f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090f4:	2200      	movs	r2, #0
 80090f6:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 80090f8:	4b13      	ldr	r3, [pc, #76]	@ (8009148 <pvPortMalloc+0x17c>)
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	3301      	adds	r3, #1
 80090fe:	4a12      	ldr	r2, [pc, #72]	@ (8009148 <pvPortMalloc+0x17c>)
 8009100:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8009102:	f7fe fb79 	bl	80077f8 <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009106:	69fb      	ldr	r3, [r7, #28]
 8009108:	f003 0307 	and.w	r3, r3, #7
 800910c:	2b00      	cmp	r3, #0
 800910e:	d00d      	beq.n	800912c <pvPortMalloc+0x160>
        __asm volatile
 8009110:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009114:	b672      	cpsid	i
 8009116:	f383 8811 	msr	BASEPRI, r3
 800911a:	f3bf 8f6f 	isb	sy
 800911e:	f3bf 8f4f 	dsb	sy
 8009122:	b662      	cpsie	i
 8009124:	60fb      	str	r3, [r7, #12]
    }
 8009126:	bf00      	nop
 8009128:	bf00      	nop
 800912a:	e7fd      	b.n	8009128 <pvPortMalloc+0x15c>
    return pvReturn;
 800912c:	69fb      	ldr	r3, [r7, #28]
}
 800912e:	4618      	mov	r0, r3
 8009130:	3728      	adds	r7, #40	@ 0x28
 8009132:	46bd      	mov	sp, r7
 8009134:	bd80      	pop	{r7, pc}
 8009136:	bf00      	nop
 8009138:	2000408c 	.word	0x2000408c
 800913c:	20004090 	.word	0x20004090
 8009140:	20004084 	.word	0x20004084
 8009144:	20004094 	.word	0x20004094
 8009148:	20004098 	.word	0x20004098

0800914c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 800914c:	b580      	push	{r7, lr}
 800914e:	b086      	sub	sp, #24
 8009150:	af00      	add	r7, sp, #0
 8009152:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	2b00      	cmp	r3, #0
 800915c:	d04f      	beq.n	80091fe <vPortFree+0xb2>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 800915e:	2308      	movs	r3, #8
 8009160:	425b      	negs	r3, r3
 8009162:	697a      	ldr	r2, [r7, #20]
 8009164:	4413      	add	r3, r2
 8009166:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8009168:	697b      	ldr	r3, [r7, #20]
 800916a:	613b      	str	r3, [r7, #16]

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 800916c:	693b      	ldr	r3, [r7, #16]
 800916e:	685b      	ldr	r3, [r3, #4]
 8009170:	2b00      	cmp	r3, #0
 8009172:	db0d      	blt.n	8009190 <vPortFree+0x44>
        __asm volatile
 8009174:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009178:	b672      	cpsid	i
 800917a:	f383 8811 	msr	BASEPRI, r3
 800917e:	f3bf 8f6f 	isb	sy
 8009182:	f3bf 8f4f 	dsb	sy
 8009186:	b662      	cpsie	i
 8009188:	60fb      	str	r3, [r7, #12]
    }
 800918a:	bf00      	nop
 800918c:	bf00      	nop
 800918e:	e7fd      	b.n	800918c <vPortFree+0x40>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009190:	693b      	ldr	r3, [r7, #16]
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	2b00      	cmp	r3, #0
 8009196:	d00d      	beq.n	80091b4 <vPortFree+0x68>
        __asm volatile
 8009198:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800919c:	b672      	cpsid	i
 800919e:	f383 8811 	msr	BASEPRI, r3
 80091a2:	f3bf 8f6f 	isb	sy
 80091a6:	f3bf 8f4f 	dsb	sy
 80091aa:	b662      	cpsie	i
 80091ac:	60bb      	str	r3, [r7, #8]
    }
 80091ae:	bf00      	nop
 80091b0:	bf00      	nop
 80091b2:	e7fd      	b.n	80091b0 <vPortFree+0x64>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 80091b4:	693b      	ldr	r3, [r7, #16]
 80091b6:	685b      	ldr	r3, [r3, #4]
 80091b8:	0fdb      	lsrs	r3, r3, #31
 80091ba:	f003 0301 	and.w	r3, r3, #1
 80091be:	b2db      	uxtb	r3, r3
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	d01c      	beq.n	80091fe <vPortFree+0xb2>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 80091c4:	693b      	ldr	r3, [r7, #16]
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	d118      	bne.n	80091fe <vPortFree+0xb2>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 80091cc:	693b      	ldr	r3, [r7, #16]
 80091ce:	685b      	ldr	r3, [r3, #4]
 80091d0:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80091d4:	693b      	ldr	r3, [r7, #16]
 80091d6:	605a      	str	r2, [r3, #4]
                {
                    ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                }
                #endif

                vTaskSuspendAll();
 80091d8:	f7fe fb00 	bl	80077dc <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 80091dc:	693b      	ldr	r3, [r7, #16]
 80091de:	685a      	ldr	r2, [r3, #4]
 80091e0:	4b09      	ldr	r3, [pc, #36]	@ (8009208 <vPortFree+0xbc>)
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	4413      	add	r3, r2
 80091e6:	4a08      	ldr	r2, [pc, #32]	@ (8009208 <vPortFree+0xbc>)
 80091e8:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80091ea:	6938      	ldr	r0, [r7, #16]
 80091ec:	f000 f86c 	bl	80092c8 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 80091f0:	4b06      	ldr	r3, [pc, #24]	@ (800920c <vPortFree+0xc0>)
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	3301      	adds	r3, #1
 80091f6:	4a05      	ldr	r2, [pc, #20]	@ (800920c <vPortFree+0xc0>)
 80091f8:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 80091fa:	f7fe fafd 	bl	80077f8 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 80091fe:	bf00      	nop
 8009200:	3718      	adds	r7, #24
 8009202:	46bd      	mov	sp, r7
 8009204:	bd80      	pop	{r7, pc}
 8009206:	bf00      	nop
 8009208:	20004090 	.word	0x20004090
 800920c:	2000409c 	.word	0x2000409c

08009210 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8009210:	b480      	push	{r7}
 8009212:	b085      	sub	sp, #20
 8009214:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    portPOINTER_SIZE_TYPE uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009216:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800921a:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 800921c:	4b25      	ldr	r3, [pc, #148]	@ (80092b4 <prvHeapInit+0xa4>)
 800921e:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009220:	68fb      	ldr	r3, [r7, #12]
 8009222:	f003 0307 	and.w	r3, r3, #7
 8009226:	2b00      	cmp	r3, #0
 8009228:	d00c      	beq.n	8009244 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800922a:	68fb      	ldr	r3, [r7, #12]
 800922c:	3307      	adds	r3, #7
 800922e:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	f023 0307 	bic.w	r3, r3, #7
 8009236:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( portPOINTER_SIZE_TYPE ) ucHeap;
 8009238:	68ba      	ldr	r2, [r7, #8]
 800923a:	68fb      	ldr	r3, [r7, #12]
 800923c:	1ad3      	subs	r3, r2, r3
 800923e:	4a1d      	ldr	r2, [pc, #116]	@ (80092b4 <prvHeapInit+0xa4>)
 8009240:	4413      	add	r3, r2
 8009242:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009248:	4a1b      	ldr	r2, [pc, #108]	@ (80092b8 <prvHeapInit+0xa8>)
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 800924e:	4b1a      	ldr	r3, [pc, #104]	@ (80092b8 <prvHeapInit+0xa8>)
 8009250:	2200      	movs	r2, #0
 8009252:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( portPOINTER_SIZE_TYPE ) pucAlignedHeap ) + xTotalHeapSize;
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	68ba      	ldr	r2, [r7, #8]
 8009258:	4413      	add	r3, r2
 800925a:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 800925c:	2208      	movs	r2, #8
 800925e:	68fb      	ldr	r3, [r7, #12]
 8009260:	1a9b      	subs	r3, r3, r2
 8009262:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	f023 0307 	bic.w	r3, r3, #7
 800926a:	60fb      	str	r3, [r7, #12]
    pxEnd = ( BlockLink_t * ) uxAddress;
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	4a13      	ldr	r2, [pc, #76]	@ (80092bc <prvHeapInit+0xac>)
 8009270:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8009272:	4b12      	ldr	r3, [pc, #72]	@ (80092bc <prvHeapInit+0xac>)
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	2200      	movs	r2, #0
 8009278:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 800927a:	4b10      	ldr	r3, [pc, #64]	@ (80092bc <prvHeapInit+0xac>)
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	2200      	movs	r2, #0
 8009280:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 8009286:	683b      	ldr	r3, [r7, #0]
 8009288:	68fa      	ldr	r2, [r7, #12]
 800928a:	1ad2      	subs	r2, r2, r3
 800928c:	683b      	ldr	r3, [r7, #0]
 800928e:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009290:	4b0a      	ldr	r3, [pc, #40]	@ (80092bc <prvHeapInit+0xac>)
 8009292:	681a      	ldr	r2, [r3, #0]
 8009294:	683b      	ldr	r3, [r7, #0]
 8009296:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009298:	683b      	ldr	r3, [r7, #0]
 800929a:	685b      	ldr	r3, [r3, #4]
 800929c:	4a08      	ldr	r2, [pc, #32]	@ (80092c0 <prvHeapInit+0xb0>)
 800929e:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80092a0:	683b      	ldr	r3, [r7, #0]
 80092a2:	685b      	ldr	r3, [r3, #4]
 80092a4:	4a07      	ldr	r2, [pc, #28]	@ (80092c4 <prvHeapInit+0xb4>)
 80092a6:	6013      	str	r3, [r2, #0]
}
 80092a8:	bf00      	nop
 80092aa:	3714      	adds	r7, #20
 80092ac:	46bd      	mov	sp, r7
 80092ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092b2:	4770      	bx	lr
 80092b4:	20000484 	.word	0x20000484
 80092b8:	20004084 	.word	0x20004084
 80092bc:	2000408c 	.word	0x2000408c
 80092c0:	20004094 	.word	0x20004094
 80092c4:	20004090 	.word	0x20004090

080092c8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 80092c8:	b480      	push	{r7}
 80092ca:	b085      	sub	sp, #20
 80092cc:	af00      	add	r7, sp, #0
 80092ce:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80092d0:	4b28      	ldr	r3, [pc, #160]	@ (8009374 <prvInsertBlockIntoFreeList+0xac>)
 80092d2:	60fb      	str	r3, [r7, #12]
 80092d4:	e002      	b.n	80092dc <prvInsertBlockIntoFreeList+0x14>
 80092d6:	68fb      	ldr	r3, [r7, #12]
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	60fb      	str	r3, [r7, #12]
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	687a      	ldr	r2, [r7, #4]
 80092e2:	429a      	cmp	r2, r3
 80092e4:	d8f7      	bhi.n	80092d6 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	685b      	ldr	r3, [r3, #4]
 80092ee:	68ba      	ldr	r2, [r7, #8]
 80092f0:	4413      	add	r3, r2
 80092f2:	687a      	ldr	r2, [r7, #4]
 80092f4:	429a      	cmp	r2, r3
 80092f6:	d108      	bne.n	800930a <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80092f8:	68fb      	ldr	r3, [r7, #12]
 80092fa:	685a      	ldr	r2, [r3, #4]
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	685b      	ldr	r3, [r3, #4]
 8009300:	441a      	add	r2, r3
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	685b      	ldr	r3, [r3, #4]
 8009312:	68ba      	ldr	r2, [r7, #8]
 8009314:	441a      	add	r2, r3
 8009316:	68fb      	ldr	r3, [r7, #12]
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	429a      	cmp	r2, r3
 800931c:	d118      	bne.n	8009350 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 800931e:	68fb      	ldr	r3, [r7, #12]
 8009320:	681a      	ldr	r2, [r3, #0]
 8009322:	4b15      	ldr	r3, [pc, #84]	@ (8009378 <prvInsertBlockIntoFreeList+0xb0>)
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	429a      	cmp	r2, r3
 8009328:	d00d      	beq.n	8009346 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	685a      	ldr	r2, [r3, #4]
 800932e:	68fb      	ldr	r3, [r7, #12]
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	685b      	ldr	r3, [r3, #4]
 8009334:	441a      	add	r2, r3
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800933a:	68fb      	ldr	r3, [r7, #12]
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	681a      	ldr	r2, [r3, #0]
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	601a      	str	r2, [r3, #0]
 8009344:	e008      	b.n	8009358 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009346:	4b0c      	ldr	r3, [pc, #48]	@ (8009378 <prvInsertBlockIntoFreeList+0xb0>)
 8009348:	681a      	ldr	r2, [r3, #0]
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	601a      	str	r2, [r3, #0]
 800934e:	e003      	b.n	8009358 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009350:	68fb      	ldr	r3, [r7, #12]
 8009352:	681a      	ldr	r2, [r3, #0]
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8009358:	68fa      	ldr	r2, [r7, #12]
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	429a      	cmp	r2, r3
 800935e:	d002      	beq.n	8009366 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009360:	68fb      	ldr	r3, [r7, #12]
 8009362:	687a      	ldr	r2, [r7, #4]
 8009364:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8009366:	bf00      	nop
 8009368:	3714      	adds	r7, #20
 800936a:	46bd      	mov	sp, r7
 800936c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009370:	4770      	bx	lr
 8009372:	bf00      	nop
 8009374:	20004084 	.word	0x20004084
 8009378:	2000408c 	.word	0x2000408c

0800937c <memset>:
 800937c:	4402      	add	r2, r0
 800937e:	4603      	mov	r3, r0
 8009380:	4293      	cmp	r3, r2
 8009382:	d100      	bne.n	8009386 <memset+0xa>
 8009384:	4770      	bx	lr
 8009386:	f803 1b01 	strb.w	r1, [r3], #1
 800938a:	e7f9      	b.n	8009380 <memset+0x4>

0800938c <__libc_init_array>:
 800938c:	b570      	push	{r4, r5, r6, lr}
 800938e:	4d0d      	ldr	r5, [pc, #52]	@ (80093c4 <__libc_init_array+0x38>)
 8009390:	4c0d      	ldr	r4, [pc, #52]	@ (80093c8 <__libc_init_array+0x3c>)
 8009392:	1b64      	subs	r4, r4, r5
 8009394:	10a4      	asrs	r4, r4, #2
 8009396:	2600      	movs	r6, #0
 8009398:	42a6      	cmp	r6, r4
 800939a:	d109      	bne.n	80093b0 <__libc_init_array+0x24>
 800939c:	4d0b      	ldr	r5, [pc, #44]	@ (80093cc <__libc_init_array+0x40>)
 800939e:	4c0c      	ldr	r4, [pc, #48]	@ (80093d0 <__libc_init_array+0x44>)
 80093a0:	f000 f826 	bl	80093f0 <_init>
 80093a4:	1b64      	subs	r4, r4, r5
 80093a6:	10a4      	asrs	r4, r4, #2
 80093a8:	2600      	movs	r6, #0
 80093aa:	42a6      	cmp	r6, r4
 80093ac:	d105      	bne.n	80093ba <__libc_init_array+0x2e>
 80093ae:	bd70      	pop	{r4, r5, r6, pc}
 80093b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80093b4:	4798      	blx	r3
 80093b6:	3601      	adds	r6, #1
 80093b8:	e7ee      	b.n	8009398 <__libc_init_array+0xc>
 80093ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80093be:	4798      	blx	r3
 80093c0:	3601      	adds	r6, #1
 80093c2:	e7f2      	b.n	80093aa <__libc_init_array+0x1e>
 80093c4:	080094c0 	.word	0x080094c0
 80093c8:	080094c0 	.word	0x080094c0
 80093cc:	080094c0 	.word	0x080094c0
 80093d0:	080094c4 	.word	0x080094c4

080093d4 <memcpy>:
 80093d4:	440a      	add	r2, r1
 80093d6:	4291      	cmp	r1, r2
 80093d8:	f100 33ff 	add.w	r3, r0, #4294967295
 80093dc:	d100      	bne.n	80093e0 <memcpy+0xc>
 80093de:	4770      	bx	lr
 80093e0:	b510      	push	{r4, lr}
 80093e2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80093e6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80093ea:	4291      	cmp	r1, r2
 80093ec:	d1f9      	bne.n	80093e2 <memcpy+0xe>
 80093ee:	bd10      	pop	{r4, pc}

080093f0 <_init>:
 80093f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80093f2:	bf00      	nop
 80093f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80093f6:	bc08      	pop	{r3}
 80093f8:	469e      	mov	lr, r3
 80093fa:	4770      	bx	lr

080093fc <_fini>:
 80093fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80093fe:	bf00      	nop
 8009400:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009402:	bc08      	pop	{r3}
 8009404:	469e      	mov	lr, r3
 8009406:	4770      	bx	lr
